rules:
- id: java.okhttp.secrets.hardcoded-secret-in-credentials.hardcoded-secret-in-credentials
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - okhttp
    - java
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.okhttp.secrets.hardcoded-secret-in-credentials.hardcoded-secret-in-credentials
    shortlink: https://sg.run/K2qd
    semgrep.dev:
      rule:
        rule_id: GdUWyx
        version_id: e1TKd9
        url: https://semgrep.dev/playground/r/e1TKd9/java.okhttp.secrets.hardcoded-secret-in-credentials.hardcoded-secret-in-credentials
        origin: pro_rules
  languages:
  - java
  pattern-either:
  - patterns:
    - pattern-inside: |
        import okhttp3.Credentials;
        ...
    - pattern: |
        okhttp3.Credentials.basic($USERNAME, "...");
    - pattern-not: |
        okhttp3.Credentials.basic($USERNAME, "");
  - patterns:
    - pattern-inside: |
        import okhttp3.Credentials.*;
        ...
    - pattern: |
        basic($USERNAME, "...");
    - pattern-not: |
        basic($USERNAME, "");
  - patterns:
    - pattern-inside: |
        import okhttp3.*;
        ...
    - pattern: |
        Credentials.basic($USERNAME, "...");
    - pattern-not: |
        Credentials.basic($USERNAME, "");
- id: csharp.dotnet.security.use_ecb_mode.use_ecb_mode
  message: Usage of the insecure ECB mode detected. You should use an authenticated
    encryption mode instead, which is implemented by the classes AesGcm or ChaCha20Poly1305.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.chacha20poly1305?view=net-6.0
    - https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0
    - https://learn.microsoft.com/en-gb/dotnet/api/system.security.cryptography.ciphermode?view=net-6.0
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes
    subcategory:
    - vuln
    technology:
    - .net
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.use_ecb_mode.use_ecb_mode
    shortlink: https://sg.run/wj9n
    semgrep.dev:
      rule:
        rule_id: 0oUqWP
        version_id: BjTjyN
        url: https://semgrep.dev/playground/r/BjTjyN/csharp.dotnet.security.use_ecb_mode.use_ecb_mode
        origin: community
  languages:
  - csharp
  patterns:
  - pattern-either:
    - pattern: ($KEYTYPE $KEY).EncryptEcb(...);
    - pattern: ($KEYTYPE $KEY).DecryptEcb(...);
    - pattern: ($KEYTYPE $KEY).Mode = CipherMode.ECB;
  - metavariable-pattern:
      metavariable: $KEYTYPE
      pattern-either:
      - pattern: SymmetricAlgorithm
      - pattern: Aes
      - pattern: Rijndael
      - pattern: DES
      - pattern: TripleDES
      - pattern: RC2
- id: csharp.dotnet.security.use_weak_rng_for_keygeneration.use_weak_rng_for_keygeneration
  message: You are using an insecure random number generator (RNG) to create a cryptographic
    key. System.Random must never be used for cryptographic purposes. Use System.Security.Cryptography.RandomNumberGenerator
    instead.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    cwe:
    - 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://learn.microsoft.com/en-us/dotnet/api/system.random?view=net-6.0#remarks
    - https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator?view=net-6.0
    - https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.aesgcm?view=net-6.0#constructors
    - https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.symmetricalgorithm.key?view=net-6.0#system-security-cryptography-symmetricalgorithm-key
    subcategory:
    - vuln
    technology:
    - .net
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.use_weak_rng_for_keygeneration.use_weak_rng_for_keygeneration
    shortlink: https://sg.run/xjrA
    semgrep.dev:
      rule:
        rule_id: KxU3Nq
        version_id: WrT04J
        url: https://semgrep.dev/playground/r/WrT04J/csharp.dotnet.security.use_weak_rng_for_keygeneration.use_weak_rng_for_keygeneration
        origin: community
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: (System.Random $RNG).NextBytes($KEY); ...
    - pattern: $KEY
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern: ($KEYTYPE $CIPHER).Key = $SINK;
      - focus-metavariable: $SINK
      - metavariable-pattern:
          metavariable: $KEYTYPE
          pattern-either:
          - pattern: SymmetricAlgorithm
          - pattern: Aes
          - pattern: Rijndael
          - pattern: DES
          - pattern: TripleDES
          - pattern: RC2
    - pattern: new AesGcm(...)
    - pattern: new AesCcm(...)
    - pattern: new ChaCha20Poly1305(...)
- id: python.lang.hardcoded.headers.hardcoded-basic-token.hardcoded-basic-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - python
    - secrets
    - headers
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-basic-token.hardcoded-basic-token
    shortlink: https://sg.run/AW1L
    semgrep.dev:
      rule:
        rule_id: KxUOxw
        version_id: pZTDRv
        url: https://semgrep.dev/playground/r/pZTDRv/python.lang.hardcoded.headers.hardcoded-basic-token.hardcoded-basic-token
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BASIC'
    - metavariable-pattern:
        metavariable: $BASIC
        language: generic
        patterns:
        - pattern: Basic $TOKEN
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          {..., 'Authorization': $SINK, ...}
      - pattern: |
          {..., 'authorization': $SINK, ...}
      - pattern: |
          $OBJ['Authorization'] = $SINK
      - pattern: |
          $OBJ['authorization'] = $SINK
    - focus-metavariable: $SINK
- id: go.net.path-traversal.net-http-path-traversal-taint.net-http-path-traversal-taint
  message: 'The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Go, it is possible to sanitize user input and mitigate path traversal by using
    the built-in `filepath.Clean` function. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - go
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.path-traversal.net-http-path-traversal-taint.net-http-path-traversal-taint
    shortlink: https://sg.run/v3jl
    semgrep.dev:
      rule:
        rule_id: YGU4X7
        version_id: BjTApD
        url: https://semgrep.dev/playground/r/BjTApD/go.net.path-traversal.net-http-path-traversal-taint.net-http-path-traversal-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-either:
      - patterns:
        - pattern: http.FileSystem.$FUNC($F, $INPUT)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open|Dir)$
      - patterns:
        - pattern-inside: |
            $DIR := http.Dir(...)
            ...
        - pattern: $DIR.Open($INPUT)
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "os"
        ...
    - pattern: os.$FUNC($INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.$FUNC($FS, $INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Glob|ReadFile|WalkDir)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "archive/zip"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $W := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $W, $ERR := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - pattern: '($W : *zip.Writer).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Create)$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $R := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $R, $ERR := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - pattern: '($R : *zip.Reader).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open)$
        - focus-metavariable: $INPUT
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "path"
          ...
      - pattern-inside: |
          import "path/filepath"
          ...
    - patterns:
      - pattern-either:
        - pattern: $P.Join("/", ..., $INPUT, ...)
        - patterns:
          - pattern: $P.$SANFUNC($INPUT)
          - metavariable-regex:
              metavariable: $SANFUNC
              regex: ^(Abs|Base|Clean|Dir|Ext)$
    - metavariable-regex:
        metavariable: $P
        regex: ^(path|filepath)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.ValidPath(...)
- id: python.urllib3.python-urllib3-hardcoded-secret.python-urllib3-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - urllib3
    - headers
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.urllib3.python-urllib3-hardcoded-secret.python-urllib3-hardcoded-secret
    shortlink: https://sg.run/5n0j
    semgrep.dev:
      rule:
        rule_id: BYUGR8
        version_id: zyT3gg
        url: https://semgrep.dev/playground/r/zyT3gg/python.urllib3.python-urllib3-hardcoded-secret.python-urllib3-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: urllib3.util.make_headers(...,basic_auth="...",...)
    - pattern: urllib3.make_headers(...,basic_auth="...",...)
    - pattern: requests.packages.urllib3.make_headers(...,basic_auth="...",...)
    - pattern: requests.packages.urllib3.util.make_headers(...,basic_auth="...",...)
    - pattern: urllib3.util.make_headers(...,proxy_basic_auth="...",...)
    - pattern: urllib3.make_headers(...,proxy_basic_auth="...",...)
    - pattern: requests.packages.urllib3.make_headers(...,proxy_basic_auth="...",...)
    - pattern: requests.packages.urllib3.util.make_headers(...,proxy_basic_auth="...",...)
- id: python.requests.python-requests-oauth-hardcoded-secret.python-requests-oauth-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - nosql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.requests.python-requests-oauth-hardcoded-secret.python-requests-oauth-hardcoded-secret
    shortlink: https://sg.run/Jp4P
    semgrep.dev:
      rule:
        rule_id: AbUnBp
        version_id: LjTe6B
        url: https://semgrep.dev/playground/r/LjTe6B/python.requests.python-requests-oauth-hardcoded-secret.python-requests-oauth-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: requests_oauthlib.OAuth1($KEY, "...", ...)
    - pattern: requests_oauthlib.OAuth1($KEY, $SECRET, $TOKEN, "...", ...)
    - patterns:
      - pattern: $OAUTH.fetch_token(..., client_secret="...", ...)
      - pattern-inside: |
          $OAUTH = requests_oauthlib.$CLASS(...)
          ...
- id: go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace
  message: Detected a potentially dynamic ClientTrace. This occurred because semgrep
    could not find a static definition for '$TRACE'. Dynamic ClientTraces are dangerous
    because they deserialize function code to run when certain Request events occur,
    which could lead to code being run without your knowledge. Ensure that your ClientTrace
    is statically defined.
  metadata:
    cwe:
    - 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://github.com/returntocorp/semgrep-rules/issues/518
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace
    shortlink: https://sg.run/kXEK
    semgrep.dev:
      rule:
        rule_id: L1Uyjp
        version_id: YDTz9A
        url: https://semgrep.dev/playground/r/YDTz9A/go.lang.security.audit.net.dynamic-httptrace-clienttrace.dynamic-httptrace-clienttrace
        origin: community
  patterns:
  - pattern-not-inside: |
      package $PACKAGE
      ...
      &httptrace.ClientTrace { ... }
      ...
  - pattern: httptrace.WithClientTrace($ANY, $TRACE)
  severity: WARNING
  languages:
  - go
- id: go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf
  patterns:
  - pattern-inside: |
      func $FUNC(..., $W http.ResponseWriter, ...) {
        ...
        var $TEMPLATE = "..."
        ...
        $W.Write([]byte(fmt.$PRINTF($TEMPLATE, ...)), ...)
        ...
      }
  - pattern-either:
    - pattern: |
        $PARAMS = r.URL.Query()
        ...
        $DATA, $ERR := $PARAMS[...]
        ...
        $INTERM = $ANYTHING(..., $DATA, ...)
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $PARAMS = r.URL.Query()
        ...
        $DATA, $ERR := $PARAMS[...]
        ...
        $INTERM = $DATA[...]
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $DATA, $ERR := r.URL.Query()[...]
        ...
        $INTERM = $DATA[...]
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $DATA, $ERR := r.URL.Query()[...]
        ...
        $INTERM = $ANYTHING(..., $DATA, ...)
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $INTERM, ...)))
    - pattern: |
        $PARAMS = r.URL.Query()
        ...
        $DATA, $ERR := $PARAMS[...]
        ...
        $W.Write([]byte(fmt.$PRINTF(..., $DATA, ...)))
  message: Found data going from url query parameters into formatted data written
    to ResponseWriter. This could be XSS and should not be done. If you must do this,
    ensure your data is sanitized or escaped.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - go
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf
    shortlink: https://sg.run/Zvon
    semgrep.dev:
      rule:
        rule_id: JDUyXB
        version_id: WrTk47
        url: https://semgrep.dev/playground/r/WrTk47/go.lang.security.audit.net.wip-xss-using-responsewriter-and-printf.wip-xss-using-responsewriter-and-printf
        origin: community
  severity: WARNING
  languages:
  - go
- id: java.servlets.security.tainted-ssrf-deepsemgrep.tainted-ssrf-deepsemgrep
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fssrf~2Fgeneric
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-ssrf-deepsemgrep.tainted-ssrf-deepsemgrep
    shortlink: https://sg.run/L4zY
    semgrep.dev:
      rule:
        rule_id: 3qUxyO
        version_id: 3ZTw71
        url: https://semgrep.dev/playground/r/3ZTw71/java.servlets.security.tainted-ssrf-deepsemgrep.tainted-ssrf-deepsemgrep
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: a()
  - pattern: b()
- id: python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse
  message: Detected data rendered directly to the end user via 'HttpResponse' or a
    similar object. This bypasses Django's built-in cross-site scripting (XSS) defenses
    and could result in an XSS vulnerability. Use Django's template engine to safely
    render HTML.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/intro/tutorial03/#a-shortcut-render
    - https://docs.djangoproject.com/en/3.1/topics/http/shortcuts/#render
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse
    shortlink: https://sg.run/EknN
    semgrep.dev:
      rule:
        rule_id: PeUZgE
        version_id: jQT9b4
        url: https://semgrep.dev/playground/r/jQT9b4/python.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-not: django.http.$ANY("...", ...)
  - pattern-not: django.http.$ANY()
  - pattern-not: django.http.$ANY(..., content=None, ...)
  - pattern-not: django.http.$ANY(status=...)
  - pattern-not: django.http.HttpResponseNotAllowed([...])
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: django.http.HttpResponse(...)
        - pattern: django.http.HttpResponseBadRequest(...)
        - pattern: django.http.HttpResponseNotFound(...)
        - pattern: django.http.HttpResponseForbidden(...)
        - pattern: django.http.HttpResponseNotAllowed(...)
        - pattern: django.http.HttpResponseGone(...)
        - pattern: django.http.HttpResponseServerError(...)
      - pattern-not: django.http.$ANY(...,content_type=$TYPE,...)
    - patterns:
      - pattern-either:
        - pattern: django.http.HttpResponse(...,content_type=$TYPE,...)
        - pattern: django.http.HttpResponseBadRequest(...,content_type=$TYPE,...)
        - pattern: django.http.HttpResponseNotFound(...,content_type=$TYPE,...)
        - pattern: django.http.HttpResponseForbidden(...,content_type=$TYPE,...)
        - pattern: django.http.HttpResponseNotAllowed(...,content_type=$TYPE,...)
        - pattern: django.http.HttpResponseGone(...,content_type=$TYPE,...)
        - pattern: django.http.HttpResponseServerError(...,content_type=$TYPE,...)
      - metavariable-regex:
          metavariable: $TYPE
          regex: .*[tT][eE][xX][tT]/[hH][tT][mM][lL].*
- id: javascript.mongodb.node-mongodb-hardcoded-secret.node-mongodb-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mongodb
    - nosql
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.mongodb.node-mongodb-hardcoded-secret.node-mongodb-hardcoded-secret
    shortlink: https://sg.run/RADg
    semgrep.dev:
      rule:
        rule_id: 0oU6nw
        version_id: O9T7rK
        url: https://semgrep.dev/playground/r/O9T7rK/javascript.mongodb.node-mongodb-hardcoded-secret.node-mongodb-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          const { ..., $X,... } = require('mongodb')
          ...
      - pattern-inside: |
          var { ..., $X,... } = require('mongodb')
          ...
      - pattern-inside: |
          let { ..., $X,... } = require('mongodb')
          ...
      - pattern-inside: |
          $X = require('mongodb')
          ...
      - pattern-inside: |
          $X = require('mongodb').MongoClient
          ...
      - pattern-inside: |
          import $X from 'mongodb'
          ...
      - pattern-inside: |
          import * as $X from 'mongodb'
          ...
      - pattern-inside: |
          import {...,$X,...} from 'mongodb'
          ...
    - pattern-either:
      - pattern: new $X($FOO)
      - pattern: $X.connect($FOO,...)
    - focus-metavariable: $FOO
- id: javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
  message: this rule has been deprecated.
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
    shortlink: https://sg.run/Kl6L
    semgrep.dev:
      rule:
        rule_id: DbUpyk
        version_id: 0bT6X7
        url: https://semgrep.dev/playground/r/0bT6X7/javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
    shortlink: https://sg.run/PJXv
    semgrep.dev:
      rule:
        rule_id: 0oU53g
        version_id: qkTKyo
        url: https://semgrep.dev/playground/r/qkTKyo/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern-inside: |
      $JWT = require("jsonwebtoken");
      ...
  - pattern: $JWT.verify($P, $X, {algorithms:[...,'none',...]},...)
- id: javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    - javascript
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
    shortlink: https://sg.run/4xN9
    semgrep.dev:
      rule:
        rule_id: WAUon7
        version_id: qkT8Xy
        url: https://semgrep.dev/playground/r/qkT8Xy/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: "$VALUE = '$Y' \n...\n"
        - pattern: $VALUE
      - pattern-inside: $JWT.sign($VALUE, '$Y',...)
      - pattern-inside: $JWT.verify($VALUE, '$Y',...)
      - patterns:
        - pattern-inside: |
            $SECRET = "$Y"
            ...
            class $FUNC {
              ...
            }
        - pattern: $SECRET
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $JWT = require("jsonwebtoken")
          ...
      - pattern-inside: |
          import $JWT from "jsonwebtoken"
          ...
      - pattern-inside: |
          import * as $JWT from "jsonwebtoken"
          ...
      - pattern-inside: |
          import {...,$JWT,...} from "jsonwebtoken"
          ...
    - pattern-either:
      - pattern-inside: |
          $JWT.sign($DATA,$VALUE,...);
      - pattern-inside: |
          $JWT.verify($DATA,$VALUE,...);
    - focus-metavariable: $VALUE
- id: trailofbits.go.missing-unlock-before-return.missing-unlock-before-return
  message: Missing mutex unlock before returning from a function.  This could result
    in panics resulting from double lock operations
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Missing `mutex` unlock before returning from a function
    references:
    - https://pkg.go.dev/sync#Mutex
    - https://blog.trailofbits.com/2020/06/09/how-to-check-if-a-mutex-is-locked-in-go/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.missing-unlock-before-return.missing-unlock-before-return
    shortlink: https://sg.run/18Bk
    semgrep.dev:
      rule:
        rule_id: L1U5Gz
        version_id: qkTdPA
        url: https://semgrep.dev/playground/r/qkTdPA/trailofbits.go.missing-unlock-before-return.missing-unlock-before-return
        origin: community
  patterns:
  - pattern-either:
    - pattern: panic(...)
    - pattern: return ...
  - pattern-inside: |
      $T.Lock()
      ...
  - pattern-not-inside: |
      $T.Unlock()
      ...
  - pattern-not-inside: |
      defer $T.Unlock()
      ...
  - pattern-not-inside: "$FOO(..., ..., func(...) { \n    ... \n})\n"
- id: trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
  message: Missing `RUnlock` on an `RWMutex` lock before returning from a function
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Missing `RUnlock` on an `RWMutex` lock before returning from a function
    references:
    - https://pkg.go.dev/sync#RWMutex
    - https://blog.trailofbits.com/2020/06/09/how-to-check-if-a-mutex-is-locked-in-go/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
    shortlink: https://sg.run/9r40
    semgrep.dev:
      rule:
        rule_id: 8GUzNK
        version_id: K3TD6R
        url: https://semgrep.dev/playground/r/K3TD6R/trailofbits.go.missing-runlock-on-rwmutex.missing-runlock-on-rwmutex
        origin: community
  patterns:
  - pattern-either:
    - pattern: panic(...)
    - pattern: return ...
  - pattern-inside: |
      $T.RLock()
      ...
  - pattern-not-inside: |
      $T.RUnlock()
      ...
  - pattern-not-inside: |
      defer $T.RUnlock()
      ...
  - pattern-not-inside: "$FOO(..., ..., func(...) { \n    ... \n})\n"
- id: javascript.browser.open-redirect.open-redirect
  message: The application builds a URL using user-controlled input which can lead
    to an open redirect vulnerability. An attacker can manipulate the URL and redirect
    users to an arbitrary domain. Open redirect vulnerabilities can lead to issues
    such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities
    such as phishing to capture users' credentials. To prevent this vulnerability
    perform strict input validation of the domain against an allowlist of approved
    domains. Notify a user in your application that they are leaving the website.
    Display a domain where they are redirected to the user. A user can then either
    accept or deny the redirect to an untrusted site.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    technology:
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.browser.open-redirect.open-redirect
    shortlink: https://sg.run/Jonw
    semgrep.dev:
      rule:
        rule_id: YGUx1Y
        version_id: 8KTZYN
        url: https://semgrep.dev/playground/r/8KTZYN/javascript.browser.open-redirect.open-redirect
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern: $THIS. ... .location.hash.slice(1)
      - pattern: location.hash.slice(1)
      - pattern: |
          $THIS. ... .location.hash.split("#")[1]
      - pattern: |
          location.hash.split("#")[1]
      - pattern: |
          $THIS. ... .location.search.split("=")[1]
      - pattern: |
          location.search.split("=")[1]
      - pattern: |
          $THIS. ... .location.href.split("=")[1]
      - pattern: |
          location.href.split("=")[1]
  - label: CONCAT
    requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: |
          `...${$X}...`
      - pattern: |
          $F + $X
    - pattern-not: |
        `${$X}...`
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        `http://${$X}...`
    - pattern-not: |
        `https://${$X}...`
    - pattern-not: |
        `//${$X}...`
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
  pattern-sinks:
  - requires: TAINTED and not CONCAT
    patterns:
    - pattern-either:
      - pattern: location.href = $SINK
      - pattern: $THIS. ... .location.href = $SINK
      - pattern: location.replace($SINK)
      - pattern: $THIS. ... .location.replace($SINK)
      - pattern: location = $SINK
      - pattern: $WINDOW. ... .location = $SINK
      - pattern: window.open($SINK)
      - pattern: $THIS. ... .window.open($SINK)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
- id: javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep
  message: The application builds a URL using user-controlled input which can lead
    to an open redirect vulnerability. An attacker can manipulate the URL and redirect
    users to an arbitrary domain. Open redirect vulnerabilities can lead to issues
    such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities
    such as phishing to capture users' credentials. To prevent this vulnerability
    perform strict input validation of the domain against an allowlist of approved
    domains. Notify a user in your application that they are leaving the website.
    Display a domain where they are redirected to the user. A user can then either
    accept or deny the redirect to an untrusted site.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    technology:
    - express
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep
    shortlink: https://sg.run/BDbW
    semgrep.dev:
      rule:
        rule_id: 2ZUXkp
        version_id: gETDZr
        url: https://semgrep.dev/playground/r/gETDZr/javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{..., $REQ,... }: Request,...) => {...}
      - pattern-inside: |
          (...,{..., $REQ,... }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  - label: CONCAT
    requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: |
          `...${$X}...`
      - pattern: |
          $F + $X
    - pattern-not: |
        `${$X}...`
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        `http://${$X}...`
    - pattern-not: |
        `https://${$X}...`
    - pattern-not: |
        `//${$X}...`
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
  pattern-sinks:
  - requires: TAINTED and not CONCAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: $RES.redirect($QUERY,...)
        - focus-metavariable: $QUERY
      - patterns:
        - pattern-either:
          - pattern-inside: |
              (...,{..., redirect,... }: Response,...) => {...}
          - pattern-inside: |
              (...,{..., redirect,... }: $EXPRESS.Response,...) => {...}
        - pattern-inside: redirect($QUERY,...)
  pattern-sanitizers:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern-inside: |
          if (!$F.$REGEX($URL)) {
          ...
            return ...
          }
          ...
      - pattern-inside: |
          if ($F.$REGEX($URL)) {
          ...
          }
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^(has|test)$
    - focus-metavariable: $URL
- id: python.lang.deserialization.tainted-pickle.tainted-pickle
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are
    considered insecure.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - lang.security.deserialization.pickle.avoid-pickle
    - lang.security.deserialization.pickle.avoid-cPickle
    technology:
    - python
    - http.server
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-pickle.tainted-pickle
    shortlink: https://sg.run/03Gk
    semgrep.dev:
      rule:
        rule_id: 0oU0wN
        version_id: LjT3qk
        url: https://semgrep.dev/playground/r/LjT3qk/python.lang.deserialization.tainted-pickle.tainted-pickle
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - pattern: $PACKAGE.Unpickler($SINK, ...)
    - metavariable-regex:
        metavariable: $PACKAGE
        regex: ^(pickle|_pickle|cPickle)$
    - focus-metavariable: $SINK
- id: java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://blog.sonarsource.com/secure-xml-processor
    category: security
    technology:
    - java
    - xml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true
    shortlink: https://sg.run/JgPy
    semgrep.dev:
      rule:
        rule_id: 9AUJ6r
        version_id: YDT7p9
        url: https://semgrep.dev/playground/r/YDT7p9/java.lang.security.audit.xxe.documentbuilderfactory-external-general-entities-true.documentbuilderfactory-external-general-entities-true
        origin: community
  message: External entities are allowed for $DBFACTORY. This is vulnerable to XML
    external entity attacks. Disable this by setting the feature "http://xml.org/sax/features/external-general-entities"
    to false.
  pattern: $DBFACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
    true);
  fix: $DBFACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
    false);
  languages:
  - java
- id: java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://blog.sonarsource.com/secure-xml-processor
    category: security
    technology:
    - java
    - xml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true
    shortlink: https://sg.run/5Lv0
    semgrep.dev:
      rule:
        rule_id: yyUNeo
        version_id: JdTjNr
        url: https://semgrep.dev/playground/r/JdTjNr/java.lang.security.audit.xxe.documentbuilderfactory-external-parameter-entities-true.documentbuilderfactory-external-parameter-entities-true
        origin: community
  message: External entities are allowed for $DBFACTORY. This is vulnerable to XML
    external entity attacks. Disable this by setting the feature "http://xml.org/sax/features/external-parameter-entities"
    to false.
  pattern: $DBFACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
    true);
  fix: $DBFACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false);
  languages:
  - java
- id: java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://blog.sonarsource.com/secure-xml-processor
    - https://xerces.apache.org/xerces2-j/features.html
    category: security
    technology:
    - java
    - xml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing
    shortlink: https://sg.run/Gj32
    semgrep.dev:
      rule:
        rule_id: j2Udpk
        version_id: 5PTzdG
        url: https://semgrep.dev/playground/r/5PTzdG/java.lang.security.audit.xxe.saxparserfactory-disallow-doctype-decl-missing.saxparserfactory-disallow-doctype-decl-missing
        origin: community
  message: DOCTYPE declarations are enabled for this SAXParserFactory. This is vulnerable
    to XML external entity attacks. Disable this by setting the feature "http://apache.org/xml/features/disallow-doctype-decl"
    to true. Alternatively, allow DOCTYPE declarations and only prohibit external
    entities declarations. This can be done by setting the features "http://xml.org/sax/features/external-general-entities"
    and "http://xml.org/sax/features/external-parameter-entities" to false.
  mode: taint
  pattern-sources:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: |
          $FACTORY = SAXParserFactory.newInstance();
      - patterns:
        - pattern: $FACTORY
        - pattern-inside: |
            class $C {
              ...
              $V $FACTORY = SAXParserFactory.newInstance();
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = SAXParserFactory.newInstance();
              static {
                ...
                $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = SAXParserFactory.newInstance();
              static {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = SAXParserFactory.newInstance();
              static {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
              }
              ...
            }
  pattern-sinks:
  - patterns:
    - pattern: $FACTORY.newSAXParser();
  pattern-sanitizers:
  - by-side-effect: true
    pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        - pattern: |
            $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
            ...
            $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        - pattern: |
            $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            ...
            $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
      - focus-metavariable: $FACTORY
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
                true);
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",false);
                ...
              }
              ...
            }
      - pattern: $M($X)
      - focus-metavariable: $X
  fix: |
    $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    $FACTORY.newSAXParser();
  languages:
  - java
- id: python.flask.flask-hardcoded-database-password-uri.flask-hardcoded-database-password-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - flask
    - sqlalchemy
    - flask_sqlalchemy
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.flask-hardcoded-database-password-uri.flask-hardcoded-database-password-uri
    shortlink: https://sg.run/0eGk
    semgrep.dev:
      rule:
        rule_id: 3qUe3q
        version_id: e1TK79
        url: https://semgrep.dev/playground/r/e1TK79/python.flask.flask-hardcoded-database-password-uri.flask-hardcoded-database-password-uri
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$STRING"
    - metavariable-regex:
        metavariable: $STRING
        regex: ([A-Za-z0-9_\-\+]*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
  pattern-sinks:
  - pattern-either:
    - pattern: |
        $APP.config['SQLALCHEMY_DATABASE_URI']
    - pattern: |
        SQLALCHEMY_DATABASE_URI = ...
    - pattern: |
        flask_sqlalchemy.config.SQLALCHEMY_DATABASE_URI = ...
    - pattern: |
        $APP.config['SQLALCHEMY_BINDS']
    - pattern: |
        SQLALCHEMY_BINDS = ...
    - pattern: |
        flask_sqlalchemy.config.SQLALCHEMY_BINDS = ...
- id: python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response
  message: Detected data rendered directly to the end user via 'Response'. This bypasses
    Pyramid's built-in cross-site scripting (XSS) defenses and could result in an
    XSS vulnerability. Use Pyramid's template engines to safely render HTML.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - pyramid
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response
    shortlink: https://sg.run/DX8G
    semgrep.dev:
      rule:
        rule_id: gxUeA8
        version_id: 9lTEQy
        url: https://semgrep.dev/playground/r/9lTEQy/python.pyramid.security.direct-use-of-response.pyramid-direct-use-of-response
        origin: community
  languages:
  - python
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern: $REQ.$ANYTHING
    - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          pyramid.request.Response.text($SINK)
      - pattern: |
          pyramid.request.Response($SINK)
      - pattern: |
          $REQ.response.body = $SINK
      - pattern: |
          $REQ.response.text = $SINK
      - pattern: |
          $REQ.response.ubody = $SINK
      - pattern: |
          $REQ.response.unicode_body = $SINK
    - pattern: $SINK
- id: python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection
  message: Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause
    sql injections if the developer inputs raw SQL into the before-mentioned clauses.
    This pattern captures relevant cases in which the developer inputs raw SQL into
    the distinct, having, group_by, order_by or filter clauses and injects user-input
    into the raw SQL with any function besides "bindparams". Use bindParams to securely
    bind user-input to SQL statements.
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/tutorial/data_select.html#tutorial-selecting-data
    technology:
    - pyramid
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection
    shortlink: https://sg.run/W7eE
    semgrep.dev:
      rule:
        rule_id: QrUZ7l
        version_id: yeTQk2
        url: https://semgrep.dev/playground/r/yeTQk2/python.pyramid.security.sqlalchemy-sql-injection.pyramid-sqlalchemy-sql-injection
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        from pyramid.view import view_config
        ...
        @view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern: $REQ.$ANYTHING
    - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $QUERY = $REQ.dbsession.query(...)
        ...
    - pattern-either:
      - pattern: |
          $QUERY.$SQLFUNC("...".$FORMATFUNC(..., $SINK, ...))
      - pattern: |
          $QUERY.join(...).$SQLFUNC("...".$FORMATFUNC(..., $SINK, ...))
    - pattern: $SINK
    - metavariable-regex:
        metavariable: $SQLFUNC
        regex: (group_by|order_by|distinct|having|filter)
    - metavariable-regex:
        metavariable: $FORMATFUNC
        regex: (?!bindparams)
  fix-regex:
    regex: format
    replacement: bindparams
- id: trailofbits.go.racy-write-to-map.racy-write-to-map
  message: Writing `$MAP` from multiple goroutines is not concurrency safe
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization
      (''Race Condition'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Concurrent writes to the same map in multiple goroutines
    references:
    - https://go.dev/blog/maps#concurrency
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.racy-write-to-map.racy-write-to-map
    shortlink: https://sg.run/1Gnw
    semgrep.dev:
      rule:
        rule_id: AbUGWD
        version_id: 6xTlww
        url: https://semgrep.dev/playground/r/6xTlww/trailofbits.go.racy-write-to-map.racy-write-to-map
        origin: community
  patterns:
  - pattern: |
      $MAP[$KEY] = $VALUE
  - pattern-inside: |
      $MAP = make(map[$KTYPE]$VTYPE)
      ...
      for ... {
        ...
        go func(...) {
          ...
          $MAP[$KEY] = $VALUE
          ...
        }(...)
        ...
      }
  - pattern-not-inside: |
      $MUTEX.Lock()
      ...
      $MUTEX.Unlock()
- id: trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast
  message: Downcasting or changing sign of an integer with `$CAST_METHOD` method
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-681: Incorrect Conversion between Numeric Types'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: LOW
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Integer underflows
    references:
    - https://github.com/golang/go/issues/30209
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast
    shortlink: https://sg.run/65WB
    semgrep.dev:
      rule:
        rule_id: 4bU2AZ
        version_id: zyTw0O
        url: https://semgrep.dev/playground/r/zyTw0O/trailofbits.go.string-to-int-signedness-cast.string-to-int-signedness-cast
        origin: community
  pattern-either:
  - patterns:
    - metavariable-pattern:
        metavariable: $CAST_METHOD
        pattern-either:
        - pattern: uint8
        - pattern: uint16
        - pattern: uint32
        - pattern: int8
        - pattern: int16
        - pattern: int32
    - pattern-either:
      - pattern: |
          $X, ... = strconv.Atoi(...)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseInt(..., ..., 64)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseUint(..., ..., 64)
          ...
          $CAST_METHOD($X)
  - pattern: |
      $X, ... = strconv.Atoi(...)
      ...
      uint64($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 64)
      ...
      uint64($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 64)
      ...
      int64($X)
  - patterns:
    - metavariable-pattern:
        metavariable: $CAST_METHOD
        pattern-either:
        - pattern: uint8
        - pattern: uint16
        - pattern: int8
        - pattern: int16
    - pattern-either:
      - pattern: |
          $X, ... = strconv.ParseInt(..., ..., 32)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseUint(..., ..., 32)
          ...
          $CAST_METHOD($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 32)
      ...
      uint32($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 32)
      ...
      int32($X)
  - patterns:
    - metavariable-pattern:
        metavariable: $CAST_METHOD
        pattern-either:
        - pattern: uint8
        - pattern: int8
    - pattern-either:
      - pattern: |
          $X, ... = strconv.ParseInt(..., ..., 16)
          ...
          $CAST_METHOD($X)
      - pattern: |
          $X, ... = strconv.ParseUint(..., ..., 16)
          ...
          $CAST_METHOD($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 16)
      ...
      uint16($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 16)
      ...
      int16($X)
  - pattern: |
      $X, ... = strconv.ParseInt(..., ..., 8)
      ...
      uint8($X)
  - pattern: |
      $X, ... = strconv.ParseUint(..., ..., 8)
      ...
      int8($X)
- id: trailofbits.go.sync-mutex-value-copied.sync-mutex-value-copied
  message: A `sync.Mutex` is copied in function `$FUNC` given that `$T` is value receiver.  As
    a result, the struct `$T` may not be locked as intended
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-688: Function Call With Incorrect Variable or Reference as Argument'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: HIGH
    impact: LOW
    technology:
    - --no-technology--
    description: Copying of `sync.Mutex` via value receivers
    references:
    - https://go101.org/article/concurrent-common-mistakes.html
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.sync-mutex-value-copied.sync-mutex-value-copied
    shortlink: https://sg.run/owlR
    semgrep.dev:
      rule:
        rule_id: PeUBW1
        version_id: pZTd4o
        url: https://semgrep.dev/playground/r/pZTd4o/trailofbits.go.sync-mutex-value-copied.sync-mutex-value-copied
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        func ($T $TYPE) $FUNC(...){
          ...
          $T.Lock()
          ...
        }
    - pattern: |
        func ($T $TYPE) $FUNC(...){
          ...
          $T.RLock()
          ...
        }
  - pattern-not: |
      func ($T2 *$TYPE2) $FUNC(...){
        ...
      }
- id: trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
  message: Possible path traversal through `tarfile.open($PATH).extractall()` if the
    source tar is controlled by an attacker
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Potential path traversal in call to `extractall` for a `tarfile`
    references:
    - https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
    shortlink: https://sg.run/2RLD
    semgrep.dev:
      rule:
        rule_id: GdUZxq
        version_id: 7ZTlle
        url: https://semgrep.dev/playground/r/7ZTlle/trailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        with tarfile.open(...) as $TAR:
            ...
            $TAR.extractall(...)
    - pattern: |
        tarfile.open(...).extractall(...)
    - pattern: |
        $TAR = tarfile.open(...)
        ...
        $TAR.extractall(...)
  - pattern-not: |
      with tarfile.open(...) as $TAR:
          ...
          $TAR.extractall(..., members=$MEMBERS, ...)
  - pattern-not: |
      tarfile.open(...).extractall(..., members=$MEMBERS, ...)
  - pattern-not: |
      $TAR = tarfile.open(...)
      ...
      $TAR.extractall(..., members=$MEMBERS, ...)
- id: yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection
  message: Using input or workflow parameters in here-scripts can lead to command
    injection or code injection. Convert the parameters to env variables instead.
  languages:
  - yaml
  metadata:
    category: security
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - "A03:2021 \u2013 Injection"
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    subcategory:
    - vuln
    references:
    - https://github.com/argoproj/argo-workflows/issues/5061
    - https://github.com/argoproj/argo-workflows/issues/5114#issue-808865370
    technology:
    - ci
    - argo
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection
    shortlink: https://sg.run/yqeZ
    semgrep.dev:
      rule:
        rule_id: 10U0zW
        version_id: WrT274
        url: https://semgrep.dev/playground/r/WrT274/yaml.argo.security.argo-workflow-parameter-command-injection.argo-workflow-parameter-command-injection
        origin: community
  severity: ERROR
  patterns:
  - pattern-inside: |
      apiVersion: $VERSION
      ...
  - metavariable-regex:
      metavariable: $VERSION
      regex: (argoproj.io.*)
  - pattern-either:
    - patterns:
      - pattern-inside: "command:\n  ...\n  - python\n  ...\n...\nsource: \n  $SCRIPT\n"
      - focus-metavariable: $SCRIPT
      - metavariable-pattern:
          metavariable: $SCRIPT
          language: python
          patterns:
          - pattern: |
              $FUNC(..., $PARAM, ...)
          - metavariable-pattern:
              metavariable: $PARAM
              pattern-either:
              - pattern-regex: (.*{{.*inputs.parameters.*}}.*)
              - pattern-regex: (.*{{.*workflow.parameters.*}}.*)
    - patterns:
      - pattern-inside: "command:\n  ...\n  - $LANG\n  ...\n...\nsource: \n  $SCRIPT\n"
      - metavariable-regex:
          metavariable: $LANG
          regex: (bash|sh)
      - focus-metavariable: $SCRIPT
      - metavariable-pattern:
          metavariable: $SCRIPT
          language: bash
          patterns:
          - pattern: |
              $CMD ... $PARAM  ...
          - metavariable-pattern:
              metavariable: $PARAM
              pattern-either:
              - pattern-regex: (.*{{.*inputs.parameters.*}}.*)
              - pattern-regex: (.*{{.*workflow.parameters.*}}.*)
    - patterns:
      - pattern-inside: |
          container:
            ...
            command: $LANG
            ...
            args: $PARAM
      - metavariable-regex:
          metavariable: $LANG
          regex: .*(sh|bash|ksh|csh|tcsh|zsh).*
      - metavariable-pattern:
          metavariable: $PARAM
          pattern-either:
          - pattern-regex: (.*{{.*inputs.parameters.*}}.*)
          - pattern-regex: (.*{{.*workflow.parameters.*}}.*)
      - focus-metavariable: $PARAM
- id: java.lang.security.net.http.httprequest-hardcoded-secret-in-request-header.httprequest-hardcoded-secret-in-request-header
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.net.http.httprequest-hardcoded-secret-in-request-header.httprequest-hardcoded-secret-in-request-header
    shortlink: https://sg.run/rRxj
    semgrep.dev:
      rule:
        rule_id: 9AUEeY
        version_id: jQTjLB
        url: https://semgrep.dev/playground/r/jQTjLB/java.lang.security.net.http.httprequest-hardcoded-secret-in-request-header.httprequest-hardcoded-secret-in-request-header
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$WHOLETOK"
    - metavariable-pattern:
        language: generic
        metavariable: $WHOLETOK
        patterns:
        - pattern-either:
          - patterns:
            - pattern: |
                Basic $T
            - metavariable-regex:
                metavariable: $T
                constant-propagation: true
                regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
          - patterns:
            - pattern: |
                Bearer $T
            - metavariable-regex:
                metavariable: $T
                constant-propagation: true
                regex: ^(eyJhbGciOi.*)
          - pattern: |
              Token $T
        - metavariable-analysis:
            metavariable: $T
            analyzer: entropy
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          java.net.http.HttpRequest. ... .$HEADERFUNC(..., "Authorization", $AUTH, ...)
      - pattern: |
          (java.net.http.HttpRequest $REQ). ... .$HEADERFUNC(..., "Authorization", $AUTH, ...)
    - metavariable-regex:
        metavariable: $HEADERFUNC
        regex: ^(header|headers)$
    - focus-metavariable: $AUTH
- id: java.lang.security.net.http.passwordauthentication-hardcoded-password.passwordauthentication-hardcoded-password
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - okhttp
    - java
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.net.http.passwordauthentication-hardcoded-password.passwordauthentication-hardcoded-password
    shortlink: https://sg.run/bnZq
    semgrep.dev:
      rule:
        rule_id: yyUQ3W
        version_id: 1QTN0E
        url: https://semgrep.dev/playground/r/1QTN0E/java.lang.security.net.http.passwordauthentication-hardcoded-password.passwordauthentication-hardcoded-password
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-inside: |
      import java.net.PasswordAuthentication;
      ...
  - pattern-either:
    - pattern: |
        new java.net.PasswordAuthentication($USERNAME, (char[] $PASS));
    - pattern: |
        new java.net.PasswordAuthentication($USERNAME, (String $PASS).toCharArray());
  - pattern-not: |
      new java.net.PasswordAuthentication($USERNAME, "");
  - focus-metavariable: $PASS
- id: java.lang.security.net.http.urlconnection-hardcoded-secret-in-request-header.urlconnection-hardcoded-secret-in-request-header
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.net.http.urlconnection-hardcoded-secret-in-request-header.urlconnection-hardcoded-secret-in-request-header
    shortlink: https://sg.run/N3dn
    semgrep.dev:
      rule:
        rule_id: r6Ub0p
        version_id: 9lT7Eq
        url: https://semgrep.dev/playground/r/9lT7Eq/java.lang.security.net.http.urlconnection-hardcoded-secret-in-request-header.urlconnection-hardcoded-secret-in-request-header
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$WHOLETOK"
    - metavariable-pattern:
        language: generic
        metavariable: $WHOLETOK
        patterns:
        - pattern-either:
          - patterns:
            - pattern: |
                Basic $T
            - metavariable-regex:
                metavariable: $T
                constant-propagation: true
                regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
          - patterns:
            - pattern: |
                Bearer $T
            - metavariable-regex:
                metavariable: $T
                constant-propagation: true
                regex: ^(eyJhbGciOi.*)
          - pattern: |
              Token $T
        - metavariable-analysis:
            metavariable: $T
            analyzer: entropy
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          java.net.URL. ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          java.net.URLConnection. ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          java.net.HttpURLConnection. ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          javax.net.ssl.HttpsURLConnection. ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          (java.net.URL $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          (java.net.URLConnection $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          (java.net.HttpURLConnection $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
      - pattern: |
          (javax.net.ssl.HttpsURLConnection $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
      - patterns:
        - pattern-inside: |
            import javax.net.ssl.*;
            ...
        - pattern-either:
          - pattern: |
              HttpsURLConnection. ... .$HEADERFUNC("Authorization", $AUTH)
          - pattern: |
              (HttpsURLConnection $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
      - patterns:
        - pattern-inside: |
            import java.net.*;
            ...
        - pattern-either:
          - pattern: |
              URL. ... .$HEADERFUNC("Authorization", $AUTH)
          - pattern: |
              URLConnection. ... .$HEADERFUNC("Authorization", $AUTH)
          - pattern: |
              HttpURLConnection. ... .$HEADERFUNC("Authorization", $AUTH)
          - pattern: |
              (URL $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
          - pattern: |
              (URLConnection $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
          - pattern: |
              (HttpURLConnection $CONN). ... .$HEADERFUNC("Authorization", $AUTH)
    - metavariable-regex:
        metavariable: $HEADERFUNC
        regex: ^(addRequestProperty|setRequestProperty)$
    - focus-metavariable: $AUTH
- id: generic.dockerfile.security.last-user-is-root.last-user-is-root
  patterns:
  - pattern: USER root
  - pattern-not-inside: |
      USER root
      ...
      USER $ANYTHING
  message: The last user in the container is 'root'. This is a security hazard because
    if an attacker gains control of the container they will have root access. Switch
    back to another user after running commands as 'root'.
  severity: ERROR
  languages:
  - dockerfile
  metadata:
    cwe:
    - 'CWE-269: Improper Privilege Management'
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3002
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3002
    category: security
    technology:
    - dockerfile
    confidence: MEDIUM
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.dockerfile.security.last-user-is-root.last-user-is-root
    shortlink: https://sg.run/N461
    semgrep.dev:
      rule:
        rule_id: L1UyO5
        version_id: 9lT29Q
        url: https://semgrep.dev/playground/r/9lT29Q/generic.dockerfile.security.last-user-is-root.last-user-is-root
        origin: community
- id: generic.secrets.security.detected-square-access-token.detected-square-access-token
  pattern-regex: sq0atp-[0-9A-Za-z\-_]{22}
  languages:
  - regex
  message: Square Access Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - square
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-square-access-token.detected-square-access-token
    shortlink: https://sg.run/OP3b
    semgrep.dev:
      rule:
        rule_id: 3qUPqO
        version_id: o5TW6K
        url: https://semgrep.dev/playground/r/o5TW6K/generic.secrets.security.detected-square-access-token.detected-square-access-token
        origin: community
- id: generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret
  pattern-regex: sq0csp-[0-9A-Za-z\\\-_]{43}
  languages:
  - regex
  message: Square OAuth Secret detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    references:
    - https://github.com/Yelp/detect-secrets/blob/master/tests/plugins/square_oauth_test.py
    category: security
    technology:
    - secrets
    - square
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret
    shortlink: https://sg.run/eL7E
    semgrep.dev:
      rule:
        rule_id: 4bUk4l
        version_id: zyTXEl
        url: https://semgrep.dev/playground/r/zyTXEl/generic.secrets.security.detected-square-oauth-secret.detected-square-oauth-secret
        origin: community
- id: generic.secrets.security.detected-ssh-password.detected-ssh-password
  pattern-regex: sshpass -p.*['|\\\"]
  languages:
  - regex
  message: SSH Password detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - ssh
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-ssh-password.detected-ssh-password
    shortlink: https://sg.run/vzDR
    semgrep.dev:
      rule:
        rule_id: PeUZ4d
        version_id: pZTq5y
        url: https://semgrep.dev/playground/r/pZTq5y/generic.secrets.security.detected-ssh-password.detected-ssh-password
        origin: community
- id: generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key
  pattern-regex: sk_live_[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Stripe API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - stripe
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key
    shortlink: https://sg.run/dKd5
    semgrep.dev:
      rule:
        rule_id: JDUy0z
        version_id: 2KTA93
        url: https://semgrep.dev/playground/r/2KTA93/generic.secrets.security.detected-stripe-api-key.detected-stripe-api-key
        origin: community
- id: generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key
  pattern-regex: rk_live_[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Stripe Restricted API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - stripe
    confidence: MEDIUM
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key
    shortlink: https://sg.run/ZvdL
    semgrep.dev:
      rule:
        rule_id: 5rUOWq
        version_id: X0Torz
        url: https://semgrep.dev/playground/r/X0Torz/generic.secrets.security.detected-stripe-restricted-api-key.detected-stripe-restricted-api-key
        origin: community
- id: generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key
  patterns:
  - pattern-regex: '[0-9]+:AA[0-9A-Za-z\-_]{33}'
  - pattern-not-regex: go\.mod.*
  - pattern-not-regex: v[\d]+\.[\d]+\.[\d]+.*
  languages:
  - regex
  message: Telegram Bot API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - telegram
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    source: https://semgrep.dev/r/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key
    shortlink: https://sg.run/nd4b
    semgrep.dev:
      rule:
        rule_id: GdU7Nl
        version_id: jQTLoB
        url: https://semgrep.dev/playground/r/jQTLoB/generic.secrets.security.detected-telegram-bot-api-key.detected-telegram-bot-api-key
        origin: community
- id: generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key
  pattern-regex: SK[0-9a-fA-F]{32}
  languages:
  - regex
  message: Twilio API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - twilio
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key
    shortlink: https://sg.run/Ek2o
    semgrep.dev:
      rule:
        rule_id: ReUgJn
        version_id: 1QT01E
        url: https://semgrep.dev/playground/r/1QT01E/generic.secrets.security.detected-twilio-api-key.detected-twilio-api-key
        origin: community
- id: go.lang.security.audit.xss.import-text-template.import-text-template
  message: When working with web applications that involve rendering user-generated  content,
    it's important to properly escape any HTML content to prevent  Cross-Site Scripting
    (XSS) attacks. In Go, the `text/template` package does  not automatically escape
    HTML content, which can leave your application  vulnerable to these types of attacks.
    To mitigate this risk, it's  recommended to use the `html/template` package instead,
    which provides  built-in functionality for HTML escaping. By using `html/template`
    to render  your HTML content, you can help to ensure that your web application
    is more  secure and less susceptible to XSS vulnerabilities.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://www.veracode.com/blog/secure-development/use-golang-these-mistakes-could-compromise-your-apps-security
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.import-text-template.import-text-template
    shortlink: https://sg.run/ndEO
    semgrep.dev:
      rule:
        rule_id: 5rUOZQ
        version_id: vdTggK
        url: https://semgrep.dev/playground/r/vdTggK/go.lang.security.audit.xss.import-text-template.import-text-template
        origin: community
  severity: WARNING
  patterns:
  - pattern: |
      import "$IMPORT"
  - metavariable-regex:
      metavariable: $IMPORT
      regex: ^(text/template)$
  - focus-metavariable: $IMPORT
  fix: |
    html/template
  languages:
  - go
- id: java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
  message: RSA keys should be at least 2048 bits based on NIST recommendation.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
    category: security
    technology:
    - java
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
    shortlink: https://sg.run/4x6x
    semgrep.dev:
      rule:
        rule_id: 0oU5P5
        version_id: 8KTL8z
        url: https://semgrep.dev/playground/r/8KTL8z/java.lang.security.audit.crypto.weak-rsa.use-of-weak-rsa-key
        origin: community
  patterns:
  - pattern: |
      KeyPairGenerator $KEY = $G.getInstance("RSA");
      ...
      $KEY.initialize($BITS);
  - metavariable-comparison:
      metavariable: $BITS
      comparison: $BITS < 2048
- id: go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
  languages:
  - go
  message: Detected directly writing or similar in 'http.ResponseWriter.write()'.
    This bypasses HTML escaping that prevents cross-site scripting vulnerabilities.
    Instead, use the 'html/template' package and render data using 'template.Execute()'.
  metadata:
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
    shortlink: https://sg.run/EkbA
    semgrep.dev:
      rule:
        rule_id: GdU71y
        version_id: pZTq7v
        url: https://semgrep.dev/playground/r/pZTq7v/go.lang.security.audit.xss.no-direct-write-to-responsewriter.no-direct-write-to-responsewriter
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func $HANDLER(..., $WRITER *http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern-either:
    - pattern: $WRITER.Write(...)
    - pattern: (*$WRITER).Write(...)
  - pattern-not: $WRITER.Write([]byte("..."))
  severity: WARNING
- id: go.lang.security.audit.xss.no-interpolation-js-template-string.no-interpolation-js-template-string
  message: Detected template variable interpolation in a JavaScript template string.
    This is potentially vulnerable to cross-site scripting (XSS) attacks because a
    malicious actor has control over JavaScript but without the need to use escaped
    characters. Instead, obtain this variable outside of the template string and ensure
    your template is properly escaped.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/golang/go/issues/9200#issuecomment-66100328
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    category: security
    technology:
    - generic
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-interpolation-js-template-string.no-interpolation-js-template-string
    shortlink: https://sg.run/8yl7
    semgrep.dev:
      rule:
        rule_id: BYUNR6
        version_id: jQTL78
        url: https://semgrep.dev/playground/r/jQTL78/go.lang.security.audit.xss.no-interpolation-js-template-string.no-interpolation-js-template-string
        origin: community
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*.html'
    - '*.thtml'
    - '*.gohtml'
    - '*.tmpl'
    - '*.tpl'
  patterns:
  - pattern-inside: <script ...> ... ... ... ... ... </script>
  - pattern: '` ... {{ ... }} ...`'
- id: go.lang.security.bad_tmp.bad-tmp-file-creation
  message: File creation in shared tmp directory without using ioutil.Tempfile
  languages:
  - go
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-377: Insecure Temporary File'
    source-rule-url: https://github.com/securego/gosec
    category: security
    technology:
    - go
    confidence: LOW
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.bad_tmp.bad-tmp-file-creation
    shortlink: https://sg.run/Gejn
    semgrep.dev:
      rule:
        rule_id: 6JUjnL
        version_id: bZTxjj
        url: https://semgrep.dev/playground/r/bZTxjj/go.lang.security.bad_tmp.bad-tmp-file-creation
        origin: community
  pattern-either:
  - pattern: ioutil.WriteFile("=~//tmp/.*$/", ...)
  - pattern: os.Create("=~//tmp/.*$/", ...)
- id: go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb
  message: Detected a possible denial-of-service via a zip bomb attack. By limiting
    the max bytes read, you can mitigate this attack. `io.CopyN()` can specify a size.
    Refer to https://bomb.codes/ to learn more about this attack and other ways to
    mitigate it.
  severity: WARNING
  languages:
  - go
  patterns:
  - pattern-either:
    - pattern: io.Copy(...)
    - pattern: io.CopyBuffer(...)
  - pattern-either:
    - pattern-inside: |
        gzip.NewReader(...)
        ...
    - pattern-inside: |
        zlib.NewReader(...)
        ...
    - pattern-inside: |
        zlib.NewReaderDict(...)
        ...
    - pattern-inside: |
        bzip2.NewReader(...)
        ...
    - pattern-inside: |
        flate.NewReader(...)
        ...
    - pattern-inside: |
        flate.NewReaderDict(...)
        ...
    - pattern-inside: |
        lzw.NewReader(...)
        ...
    - pattern-inside: |
        tar.NewReader(...)
        ...
    - pattern-inside: |
        zip.NewReader(...)
        ...
    - pattern-inside: |
        zip.OpenReader(...)
        ...
  fix-regex:
    regex: (.*)(Copy|CopyBuffer)\((.*?),(.*?)(\)|,.*\))
    replacement: \1CopyN(\3, \4, 1024*1024*256)
  metadata:
    cwe:
    - 'CWE-400: Uncontrolled Resource Consumption'
    source-rule-url: https://github.com/securego/gosec
    references:
    - https://bomb.codes/
    - https://golang.org/pkg/io/#CopyN
    - https://github.com/securego/gosec/blob/master/rules/decompression-bomb.go
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb
    shortlink: https://sg.run/RodK
    semgrep.dev:
      rule:
        rule_id: oqUeqn
        version_id: NdT5w2
        url: https://semgrep.dev/playground/r/NdT5w2/go.lang.security.decompression_bomb.potential-dos-via-decompression-bomb
        origin: community
- id: go.lang.security.zip.path-traversal-inside-zip-extraction
  message: File traversal when extracting zip archive
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    source_rule_url: https://github.com/securego/gosec/issues/205
    category: security
    technology:
    - go
    confidence: LOW
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.zip.path-traversal-inside-zip-extraction
    shortlink: https://sg.run/Av64
    semgrep.dev:
      rule:
        rule_id: zdUkoR
        version_id: e1TENW
        url: https://semgrep.dev/playground/r/e1TENW/go.lang.security.zip.path-traversal-inside-zip-extraction
        origin: community
  languages:
  - go
  severity: WARNING
  pattern: |
    reader, $ERR := zip.OpenReader($ARCHIVE)
    ...
    for _, $FILE := range reader.File {
      ...
      path := filepath.Join($TARGET, $FILE.Name)
      ...
    }
- id: java.lang.security.audit.http-response-splitting.http-response-splitting
  metadata:
    cwe:
    - 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Request/Response Splitting'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTP_RESPONSE_SPLITTING
    references:
    - https://www.owasp.org/index.php/HTTP_Response_Splitting
    category: security
    technology:
    - java
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.http-response-splitting.http-response-splitting
    shortlink: https://sg.run/eL0l
    semgrep.dev:
      rule:
        rule_id: 3qUPyK
        version_id: 44TY0Z
        url: https://semgrep.dev/playground/r/44TY0Z/java.lang.security.audit.http-response-splitting.http-response-splitting
        origin: community
  message: Older Java application servers are vulnerable to HTTP response splitting,
    which may occur if an HTTP request can be injected with CRLF characters. This
    finding is reported for completeness; it is recommended to ensure your environment
    is not affected by testing this yourself.
  severity: INFO
  languages:
  - java
  pattern-either:
  - pattern: |
      $VAR = $REQ.getParameter(...);
      ...
      $COOKIE = new Cookie(..., $VAR, ...);
      ...
      $RESP.addCookie($COOKIE, ...);
  - patterns:
    - pattern-inside: |
        $RETTYPE $FUNC(...,@PathVariable $TYPE $VAR, ...) {
          ...
        }
    - pattern: |
        $COOKIE = new Cookie(..., $VAR, ...);
        ...
        $RESP.addCookie($COOKIE, ...);
- id: javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
  message: Potential arbitrary code execution, whatever is provided to `toFastProperties`
    is sent straight to eval()
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - bluebird
    references:
    - http://bluebirdjs.com/docs/getting-started.html
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
    shortlink: https://sg.run/ndnZ
    semgrep.dev:
      rule:
        rule_id: JDUy9J
        version_id: ZRTyd2
        url: https://semgrep.dev/playground/r/ZRTyd2/javascript.bluebird.security.audit.tofastproperties-code-execution.tofastproperties-code-execution
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: function ... (..., $ARG,...) {...}
    - focus-metavariable: $ARG
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $UTIL.toFastProperties($SINK,...)
      - pattern: toFastProperties($SINK,...)
    - pattern-either:
      - pattern-inside: |
          $BB = require('bluebird');
          ...
      - pattern-inside: |
          import 'bluebird';
          ...
    - focus-metavariable: $SINK
- id: javascript.browser.security.dom-based-xss.dom-based-xss
  message: 'Detected possible DOM-based XSS. This occurs because a portion of the
    URL is being used to construct an element added directly to the page. For example,
    a malicious actor could send someone a link like this: http://www.some.site/page.html?default=<script>alert(document.cookie)</script>
    which would add the script to the page. Consider allowlisting appropriate values
    or using an approach which does not involve the URL.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/DOM_Based_XSS
    category: security
    technology:
    - browser
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.browser.security.dom-based-xss.dom-based-xss
    shortlink: https://sg.run/EkeL
    semgrep.dev:
      rule:
        rule_id: 5rUOg6
        version_id: nWTwNQ
        url: https://semgrep.dev/playground/r/nWTwNQ/javascript.browser.security.dom-based-xss.dom-based-xss
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  pattern-either:
  - pattern: document.write(<... document.location.$W ...>)
  - pattern: document.write(<... location.$W ...>)
- id: javascript.browser.security.eval-detected.eval-detected
  message: Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.2.4 Dynamic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing
      version: '4'
    category: security
    technology:
    - browser
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.browser.security.eval-detected.eval-detected
    shortlink: https://sg.run/7ope
    semgrep.dev:
      rule:
        rule_id: GdU7dw
        version_id: ExTYWv
        url: https://semgrep.dev/playground/r/ExTYWv/javascript.browser.security.eval-detected.eval-detected
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-not: eval("...")
  - pattern: eval(...)
- id: javascript.browser.security.insecure-document-method.insecure-document-method
  message: User controlled data in methods like `innerHTML`, `outerHTML` or `document.write`
    is an anti-pattern that can lead to XSS vulnerabilities
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - browser
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.browser.security.insecure-document-method.insecure-document-method
    shortlink: https://sg.run/LwA9
    semgrep.dev:
      rule:
        rule_id: ReUg41
        version_id: 7ZTYRP
        url: https://semgrep.dev/playground/r/7ZTYRP/javascript.browser.security.insecure-document-method.insecure-document-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        $EL.innerHTML = $HTML;
    - pattern: |
        $EL.outerHTML = $HTML;
    - pattern: document.write(...)
  - pattern-not: |
      $EL.innerHTML = "...";
  - pattern-not: |
      $EL.outerHTML = "...";
  - pattern-not: document.write("...")
- id: javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
  message: No validation of origin is done by the addEventListener API. It may be
    possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site
    Scripting(XSS).
  metadata:
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    category: security
    technology:
    - browser
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
    shortlink: https://sg.run/gL9x
    semgrep.dev:
      rule:
        rule_id: BYUN0X
        version_id: 8KTLlL
        url: https://semgrep.dev/playground/r/8KTLlL/javascript.browser.security.insufficient-postmessage-origin-validation.insufficient-postmessage-origin-validation
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern: |
        window.addEventListener('message', $FUNC, ...)
    - metavariable-pattern:
        patterns:
        - pattern: |
            function($OBJ) { ... }
        - pattern-not: |
            function($OBJ) { ... if (<... $OBJ.origin ...>) { ... } ... }
        metavariable: $FUNC
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function $FNAME($OBJ) { $CONTEXT }
          ...
      - pattern-inside: |
          $FNAME = (...) => { $CONTEXT }
          ...
    - pattern: |
        window.addEventListener('message', $FNAME,...)
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            ... if (<... $OBJ.origin ...>) { ... } ...
        metavariable: $CONTEXT
- id: javascript.browser.security.new-function-detected.new-function-detected
  message: this rule has been deprecated.
  metadata:
    deprecated: true
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - browser
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.browser.security.new-function-detected.new-function-detected
    shortlink: https://sg.run/Q5Pk
    semgrep.dev:
      rule:
        rule_id: DbUp0q
        version_id: gET5XL
        url: https://semgrep.dev/playground/r/gET5XL/javascript.browser.security.new-function-detected.new-function-detected
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
  message: The target origin of the window.postMessage() API is set to "*". This could
    allow for information disclosure due to the possibility of any origin allowed
    to receive the message.
  metadata:
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    category: security
    technology:
    - browser
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
    shortlink: https://sg.run/PJ4p
    semgrep.dev:
      rule:
        rule_id: KxUbq4
        version_id: JdTZRY
        url: https://semgrep.dev/playground/r/JdTZRY/javascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern: $OBJECT.postMessage(...,'*')
- id: javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
  message: Detected a template variable used as the 'src' in a script tag. Although
    template variables are HTML escaped, HTML escaping does not always prevent malicious
    URLs from being injected and could results in a cross-site scripting (XSS) vulnerability.
    Prefer not to dynamically generate the 'src' attribute and use static URLs instead.
    If you must do this, carefully check URLs against an allowlist and be sure to
    URL-encode the result.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
    shortlink: https://sg.run/ndxZ
    semgrep.dev:
      rule:
        rule_id: JDUyrJ
        version_id: zyTe2G
        url: https://semgrep.dev/playground/r/zyTe2G/javascript.express.security.audit.xss.ejs.var-in-script-src.var-in-script-src
        origin: community
  languages:
  - generic
  severity: WARNING
  patterns:
  - pattern-inside: <script ...>
  - pattern-either:
    - pattern-inside: src = '...'
    - pattern-inside: src = "..."
  - pattern: <% ... >
  paths:
    include:
    - '*.ejs'
    - '*.html'
- id: javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
    shortlink: https://sg.run/Ek9L
    semgrep.dev:
      rule:
        rule_id: 5rUOD6
        version_id: pZTQ3N
        url: https://semgrep.dev/playground/r/pZTQ3N/javascript.express.security.audit.xss.ejs.var-in-script-tag.var-in-script-tag
        origin: community
  languages:
  - generic
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not-inside: <script ... $ATTR = "..." ...>
  - pattern-not-inside: <script ... $ATTR = '...' ...>
  - pattern: <% ... >
  paths:
    include:
    - '*.ejs'
    - '*.html'
- id: javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/{{link}}''.
    You may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
    shortlink: https://sg.run/8yOq
    semgrep.dev:
      rule:
        rule_id: AbUzlj
        version_id: jQT95n
        url: https://semgrep.dev/playground/r/jQT95n/javascript.express.security.audit.xss.mustache.var-in-href.var-in-href
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  pattern-regex: <a.*href\s*=(\s|['"])*?{{.*?}}.*
- id: javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
  message: Detected a unescaped variables using '&attributes'. If external data can
    reach these locations, your application is exposed to a cross-site scripting (XSS)
    vulnerability. If you must do this, ensure no external data can reach this location.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://pugjs.org/language/attributes.html#attributes
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
    shortlink: https://sg.run/Q5jk
    semgrep.dev:
      rule:
        rule_id: DbUpyq
        version_id: 9lTnb3
        url: https://semgrep.dev/playground/r/9lTnb3/javascript.express.security.audit.xss.pug.and-attributes.template-and-attributes
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.pug'
  pattern-regex: .*&attributes.*
- id: javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
  message: Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'.
    If external data can reach these locations, your application is exposed to a cross-site
    scripting (XSS) vulnerability. If you must do this, ensure no external data can
    reach this location.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://pugjs.org/language/code.html#unescaped-buffered-code
    - https://pugjs.org/language/attributes.html#unescaped-attributes
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
    shortlink: https://sg.run/3xbe
    semgrep.dev:
      rule:
        rule_id: WAUonl
        version_id: yeTdpG
        url: https://semgrep.dev/playground/r/yeTdpG/javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.pug'
  pattern-either:
  - pattern-regex: \w.*(!=)[^=].*
  - pattern-regex: '!{.*?}'
- id: javascript.express.security.audit.xss.pug.var-in-href.var-in-href
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: a(href=''/''+url). You
    may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/pugjs/pug/issues/2952
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.var-in-href.var-in-href
    shortlink: https://sg.run/4xNx
    semgrep.dev:
      rule:
        rule_id: 0oU535
        version_id: rxT8KN
        url: https://semgrep.dev/playground/r/rxT8KN/javascript.express.security.audit.xss.pug.var-in-href.var-in-href
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.pug'
  pattern-regex: a\(.*href=[^'"].*\)
- id: javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
    shortlink: https://sg.run/PJXp
    semgrep.dev:
      rule:
        rule_id: KxUbL4
        version_id: bZT436
        url: https://semgrep.dev/playground/r/bZT436/javascript.express.security.audit.xss.pug.var-in-script-tag.var-in-script-tag
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.pug'
  pattern-either:
  - pattern-regex: script\s*=[A-Za-z0-9]+
  - pattern-regex: script\s*=.*["']\s*\+.*
  - pattern-regex: script\s*=[^'"]+\+.*
  - pattern-regex: script\(.*?\)\s*=\s*[A-Za-z0-9]+
  - pattern-regex: script\(.*?\)\s*=\s*.*["']\s*\+.*
  - pattern-regex: script\(.*?\)\s*=\s*[^'"]+\+.*
- id: javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
  message: User controlled data in a `createNodesFromMarkup` is an anti-pattern that
    can lead to XSS vulnerabilities
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - fbjs
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
    shortlink: https://sg.run/J9Yj
    semgrep.dev:
      rule:
        rule_id: qNUjwb
        version_id: 3ZTxXX
        url: https://semgrep.dev/playground/r/3ZTxXX/javascript.fbjs.security.audit.insecure-createnodesfrommarkup.insecure-createnodesfrommarkup
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: createNodesFromMarkup(...)
    - pattern: $X.createNodesFromMarkup(...)
  - pattern-not: createNodesFromMarkup("...",...)
  - pattern-not: $X.createNodesFromMarkup("...",...)
- id: javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
  message: Detected non-literal calls to $EXEC(). This could lead to a command injection
    vulnerability.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    category: security
    technology:
    - javascript
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
    shortlink: https://sg.run/DJ8v
    semgrep.dev:
      rule:
        rule_id: qNUo10
        version_id: YDT87D
        url: https://semgrep.dev/playground/r/YDT87D/javascript.lang.security.audit.dangerous-spawn-shell.dangerous-spawn-shell
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        function ... (...,$FUNC,...) {
          ...
        }
    - focus-metavariable: $FUNC
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('child_process')
          ...
      - pattern-inside: |
          import 'child_process'
          ...
    - pattern-either:
      - pattern: spawn(...)
      - pattern: spawnSync(...)
      - pattern: $CP.spawn(...)
      - pattern: $CP.spawnSync(...)
    - pattern-either:
      - pattern: |
          $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",["-c", $ARG, ...],...)
      - patterns:
        - pattern: $EXEC($CMD,["-c", $ARG, ...],...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
            ...
      - pattern: |
          $EXEC("=~/(sh|bash|ksh|csh|tcsh|zsh)/",[$ARG, ...],...)
      - patterns:
        - pattern: $EXEC($CMD,[$ARG, ...],...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
            ...
    - focus-metavariable: $ARG
- id: javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
  message: This rule has been deprecated. It duplicates `javascript/sequelize/security/audit/sequelize-raw-query`
    rule.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - sequelize
    references:
    - https://sequelize.org/docs/v6/core-concepts/raw-queries/
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
    shortlink: https://sg.run/jRKP
    semgrep.dev:
      rule:
        rule_id: x8Unr5
        version_id: 1QTXv2
        url: https://semgrep.dev/playground/r/1QTXv2/javascript.lang.security.audit.non-constant-sql-query.non-constant-sql-query
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
  message: 'Found ''$SPAWN'' with ''{shell: $SHELL}''. This is dangerous because this
    call will spawn the command using a shell process. Doing so propagates current
    shell settings and variables, which makes it much easier for a malicious actor
    to execute commands. Use ''{shell: false}'' instead.'
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    category: security
    technology:
    - javascript
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
    shortlink: https://sg.run/Wgeo
    semgrep.dev:
      rule:
        rule_id: lBUdr5
        version_id: NdTQjQ
        url: https://semgrep.dev/playground/r/NdTQjQ/javascript.lang.security.audit.spawn-shell-true.spawn-shell-true
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        spawn(...,{shell: $SHELL})
    - pattern: |
        spawnSync(...,{shell: $SHELL})
    - pattern: |
        $CP.spawn(...,{shell: $SHELL})
    - pattern: |
        $CP.spawnSync(...,{shell: $SHELL})
  - pattern-not: |
      spawn(...,{shell: false})
  - pattern-not: |
      spawnSync(...,{shell: false})
  - pattern-not: |
      $CP.spawn(...,{shell: false})
  - pattern-not: |
      $CP.spawnSync(...,{shell: false})
- id: javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
  message: Cannot determine what '$UNK' is and it is used with a '<script>' tag. This
    could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally
    controlled, or sanitize this data.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://www.developsec.com/2017/11/09/xss-in-a-script-tag/
    - https://github.com/juice-shop/juice-shop/blob/1ceb8751e986dacd3214a618c37e7411be6bc11a/routes/videoHandler.ts#L68
    category: security
    technology:
    - javascript
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
    shortlink: https://sg.run/1Zy1
    semgrep.dev:
      rule:
        rule_id: OrU37Y
        version_id: e1TAOX
        url: https://semgrep.dev/playground/r/e1TAOX/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $UNK = $ANYFUNC(...);
      ...
      $OTHERFUNC(..., <... $UNK ...>, ...);
  - pattern: $OTHERFUNC(..., <... "=~/.*<script.*/" ...>, ...)
  - pattern: $UNK
- id: javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
  message: Make sure that unverified user data can not reach vm.runInContext.
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
    shortlink: https://sg.run/9oey
    semgrep.dev:
      rule:
        rule_id: eqU8KW
        version_id: YDTGKO
        url: https://semgrep.dev/playground/r/YDTGKO/javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: function ... (..., $ARG,...) {...}
    - focus-metavariable: $ARG
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VM = require('vm')
          ...
      - pattern-inside: |
          import * as $VM from 'vm'
          ...
      - pattern-inside: |
          import $VM from 'vm'
          ...
    - pattern-either:
      - pattern: $VM.runInContext($CODE,$INPUT,...)
      - pattern: $VM.runInContext($INPUT,...)
      - pattern: $VM.runInNewContext($CODE,$INPUT,...)
      - pattern: $VM.runInNewContext($INPUT,...)
      - pattern: $VM.runInThisContext($INPUT,...)
      - pattern: $VM.compileFunction($INPUT,...)
      - pattern: |
          $VM.compileFunction($CODE,$PARAMS,{parsingContext: $INPUT},...)
      - pattern: |
          $OPTS = {parsingContext: $INPUT};
          ...
          $VM.compileFunction($CODE,$PARAMS,$OPTS,...)
      - pattern: new $VM.Script($INPUT,...)
      - pattern: new $VM.SourceTextModule($INPUT,...)
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-either:
      - pattern: vm.runInContext($CODE,$INPUT,...)
      - pattern: vm.runInContext($INPUT,...)
      - pattern: vm.runInNewContext($CODE,$INPUT,...)
      - pattern: vm.runInNewContext($INPUT,...)
      - pattern: vm.runInThisContext($INPUT,...)
      - pattern: vm.compileFunction($INPUT,...)
      - pattern: |
          vm.compileFunction($CODE,$PARAMS,{parsingContext: $INPUT},...)
      - pattern: |
          $OPTS = {parsingContext: $INPUT};
          ...
          vm.compileFunction($CODE,$PARAMS,$OPTS,...)
      - pattern: new vm.Script($INPUT,...)
      - pattern: new vm.SourceTextModule($INPUT,...)
    - focus-metavariable: $INPUT
- id: javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
    shortlink: https://sg.run/ydbA
    semgrep.dev:
      rule:
        rule_id: v8UnQZ
        version_id: 6xT7w0
        url: https://semgrep.dev/playground/r/6xT7w0/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-context-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
    shortlink: https://sg.run/rd2J
    semgrep.dev:
      rule:
        rule_id: d8UjgD
        version_id: o5TQpW
        url: https://semgrep.dev/playground/r/o5TQpW/javascript.lang.security.audit.vm-injection.vm-compilefunction-context-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.vm-injection.vm-script-code-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-script-code-injection
    shortlink: https://sg.run/b75v
    semgrep.dev:
      rule:
        rule_id: ZqU5dE
        version_id: zyTg09
        url: https://semgrep.dev/playground/r/zyTg09/javascript.lang.security.audit.vm-injection.vm-script-code-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
    shortlink: https://sg.run/0ngr
    semgrep.dev:
      rule:
        rule_id: YGUr6P
        version_id: pZTg4R
        url: https://semgrep.dev/playground/r/pZTg4R/javascript.lang.security.audit.vm-injection.vm-sourcetextmodule-code-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
    shortlink: https://sg.run/N4pN
    semgrep.dev:
      rule:
        rule_id: nJUzNq
        version_id: 2KTNoN
        url: https://semgrep.dev/playground/r/2KTNoN/javascript.lang.security.audit.vm-injection.vm-runincontext-code-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
    shortlink: https://sg.run/kX7A
    semgrep.dev:
      rule:
        rule_id: EwU2x8
        version_id: X0Te0X
        url: https://semgrep.dev/playground/r/X0Te0X/javascript.lang.security.audit.vm-injection.vm-runinnewcontext-code-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes
  message: Detected usage of crypto.pseudoRandomBytes, which does not produce secure
    random numbers.
  metadata:
    cwe:
    - 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp:
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-pseudoRandomBytes.js
    asvs:
      section: 'V6: Stored Cryptography Verification Requirements'
      control_id: 6.3.1 Insecure Randomness
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v63-random-values
      version: '4'
    category: security
    technology:
    - javascript
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes
    shortlink: https://sg.run/pxze
    semgrep.dev:
      rule:
        rule_id: NbUkR2
        version_id: 3ZTx1X
        url: https://semgrep.dev/playground/r/3ZTx1X/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern: crypto.pseudoRandomBytes
- id: javascript.lang.security.spawn-git-clone.spawn-git-clone
  message: Git allows shell commands to be specified in ext URLs for remote repositories.
    For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command
    to try to connect to a remote repository. Make sure that the URL is not controlled
    by external input.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - git
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone
    shortlink: https://sg.run/2xrr
    semgrep.dev:
      rule:
        rule_id: kxUkPP
        version_id: JdTZjd
        url: https://semgrep.dev/playground/r/JdTZjd/javascript.lang.security.spawn-git-clone.spawn-git-clone
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: spawn('git', ['clone',...,$F])
    - pattern: $X.spawn('git', ['clone',...,$F])
    - pattern: spawn('git', ['clone',...,$P,$F])
    - pattern: $X.spawn('git', ['clone',...,$P,$F])
  - pattern-not: spawn('git', ['clone',...,"..."])
  - pattern-not: $X.spawn('git', ['clone',...,"..."])
  - pattern-not: spawn('git', ['clone',...,"...","..."])
  - pattern-not: $X.spawn('git', ['clone',...,"...","..."])
- id: javascript.phantom.security.audit.phantom-injection.phantom-injection
  message: If unverified user data can reach the `phantom` page methods it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - phantom
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.phantom.security.audit.phantom-injection.phantom-injection
    shortlink: https://sg.run/dKv0
    semgrep.dev:
      rule:
        rule_id: 3qUPXE
        version_id: A8Tn2b
        url: https://semgrep.dev/playground/r/A8Tn2b/javascript.phantom.security.audit.phantom-injection.phantom-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $PHANTOM = require('phantom');
      ...
  - pattern-either:
    - pattern: $PAGE.open($INPUT,...)
    - pattern: $PAGE.property("content",$INPUT,...)
    - pattern: $PAGE.setContent($INPUT,...)
    - pattern: $PAGE.openUrl($INPUT,...)
    - pattern: $PAGE.evaluateJavaScript($INPUT,...)
  - pattern-not: $PAGE.open("...",...)
  - pattern-not: $PAGE.property("content","...",...)
  - pattern-not: $PAGE.setContent("...",...)
  - pattern-not: $PAGE.openUrl("...",...)
  - pattern-not: $PAGE.evaluateJavaScript("...",...)
- id: javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
  message: If unverified user data can reach the `goto` method it can result in Server-Side
    Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - playwright
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
    shortlink: https://sg.run/LwWY
    semgrep.dev:
      rule:
        rule_id: GdU7eP
        version_id: K3TO0b
        url: https://semgrep.dev/playground/r/K3TO0b/javascript.playwright.security.audit.playwright-goto-injection.playwright-goto-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-not-inside: |
      require('playwright');
      ...
      var $INPUT = "...";
      ...
      $PAGE.goto($INPUT,...)
  - pattern: $PAGE.goto($INPUT,...)
  - pattern-not: $PAGE.goto("...",...)
- id: javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
  message: 'If TLS is disabled on server side (Postgresql server), Sequelize establishes
    connection without TLS and no error will be thrown. To prevent MITN (Man In The
    Middle) attack, TLS must be enforce by Sequelize. Set "ssl: true" or define settings
    "ssl: {...}"'
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    - https://nodejs.org/api/tls.html#tls_tls_default_min_version
    category: security
    technology:
    - sequelize
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
    shortlink: https://sg.run/yz6Z
    semgrep.dev:
      rule:
        rule_id: NbUAYW
        version_id: BjTGPp
        url: https://semgrep.dev/playground/r/BjTGPp/javascript.sequelize.security.audit.sequelize-enforce-tls.sequelize-enforce-tls
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT
       }
  - pattern-not: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: "postgres",
        dialectOptions: {
            ssl: true
        }
      }
  - pattern-not: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions: {
          ssl: { ... }
        }
      }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
  message: Set "rejectUnauthorized" to false is a convenient way to resolve certificate
    error. But this method is unsafe because it disables the server certificate verification,
    making the Node app open to MITM attack. "rejectUnauthorized" option must be alway
    set to True (default value). With self -signed certificate or custom CA, use "ca"
    option to define Root Certificate. This rule checks TLS configuration only for
    Postgresql, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
    This rule could be extended for MSSQL, but the dialectOptions is specific for
    Tedious.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    category: security
    technology:
    - sequelize
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
    shortlink: https://sg.run/rAkj
    semgrep.dev:
      rule:
        rule_id: kxUR80
        version_id: 0bT6dG
        url: https://semgrep.dev/playground/r/0bT6dG/javascript.sequelize.security.audit.sequelize-tls-disabled-cert-validation.sequelize-tls-disabled-cert-validation
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions: {
          ssl: {
            rejectUnauthorized: false
          }
        }
       }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
  message: Potential arbitrary code execution, piped to eval
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - thenify
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
    shortlink: https://sg.run/BkER
    semgrep.dev:
      rule:
        rule_id: oqUeDG
        version_id: YDT8y8
        url: https://semgrep.dev/playground/r/YDT8y8/javascript.thenify.security.audit.multiargs-code-execution.multiargs-code-execution
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $THENIFY($FN, {multiArgs: ...},...)
    - pattern: |
        $OPTS = {multiArgs: ...};
        ...
        $THENIFY($FN,$OPTS,...);
  - pattern-not: |
      $THENIFY($FN, {multiArgs: false},...)
  - pattern-not: |
      $OPTS = {multiArgs: false};
      ...
      $THENIFY($FN,$OPTS,...)
  - pattern-either:
    - pattern-inside: |
        $THENIFY = require('thenify');
        ...
    - pattern-inside: |
        import 'thenify';
        ...
- id: javascript.vue.security.audit.xss.templates.avoid-v-html.avoid-v-html
  message: Dynamically rendering arbitrary HTML on your website can be very dangerous
    because it can easily lead to XSS vulnerabilities. Only use HTML interpolation
    on trusted content and never on user-provided content.
  metadata:
    references:
    - https://vuejs.org/v2/guide/syntax.html#Raw-HTML
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    technology:
    - vue
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.vue.security.audit.xss.templates.avoid-v-html.avoid-v-html
    shortlink: https://sg.run/0QEw
    semgrep.dev:
      rule:
        rule_id: 2ZUb2o
        version_id: zyTe46
        url: https://semgrep.dev/playground/r/zyTe46/javascript.vue.security.audit.xss.templates.avoid-v-html.avoid-v-html
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.vue'
  pattern-regex: <[^<>]*v-html=
- id: kotlin.lang.security.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
  message: A formatted or concatenated string was detected as input to a java.lang.Runtime
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.
    category: security
    technology:
    - kt
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
    shortlink: https://sg.run/6nEK
    semgrep.dev:
      rule:
        rule_id: yyUnpo
        version_id: RGTBrK
        url: https://semgrep.dev/playground/r/RGTBrK/kotlin.lang.security.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
        origin: community
  severity: ERROR
  languages:
  - kt
  pattern-either:
  - pattern: $RUNTIME.exec($X + $Y)
  - pattern: $RUNTIME.exec(String.format(...))
  - pattern: $RUNTIME.loadLibrary($X + $Y)
  - pattern: $RUNTIME.loadLibrary(String.format(...))
- id: kotlin.lang.security.cookie-missing-httponly.cookie-missing-httponly
  metadata:
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
    category: security
    technology:
    - kt
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.cookie-missing-httponly.cookie-missing-httponly
    shortlink: https://sg.run/ox7X
    semgrep.dev:
      rule:
        rule_id: r6UrKQ
        version_id: A8TyLN
        url: https://semgrep.dev/playground/r/A8TyLN/kotlin.lang.security.cookie-missing-httponly.cookie-missing-httponly
        origin: community
  message: A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly'
    flag for cookies instructs the browser to forbid client-side scripts from reading
    the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
  severity: WARNING
  languages:
  - kt
  patterns:
  - pattern-not-inside: |
      $COOKIE.setValue("")
      ...
  - pattern-either:
    - pattern: $COOKIE.setHttpOnly(false)
    - patterns:
      - pattern-not-inside: |
          $COOKIE.setHttpOnly(...)
          ...
      - pattern: $RESPONSE.addCookie($COOKIE)
- id: kotlin.lang.security.cookie-missing-secure-flag.cookie-missing-secure-flag
  metadata:
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
    category: security
    technology:
    - kt
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.cookie-missing-secure-flag.cookie-missing-secure-flag
    shortlink: https://sg.run/zv7n
    semgrep.dev:
      rule:
        rule_id: bwUw3j
        version_id: BjTQ81
        url: https://semgrep.dev/playground/r/BjTQ81/kotlin.lang.security.cookie-missing-secure-flag.cookie-missing-secure-flag
        origin: community
  message: A cookie was detected without setting the 'secure' flag. The 'secure' flag
    for cookies prevents the client from transmitting the cookie over insecure channels
    such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
  severity: WARNING
  languages:
  - kt
  patterns:
  - pattern-not-inside: |
      $COOKIE.setValue("")
      ...
  - pattern-either:
    - pattern: $COOKIE.setSecure(false)
    - patterns:
      - pattern-not-inside: |
          $COOKIE.setSecure(...)
          ...
      - pattern: $RESPONSE.addCookie($COOKIE)
- id: javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
  message: TLS1.0 and TLS1.1 are deprecated and should not be used anymore. By default,
    NodeJS used TLSv1.2. So, TLS min version must not be downgrade to TLS1.0 or TLS1.1.
    Enforce TLS1.3 is highly recommended This rule checks TLS configuration only for
    PostgreSQL, MariaDB and MySQL. SQLite is not really concerned by TLS configuration.
    This rule could be extended for MSSQL, but the dialectOptions is specific for
    Tedious.
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://node-postgres.com/features/ssl
    - https://nodejs.org/api/tls.html#tls_class_tls_tlssocket
    - https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
    - https://nodejs.org/api/tls.html#tls_tls_default_min_version
    category: security
    technology:
    - sequelize
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
    shortlink: https://sg.run/bDrq
    semgrep.dev:
      rule:
        rule_id: wdU8GB
        version_id: gETG6K
        url: https://semgrep.dev/playground/r/gETG6K/javascript.sequelize.security.audit.sequelize-weak-tls-version.sequelize-weak-tls-version
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      {
        host: $HOST,
        database: $DATABASE,
        dialect: $DIALECT,
        dialectOptions:
          { ssl: ... }
       }
  - pattern-either:
    - pattern: |
        {
          minVersion: 'TLSv1'
        }
    - pattern: |
        {
          minVersion: 'TLSv1.1'
        }
  - metavariable-regex:
      metavariable: $DIALECT
      regex: '[''"](mariadb|mysql|postgres)[''"]'
- id: json.aws.security.public-s3-policy-statement.public-s3-policy-statement
  pattern: |
    {
      "Effect": "Allow",
      "Principal": "*",
      "Resource": [
        ..., "=~/arn:aws:s3.*/", ...
      ],
      ...
    }
  message: Detected public S3 bucket policy. This policy allows anyone to access certain
    properties of or items in the bucket. Do not do this unless you will never have
    sensitive data inside the bucket.
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls'
    references:
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteAccessPermissionsReqd.html
    category: security
    technology:
    - aws
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/json.aws.security.public-s3-policy-statement.public-s3-policy-statement
    shortlink: https://sg.run/Yv1d
    semgrep.dev:
      rule:
        rule_id: 9AU1br
        version_id: 3ZTDl0
        url: https://semgrep.dev/playground/r/3ZTDl0/json.aws.security.public-s3-policy-statement.public-s3-policy-statement
        origin: community
  severity: WARNING
  languages:
  - json
- id: python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse
  message: Found user-controlled request data passed into HttpResponse. This could
    be vulnerable to XSS, leading to attackers gaining access to user cookies and
    protected information. Ensure that the request data is properly escaped or sanitzed.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse
    shortlink: https://sg.run/BkvA
    semgrep.dev:
      rule:
        rule_id: JDUydR
        version_id: BjTG9p
        url: https://semgrep.dev/playground/r/BjTG9p/python.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W.get(...), ...),
        ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W.get(...), ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W.get(...)}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W.get(...), ...)
    - pattern: return django.http.HttpResponse(..., request.$W.get(...), ...)
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W(...), ...),
        ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W(...), ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W(...)}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W(...), ...)
    - pattern: return django.http.HttpResponse(..., request.$W(...), ...)
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W[...], ...),
        ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W[...], ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W[...]}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W[...], ...)
    - pattern: return django.http.HttpResponse(..., request.$W[...], ...)
    - pattern: django.http.HttpResponse(..., $S.format(..., request.$W, ...), ...)
    - pattern: django.http.HttpResponse(..., $S % request.$W, ...)
    - pattern: django.http.HttpResponse(..., f"...{request.$W}...", ...)
    - pattern: django.http.HttpResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., f"...{$DATA}...", ...)
    - pattern: $A = django.http.HttpResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $A = django.http.HttpResponse(..., $INTERM, ...)
    - pattern: return django.http.HttpResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponse(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponse(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponse(..., $INTERM, ...)
- id: python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest
  message: Found user-controlled request data passed into a HttpResponseBadRequest.
    This could be vulnerable to XSS, leading to attackers gaining access to user cookies
    and protected information. Ensure that the request data is properly escaped or
    sanitzed.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest
    shortlink: https://sg.run/DoZP
    semgrep.dev:
      rule:
        rule_id: 5rUOX1
        version_id: DkTeOR
        url: https://semgrep.dev/playground/r/DkTeOR/python.django.security.injection.reflected-data-httpresponsebadrequest.reflected-data-httpresponsebadrequest
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W.get(...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W.get(...), ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W.get(...),
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W(...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W(...), ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W(...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W[...], ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W[...], ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W[...], ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: django.http.HttpResponseBadRequest(..., $S % request.$W, ...)
    - pattern: django.http.HttpResponseBadRequest(..., f"...{request.$W}...", ...)
    - pattern: django.http.HttpResponseBadRequest(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseBadRequest(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseBadRequest(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseBadRequest(..., request.$W, ...)
    - pattern: return django.http.HttpResponseBadRequest(..., request.$W, ...)
- id: python.django.security.injection.request-data-write.request-data-write
  message: Found user-controlled request data passed into '.write(...)'. This could
    be dangerous if a malicious actor is able to control data into sensitive files.
    For example, a malicious actor could force rolling of critical log files, or cause
    a denial-of-service by using up available disk space. Instead, ensure that request
    data is properly escaped or sanitized.
  metadata:
    cwe:
    - 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - django
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.request-data-write.request-data-write
    shortlink: https://sg.run/0Q6j
    semgrep.dev:
      rule:
        rule_id: ReUg5z
        version_id: 0bT64G
        url: https://semgrep.dev/playground/r/0bT64G/python.django.security.injection.request-data-write.request-data-write
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: $F.write(..., request.$W.get(...), ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W.get(...)
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W.get(...), ...)
  - pattern: return $F.write(..., request.$W.get(...), ...)
  - pattern: $F.write(..., request.$W(...), ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W(...)
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W(...), ...)
  - pattern: return $F.write(..., request.$W(...), ...)
  - pattern: $F.write(..., request.$W[...], ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W[...]
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W[...], ...)
  - pattern: return $F.write(..., request.$W[...], ...)
  - pattern: $F.write(..., request.$W, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., $DATA, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., $B.$C(..., $DATA, ...), ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = $B.$C(..., $DATA, ...)
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., $STR % $DATA, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = $STR % $DATA
      ...
      $F.write(..., $INTERM, ...)
  - pattern: |
      $DATA = request.$W
      ...
      $F.write(..., f"...{$DATA}...", ...)
  - pattern: |
      $DATA = request.$W
      ...
      $INTERM = f"...{$DATA}..."
      ...
      $F.write(..., $INTERM, ...)
  - pattern: $A = $F.write(..., request.$W, ...)
  - pattern: return $F.write(..., request.$W, ...)
- id: python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where
  message: User-controlled data from a request is passed to 'extra()'. This could
    lead to a SQL injection and therefore protected information could be leaked. Instead,
    use parameterized queries or escape the user-controlled data by using `params`
    and not using quote placeholders in the SQL string.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#.objects.extra
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where
    shortlink: https://sg.run/0Ql5
    semgrep.dev:
      rule:
        rule_id: zdUkx1
        version_id: K3TOp8
        url: https://semgrep.dev/playground/r/K3TOp8/python.django.security.injection.sql.sql-injection-extra.sql-injection-using-extra-where
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W.get(...),
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W.get(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W.get(...)}...",
        ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...],
        ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W.get(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W(...),
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W(...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W(...)}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W(...), ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W(...), ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W[...],
        ...), ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W[...], ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W[...]}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W[...], ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W[...], ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S.format(..., request.$W, ...),
        ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., $S % request.$W, ...], ...)
    - pattern: $MODEL.objects.extra(..., where=[..., f"...{request.$W}...", ...],
        ...)
    - pattern: $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR.format(..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR % $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., f"...{$DATA}...", ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR + $DATA, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: $A = $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: return $MODEL.objects.extra(..., where=[..., request.$W, ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.extra(..., where=[..., $STR % (..., $DATA, ...), ...], ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.extra(..., where=[..., $INTERM, ...], ...)
- id: python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql
  message: User-controlled data from request is passed to 'RawSQL()'. This could lead
    to a SQL injection and therefore protected information could be leaked. Instead,
    use parameterized queries or escape the user-controlled data by using `params`
    and not using quote placeholders in the SQL string.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.expressions.RawSQL
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql
    shortlink: https://sg.run/Kl4X
    semgrep.dev:
      rule:
        rule_id: pKUOBp
        version_id: qkTK0J
        url: https://semgrep.dev/playground/r/qkTK0J/python.django.security.injection.sql.sql-injection-rawsql.sql-injection-using-rawsql
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W.get(...),
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W.get(...),
        ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W.get(...),
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W(...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W(...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W[...], ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W[...], ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: django.db.models.expressions.RawSQL(..., $S % request.$W, ...)
    - pattern: django.db.models.expressions.RawSQL(..., f"...{request.$W}...", ...)
    - pattern: django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.db.models.expressions.RawSQL(..., $INTERM, ...)
    - pattern: $A = django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: return django.db.models.expressions.RawSQL(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.db.models.expressions.RawSQL($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        django.db.models.expressions.RawSQL($INTERM, ...)
- id: php.lang.security.assert-use.assert-use
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: $_GET
        - pattern: $_POST
        - pattern: $_COOKIE
        - pattern: $_REQUEST
        - pattern: $_SERVER
    - patterns:
      - pattern: |
          Route::$METHOD($ROUTENAME, function(..., $ARG, ...) { ... })
      - focus-metavariable: $ARG
  pattern-sinks:
  - patterns:
    - pattern: assert($SINK, ...);
    - pattern-not: assert("...", ...);
    - pattern: $SINK
  message: Calling assert with user input is equivalent to eval'ing.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    references:
    - https://www.php.net/manual/en/function.assert
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/AssertsSniff.php
    category: security
    technology:
    - php
    confidence: HIGH
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.assert-use.assert-use
    shortlink: https://sg.run/3xXW
    semgrep.dev:
      rule:
        rule_id: DbUpjk
        version_id: RGTBrd
        url: https://semgrep.dev/playground/r/RGTBrd/php.lang.security.assert-use.assert-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.backticks-use.backticks-use
  pattern: '`...`;'
  message: Backticks use may lead to command injection vulnerabilities.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    references:
    - https://www.php.net/manual/en/language.operators.execution.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/BackticksSniff.php
    category: security
    technology:
    - php
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.backticks-use.backticks-use
    shortlink: https://sg.run/4xj9
    semgrep.dev:
      rule:
        rule_id: WAUow7
        version_id: DkT3v4
        url: https://semgrep.dev/playground/r/DkT3v4/php.lang.security.backticks-use.backticks-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off
  patterns:
  - pattern-either:
    - pattern: |
        $ARG = $IS_VERIFIED;
        ...
        curl_setopt(..., CURLOPT_SSL_VERIFYPEER, $ARG);
    - pattern: curl_setopt(..., CURLOPT_SSL_VERIFYPEER, $IS_VERIFIED)
  - metavariable-regex:
      metavariable: $IS_VERIFIED
      regex: 0|false|null
  message: SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER=
    $IS_VERIFIED)
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/
    category: security
    technology:
    - php
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off
    shortlink: https://sg.run/PJqv
    semgrep.dev:
      rule:
        rule_id: 0oU5Xg
        version_id: WrTkjA
        url: https://semgrep.dev/playground/r/WrTkjA/php.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.eval-use.eval-use
  patterns:
  - pattern: eval(...);
  - pattern-not: eval('...');
  message: Evaluating non-constant commands. This can lead to command injection.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    references:
    - https://www.php.net/manual/en/function.eval
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php
    category: security
    technology:
    - php
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.eval-use.eval-use
    shortlink: https://sg.run/J9AP
    semgrep.dev:
      rule:
        rule_id: KxUbX3
        version_id: K3TPQZ
        url: https://semgrep.dev/playground/r/K3TPQZ/php.lang.security.eval-use.eval-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.exec-use.exec-use
  patterns:
  - pattern: $FUNC(...);
  - pattern-not: $FUNC('...', ...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: exec|passthru|proc_open|popen|shell_exec|system|pcntl_exec
  message: Executing non-constant commands. This can lead to command injection.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    references:
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/SystemExecFunctionsSniff.php
    category: security
    technology:
    - php
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.exec-use.exec-use
    shortlink: https://sg.run/5Q1j
    semgrep.dev:
      rule:
        rule_id: qNUjye
        version_id: qkT9eG
        url: https://semgrep.dev/playground/r/qkT9eG/php.lang.security.exec-use.exec-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.ftp-use.ftp-use
  patterns:
  - pattern: $FUNC(...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: ftp_.+
  message: FTP allows for unencrypted file transfers. Consider using an encrypted
    alternative.
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.php.net/manual/en/intro.ftp.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/FringeFunctionsSniff.php
    category: security
    technology:
    - php
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.ftp-use.ftp-use
    shortlink: https://sg.run/RoYN
    semgrep.dev:
      rule:
        rule_id: PeUZyE
        version_id: YDTzOL
        url: https://semgrep.dev/playground/r/YDTzOL/php.lang.security.ftp-use.ftp-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.mb-ereg-replace-eval.mb-ereg-replace-eval
  patterns:
  - pattern: mb_ereg_replace($PATTERN, $REPL, $STR, $OPTIONS);
  - pattern-not: mb_ereg_replace($PATTERN, $REPL, $STR, "...");
  message: Calling mb_ereg_replace with user input in the options can lead to arbitrary
    code execution. The eval modifier (`e`) evaluates the replacement argument as
    code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    references:
    - https://www.php.net/manual/en/function.mb-ereg-replace.php
    - https://www.php.net/manual/en/function.mb-regex-set-options.php
    category: security
    technology:
    - php
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.mb-ereg-replace-eval.mb-ereg-replace-eval
    shortlink: https://sg.run/AvdB
    semgrep.dev:
      rule:
        rule_id: JDUyj4
        version_id: jQTLNx
        url: https://semgrep.dev/playground/r/jQTLNx/php.lang.security.mb-ereg-replace-eval.mb-ereg-replace-eval
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.mcrypt-use.mcrypt-use
  patterns:
  - pattern: $FUNC(...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: (mcrypt_|mdecrypt_).+
  message: Mcrypt functionality has been deprecated and/or removed in recent PHP versions.
    Consider using Sodium or OpenSSL.
  metadata:
    cwe:
    - 'CWE-676: Use of Potentially Dangerous Function'
    references:
    - https://www.php.net/manual/en/intro.mcrypt.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/CryptoFunctionsSniff.php
    category: security
    technology:
    - php
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.mcrypt-use.mcrypt-use
    shortlink: https://sg.run/BkZR
    semgrep.dev:
      rule:
        rule_id: 5rUOzK
        version_id: 1QT0k9
        url: https://semgrep.dev/playground/r/1QT0k9/php.lang.security.mcrypt-use.mcrypt-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: php.lang.security.md5-loose-equality.md5-loose-equality
  patterns:
  - pattern-either:
    - pattern: $X == $FUNC(...)
    - pattern: $FUNC(...) == $X
    - pattern: $FUNC(...) == $FUNC(...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: md5|md5_file
  message: Make sure comparisons involving md5 values are strict (use `===` not `==`)
    to avoid type juggling issues
  metadata:
    cwe:
    - 'CWE-697: Incorrect Comparison'
    references:
    - https://www.php.net/manual/en/types.comparisons.php
    - https://www.whitehatsec.com/blog/magic-hashes/
    category: security
    technology:
    - php
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.md5-loose-equality.md5-loose-equality
    shortlink: https://sg.run/Do4G
    semgrep.dev:
      rule:
        rule_id: GdU7RO
        version_id: 9lTEXj
        url: https://semgrep.dev/playground/r/9lTEXj/php.lang.security.md5-loose-equality.md5-loose-equality
        origin: community
  languages:
  - php
  severity: ERROR
- id: python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
  patterns:
  - pattern: |
      $C.__annotations__[$NAME] = $X
  - pattern-not: |
      $C.__annotations__[$NAME] = "..."
  - pattern-not: |
      $C.__annotations__[$NAME] = typing.$Y
  - metavariable-regex:
      metavariable: $X
      regex: (?!(int|float|complex|list|tuple|range|str|bytes|bytearray|memoryview|set|frozenset|dict))
  message: Annotations passed to `typing.get_type_hints` are evaluated in `globals`
    and `locals` namespaces. Make sure that no arbitrary value can be written as the
    annotation and passed to `typing.get_type_hints` function.
  severity: INFO
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    references:
    - https://docs.python.org/3/library/typing.html#typing.get_type_hints
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
    shortlink: https://sg.run/8R6J
    semgrep.dev:
      rule:
        rule_id: 9AUkR3
        version_id: DkTeQP
        url: https://semgrep.dev/playground/r/DkTeQP/python.lang.security.audit.dangerous-annotations-usage.dangerous-annotations-usage
        origin: community
  languages:
  - python
- id: python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation
  patterns:
  - pattern-either:
    - pattern: urllib3.PoolManager(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.ProxyManager(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.connectionpool.HTTPSConnectionPool(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.connection_from_url(..., cert_reqs=$REQS, ...)
    - pattern: urllib3.proxy_from_url(..., cert_reqs=$REQS, ...)
    - pattern: $CONTEXT.wrap_socket(..., cert_reqs=$REQS, ...)
    - pattern: ssl.wrap_socket(..., cert_reqs=$REQS, ...)
  - metavariable-regex:
      metavariable: $REQS
      regex: (NONE|CERT_NONE|CERT_OPTIONAL|ssl\.CERT_NONE|ssl\.CERT_OPTIONAL|\'NONE\'|\"NONE\"|\'OPTIONAL\'|\"OPTIONAL\")
  message: certificate verification explicitly disabled, insecure connections possible
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - python
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation
    shortlink: https://sg.run/b7yp
    semgrep.dev:
      rule:
        rule_id: eqU87k
        version_id: GxTWwe
        url: https://semgrep.dev/playground/r/GxTWwe/python.lang.security.audit.network.disabled-cert-validation.disabled-cert-validation
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
  patterns:
  - pattern-not: urllib.$W("...")
  - pattern-not: urllib.request.$W("...")
  - pattern-not: $OPENER.$W("...")
  - pattern-either:
    - pattern: urllib.urlopen(...)
    - pattern: urllib.request.urlopen(...)
    - pattern: urllib.urlretrieve(...)
    - pattern: urllib.request.urlretrieve(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $OPENER = urllib.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.URLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.FancyURLopener(...)
            ...
        - pattern-inside: |
            $OPENER = urllib.request.FancyURLopener(...)
            ...
      - pattern-either:
        - pattern: $OPENER.open(...)
        - pattern: $OPENER.retrieve(...)
  message: Detected a dynamic value being used with urllib. urllib supports 'file://'
    schemes, so a dynamic value controlled by a malicious actor may allow them to
    read arbitrary files. Audit uses of urllib calls to ensure user data cannot control
    the URLs, or consider using the 'requests' library instead.
  metadata:
    cwe:
    - 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    owasp: A01:2017 - Injection
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/blacklists/calls.py#L163
    bandit-code: B310
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dynamic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
    category: security
    technology:
    - python
    references:
    - https://cwe.mitre.org/data/definitions/939.html
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
    shortlink: https://sg.run/dKZZ
    semgrep.dev:
      rule:
        rule_id: 8GUj22
        version_id: X0T0J5
        url: https://semgrep.dev/playground/r/X0T0J5/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected
        origin: community
  languages:
  - python
  severity: WARNING
- id: typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust
  message: Detected the use of `$TRUST`. This can introduce a Cross-Site-Scripting
    (XSS) vulnerability if this comes from user-provided input. If you have to use
    `$TRUST`, ensure it does not come from user-input or use the appropriate prevention
    mechanism e.g. input validation or sanitization depending on the context.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://angular.io/api/platform-browser/DomSanitizer
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    confidence: MEDIUM
    category: security
    technology:
    - angular
    - browser
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    source: https://semgrep.dev/r/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust
    shortlink: https://sg.run/KWxP
    semgrep.dev:
      rule:
        rule_id: oqUzgA
        version_id: WrTA1W
        url: https://semgrep.dev/playground/r/WrTA1W/typescript.angular.security.audit.angular-domsanitizer.angular-bypasssecuritytrust
        origin: community
  languages:
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function ...({..., $X: string, ...}) { ... }
      - pattern-inside: |
          function ...(..., $X: string, ...) { ... }
    - focus-metavariable: $X
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $X.$TRUST($Y)
    - focus-metavariable: $Y
    - pattern-not: |
        $X.$TRUST(`...`)
    - pattern-not: |
        $X.$TRUST("...")
    - metavariable-regex:
        metavariable: $TRUST
        regex: (bypassSecurityTrustHtml|bypassSecurityTrustStyle|bypassSecurityTrustScript|bypassSecurityTrustUrl|bypassSecurityTrustResourceUrl)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern: sanitizer.sanitize(...)
    - pattern-not: sanitizer.sanitize(SecurityContext.NONE, ...);
- id: typescript.react.security.audit.react-http-leak.react-http-leak
  message: this rule has been deprecated.
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    deprecated: true
    references:
    - https://github.com/cure53/HTTPLeaks
    category: security
    technology:
    - react
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-http-leak.react-http-leak
    shortlink: https://sg.run/kLbX
    semgrep.dev:
      rule:
        rule_id: v8U51n
        version_id: yeTQ39
        url: https://semgrep.dev/playground/r/yeTQ39/typescript.react.security.audit.react-http-leak.react-http-leak
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled
  pattern: $MODEL.new(params[...], ..., :without_protection => true, ...)
  message: Mass assignment protection disabled for '$MODEL'. This could permit assignment
    to sensitive model fields without intention. Instead, use 'attr_accessible' for
    the model or disable mass assigment using 'config.active_record.whitelist_attributes
    = true'. ':without_protection => true' must be removed for this to take effect.
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/mass_assignment/index.markdown
    category: security
    technology:
    - ruby
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled
    shortlink: https://sg.run/2byz
    semgrep.dev:
      rule:
        rule_id: yyUvkJ
        version_id: d6Tnne
        url: https://semgrep.dev/playground/r/d6Tnne/ruby.lang.security.mass-assignment-protection-disabled.mass-assignment-protection-disabled
        origin: community
  severity: WARNING
  languages:
  - ruby
- id: ruby.rails.security.audit.xss.templates.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need to do this, use `escape_javascript`
    or its alias, `j`. However, this will not protect from XSS in all circumstances;
    see the references for more information. Consider placing this value in the HTML
    portion (outside of a script tag).
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
    - https://www.youtube.com/watch?v=yYTkLUEdIyE
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    category: security
    technology:
    - rails
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.var-in-script-tag.var-in-script-tag
    shortlink: https://sg.run/58r6
    semgrep.dev:
      rule:
        rule_id: DbUW6B
        version_id: O9T4rE
        url: https://semgrep.dev/playground/r/O9T4rE/ruby.rails.security.audit.xss.templates.var-in-script-tag.var-in-script-tag
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not: <%= j ... >
  - pattern-not: <%= escape_javascript ... >
  - pattern: <%= ... >
- id: terraform.lang.security.s3-cors-all-origins.all-origins-allowed
  patterns:
  - pattern-inside: cors_rule { ... }
  - pattern: allowed_origins = ["*"]
  languages:
  - hcl
  severity: WARNING
  message: CORS rule on bucket permits any origin
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#using-cors
    cwe:
    - 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A05:2021 - Security Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.s3-cors-all-origins.all-origins-allowed
    shortlink: https://sg.run/DJb2
    semgrep.dev:
      rule:
        rule_id: lBUd4g
        version_id: 0bTnWx
        url: https://semgrep.dev/playground/r/0bTnWx/terraform.lang.security.s3-cors-all-origins.all-origins-allowed
        origin: community
- id: terraform.lang.security.s3-public-read-bucket.s3-public-read-bucket
  patterns:
  - pattern-either:
    - pattern: acl = "public-read"
    - pattern: acl = "authenticated-read"
  - pattern-not-inside: |
      resource "aws_s3_bucket" "..." {
        ...
        website { ... }
        ...
      }
  languages:
  - hcl
  severity: WARNING
  message: S3 bucket with public read access detected.
  metadata:
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.s3-public-read-bucket.s3-public-read-bucket
    shortlink: https://sg.run/WgAy
    semgrep.dev:
      rule:
        rule_id: YGUrp5
        version_id: K3TxNv
        url: https://semgrep.dev/playground/r/K3TxNv/terraform.lang.security.s3-public-read-bucket.s3-public-read-bucket
        origin: community
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING
  message: Hardcoded variable `TESTING` detected. Use environment variables or config
    files instead
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: LOW
    category: security
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING
    shortlink: https://sg.run/ndZ2
    semgrep.dev:
      rule:
        rule_id: 3qUPoy
        version_id: l4TANl
        url: https://semgrep.dev/playground/r/l4TANl/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING
        origin: community
  languages:
  - python
  pattern-either:
  - pattern: $M.config['TESTING'] = True
  - pattern: $M.config['TESTING'] = False
  - pattern: $M.update(TESTING=True, ...)
  - pattern: $M.update(TESTING=False, ...)
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY
  message: Hardcoded variable `SECRET_KEY` detected. Use environment variables or
    config files instead
  severity: ERROR
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: LOW
    category: security
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY
    shortlink: https://sg.run/Ekde
    semgrep.dev:
      rule:
        rule_id: 4bUkX0
        version_id: YDTK86
        url: https://semgrep.dev/playground/r/YDTK86/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY
        origin: community
  languages:
  - python
  pattern-either:
  - pattern: $M.update(SECRET_KEY="=~/.*/")
  - pattern: $M.config['SECRET_KEY'] = "=~/.*/"
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV
  message: Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment
    variable
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: LOW
    category: security
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV
    shortlink: https://sg.run/7oXW
    semgrep.dev:
      rule:
        rule_id: PeUZpr
        version_id: 6xTw0j
        url: https://semgrep.dev/playground/r/6xTw0j/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV
        origin: community
  languages:
  - python
  pattern-either:
  - pattern: $M.update(ENV="=~/^development|production$/")
  - pattern: $M.config['ENV'] = "=~/^development|production$/"
- id: python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG
  message: Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment
    variable
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: LOW
    category: security
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://bento.dev/checks/flask/avoid-hardcoded-config/
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values
    - https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features
    subcategory:
    - audit
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG
    shortlink: https://sg.run/LwPo
    semgrep.dev:
      rule:
        rule_id: JDUyJR
        version_id: o5Tp5z
        url: https://semgrep.dev/playground/r/o5Tp5z/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG
        origin: community
  languages:
  - python
  pattern-either:
  - pattern: $M.update(DEBUG=True)
  - pattern: $M.update(DEBUG=False)
  - pattern: $M.config['DEBUG'] = True
  - pattern: $M.config['DEBUG'] = False
- id: yaml.kubernetes.security.run-as-non-root.run-as-non-root
  patterns:
  - pattern-inside: |
      $SPEC:
        ...
        containers:
          ...
        ...
  - metavariable-regex:
      metavariable: $SPEC
      regex: ^(spec)$
  - pattern-not-inside: |
      spec:
        ...
        securityContext:
          ...
        ...
  - pattern-inside: |
      $SPEC:
        ...
        containers:
          ...
  - pattern-not-inside: |
      $SPEC:
        ...
        containers:
          ...
          - name: $NAME
            image: ...
            ...
            securityContext:
              ...
              runAsNonRoot: $VALUE
  - focus-metavariable: $SPEC
  fix: |
    $SPEC:
      securityContext:
        runAsNonRoot: true #
  message: When running containers in Kubernetes, it's important to ensure that they  are
    properly secured to prevent privilege escalation attacks.  One potential vulnerability
    is when a container is allowed to run  applications as the root user, which could
    allow an attacker to gain  access to sensitive resources. To mitigate this risk,
    it's recommended to  add a `securityContext` to the container, with the parameter
    `runAsNonRoot`  set to `true`. This will ensure that the container runs as a non-root
    user,  limiting the damage that could be caused by any potential attacks. By  adding
    a `securityContext` to the container in your Kubernetes pod, you can  help to
    ensure that your containerized applications are more secure and  less vulnerable
    to privilege escalation attacks.
  metadata:
    references:
    - https://kubernetes.io/blog/2016/08/security-best-practices-kubernetes-deployment/
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-2-set-a-user
    category: security
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    technology:
    - kubernetes
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.run-as-non-root.run-as-non-root
    shortlink: https://sg.run/dgP5
    semgrep.dev:
      rule:
        rule_id: ZqUqeK
        version_id: RGT775
        url: https://semgrep.dev/playground/r/RGT775/yaml.kubernetes.security.run-as-non-root.run-as-non-root
        origin: community
  languages:
  - yaml
  severity: INFO
- id: java.log4j.security.log4j-message-lookup-injection.log4j-message-lookup-injection
  metadata:
    cwe:
    - 'CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream
      Component (''Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://www.lunasec.io/docs/blog/log4j-zero-day/
    references:
    - https://issues.apache.org/jira/browse/LOG4J2-3198
    - https://www.lunasec.io/docs/blog/log4j-zero-day/
    - https://logging.apache.org/log4j/2.x/manual/lookups.html
    category: security
    technology:
    - java
    confidence: LOW
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.log4j.security.log4j-message-lookup-injection.log4j-message-lookup-injection
    shortlink: https://sg.run/eX1Z
    semgrep.dev:
      rule:
        rule_id: 9AUZeQ
        version_id: 0bTn3E
        url: https://semgrep.dev/playground/r/0bTn3E/java.log4j.security.log4j-message-lookup-injection.log4j-message-lookup-injection
        origin: community
  message: Possible Lookup injection into Log4j messages. Lookups provide a way to
    add values to the Log4j messages at arbitrary places. If the message parameter
    contains an attacker controlled string, the attacker could inject arbitrary lookups,
    for instance '${java:runtime}'. This could lead to information disclosure or even
    remote code execution if 'log4j2.formatMsgNoLookups' is disabled. This was disabled
    by default until version 2.15.0.
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public $T $M(...)
  pattern-sinks:
  - patterns:
    - pattern: |
        (org.apache.log4j.Logger $L).$M(...)
  severity: WARNING
  languages:
  - java
- id: java.jedis.secrets.jedis-jedisfactory-hardcoded-password.jedis-jedisfactory-hardcoded-password
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jedis.secrets.jedis-jedisfactory-hardcoded-password.jedis-jedisfactory-hardcoded-password
    shortlink: https://sg.run/p0gg
    semgrep.dev:
      rule:
        rule_id: x8U1DD
        version_id: 0bT3vP
        url: https://semgrep.dev/playground/r/0bT3vP/java.jedis.secrets.jedis-jedisfactory-hardcoded-password.jedis-jedisfactory-hardcoded-password
        origin: pro_rules
  languages:
  - java
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          (redis.clients.jedis.JedisFactory $JEDIS). ... .setPassword("...")
      - pattern: |
          (redis.clients.jedis.ConnectionFactory $JEDIS). ... .setPassword("...")
    - pattern-not: |
        (redis.clients.jedis.JedisFactory $JEDIS). ... .setPassword("")
    - pattern-not: |
        (redis.clients.jedis.ConnectionFactory $JEDIS). ... .setPassword("")
  - patterns:
    - pattern-inside: |
        import redis.clients.jedis.*;
        ...
    - pattern-either:
      - pattern: |
          (JedisFactory $JEDIS). ... .setPassword("...")
      - pattern: |
          (ConnectionFactory $JEDIS). ... .setPassword("...")
    - pattern-not: |
        (JedisFactory $JEDIS). ... .setPassword("")
    - pattern-not: |
        (ConnectionFactory $JEDIS). ... .setPassword("")
  - patterns:
    - pattern-inside: |
        import redis.clients.*;
        ...
    - pattern-either:
      - pattern: |
          (jedis.JedisFactory $JEDIS). ... .setPassword("...")
      - pattern: |
          (jedis.ConnectionFactory $JEDIS). ... .setPassword("...")
    - pattern-not: |
        (jedis.JedisFactory $JEDIS). ... .setPassword("")
    - pattern-not: |
        (jedis.ConnectionFactory $JEDIS). ... .setPassword("")
  - patterns:
    - pattern-inside: |
        import redis.*;
        ...
    - pattern-either:
      - pattern: |
          (clients.jedis.JedisFactory $JEDIS). ... .setPassword("...")
      - pattern: |
          (clients.jedis.ConnectionFactory $JEDIS). ... .setPassword("...")
    - pattern-not: |
        (clients.jedis.JedisFactory $JEDIS). ... .setPassword("")
    - pattern-not: |
        (clients.jedis.ConnectionFactory $JEDIS). ... .setPassword("")
- id: java.jedis.secrets.jedispool-constructor-hardcoded-secret.jedispool-constructor-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jedis.secrets.jedispool-constructor-hardcoded-secret.jedispool-constructor-hardcoded-secret
    shortlink: https://sg.run/23w0
    semgrep.dev:
      rule:
        rule_id: OrUr2q
        version_id: K3TLlq
        url: https://semgrep.dev/playground/r/K3TLlq/java.jedis.secrets.jedispool-constructor-hardcoded-secret.jedispool-constructor-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  options:
    symbolic_propagation: true
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...")
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (boolean $SSL), ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "...", ...)
      - pattern: |
          new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "...")
      - pattern: |
          new redis.clients.jedis.JedisPool((String $HOST), (int $PORT), (String $USER), "...")
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "")
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (boolean $SSL), ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "", ...)
    - pattern-not: |
        new redis.clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "")
    - pattern-not: |
        new redis.clients.jedis.JedisPool((String $HOST), (int $PORT), (String $USER), "")
  - patterns:
    - pattern-inside: |
        import redis.clients.jedis.*;
        ...
    - pattern-either:
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...")
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (boolean $SSL), ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "...", ...)
      - pattern: |
          new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "...")
      - pattern: |
          new JedisPool((String $HOST), (int $PORT), (String $USER), "...")
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "")
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (boolean $SSL), ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "", ...)
    - pattern-not: |
        new JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "")
    - pattern-not: |
        new JedisPool((String $HOST), (int $PORT), (String $USER), "")
  - patterns:
    - pattern-inside: |
        import redis.clients.*;
        ...
    - pattern-either:
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...")
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (boolean $SSL), ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "...", ...)
      - pattern: |
          new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "...")
      - pattern: |
          new jedis.JedisPool((String $HOST), (int $PORT), (String $USER), "...")
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "")
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (boolean $SSL), ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "", ...)
    - pattern-not: |
        new jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "")
    - pattern-not: |
        new jedis.JedisPool((String $HOST), (int $PORT), (String $USER), "")
  - patterns:
    - pattern-inside: |
        import redis.*;
        ...
    - pattern-either:
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "...", (int $DATABASE), ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...")
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (boolean $SSL), ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "...", (int $DATABASE), ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "...", ...)
      - pattern: |
          new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "...")
      - pattern: |
          new clients.jedis.JedisPool((String $HOST), (int $PORT), (String $USER), "...")
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $CTIMEOUT), (int $STIMEOUT), (String $USER), "", (int $DATABASE), ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "")
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (boolean $SSL), ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), "", (int $DATABASE), ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (int $TIMEOUT), (String $USER), "", ...)
    - pattern-not: |
        new clients.jedis.JedisPool($POOLCONFIG, (String $HOST), (int $PORT), (String $USER), "")
    - pattern-not: |
        new clients.jedis.JedisPool((String $HOST), (int $PORT), (String $USER), "")
- id: java.servlets.security.tainted-ldapi-from-http-request-deepsemgrep.tainted-ldapi-from-http-request
  message: Detected input from a HTTPServletRequest going into an LDAP query. This
    could lead to LDAP injection if the input is not properly santized, which could
    result in attackers modifying objects in the LDAP tree structure. Ensure data
    passed to an LDAP query is not controllable or properly sanitize the data.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/LDAP_Injection
    - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/90.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-ldapi-from-http-request-deepsemgrep.tainted-ldapi-from-http-request
    shortlink: https://sg.run/nY2r
    semgrep.dev:
      rule:
        rule_id: 8GULwA
        version_id: PkTGLw
        url: https://semgrep.dev/playground/r/PkTGLw/java.servlets.security.tainted-ldapi-from-http-request-deepsemgrep.tainted-ldapi-from-http-request
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ)
      - patterns:
        - pattern-either:
          - pattern: |
              (HttpServletRequest $REQ).$REQFUNC(...)
          - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
        - metavariable-regex:
            metavariable: $REQFUNC
            regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.naming.directory.InitialDirContext $IDC).search($BASE, $FILTER, ...)
      - pattern: |
          (javax.naming.directory.DirContext $CTX).search($BASE, $FILTER, ...)
      - pattern: "(InitialDirContext $IDC).search($BASE, $FILTER, ...) \n"
      - pattern: |
          (DirContext $CTX).search($BASE, $FILTER, ...)
    - focus-metavariable: $FILTER
    - pattern-not: |
        (javax.naming.directory.InitialDirContext $IDC).search($BASE, "...", ...)
    - pattern-not: |
        (javax.naming.directory.DirContext $CTX).search($BASE, "...", ...)
    - pattern-not: |
        (InitialDirContext $IDC).search($BASE, "...", ...)
    - pattern-not: |
        (DirContext $CTX).search($BASE, "...", ...)
- id: python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - python
    - secrets
    - headers
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token
    shortlink: https://sg.run/B09x
    semgrep.dev:
      rule:
        rule_id: qNUKD4
        version_id: 2KTOno
        url: https://semgrep.dev/playground/r/2KTOno/python.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BEARER'
    - metavariable-pattern:
        metavariable: $BEARER
        language: generic
        patterns:
        - pattern: $HEADER $TOKEN
        - metavariable-regex:
            metavariable: $HEADER
            regex: (Bearer|bearer|token|Token)
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (eyJhbGciOi.*)
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          {..., 'Authorization': $SINK, ...}
      - pattern: |
          {..., 'authorization': $SINK, ...}
      - pattern: |
          $OBJ['Authorization'] = $SINK
      - pattern: |
          $OBJ['authorization'] = $SINK
    - focus-metavariable: $SINK
- id: python.redis.python-redis-hardcoded-uri.python-redis-hardcoded-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.redis.python-redis-hardcoded-uri.python-redis-hardcoded-uri
    shortlink: https://sg.run/01RB
    semgrep.dev:
      rule:
        rule_id: JDUZXz
        version_id: WrTn57
        url: https://semgrep.dev/playground/r/WrTn57/python.redis.python-redis-hardcoded-uri.python-redis-hardcoded-uri
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: (redis|rediss)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
    - patterns:
      - pattern: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: unix://\S.*&password=(?!<.*>)([^@]*).*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: redis.Redis.from_url($SINK,...)
      - pattern: redis.ConnectionPool.from_url($SINK,...)
    - focus-metavariable: $SINK
- id: python.requests.python-requests-empty-password.python-requests-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - nosql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.requests.python-requests-empty-password.python-requests-empty-password
    shortlink: https://sg.run/K2PL
    semgrep.dev:
      rule:
        rule_id: 5rUYZq
        version_id: 0bT3kg
        url: https://semgrep.dev/playground/r/0bT3kg/python.requests.python-requests-empty-password.python-requests-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: requests.auth.HTTPBasicAuth($USER,"",...)
    - pattern: requests.auth.HTTPDigestAuth($USER,"",...)
    - pattern: requests.auth.HTTPProxyAuth($USER,"",...)
- id: python.requests.python-requests-hardcoded-auth.python-requests-hardcoded-auth
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - requests
    - auth
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.requests.python-requests-hardcoded-auth.python-requests-hardcoded-auth
    shortlink: https://sg.run/4gW9
    semgrep.dev:
      rule:
        rule_id: GdUW1l
        version_id: K3TL93
        url: https://semgrep.dev/playground/r/K3TL93/python.requests.python-requests-hardcoded-auth.python-requests-hardcoded-auth
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        ($X, "...")
    - pattern-not: |
        ($X, "")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: requests.$METHOD(..., auth=$SINK,...)
    - focus-metavariable: $SINK
- id: python.requests.python-requests-hardcoded-secret.python-requests-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - nosql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.requests.python-requests-hardcoded-secret.python-requests-hardcoded-secret
    shortlink: https://sg.run/PGAv
    semgrep.dev:
      rule:
        rule_id: ReUwyn
        version_id: qkTwge
        url: https://semgrep.dev/playground/r/qkTwge/python.requests.python-requests-hardcoded-secret.python-requests-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: requests.auth.HTTPBasicAuth($USER,"...",...)
    - pattern: requests.auth.HTTPDigestAuth($USER,"...",...)
    - pattern: requests.auth.HTTPProxyAuth($USER,"...",...)
  - pattern-not: requests.auth.HTTPBasicAuth($USER,"",...)
  - pattern-not: requests.auth.HTTPDigestAuth($USER,"",...)
  - pattern-not: requests.auth.HTTPProxyAuth($USER,"",...)
- id: python.tormysql.python-tormysql-empty-password.python-tormysql-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymsql
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.tormysql.python-tormysql-empty-password.python-tormysql-empty-password
    shortlink: https://sg.run/4gEz
    semgrep.dev:
      rule:
        rule_id: JDUZxJ
        version_id: 6xTX7k
        url: https://semgrep.dev/playground/r/6xTX7k/python.tormysql.python-tormysql-empty-password.python-tormysql-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: tormysql.ConnectionPool(..., password="",...)
    - pattern: tormysql.ConnectionPool(..., passwd="",...)
- id: python.webrepl.python-webrepl-empty-password.python-webrepl-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - webrepl
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.webrepl.python-webrepl-empty-password.python-webrepl-empty-password
    shortlink: https://sg.run/PGlW
    semgrep.dev:
      rule:
        rule_id: 5rUY16
        version_id: pZTDgv
        url: https://semgrep.dev/playground/r/pZTDgv/python.webrepl.python-webrepl-empty-password.python-webrepl-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: webrepl.start(...,password="",...)
- id: javascript.express.express-fs-filename.express-fs-filename
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the file
    path which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    technology:
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.express-fs-filename.express-fs-filename
    shortlink: https://sg.run/0B9W
    semgrep.dev:
      rule:
        rule_id: kxUzPO
        version_id: 6xTXkD
        url: https://semgrep.dev/playground/r/6xTXkD/javascript.express.express-fs-filename.express-fs-filename
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) => {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $FS = require('fs')
          ...
      - pattern-inside: |
          $FS = require('fs/promises')
          ...
      - pattern-inside: |
          import * as $FS from 'fs'
          ...
      - pattern-inside: |
          import $FS from 'fs'
          ...
      - pattern-inside: |
          import * as $FS from 'fs/promises'
          ...
      - pattern-inside: |
          import $FS from 'fs/promises'
          ...
    - pattern-not: $FS. ... .$METHOD("...", ...)
    - pattern-either:
      - pattern: $FS. ... .access($FILE,...)
      - pattern: $FS. ... .appendFile($FILE,...)
      - pattern: $FS. ... .chmod($FILE,...)
      - pattern: $FS. ... .chown($FILE,...)
      - pattern: $FS. ... .close($FILE,...)
      - pattern: $FS. ... .copyFile($FILE,...)
      - pattern: $FS. ... .copyFile($SMTH, $FILE,...)
      - pattern: $FS. ... .cp($FILE, ...)
      - pattern: $FS. ... .cp($SMTH, $FILE, ...)
      - pattern: $FS. ... .createReadStream($FILE,...)
      - pattern: $FS. ... .createWriteStream($FILE,...)
      - pattern: $FS. ... .exists($FILE, ...)
      - pattern: $FS. ... .fchmod($FILE, ...)
      - pattern: $FS. ... .fchown($FILE, ...)
      - pattern: $FS. ... .fdatasync($FILE, ...)
      - pattern: $FS. ... .fstat($FILE, ...)
      - pattern: $FS. ... .fsync($FILE, ...)
      - pattern: $FS. ... .ftruncate($FILE, ...)
      - pattern: $FS. ... .futimes($FILE, ...)
      - pattern: $FS. ... .lchmod($FILE, ...)
      - pattern: $FS. ... .lchown($FILE, ...)
      - pattern: $FS. ... .lutimes($FILE, ...)
      - pattern: $FS. ... .link($FILE, ...)
      - pattern: $FS. ... .link($SMTH, $FILE, ...)
      - pattern: $FS. ... .lstat($FILE, ...)
      - pattern: $FS. ... .mkdir($FILE, ...)
      - pattern: $FS. ... .mkdtemp($FILE, ...)
      - pattern: $FS. ... .open($FILE, ...)
      - pattern: $FS. ... .opendir($FILE, ...)
      - pattern: $FS. ... .read($FILE, ...)
      - pattern: $FS. ... .read($FILE, ...)
      - pattern: $FS. ... .readdir($FILE, ...)
      - pattern: $FS. ... .readFile($FILE, ...)
      - pattern: $FS. ... .readlink($FILE, ...)
      - pattern: $FS. ... .readv($FILE, ...)
      - pattern: $FS. ... .realpath($FILE, ...)
      - pattern: $FS. ... .realpath.native($FILE, ...)
      - pattern: $FS. ... .rename($FILE, ...)
      - pattern: $FS. ... .rename($SMTH, $FILE, ...)
      - pattern: $FS. ... .rmdir($FILE, ...)
      - pattern: $FS. ... .rm($FILE, ...)
      - pattern: $FS. ... .stat($FILE, ...)
      - pattern: $FS. ... .symlink($SMTH, $FILE, ...)
      - pattern: $FS. ... .symlink($FILE, ...)
      - pattern: $FS. ... .truncate($FILE, ...)
      - pattern: $FS. ... .unlink($FILE, ...)
      - pattern: $FS. ... .unwatchFile($FILE, ...)
      - pattern: $FS. ... .utimes($FILE, ...)
      - pattern: $FS. ... .watch($FILE, ...)
      - pattern: $FS. ... .watchFile($FILE, ...)
      - pattern: $FS. ... .write($FILE, ...)
      - pattern: $FS. ... .writeFile($FILE, ...)
      - pattern: $FS. ... .writev($FILE, ...)
      - pattern: $FS. ... .accessSync($FILE, ...)
      - pattern: $FS. ... .appendFileSync($FILE, ...)
      - pattern: $FS. ... .chmodSync($FILE, ...)
      - pattern: $FS. ... .chownSync($FILE, ...)
      - pattern: $FS. ... .closeSync($FILE, ...)
      - pattern: $FS. ... .copyFileSync($FILE, ...)
      - pattern: $FS. ... .copyFileSync($SMTH, $FILE, ...)
      - pattern: $FS. ... .cpSync($FILE, ...)
      - pattern: $FS. ... .cpSync($SMTH, $FILE, ...)
      - pattern: $FS. ... .existsSync($FILE, ...)
      - pattern: $FS. ... .fchmodSync($FILE, ...)
      - pattern: $FS. ... .fchownSync($FILE, ...)
      - pattern: $FS. ... .fdatasyncSync($FILE, ...)
      - pattern: $FS. ... .fstatSync($FILE, ...)
      - pattern: $FS. ... .fsyncSync($FILE, ...)
      - pattern: $FS. ... .ftruncateSync($FILE, ...)
      - pattern: $FS. ... .futimesSync($FILE, ...)
      - pattern: $FS. ... .lchmodSync($FILE, ...)
      - pattern: $FS. ... .lchownSync($FILE, ...)
      - pattern: $FS. ... .lutimesSync($FILE, ...)
      - pattern: $FS. ... .linkSync($FILE, ...)
      - pattern: $FS. ... .linkSync($SMTH, $FILE, ...)
      - pattern: $FS. ... .lstatSync($FILE, ...)
      - pattern: $FS. ... .mkdirSync($FILE, ...)
      - pattern: $FS. ... .mkdtempSync($FILE, ...)
      - pattern: $FS. ... .opendirSync($FILE, ...)
      - pattern: $FS. ... .openSync($FILE, ...)
      - pattern: $FS. ... .readdirSync($FILE, ...)
      - pattern: $FS. ... .readFileSync($FILE, ...)
      - pattern: $FS. ... .readlinkSync($FILE, ...)
      - pattern: $FS. ... .readSync($FILE, ...)
      - pattern: $FS. ... .readSync($FILE, ...)
      - pattern: $FS. ... .readvSync($FILE, ...)
      - pattern: $FS. ... .realpathync($FILE, ...)
      - pattern: $FS. ... .realpathSync.native($FILE, ...)
      - pattern: $FS. ... .renameSync($FILE, ...)
      - pattern: $FS. ... .renameSync($SMTH, $FILE, ...)
      - pattern: $FS. ... .rmdirSync($FILE, ...)
      - pattern: $FS. ... .rmSync($FILE, ...)
      - pattern: $FS. ... .statSync($FILE, ...)
      - pattern: $FS. ... .symlinkSync($FILE, ...)
      - pattern: $FS. ... .symlinkSync($SMTH, $FILE, ...)
      - pattern: $FS. ... .truncateSync($FILE, ...)
      - pattern: $FS. ... .unlinkSync($FILE, ...)
      - pattern: $FS. ... .utimesSync($FILE, ...)
      - pattern: $FS. ... .writeFileSync($FILE, ...)
      - pattern: $FS. ... .writeSync($FILE, ...)
      - pattern: $FS. ... .writevSync($FILE, ...)
    - focus-metavariable: $FILE
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import 'fs'
          ...
      - pattern-inside: |
          import 'fs/promises'
          ...
    - pattern-not: $METHOD("...", ...)
    - pattern-either:
      - pattern: access($FILE,...)
      - pattern: appendFile($FILE,...)
      - pattern: chmod($FILE,...)
      - pattern: chown($FILE,...)
      - pattern: close($FILE,...)
      - pattern: copyFile($FILE,...)
      - pattern: copyFile($SMTH, $FILE,...)
      - pattern: cp($FILE, ...)
      - pattern: cp($SMTH, $FILE, ...)
      - pattern: createReadStream($FILE,...)
      - pattern: createWriteStream($FILE,...)
      - pattern: exists($FILE, ...)
      - pattern: fchmod($FILE, ...)
      - pattern: fchown($FILE, ...)
      - pattern: fdatasync($FILE, ...)
      - pattern: fstat($FILE, ...)
      - pattern: fsync($FILE, ...)
      - pattern: ftruncate($FILE, ...)
      - pattern: futimes($FILE, ...)
      - pattern: lchmod($FILE, ...)
      - pattern: lchown($FILE, ...)
      - pattern: lutimes($FILE, ...)
      - pattern: link($FILE, ...)
      - pattern: link($SMTH, $FILE, ...)
      - pattern: lstat($FILE, ...)
      - pattern: mkdir($FILE, ...)
      - pattern: mkdtemp($FILE, ...)
      - pattern: open($FILE, ...)
      - pattern: opendir($FILE, ...)
      - pattern: read($FILE, ...)
      - pattern: read($FILE, ...)
      - pattern: readdir($FILE, ...)
      - pattern: readFile($FILE, ...)
      - pattern: readlink($FILE, ...)
      - pattern: readv($FILE, ...)
      - pattern: realpath($FILE, ...)
      - pattern: realpath.native($FILE, ...)
      - pattern: rename($FILE, ...)
      - pattern: rename($SMTH, $FILE, ...)
      - pattern: rmdir($FILE, ...)
      - pattern: rm($FILE, ...)
      - pattern: stat($FILE, ...)
      - pattern: symlink($SMTH, $FILE, ...)
      - pattern: symlink($FILE, ...)
      - pattern: truncate($FILE, ...)
      - pattern: unlink($FILE, ...)
      - pattern: unwatchFile($FILE, ...)
      - pattern: utimes($FILE, ...)
      - pattern: watch($FILE, ...)
      - pattern: watchFile($FILE, ...)
      - pattern: write($FILE, ...)
      - pattern: writeFile($FILE, ...)
      - pattern: writev($FILE, ...)
      - pattern: accessSync($FILE, ...)
      - pattern: appendFileSync($FILE, ...)
      - pattern: chmodSync($FILE, ...)
      - pattern: chownSync($FILE, ...)
      - pattern: closeSync($FILE, ...)
      - pattern: copyFileSync($FILE, ...)
      - pattern: copyFileSync($SMTH, $FILE, ...)
      - pattern: cpSync($FILE, ...)
      - pattern: cpSync($SMTH, $FILE, ...)
      - pattern: existsSync($FILE, ...)
      - pattern: fchmodSync($FILE, ...)
      - pattern: fchownSync($FILE, ...)
      - pattern: fdatasyncSync($FILE, ...)
      - pattern: fstatSync($FILE, ...)
      - pattern: fsyncSync($FILE, ...)
      - pattern: ftruncateSync($FILE, ...)
      - pattern: futimesSync($FILE, ...)
      - pattern: lchmodSync($FILE, ...)
      - pattern: lchownSync($FILE, ...)
      - pattern: lutimesSync($FILE, ...)
      - pattern: linkSync($FILE, ...)
      - pattern: linkSync($SMTH, $FILE, ...)
      - pattern: lstatSync($FILE, ...)
      - pattern: mkdirSync($FILE, ...)
      - pattern: mkdtempSync($FILE, ...)
      - pattern: opendirSync($FILE, ...)
      - pattern: openSync($FILE, ...)
      - pattern: readdirSync($FILE, ...)
      - pattern: readFileSync($FILE, ...)
      - pattern: readlinkSync($FILE, ...)
      - pattern: readSync($FILE, ...)
      - pattern: readSync($FILE, ...)
      - pattern: readvSync($FILE, ...)
      - pattern: realpathync($FILE, ...)
      - pattern: realpathSync.native($FILE, ...)
      - pattern: renameSync($FILE, ...)
      - pattern: renameSync($SMTH, $FILE, ...)
      - pattern: rmdirSync($FILE, ...)
      - pattern: rmSync($FILE, ...)
      - pattern: statSync($FILE, ...)
      - pattern: symlinkSync($FILE, ...)
      - pattern: symlinkSync($SMTH, $FILE, ...)
      - pattern: truncateSync($FILE, ...)
      - pattern: unlinkSync($FILE, ...)
      - pattern: utimesSync($FILE, ...)
      - pattern: writeFileSync($FILE, ...)
      - pattern: writeSync($FILE, ...)
      - pattern: writevSync($FILE, ...)
    - focus-metavariable: $FILE
- id: java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
  patterns:
  - pattern-inside: |
      @RequestMapping(...)
      $RETURNTYPE $METHOD(...) { ... }
  - pattern-not-inside: |
      @RequestMapping(..., method = $X, ...)
      $RETURNTYPE $METHOD(...) { ... }
  - pattern: |
      RequestMapping
  message: Detected a method annotated with 'RequestMapping' that does not specify
    the HTTP method. CSRF protections are not enabled for GET, HEAD, TRACE, or OPTIONS,
    and by default all HTTP methods are allowed when the HTTP method is not explicitly
    specified. This means that a method that performs state changes could be vulnerable
    to CSRF attacks. To mitigate, add the 'method' field and specify the HTTP method
    (such as 'RequestMethod.POST').
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING
    references:
    - https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_UNRESTRICTED_REQUEST_MAPPING
    category: security
    technology:
    - spring
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
    shortlink: https://sg.run/2xlq
    semgrep.dev:
      rule:
        rule_id: wdUJ7q
        version_id: BjTG0R
        url: https://semgrep.dev/playground/r/BjTG0R/java.spring.security.unrestricted-request-mapping.unrestricted-request-mapping
        origin: community
  languages:
  - java
- id: java.servlets.security.tainted-ssrf-deepsemgrep-add.tainted-ssrf-deepsemgrep-add
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fssrf~2Fgeneric
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-ssrf-deepsemgrep-add.tainted-ssrf-deepsemgrep-add
    shortlink: https://sg.run/jGXY
    semgrep.dev:
      rule:
        rule_id: v8UJAg
        version_id: jQT5B6
        url: https://semgrep.dev/playground/r/jQT5B6/java.servlets.security.tainted-ssrf-deepsemgrep-add.tainted-ssrf-deepsemgrep-add
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SECCONCAT
    requires: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          $F + $X
      - pattern: |
          String.format(..., $X, ...)
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
  pattern-sinks:
  - requires: INPUT and not SECCONCAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $R = HttpRequest. ... .$FUNC($URL). ... .build();
            ...
            (HttpClient $CLIENT).send($R, ...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(newBuilder|uri)$
      - pattern: |
          $R = new HttpGet($URL);
          ...
          (HttpClient $CLIENT). ... .execute($R, ...);
      - patterns:
        - pattern-either:
          - pattern: |
              $R = new Request.Builder(). ... .url($URL). ... .build();
              ...
              (OkHttpClient $CLIENT).newCall($R).execute(...);
          - patterns:
            - pattern-inside: |
                $R = new Request.Builder(). ... .url($URL). ... .build();
                ...
                $CALL = (OkHttpClient $CLIENT).newCall($R);
                ...
            - pattern: $CALL.execute(...)
      - patterns:
        - pattern: |
            Jsoup.connect($URL). ... .$SOUPFUNC(...);
        - metavariable-regex:
            metavariable: $SOUPFUNC
            regex: ^(execute|get|post)$
      - patterns:
        - pattern-either:
          - pattern: |
              (RestTemplate $REST).$RESTFUNC($URL, ...)
          - pattern: |
              new RestTemplate(...).$RESTFUNC($URL, ...)
        - metavariable-regex:
            metavariable: $RESTFUNC
            regex: ^(exchange|doExecute|execute|getForEntity|getForObject|patchForObject|postForEntity|postForLocation|postForObject|put)$
      - patterns:
        - pattern-either:
          - pattern: |
              WebClient. ... .$URIFUNC($URL). ... .retrieve(...)
          - pattern: |
              (WebClient $CLIENT). ... .$URIFUNC($URL). ... .retrieve(...)
      - patterns:
        - pattern-either:
          - pattern: |
              new URL($URL, ...).$FUNC(...)
          - pattern: |
              (URL $NEW) = new URL($URL, ...);
              ...
              $NEW.$FUNC(...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(openConnection|openStream)$
    - focus-metavariable: $URL
- id: java.servlets.security.tainted-ssrf-deepsemgrep-format.tainted-ssrf-deepsemgrep-format
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fssrf~2Fgeneric
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-ssrf-deepsemgrep-format.tainted-ssrf-deepsemgrep-format
    shortlink: https://sg.run/1lxw
    semgrep.dev:
      rule:
        rule_id: d8UE5X
        version_id: 1QTp2K
        url: https://semgrep.dev/playground/r/1QTp2K/java.servlets.security.tainted-ssrf-deepsemgrep-format.tainted-ssrf-deepsemgrep-format
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SECCONCAT
    requires: INPUT
    patterns:
    - pattern: |
        String.format("$REGEX", $X, ...)
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^((http://)|(https://)|(//))%s.*
    - focus-metavariable: $X
  pattern-sinks:
  - requires: SECCONCAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $R = HttpRequest. ... .$FUNC($URL). ... .build();
            ...
            (HttpClient $CLIENT).send($R, ...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(newBuilder|uri)$
      - pattern: |
          $R = new HttpGet($URL);
          ...
          (HttpClient $CLIENT). ... .execute($R, ...);
      - patterns:
        - pattern: |
            Jsoup.connect($URL). ... .$SOUPFUNC(...);
        - metavariable-regex:
            metavariable: $SOUPFUNC
            regex: ^(execute|get|post)$
      - patterns:
        - pattern-either:
          - pattern: |
              $R = new Request.Builder(). ... .url($URL). ... .build();
              ...
              (OkHttpClient $CLIENT).newCall($R).execute(...);
          - patterns:
            - pattern-inside: |
                $R = new Request.Builder(). ... .url($URL). ... .build();
                ...
                $CALL = (OkHttpClient $CLIENT).newCall($R);
                ...
            - pattern: $CALL.execute(...)
      - patterns:
        - pattern-either:
          - pattern: |
              (RestTemplate $REST).$RESTFUNC($URL, ...)
          - pattern: |
              new RestTemplate(...).$RESTFUNC($URL, ...)
        - metavariable-regex:
            metavariable: $RESTFUNC
            regex: ^(exchange|doExecute|execute|getForEntity|getForObject|patchForObject|postForEntity|postForLocation|postForObject|put)$
      - patterns:
        - pattern-either:
          - pattern: |
              WebClient. ... .$URIFUNC($URL). ... .retrieve(...)
          - pattern: |
              (WebClient $CLIENT). ... .$URIFUNC($URL). ... .retrieve(...)
      - patterns:
        - pattern-either:
          - pattern: |
              new URL($URL, ...).$FUNC(...)
          - pattern: |
              (URL $NEW) = new URL($URL, ...);
              ...
              $NEW.$FUNC(...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(openConnection|openStream)$
    - focus-metavariable: $URL
- id: java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fssrf~2Fgeneric
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD
    technology:
    - java
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add
    shortlink: https://sg.run/dnYZ
    semgrep.dev:
      rule:
        rule_id: JDU4Yg
        version_id: vdT6XX
        url: https://semgrep.dev/playground/r/vdT6XX/java.spring.security.tainted-ssrf-spring-add.tainted-ssrf-spring-add
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SECCONCAT
    requires: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          "...${$X}..."
      - pattern: |
          $F + $X
      - pattern: |
          String.format(..., $X, ...)
    - pattern-not: |
        "${$X}..."
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        "http://${$X}..."
    - pattern-not: |
        "https://${$X}..."
    - pattern-not: |
        "//${$X}..."
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
  pattern-sinks:
  - requires: INPUT and not SECCONCAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $R = HttpRequest. ... .$FUNC($URL). ... .build();
            ...
            (HttpClient $CLIENT).send($R, ...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(newBuilder|uri)$
      - pattern: |
          $R = new HttpGet($URL);
          ...
          (HttpClient $CLIENT). ... .execute($R, ...);
      - patterns:
        - pattern: |
            Jsoup.connect($URL). ... .$SOUPFUNC(...);
        - metavariable-regex:
            metavariable: $SOUPFUNC
            regex: ^(execute|get|post)$
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $R = new Request.Builder(). ... .url($URL). ... .build();
              ...
              (OkHttpClient $CLIENT).newCall($R).execute(...);
          - patterns:
            - pattern-inside: |
                $R = new Request.Builder(). ... .url($URL). ... .build();
                ...
                $CALL = (OkHttpClient $CLIENT).newCall($R);
                ...
            - pattern: $CALL.execute(...)
      - patterns:
        - pattern-either:
          - pattern: |
              (RestTemplate $REST).$RESTFUNC($URL, ...)
          - pattern: |
              new RestTemplate(...).$RESTFUNC($URL, ...)
        - metavariable-regex:
            metavariable: $RESTFUNC
            regex: ^(exchange|doExecute|execute|getForEntity|getForObject|patchForObject|postForEntity|postForLocation|postForObject|put)$
      - patterns:
        - pattern-either:
          - pattern: |
              WebClient. ... .$URIFUNC($URL). ... .retrieve(...)
          - pattern: |
              (WebClient $CLIENT). ... .$URIFUNC($URL). ... .retrieve(...)
        - metavariable-regex:
            metavariable: $URIFUNC
            regex: ^(uri|baseUrl|create)$
      - patterns:
        - pattern-either:
          - pattern: |
              new URL($URL, ...).$FUNC(...)
          - pattern: |
              (URL $NEW) = new URL($URL, ...);
              ...
              $NEW.$FUNC(...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(openConnection|openStream)$
    - focus-metavariable: $URL
  pattern-sanitizers:
  - patterns:
    - pattern: |
        $URLBUILDER. ... .addQueryParameter(..., $PARAM). ...
    - focus-metavariable: $PARAM
- id: java.spring.security.tainted-ssrf-spring-format.tainted-ssrf-spring-format
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fssrf~2Fgeneric
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD
    technology:
    - java
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.tainted-ssrf-spring-format.tainted-ssrf-spring-format
    shortlink: https://sg.run/ZZGD
    semgrep.dev:
      rule:
        rule_id: 5rUx2n
        version_id: d6Tx38
        url: https://semgrep.dev/playground/r/d6Tx38/java.spring.security.tainted-ssrf-spring-format.tainted-ssrf-spring-format
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SECCONCAT
    requires: INPUT
    patterns:
    - pattern: |
        String.format("$REGEX", $X,...)
    - metavariable-regex:
        metavariable: $REGEX
        regex: ^(http://|https://|//)%s.*
    - focus-metavariable: $X
  pattern-sinks:
  - requires: SECCONCAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $R = HttpRequest. ... .$FUNC($URL). ... .build();
            ...
            (HttpClient $CLIENT).send($R, ...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(newBuilder|uri)$
      - pattern: |
          $R = new HttpGet($URL);
          ...
          (HttpClient $CLIENT). ... .execute($R, ...);
      - patterns:
        - pattern: |
            Jsoup.connect($URL). ... .$SOUPFUNC(...);
        - metavariable-regex:
            metavariable: $SOUPFUNC
            regex: ^(execute|get|post)$
      - patterns:
        - pattern-either:
          - pattern: |
              $R = new Request.Builder(). ... .url($URL). ... .build();
              ...
              (OkHttpClient $CLIENT).newCall($R).execute(...);
          - patterns:
            - pattern-inside: |
                $R = new Request.Builder(). ... .url($URL). ... .build();
                ...
                $CALL = (OkHttpClient $CLIENT).newCall($R);
                ...
            - pattern: $CALL.execute(...)
      - patterns:
        - pattern-either:
          - pattern: |
              (RestTemplate $REST).$RESTFUNC($URL, ...)
          - pattern: |
              new RestTemplate(...).$RESTFUNC($URL, ...)
        - metavariable-regex:
            metavariable: $RESTFUNC
            regex: ^(exchange|doExecute|execute|getForEntity|getForObject|patchForObject|postForEntity|postForLocation|postForObject|put)$
      - patterns:
        - pattern-either:
          - pattern: |
              WebClient. ... .$URIFUNC($URL). ... .retrieve(...)
          - pattern: |
              (WebClient $CLIENT). ... .$URIFUNC($URL). ... .retrieve(...)
        - metavariable-regex:
            metavariable: $URIFUNC
            regex: ^(uri|baseUrl|create)$
      - patterns:
        - pattern-either:
          - pattern: |
              new URL($URL, ...).$FUNC(...)
          - pattern: |
              (URL $NEW) = new URL($URL, ...);
              ...
              $NEW.$FUNC(...);
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(openConnection|openStream)$
    - focus-metavariable: $URL
- id: python.django.security.injection.raw-html-format.raw-html-format
  languages:
  - python
  severity: WARNING
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. To be sure this is safe, check that the HTML
    is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which
    will safely render HTML instead.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - django
    references:
    - https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render
    - https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format
    shortlink: https://sg.run/oYj1
    semgrep.dev:
      rule:
        rule_id: 2ZUPER
        version_id: A8Tn65
        url: https://semgrep.dev/playground/r/A8Tn65/python.django.security.injection.raw-html-format.raw-html-format
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: django.utils.html.escape(...)
  pattern-sources:
  - patterns:
    - pattern: request.$ANYTHING
    - pattern-not: request.build_absolute_uri
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$HTMLSTR" % ...'
          - pattern: '"$HTMLSTR".format(...)'
          - pattern: '"$HTMLSTR" + ...'
          - pattern: f"$HTMLSTR{...}..."
      - patterns:
        - pattern-inside: |
            $HTML = "$HTMLSTR"
            ...
        - pattern-either:
          - pattern: $HTML % ...
          - pattern: $HTML.format(...)
          - pattern: $HTML + ...
    - metavariable-pattern:
        metavariable: $HTMLSTR
        language: generic
        pattern: <$TAG ...
- id: java.jdo.datanucleus.secrets.hardcoded-connection-password.hardcoded-connection-password
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    - https://www.datanucleus.org/javadocs/api.jdo/5.0/org/datanucleus/api/jdo/JDOPersistenceManagerFactory.html
    technology:
    - okhttp
    - java
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jdo.datanucleus.secrets.hardcoded-connection-password.hardcoded-connection-password
    shortlink: https://sg.run/lA1y
    semgrep.dev:
      rule:
        rule_id: r6UXJb
        version_id: WrTnkl
        url: https://semgrep.dev/playground/r/WrTnkl/java.jdo.datanucleus.secrets.hardcoded-connection-password.hardcoded-connection-password
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          (org.datanucleus.api.jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (org.datanucleus.api.jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import org.datanucleus.api.jdo.*;
          ...
      - pattern: |
          (JDOPersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (JDOPersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import org.datanucleus.api.*;
          ...
      - pattern: |
          (jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import org.datanucleus.*;
          ...
      - pattern: |
          (api.jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (api.jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import org.*;
          ...
      - pattern: |
          (datanucleus.api.jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (datanucleus.api.jdo.JDOPersistenceManagerFactory $JDO). ... .$SETPASS("");
  - metavariable-regex:
      metavariable: $SETPASS
      regex: ^(setConnectionPassword)$
- id: java.servlets.security.tainted-code-injection-from-http-request-deepsemgrep.tainted-code-injection-from-http-request-deepsemgrep
  message: Passing unsanitized user input to a Script Engine or other means of dynamic
    code evaluation is unsafe. This could lead to code injection with data leakage
    or arbitrary code execution as a result. Avoid this, or use proper sandboxing
    if user code evaluation is intended.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://cwe.mitre.org/data/definitions/95.html
    - https://github.com/github/codeql/tree/main/java/ql/src/Security/CWE/CWE-094
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-code-injection-from-http-request-deepsemgrep.tainted-code-injection-from-http-request-deepsemgrep
    shortlink: https://sg.run/ZYO4
    semgrep.dev:
      rule:
        rule_id: L1Upv5
        version_id: GxTEyo
        url: https://semgrep.dev/playground/r/GxTEyo/java.servlets.security.tainted-code-injection-from-http-request-deepsemgrep.tainted-code-injection-from-http-request-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (ScriptEngine $ENGINE).eval($SCRIPT, ...)
      - pattern: |
          (ExpressionFactory $FACTORY).createMethodExpression($CONTEXT, $SCRIPT, ...)
      - pattern: |
          (ExpressionFactory $FACTORY).createValueExpression($CONTEXT, $SCRIPT, ...)
      - patterns:
        - pattern: |
            (ExpressionFactory $FACTORY).createValueExpression($CONTEXT, $SCRIPT, ...). ... .$FUNCS(...)
        - metavariable-regex:
            metavariable: $FUNCS
            regex: ^(getValue|getType|getValueReference)$
      - patterns:
        - pattern: |
            MVEL.$FUNCS($SCRIPT, ...)
        - metavariable-regex:
            metavariable: $FUNCS
            regex: ^(eval|evalToString|compileExpression|compileSetExpression)$
      - pattern: |
          Velocity.evaluate($CONTEXT, $WRITER, $LOGTAG, $SCRIPT)
      - pattern: |
          (JexlEngine $JEXL).createExpression($SCRIPT, ...)
    - focus-metavariable: $SCRIPT
- id: java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep
  message: Detected input from a HTTPServletRequest going into a session command,
    like `setAttribute`. User input into such a command could lead to an attacker
    inputting malicious code into your session parameters, blurring the line between
    what's trusted and untrusted, and therefore leading to a trust boundary violation.
    This could lead to programmers trusting unvalidated data. Instead, thoroughly
    sanitize user input before passing it into such function calls.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-501: Trust Boundary Violation'
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://cwe.mitre.org/data/definitions/501.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep
    shortlink: https://sg.run/El0B
    semgrep.dev:
      rule:
        rule_id: gxU5Ny
        version_id: DkT0JR
        url: https://semgrep.dev/playground/r/DkT0JR/java.servlets.security.tainted-session-from-http-request-deepsemgrep.tainted-session-from-http-request-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - pattern: (HttpServletRequest $REQ).getSession().$FUNC(...);
- id: java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If the execution of
    OS commands is unavoidable, validate and sanitize the user input, and use safe
    methods for executing the commands. For more information, see [Java command injection
    prevention ](https://semgrep.dev/docs/cheat-sheets/java-command-injection/).
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    - https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection
    - https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-os-command-injection
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Foscmd
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep
    shortlink: https://sg.run/dGW0
    semgrep.dev:
      rule:
        rule_id: 7KUYkp
        version_id: QkTNyB
        url: https://semgrep.dev/playground/r/QkTNyB/java.servlets.security.tainted-cmd-from-http-request-deepsemgrep.tainted-cmd-from-http-request-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (Process $P) = new Process(...);
      - pattern: |
          (ProcessBuilder $PB).command(...);
      - patterns:
        - pattern-either:
          - pattern: |
              (Runtime $R).$EXEC(...);
          - pattern: |
              Runtime.getRuntime(...).$EXEC(...);
        - metavariable-regex:
            metavariable: $EXEC
            regex: ^(exec|loadLibrary|load)$
      - patterns:
        - pattern: |
            (ProcessBuilder $PB).command(...).$ADD(...);
        - metavariable-regex:
            metavariable: $ADD
            regex: ^(add|addAll)$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $BUILDER = new ProcessBuilder(...);
                ...
            - pattern: $BUILDER.start(...);
          - pattern: |
              new ProcessBuilder(...). ... .start(...);
- id: javascript.crypto.weak-symmetric-algorithm.weak-symmetric-algorithm
  message: Detected the use of `$METHOD("$VALUE")` which is considered a weak cryptographic
    algorithm. Where possible, leverage the industry standard recommendation which
    is to use a block cipher such as `AES` with at least `128-bit` strength, an example
    of a secure algorithm is `AES-256-GCM`. If your company has its own guidelines,
    you should follow your company's internal best practices.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    technology:
    - javascript
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.crypto.weak-symmetric-algorithm.weak-symmetric-algorithm
    shortlink: https://sg.run/RxnO
    semgrep.dev:
      rule:
        rule_id: zdU9wD
        version_id: 5PTDWx
        url: https://semgrep.dev/playground/r/5PTDWx/javascript.crypto.weak-symmetric-algorithm.weak-symmetric-algorithm
        origin: pro_rules
  languages:
  - javascript
  - typescript
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $CRYPTO = require('crypto')
            ...
        - pattern-inside: |
            $CRYPTO = require('crypto').$METHOD
            ...
        - pattern-inside: |
            import $CRYPTO from 'crypto'
            ...
        - pattern-inside: |
            import * as $CRYPTO from 'crypto'
            ...
      - pattern-either:
        - pattern: $CRYPTO.$METHOD("$VALUE",...)
        - pattern: $CRYPTO("$VALUE",...)
    - pattern: crypto. ... .$METHOD("$VALUE",...)
  - focus-metavariable: $VALUE
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(createCipheriv|createCipher|createDecipher|createDecipheriv)$
  - metavariable-regex:
      metavariable: $VALUE
      regex: (?i)(^des|^rc2|^rc4|^bf)
- id: javascript.crypto.weak-symmetric-mode.weak-symmetric-mode
  message: Detected the use of `$METHOD("$VALUE")` which is considered a weak cryptographic
    mode. Where possible, leverage the industry standard recommendation which is to
    use a block cipher such as `AES` with at least `128-bit` strength, an example
    of a secure algorithm is `AES-256-GCM`. If your company has its own guidelines,
    you should follow your company's internal best practices.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    technology:
    - javascript
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.crypto.weak-symmetric-mode.weak-symmetric-mode
    shortlink: https://sg.run/ABrp
    semgrep.dev:
      rule:
        rule_id: pKUJd0
        version_id: GxTENb
        url: https://semgrep.dev/playground/r/GxTENb/javascript.crypto.weak-symmetric-mode.weak-symmetric-mode
        origin: pro_rules
  languages:
  - javascript
  - typescript
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $CRYPTO = require('crypto')
            ...
        - pattern-inside: |
            $CRYPTO = require('crypto').$METHOD
            ...
        - pattern-inside: |
            import $CRYPTO from 'crypto'
            ...
        - pattern-inside: |
            import * as $CRYPTO from 'crypto'
            ...
      - pattern-either:
        - pattern: $CRYPTO.$METHOD("$VALUE",...)
        - pattern: $CRYPTO("$VALUE",...)
    - pattern: crypto. ... .$METHOD("$VALUE",...)
  - focus-metavariable: $VALUE
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(createCipheriv|createCipher|createDecipher|createDecipheriv)$
  - metavariable-regex:
      metavariable: $VALUE
      regex: (?i)(.*cbc|.*ecb)$
- id: javascript.crypto.symmetric-hardcoded-key.symmetric-hardcoded-key
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    - github
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.crypto.symmetric-hardcoded-key.symmetric-hardcoded-key
    shortlink: https://sg.run/G38p
    semgrep.dev:
      rule:
        rule_id: oqUP3l
        version_id: 0bT3OP
        url: https://semgrep.dev/playground/r/0bT3OP/javascript.crypto.symmetric-hardcoded-key.symmetric-hardcoded-key
        origin: pro_rules
  languages:
  - javascript
  - typescript
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $CRYPTO = require('crypto')
            ...
        - pattern-inside: |
            $CRYPTO = require('crypto').$METHOD
            ...
        - pattern-inside: |
            import $CRYPTO from 'crypto'
            ...
        - pattern-inside: |
            import * as $CRYPTO from 'crypto'
            ...
      - pattern-either:
        - pattern: $CRYPTO.$METHOD($ALGO,"$PASS",...)
        - pattern: $CRYPTO($ALGO,"$PASS",...)
    - pattern: crypto. ... .$METHOD($ALGO,"$PASS",...)
  - focus-metavariable: $PASS
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(createCipheriv|createCipher|createDecipher|createDecipheriv)$
  - pattern: |
      "..."
  - pattern-not: |
      ""
- id: typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
  message: Detected the use of `$BYPASS` where input comes from `$SN` `$X` value.
    This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from
    user-provided input. If you have to use `$BYPASS`, consider using a sanitization
    library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://angular.io/api/router/ActivatedRoute
    - https://angular.io/api/router/ActivatedRouteSnapshot
    - https://angular.io/api/platform-browser/DomSanitizer
    technology:
    - angular
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
    shortlink: https://sg.run/JpBW
    semgrep.dev:
      rule:
        rule_id: GdUWew
        version_id: l4TODJ
        url: https://semgrep.dev/playground/r/l4TODJ/typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              ($SN: ActivatedRoute).snapshot.$X
          - pattern: |
              ($SN: ActivatedRouteSnapshot). ... .$X
        - metavariable-regex:
            metavariable: $X
            regex: ^(fragment|queryParams|params)$
  - patterns:
    - pattern: |
        ($SN: ActivatedRoute).snapshot.url[$VALUE].$X
    - pattern-not: this.$ROUTE.snapshot.url[$VALUE]
    - metavariable-regex:
        metavariable: $X
        regex: ^(path)$
  - patterns:
    - pattern-inside: |
        ($SN: ActivatedRoute).paramMap.subscribe($X => {
        ...
        })
    - pattern: $X.get('...')
  - patterns:
    - pattern-inside: |
        ($SN: ActivatedRoute).params.subscribe($X => {
        ...
        })
    - pattern: $X
  pattern-sinks:
  - patterns:
    - pattern: |
        ($X: DomSanitizer).$BYPASS($FOO)
    - metavariable-regex:
        metavariable: $BYPASS
        regex: (bypassSecurityTrustHtml|bypassSecurityTrustStyle|bypassSecurityTrustScript|bypassSecurityTrustUrl|bypassSecurityTrustResourceUrl)
    - focus-metavariable: $FOO
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: |
          ($X: DomSanitizer).sanitize(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - patterns:
        - pattern-inside: |
            $VALUE = (...) => $S.sanitize(...)
            ...
        - pattern: $VALUE(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: ruby.mongo.ruby-mongo-hardcoded-uri.ruby-mongo-hardcoded-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mongo
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.mongo.ruby-mongo-hardcoded-uri.ruby-mongo-hardcoded-uri
    shortlink: https://sg.run/D0n2
    semgrep.dev:
      rule:
        rule_id: eqUwol
        version_id: w8Tbgo
        url: https://semgrep.dev/playground/r/w8Tbgo/ruby.mongo.ruby-mongo-hardcoded-uri.ruby-mongo-hardcoded-uri
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "mongo"
        ...
    - pattern: |
        Mongo::Client.new($SINK, ...)
    - focus-metavariable: $SINK
- id: ruby.mongo.ruby-mongo-empty-password.ruby-mongo-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.mongo.ruby-mongo-empty-password.ruby-mongo-empty-password
    shortlink: https://sg.run/ABrg
    semgrep.dev:
      rule:
        rule_id: x8U1gD
        version_id: GxTX9n
        url: https://semgrep.dev/playground/r/GxTX9n/ruby.mongo.ruby-mongo-empty-password.ruby-mongo-empty-password
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-either:
    - pattern: |
        Mongo::Client.new(..., password: "", ...)
    - pattern: |
        $CLIENT.with(..., password: "", ...)
- id: ruby.mongo.ruby-mongo-hardcoded-secret.ruby-mongo-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mongo
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.mongo.ruby-mongo-hardcoded-secret.ruby-mongo-hardcoded-secret
    shortlink: https://sg.run/BDbb
    semgrep.dev:
      rule:
        rule_id: OrUrqq
        version_id: RGTx18
        url: https://semgrep.dev/playground/r/RGTx18/ruby.mongo.ruby-mongo-hardcoded-secret.ruby-mongo-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "mongo"
      ...
  - pattern-either:
    - pattern: |
        Mongo::Client.new(..., password: "...", ...)
    - patterns:
      - pattern: |
          $CLIENT.with(..., password: "...", ...)
      - pattern-inside: |
          $CLIENT = Mongo::Client.new(...)
          ...
  - pattern-not: |
      Mongo::Client.new(..., password: "", ...)
  - pattern-not: |
      $CLIENT.with(..., password: "", ...)
- id: ruby.mysql2.ruby-mysql2-empty-password.ruby-mysql2-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.mysql2.ruby-mysql2-empty-password.ruby-mysql2-empty-password
    shortlink: https://sg.run/Wxny
    semgrep.dev:
      rule:
        rule_id: v8UJwg
        version_id: A8Tlb8
        url: https://semgrep.dev/playground/r/A8Tlb8/ruby.mysql2.ruby-mysql2-empty-password.ruby-mysql2-empty-password
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "mysql2"
      ...
  - pattern: |
      Mysql2::Client.new(..., password: "", ...)
- id: ruby.mysql2.ruby-mysql2-hardcoded-secret.ruby-mysql2-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mysql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.mysql2.ruby-mysql2-hardcoded-secret.ruby-mysql2-hardcoded-secret
    shortlink: https://sg.run/0qDk
    semgrep.dev:
      rule:
        rule_id: d8UE0X
        version_id: BjTL2q
        url: https://semgrep.dev/playground/r/BjTL2q/ruby.mysql2.ruby-mysql2-hardcoded-secret.ruby-mysql2-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "mysql2"
      ...
  - pattern-either:
    - pattern: |
        Mysql2::Client.new(..., password: "...", ...)
  - pattern-not: |
      Mysql2::Client.new(..., password: "", ...)
- id: ruby.octokit.ruby-octokit-hardcoded-secret.ruby-octokit-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - octokit
    - github
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.octokit.ruby-octokit-hardcoded-secret.ruby-octokit-hardcoded-secret
    shortlink: https://sg.run/KznP
    semgrep.dev:
      rule:
        rule_id: ZqUJ9b
        version_id: DkTyzE
        url: https://semgrep.dev/playground/r/DkTyzE/ruby.octokit.ruby-octokit-hardcoded-secret.ruby-octokit-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "octokit"
      ...
  - pattern-either:
    - pattern: |
        Octokit::Client.new(..., :password => "...", ...)
    - pattern: |
        Octokit::Client.new(..., :access_token => "...", ...)
    - pattern: |
        Octokit::Client.new(..., :client_secret => "...",...)
- id: ruby.pg.ruby-pg-empty-password.ruby-pg-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - postgres
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.pg.ruby-pg-empty-password.ruby-pg-empty-password
    shortlink: https://sg.run/q321
    semgrep.dev:
      rule:
        rule_id: nJUlbv
        version_id: WrTnr0
        url: https://semgrep.dev/playground/r/WrTnr0/ruby.pg.ruby-pg-empty-password.ruby-pg-empty-password
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-either:
    - pattern: |
        PG.connect(..., password: "", ...)
    - pattern: |
        PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
    - pattern: |
        PG::Connection.new(..., password: "", ...)
    - pattern: |
        PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
    - pattern: |
        PG::Connection.connect_start(..., password: "", ...)
    - pattern: |
        PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
- id: python.cryptography.security.empty-aes-key.empty-aes-key
  message: Potential empty AES encryption key. Using an empty key in AES encryption
    can result in weak encryption and may allow attackers to easily decrypt sensitive
    data. Ensure that a strong, non-empty key is used for AES encryption.
  patterns:
  - pattern: AES.new("",...)
  languages:
  - python
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    - 'CWE-310: Cryptographic Issues'
    references:
    - https://cwe.mitre.org/data/definitions/327.html
    - https://cwe.mitre.org/data/definitions/310.html
    category: security
    technology:
    - python
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp: A6:2017 misconfiguration
    source: https://semgrep.dev/r/python.cryptography.security.empty-aes-key.empty-aes-key
    shortlink: https://sg.run/zQ9G
    semgrep.dev:
      rule:
        rule_id: OrUADK
        version_id: zyTOjq
        url: https://semgrep.dev/playground/r/zyTOjq/python.cryptography.security.empty-aes-key.empty-aes-key
        origin: community
- id: java.servlets.security.castor-deserialization-deepsemgrep.castor-deserialization-deepsemgrep
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the Castor XML Framework
    unless you explicitly define permissions for types that are allowed to be deserialized
    by `Castor`.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-framework.html
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - xml
    - castor
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.castor-deserialization-deepsemgrep.castor-deserialization-deepsemgrep
    shortlink: https://sg.run/AGyg
    semgrep.dev:
      rule:
        rule_id: 2ZUnLo
        version_id: xyT5LW
        url: https://semgrep.dev/playground/r/xyT5LW/java.servlets.security.castor-deserialization-deepsemgrep.castor-deserialization-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern: (org.exolab.castor.xml.Unmarshaller $U).unmarshal($READER)
- id: java.servlets.security.kryo-deserialization-deepsemgrep.kryo-deserialization-deepsemgrep
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `Kryo` unless you explicitly
    define permissions for types that are allowed to be deserialized by `Kryo`.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://github.com/EsotericSoftware/kryo
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - kryo
    - serialization
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.kryo-deserialization-deepsemgrep.kryo-deserialization-deepsemgrep
    shortlink: https://sg.run/BRyb
    semgrep.dev:
      rule:
        rule_id: X5UGgj
        version_id: O9TbjD
        url: https://semgrep.dev/playground/r/O9TbjD/java.servlets.security.kryo-deserialization-deepsemgrep.kryo-deserialization-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: REG_FALSE
    by-side-effect: true
    patterns:
    - pattern: |
        (Kryo $K).setRegistrationRequired(false)
    - focus-metavariable: $K
  pattern-sinks:
  - requires: USER_INPUT and REG_FALSE
    patterns:
    - pattern-either:
      - pattern: |
          (Kryo $K).readObject(...)
      - pattern: |
          (Kryo $K).readObjectOrNull(...)
  - requires: USER_INPUT
    patterns:
    - pattern: |
        (Kryo $K).readClassAndObject(...)
- id: java.servlets.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `XStream` unless you
    explicitly define permissions for types that are allowed to be deserialized by
    `XStream`.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://x-stream.github.io/security.html
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - xml
    - xstream
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
    shortlink: https://sg.run/D3y2
    semgrep.dev:
      rule:
        rule_id: j2UGQ8
        version_id: vdTRr4
        url: https://semgrep.dev/playground/r/vdTRr4/java.servlets.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: XSTREAM
    pattern: |
      (XStream $X)
  - label: ANYTYPE
    by-side-effect: true
    patterns:
    - pattern: |
        $X.addPermission(AnyTypePermission.ANY)
    - focus-metavariable: $X
  pattern-sinks:
  - requires: USER_INPUT and XSTREAM and ANYTYPE
    patterns:
    - pattern: |
        (XStream $X).fromXML(...)
- id: java.spring.security.castor-deserialization-deepsemgrep.castor-deserialization-deepsemgrep
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the Castor XML Framework
    unless you explicitly define permissions for types that are allowed to be deserialized
    by `Castor`.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://castor-data-binding.github.io/castor/reference-guide/reference/xml/xml-framework.html
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - xml
    - castor
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.castor-deserialization-deepsemgrep.castor-deserialization-deepsemgrep
    shortlink: https://sg.run/W5Wy
    semgrep.dev:
      rule:
        rule_id: 10UJ5B
        version_id: d6TWwK
        url: https://semgrep.dev/playground/r/d6TWwK/java.spring.security.castor-deserialization-deepsemgrep.castor-deserialization-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern: (org.exolab.castor.xml.Unmarshaller $U).unmarshal($READER)
- id: python.lang.deserialization.tainted-pyyaml.tainted-pyyaml
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    PyYAML''s `yaml` module is as powerful as `pickle` and so may call any Python
    function. It is recommended to secure your application by using `yaml.SafeLoader`
    or `yaml.CSafeLoader`.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
    technology:
    - python
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-pyyaml.tainted-pyyaml
    shortlink: https://sg.run/KYgP
    semgrep.dev:
      rule:
        rule_id: KxUArx
        version_id: 8KTZQN
        url: https://semgrep.dev/playground/r/8KTZQN/python.lang.deserialization.tainted-pyyaml.tainted-pyyaml
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - pattern: |
        yaml.$FUNC($SINK, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(scan|parse|compose|compose_all)$
  - patterns:
    - pattern: yaml.$LOADER($SINK)
    - metavariable-regex:
        metavariable: $LOADER
        regex: ^(Loader|BaseLoader|CLoader|CBaseLoader)$
- id: python.lang.deserialization.tainted-ruamel.tainted-ruamel
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Starting from `ruamel.yaml` version 0.15.0 The default loader (`typ=''rt''`) is
    a direct derivative of the safe loader. Before this version, use the optional
    argument `Loader` with value `SafeLoader` or `CSafeLoader`, or use the `safe_load`
    function.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-unsafe-ruamel
    technology:
    - python
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-ruamel.tainted-ruamel
    shortlink: https://sg.run/qQ91
    semgrep.dev:
      rule:
        rule_id: qNUAQ3
        version_id: gETD3r
        url: https://semgrep.dev/playground/r/gETD3r/python.lang.deserialization.tainted-ruamel.tainted-ruamel
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.StreamRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.DatagramRequestHandler, ...):
              ...
      - pattern-either:
        - pattern: self.$PROPERTY
        - pattern: self.$PROPERTY.get(...)
        - pattern: self.$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  - label: TYP_UNSAFE
    pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  pattern-sinks:
  - requires: USER_INPUT
    patterns:
    - pattern: ruamel.yaml.$FUNC($SINK)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.SafeLoader, ...)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(load|load_all|round_trip_load)$
  - requires: USER_INPUT and TYP_UNSAFE
    patterns:
    - pattern: $YAML.load($SINK)
- id: python.lang.deserialization.tainted-torch-pickle.tainted-torch-pickle
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    A number of functions and packages in the `torch` module rely on the `pickle`
    module and should not be used to unpackage data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    - https://pytorch.org/docs/stable/generated/torch.load.html
    - https://pytorch.org/docs/stable/_modules/torch/distributed/distributed_c10d.html#broadcast_object_list:~:text=.BytesIO()-,_pickler,-(f)
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - torch
    - http.server
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-torch-pickle.tainted-torch-pickle
    shortlink: https://sg.run/YR0W
    semgrep.dev:
      rule:
        rule_id: YGUgl0
        version_id: 3ZT1kb
        url: https://semgrep.dev/playground/r/3ZT1kb/python.lang.deserialization.tainted-torch-pickle.tainted-torch-pickle
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: torch.load($SINK, ...)
      - pattern: torch.package.PackageImporter($SINK, ...)
      - pattern: torch.distributed.broadcast_object_list($SINK,...)
      - pattern: torch.distributed.all_gather_object($OUT, $SINK,...)
      - pattern: torch.distributed.gather_object($SINK,...)
      - pattern: torch.distributed.scatter_object_list($OUT, $SINK, ...)
- id: python.pyramid.deserialization.tainted-dill-pyramid.tainted-dill-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `dill` module allows arbitrary user defined classes and functions to be serialized.
    We do not recommend using it for unpickling data from untrusted sources. For deserializing
    data from untrusted sources we recommend using YAML or JSON libraries with built-in
    protections.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pypi.org/project/dill/
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related-oss-rules:
    - python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
    technology:
    - python
    - pyramid
    - dill
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-dill-pyramid.tainted-dill-pyramid
    shortlink: https://sg.run/6obw
    semgrep.dev:
      rule:
        rule_id: 6JU4DX
        version_id: 44TdRG
        url: https://semgrep.dev/playground/r/44TdRG/python.pyramid.deserialization.tainted-dill-pyramid.tainted-dill-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: dill.Unpickler($SINK, ...)
      - pattern-either:
        - pattern: dill.load($SINK, ...)
        - pattern: dill.loads($SINK, ...)
        - pattern: dill.load_module(..., filename=$SINK, ...)
        - pattern: dill.load_module_asdict(..., filename=$SINK, ...)
        - pattern: dill.temp.load($SINK, ...)
        - pattern: dill.temp.load_source($SINK, ...)
        - pattern: dill.temp.loadIO($SINK, ...)
        - pattern: dill.temp.loadIO_source($SINK, ...)
- id: python.pyramid.deserialization.tainted-json-pyramid.tainted-json-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Even for a data-only serialization format such as JSON, a malicious string may
    cause the decoder to consume considerable CPU and memory resources. Limiting the
    size of data to be parsed is recommended.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/json.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - pyramid
    - json
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-json-pyramid.tainted-json-pyramid
    shortlink: https://sg.run/oQy7
    semgrep.dev:
      rule:
        rule_id: oqUGBD
        version_id: PkTyJn
        url: https://semgrep.dev/playground/r/PkTyJn/python.pyramid.deserialization.tainted-json-pyramid.tainted-json-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: json.load($SINK, ...)
      - pattern: json.loads($SINK, ...)
      - patterns:
        - pattern-either:
          - pattern: $DEC.decode($SINK)
          - pattern: $DEC.raw_decode($SINK)
        - pattern-inside: |
            $DEC = json.JSONDecoder()
            ...
- id: python.pyramid.deserialization.tainted-jsonpickle-pyramid.tainted-jsonpickle-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `jsonpickle` module can execute arbitrary Python code. Do not load `jsonpickles`
    from untrusted sources. For deserializing data from untrusted sources we recommend
    using YAML or JSON libraries with built-in protections, such as json, PyYAML,
    or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.deserialization
    technology:
    - python
    - pyramid
    - json
    - jsonpickle
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-jsonpickle-pyramid.tainted-jsonpickle-pyramid
    shortlink: https://sg.run/zQ1z
    semgrep.dev:
      rule:
        rule_id: zdU6WZ
        version_id: JdTjN2
        url: https://semgrep.dev/playground/r/JdTjN2/python.pyramid.deserialization.tainted-jsonpickle-pyramid.tainted-jsonpickle-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: jsonpickle.unpickler.decode($SINK, ...)
      - pattern: jsonpickle.unpickler.loadclass($SINK, ...)
      - pattern: jsonpickle.unpickler.loadrepr($SINK)
      - pattern: jsonpickle.util.b64decode($SINK)
      - pattern: jsonpickle.util.b85decode($SINK)
      - patterns:
        - pattern-either:
          - pattern: $B.decode($SINK)
          - pattern: $B.loads($SINK)
        - pattern-inside: |
            $B = jsonpickle.backend.JSONBackend()
            ...
- id: python.pyramid.deserialization.tainted-marshal-pyramid.tainted-marshal-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `marshal` module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. For deserializing data from untrusted sources we recommend using YAML
    or JSON libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.audit.marshal-usage
    technology:
    - python
    - pyramid
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-marshal-pyramid.tainted-marshal-pyramid
    shortlink: https://sg.run/pQ93
    semgrep.dev:
      rule:
        rule_id: pKURXW
        version_id: 5PTzdx
        url: https://semgrep.dev/playground/r/5PTzdx/python.pyramid.deserialization.tainted-marshal-pyramid.tainted-marshal-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: marshal.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
- id: python.pyramid.deserialization.tainted-numpy-pickle-pyramid.tainted-numpy-pickle-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `numpy.load()` function allows `pickle` for object deserialization. This behaviour
    is turned off by default in version 1.16.3. Do not turn this on with `allow_pickle=True`
    when loading data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://numpy.org/doc/stable/reference/generated/numpy.load.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related_oss_rules:
    - trailofbits.python.pickles-in-numpy.pickles-in-numpy
    technology:
    - python
    - pickle
    - numpy
    - pyramid
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-numpy-pickle-pyramid.tainted-numpy-pickle-pyramid
    shortlink: https://sg.run/2qAz
    semgrep.dev:
      rule:
        rule_id: 2ZUn7g
        version_id: GxTRvb
        url: https://semgrep.dev/playground/r/GxTRvb/python.pyramid.deserialization.tainted-numpy-pickle-pyramid.tainted-numpy-pickle-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: numpy.load($SINK, ..., allow_pickle=True, ...)
- id: python.pyramid.deserialization.tainted-pandas-hdf-pyramid.tainted-pandas-hdf-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_hdf()` function uses `pickle` when the `fixed` format is used
    during serializing. This function should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_hdf.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - pyramid
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-pandas-hdf-pyramid.tainted-pandas-hdf-pyramid
    shortlink: https://sg.run/X3Zl
    semgrep.dev:
      rule:
        rule_id: X5UG5v
        version_id: RGTlDW
        url: https://semgrep.dev/playground/r/RGTlDW/python.pyramid.deserialization.tainted-pandas-hdf-pyramid.tainted-pandas-hdf-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_hdf($SINK, ...)
- id: python.pyramid.deserialization.tainted-pandas-pickle-pyramid.tainted-pandas-pickle-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_pickle()` function uses `pickle` for object deserialization and
    should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - pyramid
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-pandas-pickle-pyramid.tainted-pandas-pickle-pyramid
    shortlink: https://sg.run/j1DZ
    semgrep.dev:
      rule:
        rule_id: j2UGrK
        version_id: A8T291
        url: https://semgrep.dev/playground/r/A8T291/python.pyramid.deserialization.tainted-pandas-pickle-pyramid.tainted-pandas-pickle-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_pickle($SINK, ...)
- id: java.spring.security.kryo-deserialization-deepsemgrep.kryo-deserialization-deepsemgrep
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `Kryo` unless you explicitly
    define permissions for types that are allowed to be deserialized by `Kryo`.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://github.com/EsotericSoftware/kryo
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - kryo
    - serialization
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.kryo-deserialization-deepsemgrep.kryo-deserialization-deepsemgrep
    shortlink: https://sg.run/038k
    semgrep.dev:
      rule:
        rule_id: 9AU8Zr
        version_id: ZRTZ4e
        url: https://semgrep.dev/playground/r/ZRTZ4e/java.spring.security.kryo-deserialization-deepsemgrep.kryo-deserialization-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  - label: REG_FALSE
    by-side-effect: true
    patterns:
    - pattern: |
        (Kryo $K).setRegistrationRequired(false)
    - focus-metavariable: $K
  pattern-sinks:
  - requires: USER_INPUT and REG_FALSE
    patterns:
    - pattern-either:
      - pattern: |
          (Kryo $K).readObject(...)
      - pattern: |
          (Kryo $K).readObjectOrNull(...)
  - requires: USER_INPUT
    patterns:
    - pattern: |
        (Kryo $K).readClassAndObject(...)
- id: java.spring.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `XStream` unless you
    explicitly define permissions for types that are allowed to be deserialized by
    `XStream`.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://x-stream.github.io/security.html
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - xml
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
    shortlink: https://sg.run/KYkP
    semgrep.dev:
      rule:
        rule_id: yyUYAo
        version_id: ExTw8N
        url: https://semgrep.dev/playground/r/ExTw8N/java.spring.security.xstream-anytype-deserialization-deepsemgrep.xstream-anytype-deserialization-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  - label: XSTREAM
    pattern: |
      (XStream $X)
  - label: ANYTYPE
    by-side-effect: true
    patterns:
    - pattern: |
        $X.addPermission(AnyTypePermission.ANY)
    - focus-metavariable: $X
  pattern-sinks:
  - requires: USER_INPUT and XSTREAM and ANYTYPE
    patterns:
    - pattern: |
        (XStream $X).fromXML(...)
- id: python.aws-lambda.deserialization.tainted-dill-aws-lambda.tainted-dill-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `dill` module allows arbitrary user defined classes and functions to be serialized.
    We do not recommend using it for unpickling data from untrusted sources. For deserializing
    data from untrusted sources we recommend using YAML or JSON libraries with built-in
    protections.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pypi.org/project/dill/
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related-oss-rules:
    - python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization
    technology:
    - python
    - aws-lambda
    - dill
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-dill-aws-lambda.tainted-dill-aws-lambda
    shortlink: https://sg.run/lQpL
    semgrep.dev:
      rule:
        rule_id: bwUPzj
        version_id: QkTOvA
        url: https://semgrep.dev/playground/r/QkTOvA/python.aws-lambda.deserialization.tainted-dill-aws-lambda.tainted-dill-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: dill.Unpickler($SINK, ...)
      - pattern-either:
        - pattern: dill.load_module(..., filename=$SINK, ...)
        - pattern: dill.load_module_asdict(..., filename=$SINK, ...)
        - pattern: dill.temp.load($SINK, ...)
        - pattern: dill.temp.load_source($SINK, ...)
        - pattern: dill.temp.loadIO($SINK, ...)
        - pattern: dill.temp.loadIO_source($SINK, ...)
- id: python.aws-lambda.deserialization.tainted-json-aws-lambda.tainted-json-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Even for a data-only serialization format such as JSON, a malicious string may
    cause the decoder to consume considerable CPU and memory resources. Limiting the
    size of data to be parsed is recommended.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/json.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - aws-lambda
    - json
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-json-aws-lambda.tainted-json-aws-lambda
    shortlink: https://sg.run/YRrW
    semgrep.dev:
      rule:
        rule_id: NbUvX2
        version_id: 3ZT1Yb
        url: https://semgrep.dev/playground/r/3ZT1Yb/python.aws-lambda.deserialization.tainted-json-aws-lambda.tainted-json-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: json.load($SINK, ...)
      - pattern: json.loads($SINK, ...)
      - patterns:
        - pattern-either:
          - pattern: $DEC.decode($SINK)
          - pattern: $DEC.raw_decode($SINK)
        - pattern-inside: |
            $DEC = json.JSONDecoder()
            ...
- id: python.flask.deserialization.tainted-json-flask.tainted-json-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Even for a data-only serialization format such as JSON, a malicious string may
    cause the decoder to consume considerable CPU and memory resources. Limiting the
    size of data to be parsed is recommended.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/json.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - flask
    - json
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-json-flask.tainted-json-flask
    shortlink: https://sg.run/EDB8
    semgrep.dev:
      rule:
        rule_id: AbUv3X
        version_id: 1QTv8j
        url: https://semgrep.dev/playground/r/1QTv8j/python.flask.deserialization.tainted-json-flask.tainted-json-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: flask.request.$FUNCTION(...)
          - metavariable-regex:
              metavariable: $FUNCTION
              regex: ^(from_values|get_data|get_json)$
        - patterns:
          - pattern-either:
            - pattern: flask.request.$PROPERTY
            - pattern: flask.request.$PROPERTY[...]
            - pattern: flask.request.$PROPERTY.get(...)
          - metavariable-regex:
              metavariable: $PROPERTY
              regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
    - patterns:
      - pattern: |
          @$APP.route(...)
          def $FUNC(..., $PARAM, ...):
            ...
      - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: json.load($SINK, ...)
      - pattern: json.loads($SINK, ...)
      - patterns:
        - pattern-either:
          - pattern: $DEC.decode($SINK)
          - pattern: $DEC.raw_decode($SINK)
        - pattern-inside: |
            $DEC = json.JSONDecoder()
            ...
- id: python.flask.deserialization.tainted-jsonpickle-flask.tainted-jsonpickle-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `jsonpickle` module can execute arbitrary Python code. Do not load `jsonpickles`
    from untrusted sources. For deserializing data from untrusted sources we recommend
    using YAML or JSON libraries with built-in protections, such as json, PyYAML,
    or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.deserialization
    technology:
    - python
    - flask
    - json
    - jsonpickle
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-jsonpickle-flask.tainted-jsonpickle-flask
    shortlink: https://sg.run/7z9v
    semgrep.dev:
      rule:
        rule_id: BYU4ek
        version_id: 9lTwQK
        url: https://semgrep.dev/playground/r/9lTwQK/python.flask.deserialization.tainted-jsonpickle-flask.tainted-jsonpickle-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: jsonpickle.unpickler.decode($SINK, ...)
      - pattern: jsonpickle.unpickler.loadclass($SINK, ...)
      - pattern: jsonpickle.unpickler.loadrepr($SINK)
      - pattern: jsonpickle.util.b64decode($SINK)
      - pattern: jsonpickle.util.b85decode($SINK)
      - patterns:
        - pattern-either:
          - pattern: $B.decode($SINK)
          - pattern: $B.loads($SINK)
        - pattern-inside: |
            $B = jsonpickle.backend.JSONBackend()
            ...
- id: python.flask.deserialization.tainted-marshal-flask.tainted-marshal-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `marshal` module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. For deserializing data from untrusted sources we recommend using YAML
    or JSON libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.audit.marshal-usage
    technology:
    - python
    - flask
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-marshal-flask.tainted-marshal-flask
    shortlink: https://sg.run/L6gL
    semgrep.dev:
      rule:
        rule_id: DbUBGk
        version_id: yeTrkw
        url: https://semgrep.dev/playground/r/yeTrkw/python.flask.deserialization.tainted-marshal-flask.tainted-marshal-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: marshal.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
- id: python.flask.deserialization.tainted-numpy-pickle-flask.tainted-numpy-pickle-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `numpy.load()` function allows `pickle` for object deserialization. This behaviour
    is turned off by default in version 1.16.3. Do not turn this on with `allow_pickle=True`
    when loading data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://numpy.org/doc/stable/reference/generated/numpy.load.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related_oss_rules:
    - trailofbits.python.pickles-in-numpy.pickles-in-numpy
    technology:
    - python
    - pickle
    - numpy
    - flask
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-numpy-pickle-flask.tainted-numpy-pickle-flask
    shortlink: https://sg.run/8pzJ
    semgrep.dev:
      rule:
        rule_id: WAUed7
        version_id: rxTeyO
        url: https://semgrep.dev/playground/r/rxTeyO/python.flask.deserialization.tainted-numpy-pickle-flask.tainted-numpy-pickle-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: numpy.load($SINK, ..., allow_pickle=True, ...)
- id: python.flask.deserialization.tainted-pandas-hdf-flask.tainted-pandas-hdf-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_hdf()` function uses `pickle` when the `fixed` format is used
    during serializing. This function should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_hdf.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - flask
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-pandas-hdf-flask.tainted-pandas-hdf-flask
    shortlink: https://sg.run/g2Ro
    semgrep.dev:
      rule:
        rule_id: 0oU0wg
        version_id: bZTdbb
        url: https://semgrep.dev/playground/r/bZTdbb/python.flask.deserialization.tainted-pandas-hdf-flask.tainted-pandas-hdf-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_hdf($SINK, ...)
- id: python.flask.deserialization.tainted-pandas-pickle-flask.tainted-pandas-pickle-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_pickle()` function uses `pickle` for object deserialization and
    should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - flask
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-pandas-pickle-flask.tainted-pandas-pickle-flask
    shortlink: https://sg.run/QXbD
    semgrep.dev:
      rule:
        rule_id: KxUAr3
        version_id: NdTj3g
        url: https://semgrep.dev/playground/r/NdTj3g/python.flask.deserialization.tainted-pandas-pickle-flask.tainted-pandas-pickle-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_pickle($SINK, ...)
- id: python.lang.deserialization.tainted-shelve.tainted-shelve
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `shelve` module uses `pickle` and should not be used with data from untrusted
    sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://docs.python.org/3/library/shelve.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.aws-lambda.security.tainted-pickle-deserialization
    - python.lang.security.deserialization.avoid-shelve
    technology:
    - python
    - http.server
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-shelve.tainted-shelve
    shortlink: https://sg.run/lQ9L
    semgrep.dev:
      rule:
        rule_id: lBU3yn
        version_id: QkTOWA
        url: https://semgrep.dev/playground/r/QkTOWA/python.lang.deserialization.tainted-shelve.tainted-shelve
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - pattern: shelve.DbfilenameShelf($SINK, ...)
- id: python.pyramid.deserialization.tainted-pickle-pyramid.tainted-pickle-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are
    considered insecure.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - pyramid
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-pickle-pyramid.tainted-pickle-pyramid
    shortlink: https://sg.run/1KRb
    semgrep.dev:
      rule:
        rule_id: 10UJPx
        version_id: BjTAXn
        url: https://semgrep.dev/playground/r/BjTAXn/python.pyramid.deserialization.tainted-pickle-pyramid.tainted-pickle-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: $PICKLE.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $PICKLE
            regex: ^(pickle|_pickle|cPickle)$
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
      - patterns:
        - pattern: $PACKAGE.Unpickler($SINK, ...)
        - metavariable-regex:
            metavariable: $PACKAGE
            regex: ^(pickle|_pickle|cPickle)$
- id: python.pyramid.deserialization.tainted-pyyaml-pyramid.tainted-pyyaml-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    PyYAML''s `yaml` module is as powerful as `pickle` and so may call any Python
    function. It is recommended to secure your application by using `yaml.SafeLoader`
    or `yaml.CSafeLoader`.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
    technology:
    - python
    - pyramid
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-pyyaml-pyramid.tainted-pyyaml-pyramid
    shortlink: https://sg.run/92Lk
    semgrep.dev:
      rule:
        rule_id: 9AU8JD
        version_id: DkTj6P
        url: https://semgrep.dev/playground/r/DkTj6P/python.pyramid.deserialization.tainted-pyyaml-pyramid.tainted-pyyaml-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          @pyramid.view.view_config( ... )
          def $VIEW($REQ):
            ...
      - pattern-either:
        - patterns:
          - pattern: $REQ.$FUNCTION(...)
          - metavariable-regex:
              metavariable: $FUNCTION
              regex: ^(as_bytes|make_tempfile)$
        - patterns:
          - pattern-either:
            - pattern: $REQ.$PROPERTY
            - pattern: $REQ.$PROPERTY[...]
            - pattern: $REQ.$PROPERTY.get(...)
          - metavariable-regex:
              metavariable: $PROPERTY
              regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - pattern: |
        yaml.$FUNC($SINK, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(scan|parse|compose|compose_all|load|load_all|unsafe_load)$
  - patterns:
    - pattern: yaml.$LOADER($SINK)
    - metavariable-regex:
        metavariable: $LOADER
        regex: ^(Loader|BaseLoader|CLoader|CBaseLoader)$
- id: python.pyramid.deserialization.tainted-ruamel-pyramid.tainted-ruamel-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Starting from `ruamel.yaml` version 0.15.0 The default loader (`typ=''rt''`) is
    a direct derivative of the safe loader. Before this version, use the optional
    argument `Loader` with value `SafeLoader` or `CSafeLoader`, or use the `safe_load`
    function.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-unsafe-ruamel
    technology:
    - python
    - pyramid
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-ruamel-pyramid.tainted-ruamel-pyramid
    shortlink: https://sg.run/yQJ8
    semgrep.dev:
      rule:
        rule_id: yyUYDk
        version_id: WrTwWD
        url: https://semgrep.dev/playground/r/WrTwWD/python.pyramid.deserialization.tainted-ruamel-pyramid.tainted-ruamel-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  - label: TYP_UNSAFE
    pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  pattern-sinks:
  - requires: USER_INPUT
    patterns:
    - pattern: ruamel.yaml.$FUNC($SINK)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.SafeLoader, ...)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(load|load_all|round_trip_load)$
  - requires: USER_INPUT and TYP_UNSAFE
    patterns:
    - pattern: $YAML.load($SINK)
- id: python.pyramid.deserialization.tainted-shelve-pyramid.tainted-shelve-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `shelve` module uses `pickle` and should not be used with data from untrusted
    sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://docs.python.org/3/library/shelve.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.aws-lambda.security.tainted-pickle-deserialization
    - python.lang.security.deserialization.avoid-shelve
    technology:
    - python
    - pyramid
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-shelve-pyramid.tainted-shelve-pyramid
    shortlink: https://sg.run/rQN6
    semgrep.dev:
      rule:
        rule_id: r6UBjy
        version_id: 0bTXLB
        url: https://semgrep.dev/playground/r/0bTXLB/python.pyramid.deserialization.tainted-shelve-pyramid.tainted-shelve-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        @pyramid.view.view_config( ... )
        def $VIEW($REQ):
          ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(as_bytes|make_tempfile)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - pattern-either:
    - pattern: shelve.open($SINK, ...)
    - pattern: shelve.DbfilenameShelf($SINK, ...)
- id: python.pyramid.deserialization.tainted-torch-pickle-pyramid.tainted-torch-pickle-pyramid
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    A number of functions and packages in the `torch` module rely on the `pickle`
    module and should not be used to unpackage data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    - https://pytorch.org/docs/stable/generated/torch.load.html
    - https://pytorch.org/docs/stable/_modules/torch/distributed/distributed_c10d.html#broadcast_object_list:~:text=.BytesIO()-,_pickler,-(f)
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - torch
    - pyramid
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyramid.deserialization.tainted-torch-pickle-pyramid.tainted-torch-pickle-pyramid
    shortlink: https://sg.run/bYWZ
    semgrep.dev:
      rule:
        rule_id: bwUPLR
        version_id: K3TXvE
        url: https://semgrep.dev/playground/r/K3TXvE/python.pyramid.deserialization.tainted-torch-pickle-pyramid.tainted-torch-pickle-pyramid
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: |
          def $HANDLER($EVENT, context):
            ...
      - focus-metavariable: $EVENT
    - patterns:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                ...):\n  ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - patterns:
          - pattern: $REQ.$FUNCTION(...)
          - metavariable-regex:
              metavariable: $FUNCTION
              regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
        - patterns:
          - pattern-either:
            - pattern: $REQ.$PROPERTY
            - pattern: $REQ.$PROPERTY[...]
            - pattern: $REQ.$PROPERTY.get(...)
          - metavariable-regex:
              metavariable: $PROPERTY
              regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - patterns:
              - pattern: flask.request.$FUNCTION(...)
              - metavariable-regex:
                  metavariable: $FUNCTION
                  regex: ^(from_values|get_data|get_json)$
            - patterns:
              - pattern-either:
                - pattern: flask.request.$PROPERTY
                - pattern: flask.request.$PROPERTY[...]
                - pattern: flask.request.$PROPERTY.get(...)
              - metavariable-regex:
                  metavariable: $PROPERTY
                  regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
        - patterns:
          - pattern: |
              @$APP.route(...)
              def $FUNC(..., $PARAM, ...):
                ...
          - focus-metavariable: $PARAM
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.StreamRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.DatagramRequestHandler, ...):
              ...
      - pattern-either:
        - pattern: self.$PROPERTY
        - pattern: self.$PROPERTY.get(...)
        - pattern: self.$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
    - patterns:
      - pattern-inside: |
          @pyramid.view.view_config( ... )
          def $VIEW($REQ):
            ...
      - pattern-either:
        - patterns:
          - pattern: $REQ.$FUNCTION(...)
          - metavariable-regex:
              metavariable: $FUNCTION
              regex: ^(as_bytes|make_tempfile)$
        - patterns:
          - pattern-either:
            - pattern: $REQ.$PROPERTY
            - pattern: $REQ.$PROPERTY[...]
            - pattern: $REQ.$PROPERTY.get(...)
          - metavariable-regex:
              metavariable: $PROPERTY
              regex: ^(GET|POST|accept|body|body_file|body_file_raw|body_file_seekable|cache_control|cookies|headers|json|json_body|params|pragma|query_string|referer|referrer|text|urlargs|urlvars)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: torch.load($SINK, ...)
      - pattern: torch.package.PackageImporter($SINK, ...)
      - pattern: torch.distributed.broadcast_object_list($SINK,...)
      - pattern: torch.distributed.all_gather_object($OUT, $SINK,...)
      - pattern: torch.distributed.gather_object($SINK,...)
      - pattern: torch.distributed.scatter_object_list($OUT, $SINK, ...)
- id: python.flask.security.injection.raw-html-concat.raw-html-format
  languages:
  - python
  severity: WARNING
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. To be sure this is safe, check that the HTML
    is rendered safely. Otherwise, use templates (`flask.render_template`) which will
    safely render HTML instead.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - flask
    references:
    - https://flask.palletsprojects.com/en/2.0.x/security/#cross-site-scripting-xss
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.flask.security.injection.raw-html-concat.raw-html-format
    shortlink: https://sg.run/Pb7e
    semgrep.dev:
      rule:
        rule_id: GdUrJv
        version_id: bZT4Gb
        url: https://semgrep.dev/playground/r/bZT4Gb/python.flask.security.injection.raw-html-concat.raw-html-format
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: jinja2.escape(...)
  - pattern: flask.escape(...)
  - pattern: flask.render_template("~=/.*\.html", ...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: flask.request.$ANYTHING
      - patterns:
        - pattern-inside: |
            @$APP.route(...)
            def $FUNC(..., $ROUTEVAR, ...):
              ...
        - pattern: $ROUTEVAR
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$HTMLSTR" % ...'
          - pattern: '"$HTMLSTR".format(...)'
          - pattern: '"$HTMLSTR" + ...'
          - pattern: f"$HTMLSTR{...}..."
      - patterns:
        - pattern-inside: |
            $HTML = "$HTMLSTR"
            ...
        - pattern-either:
          - pattern: $HTML % ...
          - pattern: $HTML.format(...)
          - pattern: $HTML + ...
    - metavariable-pattern:
        metavariable: $HTMLSTR
        language: generic
        pattern: <$TAG ...
- id: go.lang.security.injection.tainted-url-host.tainted-url-host
  languages:
  - go
  message: A request was found to be crafted from user-input `$REQUEST`. This can
    lead to Server-Side Request Forgery (SSRF) vulnerabilities, potentially exposing
    sensitive data. It is recommend where possible to not allow user-input to craft
    the base request, but to be treated as part of the path or query parameter. When
    user-input is necessary to craft the request, it is recommended to follow OWASP
    best practices to prevent abuse, including using an allowlist.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://goteleport.com/blog/ssrf-attacks/
    category: security
    technology:
    - go
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    interfile: true
    source: https://semgrep.dev/r/go.lang.security.injection.tainted-url-host.tainted-url-host
    shortlink: https://sg.run/5DjW
    semgrep.dev:
      rule:
        rule_id: AbUQLr
        version_id: pZT3rg
        url: https://semgrep.dev/playground/r/pZT3rg/go.lang.security.injection.tainted-url-host.tainted-url-host
        origin: community
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQUEST : *http.Request).$ANYTHING
      - pattern: |
          ($REQUEST : http.Request).$ANYTHING
    - metavariable-regex:
        metavariable: $ANYTHING
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$
  - label: CLEAN
    requires: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          "$URLSTR" + $INPUT
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$URLSTR", $INPUT, ...)
          - pattern: fmt.Sprintf("$URLSTR", $INPUT, ...)
          - pattern: fmt.Printf("$URLSTR", $INPUT, ...)
    - metavariable-regex:
        metavariable: $URLSTR
        regex: .*//[a-zA-Z0-10]+\..*
  pattern-sinks:
  - requires: INPUT and not CLEAN
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CLIENT := &http.Client{...}
                ...
            - pattern: $CLIENT.$METHOD($URL, ...)
          - pattern: http.$METHOD($URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Get|Head|Post|PostForm)$
      - pattern: http.Redirect($W, $REQ, $URL, ...)
      - patterns:
        - pattern: |
            http.NewRequest("$METHOD", $URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(GET|HEAD|POST|POSTFORM)$
    - focus-metavariable: $URL
  severity: WARNING
- id: go.gin.nosql.gin-mongo-nosql-taint.gin-mongo-nosqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - gin
    - gin-gonic/gin
    - mongo
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gin.nosql.gin-mongo-nosql-taint.gin-mongo-nosqli-taint
    shortlink: https://sg.run/jL6n
    semgrep.dev:
      rule:
        rule_id: v8Uey7
        version_id: ZRTZNb
        url: https://semgrep.dev/playground/r/ZRTZNb/go.gin.nosql.gin-mongo-nosql-taint.gin-mongo-nosqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: MONGO_CONNECT
    pattern: mongo.Connect(...)
  - label: MONGO_DB
    pattern: $CLIENT.Database(...)
    requires: MONGO_CONNECT
  - label: MONGO_COLL
    pattern: $DB.Collection(...)
    requires: MONGO_DB
  - label: MONGO_COLL
    pattern-either:
    - pattern: '($COLL : *mongo.Collection)'
    - pattern: '($COLL : mongo.Collection)'
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "go.mongodb.org/mongo-driver/mongo"
        ...
    - pattern: $COLL.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Aggregate|BulkWrite|CountDocuments|DeleteMany|DeleteOne|Disctinct|Drop|EstimatedDocumentCount|Find|FindOne|FindeOneAndDelete|FindOneAndReplace|FindOneAndUpdate|InsertMany|InsertOne|ReplaceOne|UpdateByID|UpdateMany|UpdateOne|Watch)$
    requires: MONGO_COLL and USER_INPUT
- id: go.gorilla.command-injection.gorilla-command-injection-taint.gorilla-command-injection-taint
  message: 'Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the input, and use safe methods for executing the commands.
    In Go, it is possible to use the `exec.Command` function in combination with the
    `bash -c` command to run the user input as a shell command. To sanitize the user
    input, you can use a library like `shellescape` to escape any special characters
    before constructing the command. For more information, see: [Go command injection
    prevention](https://semgrep.dev/docs/cheat-sheets/go-command-injection/) '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/os/exec
    - https://pkg.go.dev/syscall#Exec
    - https://semgrep.dev/docs/cheat-sheets/go-command-injection/
    technology:
    - go
    - gorilla
    - gorilla/sessions
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.command-injection.gorilla-command-injection-taint.gorilla-command-injection-taint
    shortlink: https://sg.run/1w75
    semgrep.dev:
      rule:
        rule_id: d8UXJG
        version_id: ExTwN0
        url: https://semgrep.dev/playground/r/ExTwN0/go.gorilla.command-injection.gorilla-command-injection-taint.gorilla-command-injection-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $CMD_STRUCT := exec.Command("$SHELL")
            ...
        - pattern-inside: |
            $WRITER, ... := $CMD_STRUCT.StdinPipe()
            ...
        - pattern-either:
          - pattern: $WRITER.Write(...)
          - patterns:
            - pattern: io.WriteString($WRITER, $SHELLCMD, ...)
            - focus-metavariable: $SHELLCMD
      - patterns:
        - pattern-inside: '&exec.Cmd { Path: "$SHELL", ... }'
        - pattern-either:
          - pattern: 'Args: { "$SHELL", "-c", $SHELLCMD, ...}'
          - pattern: 'Args: $TYPE{ "$SHELL", "-c", $SHELLCMD, ...}'
        - focus-metavariable: $SHELLCMD
    - metavariable-regex:
        metavariable: $SHELL
        regex: (bash|csh|dash|fish|ksh|tcsh|sh|zsh)$
  - patterns:
    - pattern-either:
      - pattern-inside: syscall.Exec($PATH, $ARGS, ...)
      - pattern-inside: syscall.ForkExec($PATH, $ARGS, ...)
      - pattern-inside: '&exec.Cmd {$PATH, $ARGS, ...}'
      - patterns:
        - pattern-inside: '&exec.Cmd { ... }'
        - pattern-either:
          - pattern-inside: 'Path: $INPUT'
          - pattern-inside: 'Args: $INPUT'
        - focus-metavariable: $INPUT
  - patterns:
    - pattern-either:
      - pattern: exec.Command($PATH, ...)
      - pattern: exec.CommandContext($CTX, $PATH, ...)
    - focus-metavariable: $PATH
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "gopkg.in/alessio/shellescape.v1"
          ...
      - pattern-inside: |
          import "github.com/alessio/shellescape"
          ...
    - pattern: shellescape.Quote(...)
- id: go.gorilla.nosql.gorilla-mongo-nosqli-taint.gorilla-mongo-nosqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    - mongo
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.nosql.gorilla-mongo-nosqli-taint.gorilla-mongo-nosqli-taint
    shortlink: https://sg.run/9B7e
    semgrep.dev:
      rule:
        rule_id: ZqU0od
        version_id: 7ZTyo9
        url: https://semgrep.dev/playground/r/7ZTyo9/go.gorilla.nosql.gorilla-mongo-nosqli-taint.gorilla-mongo-nosqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - label: USER_INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - label: USER_INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    label: USER_INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  - label: MONGO_CONNECT
    pattern: mongo.Connect(...)
  - label: MONGO_DB
    pattern: $CLIENT.Database(...)
    requires: MONGO_CONNECT
  - label: MONGO_COLL
    pattern: $DB.Collection(...)
    requires: MONGO_DB
  - label: MONGO_COLL
    pattern-either:
    - pattern: '($COLL : *mongo.Collection)'
    - pattern: '($COLL : mongo.Collection)'
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "go.mongodb.org/mongo-driver/mongo"
        ...
    - pattern: $COLL.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Aggregate|BulkWrite|CountDocuments|DeleteMany|DeleteOne|Disctinct|Drop|EstimatedDocumentCount|Find|FindOne|FindeOneAndDelete|FindOneAndReplace|FindOneAndUpdate|InsertMany|InsertOne|ReplaceOne|UpdateByID|UpdateMany|UpdateOne|Watch)$
    requires: MONGO_COLL and USER_INPUT
- id: go.gorilla.path-traversal.gorilla-path-traversal.gorilla-path-traversal-taint
  message: 'The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Go, it is possible to sanitize user input and mitigate path traversal by using
    the built-in `filepath.Clean` function. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - go
    - gorilla
    - gorilla/sessions
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.path-traversal.gorilla-path-traversal.gorilla-path-traversal-taint
    shortlink: https://sg.run/yKx7
    semgrep.dev:
      rule:
        rule_id: nJUXvL
        version_id: LjT3Qe
        url: https://semgrep.dev/playground/r/LjT3Qe/go.gorilla.path-traversal.gorilla-path-traversal.gorilla-path-traversal-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-either:
      - patterns:
        - pattern: http.FileSystem.$FUNC($F, $INPUT)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open|Dir)$
      - patterns:
        - pattern-inside: |
            $DIR := http.Dir(...)
            ...
        - pattern: $DIR.Open($INPUT)
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "os"
        ...
    - pattern: os.$FUNC($INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.$FUNC($FS, $INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Glob|ReadFile|WalkDir)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "archive/zip"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $W := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $W, $ERR := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - pattern: '($W : *zip.Writer).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Create)$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $R := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $R, $ERR := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - pattern: '($R : *zip.Reader).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open)$
        - focus-metavariable: $INPUT
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "path"
          ...
      - pattern-inside: |
          import "path/filepath"
          ...
    - patterns:
      - pattern-either:
        - pattern: $P.Join("/", ..., $INPUT, ...)
        - patterns:
          - pattern: $P.$SANFUNC($INPUT)
          - metavariable-regex:
              metavariable: $SANFUNC
              regex: ^(Abs|Base|Clean|Dir|Ext)$
    - metavariable-regex:
        metavariable: $P
        regex: ^(path|filepath)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.ValidPath(...)
- id: go.gorilla.sql.gorilla-go-vanillasql-format-string-sqli-taint-med-conf.gorilla-go-vanillasql-format-string-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/database/sql/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.sql.gorilla-go-vanillasql-format-string-sqli-taint-med-conf.gorilla-go-vanillasql-format-string-sqli-taint-med-conf
    shortlink: https://sg.run/rG9W
    semgrep.dev:
      rule:
        rule_id: EwU7zw
        version_id: 8KTZ9r
        url: https://semgrep.dev/playground/r/8KTZ9r/go.gorilla.sql.gorilla-go-vanillasql-format-string-sqli-taint-med-conf.gorilla-go-vanillasql-format-string-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT
  - label: IMPORTSQL
    pattern: |
      import "database/sql"
      ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql\.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and not PREPARE and not PREPARECONN
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and not PREPARE and not PREPARECONN
- id: go.gorilla.sql.gorilla-go-vanillasql-format-string-sqli-taint.gorilla-go-vanillasql-format-string-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/database/sql/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    - database/sql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.sql.gorilla-go-vanillasql-format-string-sqli-taint.gorilla-go-vanillasql-format-string-sqli-taint
    shortlink: https://sg.run/bdBQ
    semgrep.dev:
      rule:
        rule_id: 7KU0kA
        version_id: gETDxD
        url: https://semgrep.dev/playground/r/gETDxD/go.gorilla.sql.gorilla-go-vanillasql-format-string-sqli-taint.gorilla-go-vanillasql-format-string-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTSQL
    pattern: |
      import "database/sql"
      ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql\.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF) and not PREPARE and
      not PREPARECONN
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF) and not PREPARE and
      not PREPARECONN
- id: go.gorilla.sql.gorilla-pg-sqli-taint.gorilla-pg-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pg.uptrace.dev/queries/
    technology:
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    - go-pg/pg/v10
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.sql.gorilla-pg-sqli-taint.gorilla-pg-sqli-taint
    shortlink: https://sg.run/Nk2A
    semgrep.dev:
      rule:
        rule_id: L1UZvw
        version_id: QkTO0o
        url: https://semgrep.dev/playground/r/QkTO0o/go.gorilla.sql.gorilla-pg-sqli-taint.gorilla-pg-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTPG
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(.*go\-pg\/pg\/v10\/orm.*)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|ExecOne|Prepare)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $MODEL, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(QueryContext|QueryOneContext)$
    - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?pg.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB := pg.$CONN(...)
            ...
        - pattern: |
            $DB, $ERR := pg.$CONN(...)
            ...
      - metavariable-regex:
          metavariable: $CONN
          regex: ^(Connect|ParseURL)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $DB. ... .$METHOD($QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(Exec|ExecOne|Prepare)$
        - patterns:
          - pattern: $DB. ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
        - patterns:
          - pattern: $DB. ... .$METHOD($CTX, $MODEL, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(QueryContext|QueryOneContext)$
      - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
- id: go.gorilla.sql.gorilla-pgx-slqi-taint.gorilla-pgx-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Create parameterized queries in pgx by using positional
    parameters (`$1`, `$2`, ...) and adding the values as additional arguments to
    the function call. It is also possible to create prepared statements through the
    `Prepare` function. This function uses the same placeholders for bound parameters. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/jackc/pgx
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    technology:
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    - pgx
    - go-pgx
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.sql.gorilla-pgx-slqi-taint.gorilla-pgx-sqli-taint
    shortlink: https://sg.run/kdoe
    semgrep.dev:
      rule:
        rule_id: 8GURwd
        version_id: 3ZT1Qv
        url: https://semgrep.dev/playground/r/3ZT1Qv/go.gorilla.sql.gorilla-pgx-slqi-taint.gorilla-pgx-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTPGX
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*jackc\/pgx\/v(4|5).*)
  pattern-sinks:
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)'
    - metavariable-regex:
        metavariable: $CONNTYPE
        regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  pattern-sanitizers:
  - patterns:
    - pattern: $SANFUNC($QUERY, ...)
    - metavariable-regex:
        metavariable: $SANFUNC
        regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX
  - pattern: '($QUERY : *Query).Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: ' $DB.Sanitize(...)'
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)'
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
- id: go.gorilla.ssrf.gorilla-tainted-url-host.gorilla-tainted-url-host
  message: 'Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://goteleport.com/blog/ssrf-attacks/
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - go
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.ssrf.gorilla-tainted-url-host.gorilla-tainted-url-host
    shortlink: https://sg.run/wWkB
    semgrep.dev:
      rule:
        rule_id: gxUdNq
        version_id: 44TdlX
        url: https://semgrep.dev/playground/r/44TdlX/go.gorilla.ssrf.gorilla-tainted-url-host.gorilla-tainted-url-host
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - label: INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - label: INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    label: INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  - label: FORMAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$URLSTR", $INPUT, ...)
          - pattern: fmt.Sprintf("$URLSTR", $INPUT, ...)
          - pattern: fmt.Printf("$URLSTR", $INPUT, ...)
        - metavariable-regex:
            metavariable: $URLSTR
            regex: ^((http://)|(https://)|(//))%(v|s|q).*
    - focus-metavariable: $INPUT
    requires: INPUT
  - label: ADD_OR_DIRECT
    patterns:
    - pattern-either:
      - pattern: $X + $F
      - pattern: $X
    - focus-metavariable: $X
    - pattern-not-inside: |
        fmt.Printf(...)
        ...
    - pattern-not-inside: |
        fmt.Sprintf(...)
        ...
    - pattern-not-inside: |
        fmt.Fprintf(...)
        ...
    requires: INPUT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CLIENT := &http.Client{...}
                ...
            - pattern: $CLIENT.$METHOD($URL, ...)
          - pattern: http.$METHOD($URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Get|Head|Post|PostForm)$
      - pattern: http.Redirect($W, $REQ, $URL, ...)
      - patterns:
        - pattern: http.NewRequest("$METHOD", $URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(GET|HEAD|POST|POSTFORM)$
    - focus-metavariable: $URL
    requires: FORMAT or ADD_OR_DIRECT
  pattern-sanitizers:
  - patterns:
    - pattern: $F + $X
    - metavariable-regex:
        metavariable: $F
        regex: .*//[a-zA-Z0-10]+\\..*
- id: go.gorilla.xss.gorilla-formatted-template-string-taint.formatted-template-string-taint
  message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
    scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input
    executes malicious JavaScript code, leading to issues such as account compromise
    and sensitive information leakage. To prevent this vulnerability, validate the
    user input, perform contextual output encoding or sanitize the input. For more
    information, see: [Go XSS prevention](https://semgrep.dev/docs/cheat-sheets/go-xss/). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - gorilla
    - gorilla/sessions
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.xss.gorilla-formatted-template-string-taint.formatted-template-string-taint
    shortlink: https://sg.run/x0wl
    semgrep.dev:
      rule:
        rule_id: QrUPxy
        version_id: PkTy1Y
        url: https://semgrep.dev/playground/r/PkTy1Y/go.gorilla.xss.gorilla-formatted-template-string-taint.formatted-template-string-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "html/template"
        ...
    - pattern-either:
      - pattern: template.HTML(...)
      - pattern: template.HTMLAttr(...)
      - pattern: template.CSS(...)
      - pattern: template.JS(...)
      - pattern: template.JSStr(...)
      - pattern: template.Srcset(...)
      - pattern: template.URL(...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/microcosm-cc/bluemonday"
          ...
      - pattern-inside: |
          import "microcosm-cc/bluemonday"
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $P := bluemonday.$POLICY()
            ...
        - pattern: $P.$SAN(...)
      - pattern: bluemonday.$POLICY().$SAN(...)
    - metavariable-regex:
        metavariable: $SAN
        regex: ^(Sanitize|SanitizeBytes)$
- id: go.gorilla.xss.gorilla-no-direct-write-to-responsewriter-traint.gorilla-no-direct-write-to-responsewriter-taint
  message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
    scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input
    executes malicious JavaScript code, leading to issues such as account compromise
    and sensitive information leakage. To prevent this vulnerability, validate the
    user input, perform contextual output encoding or sanitize the input. For more
    information, see: [Go XSS prevention](https://semgrep.dev/docs/cheat-sheets/go-xss/). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - net/http
    - gorilla
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.xss.gorilla-no-direct-write-to-responsewriter-traint.gorilla-no-direct-write-to-responsewriter-taint
    shortlink: https://sg.run/O3Xw
    semgrep.dev:
      rule:
        rule_id: 3qUqy9
        version_id: JdTjpg
        url: https://semgrep.dev/playground/r/JdTjpg/go.gorilla.xss.gorilla-no-direct-write-to-responsewriter-traint.gorilla-no-direct-write-to-responsewriter-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: 'fmt.$P(($RES : http.ResponseWriter), ..., $SINK, ...)'
        - pattern: 'fmt.$P(($RES : *http.ResponseWriter), ..., $SINK, ...)'
      - metavariable-regex:
          metavariable: $P
          regex: ^(Fprint|Fprintf|Fprintln)$
      - focus-metavariable: $REQ
    - pattern: '($RES : http.ResponseWriter).Write(...)'
    - pattern: '($RES : *http.ResponseWriter).Write(...)'
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$METHOD($CODE, $CONTENT, ...)'
          - pattern: '($CONTEXT : *gin.Context).$METHOD($CODE, $CONTENT, ...)'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(AsciiJSON|IndentedJSON|JSON|JSONP|ProtoBuf|PureJSON|SecureJSON|String|TOML|XML|YAML)$
        - focus-metavariable: $CONTENT
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Stream(...)'
        - pattern: '($CONTEXT : *gin.Context).Stream(...)'
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Writer.Write(...)'
        - pattern: '($CONTEXT : *gin.Context).Writer.Write(...)'
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/microcosm-cc/bluemonday"
          ...
      - pattern-inside: |
          import "microcosm-cc/bluemonday"
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $P := bluemonday.$POLICY()
            ...
        - pattern: $P.$SAN(...)
      - pattern: bluemonday.$POLICY().$SAN(...)
    - metavariable-regex:
        metavariable: $SAN
        regex: ^(Sanitize|SanitizeBytes)$
- id: go.gorilla.xxe.gorilla-libxml2-xxe-taint.libxml2-xxe-taint
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The best defense against XXE is to have an
    XML parser that supports disabling DTDs. Limiting the use of external entities
    from the start can prevent the parser from being used to process untrusted XML
    files. Reducing dependencies on external resources is also a good practice for
    performance reasons. It is difficult to guarantee that even a trusted XML file
    on your server or during transmission has not been tampered with by a malicious
    third-party. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    technology:
    - go
    - libxml2
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    - gorilla
    - github.com/gorilla/rpc/v2
    - gorilla/rpc
    - gorilla/schema
    - github.com/gorilla/schema
    - gorilla/securecookie
    - github.com/gorilla/securecookie
    - gorilla/websocket
    - github.com/gorilla/websocket
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gorilla.xxe.gorilla-libxml2-xxe-taint.libxml2-xxe-taint
    shortlink: https://sg.run/e7OZ
    semgrep.dev:
      rule:
        rule_id: 4bU40y
        version_id: 5PTzAn
        url: https://semgrep.dev/playground/r/5PTzAn/go.gorilla.xxe.gorilla-libxml2-xxe-taint.libxml2-xxe-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/schema"
        ...
    - pattern-inside: |
        $DECODER = schema.NewDecoder()
        ...
    - pattern-inside: |
        $DECODER.Decode(&$TO, ...)
        ...
    - pattern: $TO
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/securecookie"
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $COOKIE = securecookie.New(...)
            ...
        - pattern-inside: |
            $COOKIE.Decode($NAME, $C, &$VALUE)
            ...
      - pattern-inside: |
          securecookie.DecodeMulti($NAME, $C, &$VALUE, ...)
          ...
    - pattern: $VALUE
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/sessions"
        ...
    - pattern-inside: |
        $STORE = sessions.NewCookieStore(...)
        ...
    - pattern-inside: |
        $SESSION, ... = $STORE.Get(...)
        ...
    - pattern: $SESSION.Values
  - by-side-effect: true
    patterns:
    - pattern-inside: |
        import "github.com/gorilla/websocket"
        ...
    - pattern-inside: |
        $UPGRADER = websocket.Upgrader{...}
        ...
    - pattern-inside: |
        $CONN, ... = $UPGRADER.Upgrade(...)
        ...
    - pattern-either:
      - patterns:
        - pattern: $TYPE, $BYTES, $ERR = $CONN.$FUNC()
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadMessage|ReadJSON)$
        - focus-metavariable: $BYTES
      - patterns:
        - pattern-inside: |
            $TYPE, $READER, $ERR = $CONN.NextReader()
            ...
        - pattern: $READER.Read($VAR)
        - focus-metavariable: $VAR
      - patterns:
        - pattern: $TYPE, $READER, $ERR = $CONN.NextReader()
        - focus-metavariable: $READER
  pattern-sinks:
  - patterns:
    - patterns:
      - pattern-inside: |
          import "$IMPORT"
          ...
      - metavariable-regex:
          metavariable: $IMPORT
          regex: (.*lestrrat-go/libxml2.*)
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $P = parser.New($OPTS)
              ...
          - pattern: $P.$PARSE($INPUT)
        - pattern: parser.New($OPTS).$PARSE($INPUT)
        - pattern: NewCtxt($INPUT, $OPTS)
      - focus-metavariable: $INPUT
      - metavariable-regex:
          metavariable: $PARSE
          regex: ^(Parse|ParseHTML|ParseHTMLReader|ParseHTMLString|ParseReader|ParseString)$
      - metavariable-pattern:
          metavariable: $OPTS
          patterns:
          - pattern-either:
            - pattern: XMLParseNoEnt
            - pattern: parser.XMLParseNoEnt
- id: go.grpc.nosql.grpc-mongo-nosqli-taint.grpc-mongo-nosqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - grpc
    - grpc-go
    - mongo
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.nosql.grpc-mongo-nosqli-taint.grpc-mongo-nosqli-taint
    shortlink: https://sg.run/vDn8
    semgrep.dev:
      rule:
        rule_id: PeU4PJ
        version_id: GxTR8L
        url: https://semgrep.dev/playground/r/GxTR8L/go.grpc.nosql.grpc-mongo-nosqli-taint.grpc-mongo-nosqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: MONGO_CONNECT
    pattern: mongo.Connect(...)
  - label: MONGO_DB
    pattern: $CLIENT.Database(...)
    requires: MONGO_CONNECT
  - label: MONGO_COLL
    pattern: $DB.Collection(...)
    requires: MONGO_DB
  - label: MONGO_COLL
    pattern-either:
    - pattern: '($COLL : *mongo.Collection)'
    - pattern: '($COLL : mongo.Collection)'
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "go.mongodb.org/mongo-driver/mongo"
        ...
    - pattern: $COLL.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Aggregate|BulkWrite|CountDocuments|DeleteMany|DeleteOne|Disctinct|Drop|EstimatedDocumentCount|Find|FindOne|FindeOneAndDelete|FindOneAndReplace|FindOneAndUpdate|InsertMany|InsertOne|ReplaceOne|UpdateByID|UpdateMany|UpdateOne|Watch)$
    requires: MONGO_COLL and USER_INPUT
- id: go.net.nosql.net-mongo-nosqli-taint.net-mongo-nosqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go-net/http
    - mongo
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.nosql.net-mongo-nosqli-taint.net-mongo-nosqli-taint
    shortlink: https://sg.run/ddx6
    semgrep.dev:
      rule:
        rule_id: JDU095
        version_id: A8T2Xk
        url: https://semgrep.dev/playground/r/A8T2Xk/go.net.nosql.net-mongo-nosqli-taint.net-mongo-nosqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: MONGO_CONNECT
    pattern: mongo.Connect(...)
  - label: MONGO_DB
    pattern: $CLIENT.Database(...)
    requires: MONGO_CONNECT
  - label: MONGO_COLL
    pattern: $DB.Collection(...)
    requires: MONGO_DB
  - label: MONGO_COLL
    pattern-either:
    - pattern: '($COLL : *mongo.Collection)'
    - pattern: '($COLL : mongo.Collection)'
  pattern-propagators:
  - from: $FROM
    patterns:
    - patterns:
      - pattern: $FROM.$FUNC(&$TO)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(Decode|DecodeBytes|UnmarshalBSON|All)$
    to: $TO
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "go.mongodb.org/mongo-driver/mongo"
        ...
    - pattern: $COLL.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Aggregate|BulkWrite|CountDocuments|DeleteMany|DeleteOne|Disctinct|Drop|EstimatedDocumentCount|Find|FindOne|FindeOneAndDelete|FindOneAndReplace|FindOneAndUpdate|InsertMany|InsertOne|ReplaceOne|UpdateByID|UpdateMany|UpdateOne|Watch)$
    requires: MONGO_COLL and USER_INPUT
- id: go.secrets.gorilla.gorilla-cookie-store-hardcoded-session-key.gorilla-cookie-store-hardcoded-session-key
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - gorilla
    - gorilla/sessions
    - github.com/gorilla/sessions
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.gorilla.gorilla-cookie-store-hardcoded-session-key.gorilla-cookie-store-hardcoded-session-key
    shortlink: https://sg.run/ZdXW
    semgrep.dev:
      rule:
        rule_id: 5rUWgP
        version_id: GxTR88
        url: https://semgrep.dev/playground/r/GxTR88/go.secrets.gorilla.gorilla-cookie-store-hardcoded-session-key.gorilla-cookie-store-hardcoded-session-key
        origin: pro_rules
  languages:
  - go
  patterns:
  - pattern-inside: |
      import "github.com/gorilla/sessions"
      ...
  - pattern-either:
    - pattern: sessions.NewCookieStore("...", ...)
    - pattern: sessions.NewCookieStore([]byte("..."), ...)
- id: go.secrets.gorilla.gorilla-csrf-hardcoded-auth-key.gorilla-csrf-hardcoded-auth-key
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - gorilla
    - gorilla/csrf
    - github.com/gorilla/csrf
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.gorilla.gorilla-csrf-hardcoded-auth-key.gorilla-csrf-hardcoded-auth-key
    shortlink: https://sg.run/n4nd
    semgrep.dev:
      rule:
        rule_id: GdUNd7
        version_id: RGTlR0
        url: https://semgrep.dev/playground/r/RGTlR0/go.secrets.gorilla.gorilla-csrf-hardcoded-auth-key.gorilla-csrf-hardcoded-auth-key
        origin: pro_rules
  languages:
  - go
  patterns:
  - pattern-inside: |
      import "github.com/gorilla/csrf"
      ...
  - pattern-either:
    - pattern: csrf.Protect("...", ...)
    - pattern: csrf.Protect([]byte("..."), ...)
- id: go.secrets.gorm.gorm-empty-password.gorm-empty-password
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - gorm.io
    - gorm.io/gorm
    - gorm.io/driver/mysql
    - gorm.io/driver/postgres
    - gorm.io/driver/clickhouse
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.gorm.gorm-empty-password.gorm-empty-password
    shortlink: https://sg.run/wW3B
    semgrep.dev:
      rule:
        rule_id: DbUl1Q
        version_id: A8T2Xq
        url: https://semgrep.dev/playground/r/A8T2Xq/go.secrets.gorm.gorm-empty-password.gorm-empty-password
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            "$DSN"
      - metavariable-regex:
          metavariable: $DSN
          regex: ((.*://)?(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@.*|.*password=(?!<.*>).*)
    - patterns:
      - pattern-inside: |
          $CLICKHOUSE.Options{
            ...,
            Auth: $CH.Auth{
              ...,
              Password: "",
              ...
            },
            ...
          }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "gorm.io/gorm"
          ...
      - pattern-inside: |
          import "gorm.io/gorm/driver/mysql"
          ...
      - pattern-inside: |
          import "gorm.io/gorm/driver/postgres"
          ...
      - pattern-inside: |
          import "gorm.io/gorm/driver/clickhouse"
          ...
    - pattern: $GORMSQL.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: Open|OpenDB|New
- id: go.secrets.mongodb.mongo-empty-password.mongo-empty-password
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - go.mongodb.org
    - mongodb
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.mongodb.mongo-empty-password.mongo-empty-password
    shortlink: https://sg.run/O3ew
    semgrep.dev:
      rule:
        rule_id: 0oUN2W
        version_id: BjTApy
        url: https://semgrep.dev/playground/r/BjTApy/go.secrets.mongodb.mongo-empty-password.mongo-empty-password
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $URL
      - patterns:
        - pattern: $CLIENT.ApplyURI("$URL")
        - focus-metavariable: $CLIENT
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/bson"
          ...
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/mongo"
          ...
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/mongo/options"
          ...
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/mongo/readpref"
          ...
    - pattern: mongo.Connect(...)
- id: go.secrets.mysql.mysql-empty-password.mysql-empty-password
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - database/sql
    - github.com/go-sql-driver/mysql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.mysql.mysql-empty-password.mysql-empty-password
    shortlink: https://sg.run/vDe8
    semgrep.dev:
      rule:
        rule_id: qNU6W2
        version_id: DkTjYX
        url: https://semgrep.dev/playground/r/DkTjYX/go.secrets.mysql.mysql-empty-password.mysql-empty-password
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: (")?(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@tcp.*
    - pattern-inside: |
        mysql.Config{
          ...,
          Passwd: "",
          ...
        }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "database/sql"
          ...
      - pattern-inside: |
          import "github.com/go-sql-driver/mysql"
          ...
    - pattern: sql.Open("mysql", $URL)
    - focus-metavariable: $URL
- id: go.secrets.mysql.mysql-hardcoded-secret.mysql-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - database/sql
    - github.com/go-sql-driver/mysql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.mysql.mysql-hardcoded-secret.mysql-hardcoded-secret
    shortlink: https://sg.run/dd16
    semgrep.dev:
      rule:
        rule_id: lBUkWl
        version_id: WrTw3J
        url: https://semgrep.dev/playground/r/WrTw3J/go.secrets.mysql.mysql-hardcoded-secret.mysql-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (")?(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@tcp.*
  - patterns:
    - pattern-inside: |
        mysql.Config{
          ...,
          Passwd: "...",
          ...
        }
    - pattern-not-inside: |
        mysql.Config{
          ...,
          Passwd: "",
          ...
        }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "database/sql"
          ...
      - pattern-inside: |
          import "github.com/go-sql-driver/mysql"
          ...
    - pattern: sql.Open("mysql", $URL)
    - focus-metavariable: $URL
- id: go.secrets.oauth2.oauth2-empty-key.oauth2-empty-key
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - oauth2
    - golang.org/x/oauth2
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.oauth2.oauth2-empty-key.oauth2-empty-key
    shortlink: https://sg.run/ZdjW
    semgrep.dev:
      rule:
        rule_id: YGUWA6
        version_id: 0bTXe9
        url: https://semgrep.dev/playground/r/0bTXe9/go.secrets.oauth2.oauth2-empty-key.oauth2-empty-key
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "golang.org/x/oauth2"
        ...
    - pattern-either:
      - pattern: |
          $OAUTH.Config{
              ...,
              ClientSecret: "",
              ...,
          }
      - pattern: |
          $TOKEN{
            ...,
            AccessToken: "",
            ...,
          }
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "golang.org/x/oauth2"
        ...
    - pattern: $OAUTH.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(AuthCodeURL|Client|NewClient|Exchange)$
- id: javascript.monaco-editor.security.audit.monaco-hover-htmlsupport.monaco-hover-htmlsupport
  message: If user input reaches `HoverProvider` while `supportHml` is set to `true`
    it may introduce an XSS vulnerability. Do not produce HTML for hovers with dynamically
    generated input.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/microsoft/monaco-editor/issues/801
    category: security
    technology:
    - monaco
    - monaco-editor
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.monaco-editor.security.audit.monaco-hover-htmlsupport.monaco-hover-htmlsupport
    shortlink: https://sg.run/Jx7R
    semgrep.dev:
      rule:
        rule_id: zdUYQb
        version_id: 5PTYzv
        url: https://semgrep.dev/playground/r/5PTYzv/javascript.monaco-editor.security.audit.monaco-hover-htmlsupport.monaco-hover-htmlsupport
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        import "monaco-editor"
        ...
    - pattern-inside: |
        require("monaco-editor")
        ...
  - pattern-either:
    - pattern: |
        {value: $VAL, supportHtml: true}
    - pattern: |
        {value: $VAL, isTrusted: true}
  - pattern-inside: |
      {range: $R, contents: [...]}
  - pattern-not: |
      {..., value: "...", ...}
- id: kotlin.generic.secrets.setpassword-hardcoded.setpassword-hardcoded
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.generic.secrets.setpassword-hardcoded.setpassword-hardcoded
    shortlink: https://sg.run/E2e5
    semgrep.dev:
      rule:
        rule_id: ReUJ4P
        version_id: zyTZD0
        url: https://semgrep.dev/playground/r/zyTZD0/kotlin.generic.secrets.setpassword-hardcoded.setpassword-hardcoded
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern: $X. ... .setPassword("...")
  - pattern-not: $X. ... .setPassword("")
  - pattern-not: $X. ... .setPassword("...${...}...")
- id: python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: pickle.load($SINK,...)
      - pattern: pickle.loads($SINK,...)
      - pattern: _pickle.load($SINK,...)
      - pattern: _pickle.loads($SINK,...)
      - pattern: cPickle.load($SINK,...)
      - pattern: cPickle.loads($SINK,...)
      - pattern: dill.load($SINK,...)
      - pattern: dill.loads($SINK,...)
      - pattern: shelve.open($SINK,...)
  message: Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    category: security
    technology:
    - python
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization
    shortlink: https://sg.run/JbjW
    semgrep.dev:
      rule:
        rule_id: JDUDQg
        version_id: gETN2n
        url: https://semgrep.dev/playground/r/gETN2n/python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization
        origin: community
  languages:
  - python
  severity: WARNING
- id: kotlin.java-jwt.jwt-hardcode.jwt-hardcode
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - kotlin
    - jwt
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.java-jwt.jwt-hardcode.jwt-hardcode
    shortlink: https://sg.run/7RpG
    semgrep.dev:
      rule:
        rule_id: AbUDoG
        version_id: pZTYLd
        url: https://semgrep.dev/playground/r/pZTYLd/kotlin.java-jwt.jwt-hardcode.jwt-hardcode
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern-either:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.auth0.jwt.algorithms.*
              ...
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm
              ...
        - pattern: Algorithm.HMAC256("...")
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm.*
              ...
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm.HMAC256
              ...
        - pattern: HMAC256("...")
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.auth0.jwt.algorithms.*
              ...
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm
              ...
        - pattern: Algorithm.HMAC384("...")
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm.*
              ...
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm.HMAC384
              ...
        - pattern: HMAC384("...")
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.auth0.jwt.algorithms.*
              ...
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm
              ...
        - pattern: Algorithm.HMAC512("...")
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm.*
              ...
          - pattern-inside: |
              import com.auth0.jwt.algorithms.Algorithm.HMAC512
              ...
        - pattern: HMAC512("...")
- id: kotlin.java-jwt.jwt-none-alg.jwt-none-alg
  message: 'Detected use of the `none` algorithm in a JWT token. The `none` algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the `none` algorithm. Instead, use an algorithm such as `HS256`. '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    technology:
    - kotlin
    - jwt
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.java-jwt.jwt-none-alg.jwt-none-alg
    shortlink: https://sg.run/LbAX
    semgrep.dev:
      rule:
        rule_id: BYUq3d
        version_id: 2KTj3Z
        url: https://semgrep.dev/playground/r/2KTj3Z/kotlin.java-jwt.jwt-none-alg.jwt-none-alg
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import com.auth0.jwt.*
            ...
        - pattern-inside: |
            import com.auth0.jwt.algorithms
            ...
      - pattern: algorithms.Algorithm.none()
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import com.auth0.jwt.algorithms.*
            ...
        - pattern-inside: |
            import com.auth0.jwt.algorithms.Algorithm
            ...
      - pattern: Algorithm.none()
  pattern-sinks:
  - pattern: $JWT.sign(...)
- id: kotlin.jjwt.jjwt-hardcode.jjwt-hardcode
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - kotlin
    - jwt
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.jjwt.jjwt-hardcode.jjwt-hardcode
    shortlink: https://sg.run/3PYG
    semgrep.dev:
      rule:
        rule_id: KxUEWJ
        version_id: 9lTw5x
        url: https://semgrep.dev/playground/r/9lTw5x/kotlin.jjwt.jjwt-hardcode.jjwt-hardcode
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: '"...".toByteArray(...)'
      - pattern: '"...".decodeBase64Bytes(...)'
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.jsonwebtoken.io.*
                ...
            - pattern-inside: |
                import io.jsonwebtoken.io.Decoders
                ...
          - pattern: Decoders.BASE64.decode("...")
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.jsonwebtoken.io.Decoders.*
                ...
            - pattern-inside: |
                import io.jsonwebtoken.io.Decoders.BASE64
                ...
          - pattern: BASE64.decode("...")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import io.jsonwebtoken.*
              ...
          - pattern-inside: |
              import io.jsonwebtoken.security
              ...
        - pattern: security.Keys.hmacShaKeyFor(...)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import io.jsonwebtoken.security.*
              ...
          - pattern-inside: |
              import io.jsonwebtoken.security.Keys
              ...
        - pattern: Keys.hmacShaKeyFor(...)
- id: kotlin.ktor.nosqli.ktor-kmongo-nosqli.ktor-kmongo-nosqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - ktor
    - kotlin
    - kmongo
    - mongo
    - nosql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.ktor.nosqli.ktor-kmongo-nosqli.ktor-kmongo-nosqli
    shortlink: https://sg.run/Pd03
    semgrep.dev:
      rule:
        rule_id: lBUkn6
        version_id: rxTe4z
        url: https://semgrep.dev/playground/r/rxTe4z/kotlin.ktor.nosqli.ktor-kmongo-nosqli.ktor-kmongo-nosqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: no_processing_needed
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - pattern-either:
            - pattern: application.call.parameters
            - patterns:
              - pattern: application.call.receive(...)
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: application.call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: application.call.request.cookies.rawCookies
            - pattern: application.call.request.local.uri
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - pattern-either:
            - pattern: call.parameters
            - patterns:
              - pattern: call.receive(...)
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: call.request.cookies.rawCookies
            - pattern: call.request.local.uri
  - label: returns_url_encoded
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: application.call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
  - label: urldecode
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.net
                ...
          - patterns:
            - pattern: net.URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.net.*
                ...
            - pattern-inside: |
                import java.net.URLDecoder
                ...
          - patterns:
            - pattern: URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
    requires: returns_url_encoded
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${...}..."
      - pattern: |
          "...${...}...".$MD(...)
      - pattern: |
          "..." + ...
      - pattern: |
          ... + "..."
      - pattern: |
          "...${...}..." + ...
      - pattern: |
          ... + "...${...}..."
      - pattern: |
          String.format(...)
    requires: no_processing_needed or urldecode
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import org.litote.kmongo.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.coroutine.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactivestreams.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactor.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.rxjava2.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.coroutine.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactivestreams.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactor.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.rxjava2.$METHOD
          ...
    - pattern-either:
      - pattern-inside: |
          $COL = $X.getCollection(...)
          ...
      - pattern-inside: |
          class $CL(...) {
            ...
            val $COL = $X.getCollection(...)
            ...
          }
      - pattern: |
          ($COL: MongoCollection<$Z>).$METHOD(...)
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: aggregate
          - pattern: bulkWrite
          - pattern: countDocuments
          - pattern: createIndex
          - pattern: deleteMany
          - pattern: deleteOne
          - pattern: distinct
          - pattern: dropIndex
          - pattern: dropIndexOfKeys
          - pattern: ensureIndex
          - pattern: find
          - pattern: findOne
          - pattern: findOneAndDelete
          - pattern: findOneAndReplace
          - pattern: findOneAndUpdate
          - pattern: insertOne
          - pattern: mapReduce
          - pattern: mapReduceWith
          - pattern: replaceOne
          - pattern: updateMany
          - pattern: updateOne
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $COL.$METHOD($QUERY,...)
      - pattern: $COL.$METHOD($SESSION, $QUERY,...)
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
  - pattern: $X.json
- id: kotlin.ktor.nosqli.ktor-mongo-java-driver.ktor-mongo-java-driver
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - ktor
    - kotlin
    - mongo
    - nosql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.ktor.nosqli.ktor-mongo-java-driver.ktor-mongo-java-driver
    shortlink: https://sg.run/JyGR
    semgrep.dev:
      rule:
        rule_id: YGUW9Z
        version_id: bZTd9o
        url: https://semgrep.dev/playground/r/bZTd9o/kotlin.ktor.nosqli.ktor-mongo-java-driver.ktor-mongo-java-driver
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: no_processing_needed
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - pattern-either:
            - pattern: application.call.parameters
            - patterns:
              - pattern: application.call.receive(...)
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: application.call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: application.call.request.cookies.rawCookies
            - pattern: application.call.request.local.uri
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - pattern-either:
            - pattern: call.parameters
            - patterns:
              - pattern: call.receive(...)
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: call.request.cookies.rawCookies
            - pattern: call.request.local.uri
  - label: returns_url_encoded
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: application.call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
  - label: urldecode
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.net
                ...
          - patterns:
            - pattern: net.URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.net.*
                ...
            - pattern-inside: |
                import java.net.URLDecoder
                ...
          - patterns:
            - pattern: URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
    requires: returns_url_encoded
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${...}..."
      - pattern: |
          "...${...}...".$MD(...)
      - pattern: |
          "..." + ...
      - pattern: |
          ... + "..."
      - pattern: |
          "...${...}..." + ...
      - pattern: |
          ... + "...${...}..."
      - pattern: |
          String.format(...)
    requires: no_processing_needed or urldecode
  pattern-sinks:
  - patterns:
    - focus-metavariable: $VAL
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.RawBsonDocument
              ...
        - pattern-either:
          - pattern: RawBsonDocument($VAL)
          - pattern: RawBsonDocument.parse($VAL)
          - pattern: '($X: RawBsonDocument).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = RawBsonDocument(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: RawBsonDocument).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = RawBsonDocument(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.json.*
              ...
          - pattern-inside: |
              import org.bson.json.JsonObject
              ...
        - pattern-either:
          - pattern: JsonObject($VAL)
          - pattern: JsonObject.parse($VAL)
          - pattern: '($X: JsonObject).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = JsonObject(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: JsonObject).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = JsonObject(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.Document
              ...
        - pattern-either:
          - pattern: Document($VAL)
          - patterns:
            - pattern: Document($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: Document.parse($VAL)
          - pattern: '($X: Document).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = Document(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: Document).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = Document(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.mongodb.*
              ...
          - pattern-inside: |
              import com.mongodb.BasicDBObject
              ...
        - pattern-either:
          - patterns:
            - pattern: BasicDBObject($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: BasicDBObject.parse($VAL)
          - pattern: '($X: BasicDBObject).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = BasicDBObject(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: BasicDBObject).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = BasicDBObject(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.BsonDocument
              ...
        - pattern-either:
          - patterns:
            - pattern: BsonDocument($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: BsonDocument.parse($VAL)
          - pattern: '($X: BsonDocument).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = BsonDocument(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: BsonDocument).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = BsonDocument(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.Document
              ...
        - pattern-either:
          - pattern: Document($VAL)
          - patterns:
            - pattern: Document($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: Document.parse($VAL)
          - pattern: '($X: Document).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = Document(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: Document).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = Document(...)
                    ...
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.ktor.sqli.ktor-exposed-unsafe-exec-sqli.ktor-exposed-unsafe-exec-sqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Kotlin, it is possible to adopt prepared statements using
    the `connection.PreparedStatement` class with parameterized queries. For more
    information, see: [Prepared statements in Kotlin](https://developer.android.com/reference/kotlin/java/sql/PreparedStatement).'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - ktor
    - kotlin
    - exposed
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.ktor.sqli.ktor-exposed-unsafe-exec-sqli.ktor-exposed-unsafe-exec-sqli
    shortlink: https://sg.run/GjPz
    semgrep.dev:
      rule:
        rule_id: oqUq8L
        version_id: kbTbLb
        url: https://semgrep.dev/playground/r/kbTbLb/kotlin.ktor.sqli.ktor-exposed-unsafe-exec-sqli.ktor-exposed-unsafe-exec-sqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: no_processing_needed
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - pattern-either:
            - pattern: application.call.parameters
            - patterns:
              - pattern: application.call.receive(...)
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: application.call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: application.call.request.cookies.rawCookies
            - pattern: application.call.request.local.uri
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - pattern-either:
            - pattern: call.parameters
            - patterns:
              - pattern: call.receive(...)
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: call.request.cookies.rawCookies
            - pattern: call.request.local.uri
  - label: returns_url_encoded
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: application.call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
  - label: urldecode
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.net
                ...
          - patterns:
            - pattern: net.URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.net.*
                ...
            - pattern-inside: |
                import java.net.URLDecoder
                ...
          - patterns:
            - pattern: URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
    requires: returns_url_encoded
  pattern-sinks:
  - label: sink
    patterns:
    - pattern-either:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions
                ...
          - pattern-either:
            - pattern: transactions.transaction.$EXEC($SQL, ...)
            - patterns:
              - pattern-inside: transactions.transaction { ... }
              - pattern: $EXEC($SQL, ...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.transaction
                ...
          - pattern-either:
            - pattern: transaction.$EXEC($SQL, ...)
            - patterns:
              - pattern-inside: transaction { ... }
              - pattern: $EXEC($SQL, ...)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions
                ...
          - patterns:
            - pattern-either:
              - pattern: transactions.TransactionManager. ... .$EXEC($SQL, ...)
              - pattern: '($TM: transactions.TransactionManager). ... .$EXEC($SQL,
                  ...)'
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.TransactionManager
                ...
          - patterns:
            - pattern-either:
              - pattern: TransactionManager. ... .$EXEC($SQL, ...)
              - pattern: '($TM: TransactionManager). ... .$EXEC($SQL, ...)'
    - metavariable-regex:
        metavariable: $EXEC
        regex: (exec|execInBatch)
    - focus-metavariable: $SQL
    requires: urldecode or no_processing_needed
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.ktor.sqli.ktor-prepare-statetment-sqli.ktor-prepare-statement-sqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Kotlin, it is possible to adopt prepared statements using
    the `connection.PreparedStatement` class with parameterized queries. For more
    information, see: [Prepared statements in Kotlin](https://developer.android.com/reference/kotlin/java/sql/PreparedStatement).'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - ktor
    - kotlin
    - ktorm
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.ktor.sqli.ktor-prepare-statetment-sqli.ktor-prepare-statement-sqli
    shortlink: https://sg.run/Rdqv
    semgrep.dev:
      rule:
        rule_id: zdUo7N
        version_id: w8TLDw
        url: https://semgrep.dev/playground/r/w8TLDw/kotlin.ktor.sqli.ktor-prepare-statetment-sqli.ktor-prepare-statement-sqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: no_processing_needed
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - pattern-either:
            - pattern: application.call.parameters
            - patterns:
              - pattern: application.call.receive(...)
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: application.call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: application.call.request.cookies.rawCookies
            - pattern: application.call.request.local.uri
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - pattern-either:
            - pattern: call.parameters
            - patterns:
              - pattern: call.receive(...)
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: call.request.cookies.rawCookies
            - pattern: call.request.local.uri
  - label: returns_url_encoded
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: application.call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
  - label: urldecode
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.net
                ...
          - patterns:
            - pattern: net.URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.net.*
                ...
            - pattern-inside: |
                import java.net.URLDecoder
                ...
          - patterns:
            - pattern: URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
    requires: returns_url_encoded
  pattern-sinks:
  - label: sink
    patterns:
    - pattern-either:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.ktorm.*
                ...
            - pattern-inside: |
                import org.ktorm.database
                ...
          - patterns:
            - pattern-inside: $DB.useConnection(...)
            - pattern-either:
              - pattern-inside: database.Database.connect(...).apply(...)
              - pattern-inside: |
                  $DB = database.Database.connect(...)
                  ...
              - pattern-inside: |
                  class $CL(...) {
                    ...
                    val $DB = database.Database.connect(...)
                    ...
                  }
              - pattern-inside: |
                  ($DB: database.Database).useConnection(...)
            - pattern: $CN.prepareStatement($SQL, ...)
            - focus-metavariable: $SQL
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.ktorm.database.*
                ...
            - pattern-inside: |
                import org.ktorm.database.Database
                ...
          - patterns:
            - pattern-inside: $DB.useConnection(...)
            - pattern-either:
              - pattern-inside: Database.connect(...).apply(...)
              - pattern-inside: |
                  $DB = Database.connect(...)
                  ...
              - pattern-inside: |
                  class $CL(...) {
                    ...
                    val $DB = Database.connect(...)
                    ...
                  }
              - pattern-inside: |
                  ($DB: Database).useConnection(...)
            - pattern: $CN.prepareStatement($SQL, ...)
            - focus-metavariable: $SQL
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.sql
                ...
          - patterns:
            - pattern-either:
              - pattern: |
                  ($CN: sql.Connection).prepareStatement($SQL, ...)
              - patterns:
                - pattern-either:
                  - patterns:
                    - pattern-inside: |
                        $STMT = $DB.createStatement(...)
                        ...
                    - pattern: $STMT.$EXEC($SQL, ...)
                  - pattern: '($STMT: Statement).$EXEC($SQL, ...)'
                - metavariable-regex:
                    metavariable: $EXEC
                    regex: ^execute
            - focus-metavariable: $SQL
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.sql.*
                ...
            - pattern-inside: |
                import java.sql.Connection
                ...
          - patterns:
            - pattern-either:
              - pattern: |
                  ($CN: Connection).prepareStatement($SQL, ...)
              - patterns:
                - pattern-either:
                  - patterns:
                    - pattern-inside: |
                        $STMT = $DB.createStatement(...)
                        ...
                    - pattern: $STMT.$EXEC($SQL, ...)
                  - pattern: '($STMT: Statement).$EXEC($SQL, ...)'
                - metavariable-regex:
                    metavariable: $EXEC
                    regex: ^execute
            - focus-metavariable: $SQL
    requires: urldecode or no_processing_needed
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.ktor.xss.ktor-request-xss.ktor-request-xss
  message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
    scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input
    executes malicious JavaScript code, leading to issues such as account compromise
    and sensitive information leakage. To prevent this vulnerability, validate the
    user input, perform contextual output encoding or sanitize the input. '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - kotlin
    - ktor
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.ktor.xss.ktor-request-xss.ktor-request-xss
    shortlink: https://sg.run/A6k0
    semgrep.dev:
      rule:
        rule_id: pKUZ7A
        version_id: JdTjY8
        url: https://semgrep.dev/playground/r/JdTjY8/kotlin.ktor.xss.ktor-request-xss.ktor-request-xss
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: no_processing_needed
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - pattern-either:
            - pattern: application.call.parameters
            - patterns:
              - pattern: application.call.receive(...)
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
              - pattern-not-inside: 'val $X: Int = application.call.receive(...)'
            - patterns:
              - pattern: application.call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: application.call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: application.call.request.cookies.rawCookies
            - pattern: application.call.request.local.uri
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - pattern-either:
            - pattern: call.parameters
            - patterns:
              - pattern: call.receive(...)
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
              - pattern-not-inside: 'val $X: Int = call.receive(...)'
            - patterns:
              - pattern: call.request.$F(...)
              - metavariable-regex:
                  metavariable: $F
                  regex: ^(accept|acceptCharset|acceptCharsetItems|acceptEncoding|acceptEncodingItems|acceptItems|acceptLanguage|acceptLanguageItems|cacheControl|header|location|queryString|userAgent)$
            - patterns:
              - pattern-either:
                - patterns:
                  - pattern: call.request.$F
                  - metavariable-regex:
                      metavariable: $F
                      regex: ^(cookies|queryParameters|rawQueryParameters|uri)$
                - pattern: call.request.cookies.rawCookies
            - pattern: call.request.local.uri
  - label: returns_url_encoded
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: application.call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.request.$F
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(uri)$
              - patterns:
                - pattern: call.request.$F(...)
                - metavariable-regex:
                    metavariable: $F
                    regex: ^(document|path|toLogString)$
  - label: urldecode
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.net
                ...
          - patterns:
            - pattern: net.URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.net.*
                ...
            - pattern-inside: |
                import java.net.URLDecoder
                ...
          - patterns:
            - pattern: URLDecoder.decode($INPUT, ...)
            - focus-metavariable: $INPUT
    requires: returns_url_encoded
  pattern-sinks:
  - label: sink
    patterns:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.*
                ...
            - pattern-inside: |
                import io.ktor.server.application
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: application.call.$RESPFUNC($INPUT, ContentType.Text.Html,
                    ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respond(Text|Bytes))$
              - patterns:
                - pattern: application.call.$RESPFUNC(..., message = $INPUT, contentType
                    = ContentType.Text.Html, ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondText)$
              - patterns:
                - pattern: application.call.$RESPFUNC(..., bytes = $INPUT, contentType
                    = ContentType.Text.Html, ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondBytes)$
            - focus-metavariable: $INPUT
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import io.ktor.server.application.*
                ...
            - pattern-inside: |
                import io.ktor.server.application.call
                ...
          - patterns:
            - pattern-either:
              - patterns:
                - pattern: call.$RESPFUNC($INPUT, ContentType.Text.Html, ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respond(Text|Bytes))$
              - patterns:
                - pattern: call.$RESPFUNC(..., message = $INPUT, contentType = ContentType.Text.Html,
                    ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondText)$
              - patterns:
                - pattern: call.$RESPFUNC(..., bytes = $INPUT, contentType = ContentType.Text.Html,
                    ...)
                - metavariable-regex:
                    metavariable: $RESPFUNC
                    regex: ^(respondBytes)$
            - focus-metavariable: $INPUT
    requires: urldecode or no_processing_needed
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
- id: kotlin.lang.security.crypto.hardcoded-secret-key-spec.hardcoded-secret-key-spec
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    - crypto
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.lang.security.crypto.hardcoded-secret-key-spec.hardcoded-secret-key-spec
    shortlink: https://sg.run/Bow7
    semgrep.dev:
      rule:
        rule_id: 2ZUyJw
        version_id: O9TbdP
        url: https://semgrep.dev/playground/r/O9TbdP/kotlin.lang.security.crypto.hardcoded-secret-key-spec.hardcoded-secret-key-spec
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import javax.crypto.*
            ...
        - pattern-inside: |
            import javax.crypto.spec
            ...
      - patterns:
        - pattern: |
            spec.SecretKeySpec("...".toByteArray(),...)
        - pattern-not: |
            spec.SecretKeySpec("".toByteArray(),...)
        - pattern-not: |
            spec.SecretKeySpec("...${...}...".toByteArray(),...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import javax.crypto.spec.*
            ...
        - pattern-inside: |
            import javax.crypto.spec.SecretKeySpec
            ...
      - patterns:
        - pattern: |
            SecretKeySpec("...".toByteArray(),...)
        - pattern-not: |
            SecretKeySpec("".toByteArray(),...)
        - pattern-not: |
            SecretKeySpec("...${...}...".toByteArray(),...)
- id: kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header-decoded.hardcoded-secret-in-request-header-decoded
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - java.net
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header-decoded.hardcoded-secret-in-request-header-decoded
    shortlink: https://sg.run/DpOq
    semgrep.dev:
      rule:
        rule_id: X5UD6J
        version_id: e1TO3x
        url: https://semgrep.dev/playground/r/e1TO3x/kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header-decoded.hardcoded-secret-in-request-header-decoded
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            ...
            $Y = "..."
            ...
        - pattern-inside: |
            ...
            $Y = "...".toByteArray()
            ...
      - pattern-not-inside: |
          ...
          $Y = "...${...}..."
          ...
      - pattern-not-inside: |
          ...
          $Y = ""
          ...
      - pattern-not-inside: |
          ...
          $Y = "...${...}...".toByteArray()
          ...
      - pattern-not-inside: |
          ...
          $Y = "".toByteArray()
          ...
      - pattern-inside: |
          ...
          $X = Base64. ... .decode($Y,...). ...
          ...
    - patterns:
      - pattern-inside: |
          ...
          $X = Base64. ... .decode("...",...). ...
          ...
      - pattern-not-inside: |
          ...
          $X = Base64. ... .decode("",...). ...
          ...
  - pattern-either:
    - pattern: $REQ. ... .addRequestProperty("Authorization", "bearer ${$X}")
    - pattern: $REQ. ... .addRequestProperty("Authorization", "Bearer ${$X}")
    - pattern: $REQ. ... .addRequestProperty("Authorization", "basic ${$X}")
    - pattern: $REQ. ... .addRequestProperty("Authorization", "Basic ${$X}")
  - focus-metavariable: $X
- id: kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header-encoded.hardcoded-secret-in-request-header-encoded
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - java.net
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header-encoded.hardcoded-secret-in-request-header-encoded
    shortlink: https://sg.run/WdzZ
    semgrep.dev:
      rule:
        rule_id: j2Ud7L
        version_id: vdTR8k
        url: https://semgrep.dev/playground/r/vdTR8k/kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header-encoded.hardcoded-secret-in-request-header-encoded
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              ...
              $Y = "..."
              ...
          - pattern-inside: |
              ...
              $Y = "...".toByteArray()
              ...
        - pattern-not-inside: |
            ...
            $Y = "...${...}..."
            ...
        - pattern-not-inside: |
            ...
            $Y = ""
            ...
        - pattern-not-inside: |
            ...
            $Y = "...${...}...".toByteArray()
            ...
        - pattern-not-inside: |
            ...
            $Y = "".toByteArray()
            ...
        - pattern-inside: |
            ...
            $X = Base64. ... .encode($Y,...). ...
            ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              ...
              $X = Base64. ... .encode("...",...). ...
              ...
          - pattern-inside: |
              ...
              $X = Base64. ... .encode("...".toByteArray(),...). ...
              ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("",...). ...
            ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("...${...}...",...). ...
            ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("".toByteArray(),...). ...
            ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("...${...}...".toByteArray(),...). ...
            ...
  - pattern-either:
    - pattern: $REQ. ... .addRequestProperty("Authorization", "bearer ${$X}")
    - pattern: $REQ. ... .addRequestProperty("Authorization", "Bearer ${$X}")
    - pattern: $REQ. ... .addRequestProperty("Authorization", "basic ${$X}")
    - pattern: $REQ. ... .addRequestProperty("Authorization", "Basic ${$X}")
  - focus-metavariable: $X
- id: kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - java.net
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
    shortlink: https://sg.run/0kKq
    semgrep.dev:
      rule:
        rule_id: 10U6qn
        version_id: d6TWv9
        url: https://semgrep.dev/playground/r/d6TWv9/kotlin.lang.security.net.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          "$BEARER"
      - metavariable-pattern:
          language: generic
          metavariable: $BEARER
          patterns:
          - pattern: $HEADER $TOKEN
          - metavariable-regex:
              metavariable: $TOKEN
              regex: (eyJhbGciOi.*)
          - metavariable-regex:
              metavariable: $HEADER
              regex: (?i)(Bearer|Token)
          - metavariable-analysis:
              analyzer: entropy
              metavariable: $TOKEN
    - patterns:
      - pattern: |
          "$BASIC"
      - metavariable-pattern:
          language: generic
          metavariable: $BASIC
          patterns:
          - pattern: Basic $TOKEN
          - metavariable-regex:
              metavariable: $TOKEN
              regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
          - metavariable-analysis:
              analyzer: entropy
              metavariable: $TOKEN
  - pattern-inside: $VALUE. ... .addHeader("Authorization",...)
  - pattern-not: $VALUE. ... .addHeader("Authorization","")
  - pattern-not: $VALUE. ... .addHeader("Authorization","...${...}...")
- id: kotlin.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret
    shortlink: https://sg.run/KrRY
    semgrep.dev:
      rule:
        rule_id: 9AUrP8
        version_id: ZRTZK4
        url: https://semgrep.dev/playground/r/ZRTZK4/kotlin.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: put(Context.SECURITY_CREDENTIALS, "...")
        - pattern: put(SECURITY_CREDENTIALS, "...")
        - pattern: $ENV[SECURITY_CREDENTIALS] = "..."
        - pattern: $ENV[Context.SECURITY_CREDENTIALS] = "..."
      - pattern-not: put(..., "")
      - pattern-not: put(..., "...${...}...")
      - pattern-not: $ENV[...] = ""
      - pattern-not: $ENV[...] = "...${...}..."
    - patterns:
      - pattern-either:
        - pattern-inside: |
            {...}
        - pattern-inside: |
            {$ENV->...}
      - pattern-either:
        - pattern: put(Context.SECURITY_CREDENTIALS, "...")
        - pattern: put(SECURITY_CREDENTIALS, "...")
        - pattern: $ENV[SECURITY_CREDENTIALS] = "..."
        - pattern: $ENV[Context.SECURITY_CREDENTIALS] = "..."
      - pattern-not: put(..., "")
      - pattern-not: put(..., "...${...}...")
      - pattern-not: $ENV[...] = ""
      - pattern-not: $ENV[...] = "...${...}..."
- id: kotlin.mongo.mongo-hardcoded-secret.mongo-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - mongodb
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.mongo.mongo-hardcoded-secret.mongo-hardcoded-secret
    shortlink: https://sg.run/q5nb
    semgrep.dev:
      rule:
        rule_id: yyUl7b
        version_id: nWTR2x
        url: https://semgrep.dev/playground/r/nWTR2x/kotlin.mongo.mongo-hardcoded-secret.mongo-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - patterns:
    - patterns:
      - pattern-inside: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import com.*
            ...
        - pattern-inside: |
            import com.mongodb
            ...
      - pattern-inside: mongodb.MongoClientURI("...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import com.mongodb.*
            ...
        - pattern-inside: |
            import com.mongodb.MongoClientURI
            ...
      - pattern-inside: MongoClientURI("...")
- id: kotlin.okhttp.secrets.empty-credentials.empty.Credentials
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - okhttp
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.okhttp.secrets.empty-credentials.empty.Credentials
    shortlink: https://sg.run/ldL6
    semgrep.dev:
      rule:
        rule_id: r6Ud7R
        version_id: ExTwER
        url: https://semgrep.dev/playground/r/ExTwER/kotlin.okhttp.secrets.empty-credentials.empty.Credentials
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import okhttp3.*
            ...
        - pattern-inside: |
            import okhttp3.Credentials
            ...
      - patterns:
        - pattern: |
            Credentials.Credentials.basic($USERNAME,"")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import okhttp3.Credentials.*
            ...
        - pattern-inside: |
            import okhttp3.Credentials.basic
            ...
      - patterns:
        - pattern: |
            Credentials.basic($USERNAME,"")
- id: kotlin.okhttp.secrets.hardcoded-credentials.okhttp3.Credentials
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - okhttp
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.okhttp.secrets.hardcoded-credentials.okhttp3.Credentials
    shortlink: https://sg.run/Yd25
    semgrep.dev:
      rule:
        rule_id: bwUpjg
        version_id: 7ZTyE1
        url: https://semgrep.dev/playground/r/7ZTyE1/kotlin.okhttp.secrets.hardcoded-credentials.okhttp3.Credentials
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import okhttp3.*
            ...
        - pattern-inside: |
            import okhttp3.Credentials
            ...
      - patterns:
        - pattern: |
            Credentials.Credentials.basic($USERNAME,"...")
        - pattern-not: |
            Credentials.Credentials.basic($USERNAME,"")
        - pattern-not: |
            Credentials.Credentials.basic($USERNAME,"...${...}...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import okhttp3.Credentials.*
            ...
        - pattern-inside: |
            import okhttp3.Credentials.basic
            ...
      - patterns:
        - pattern: |
            Credentials.basic($USERNAME,"...")
        - pattern-not: |
            Credentials.basic($USERNAME,"")
        - pattern-not: |
            Credentials.basic($USERNAME,"...${...}...")
- id: kotlin.okhttp.secrets.hardcoded-secret-in-request-header-decoded.hardcoded-secret-in-request-header-decoded
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - okhttp
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.okhttp.secrets.hardcoded-secret-in-request-header-decoded.hardcoded-secret-in-request-header-decoded
    shortlink: https://sg.run/6GzY
    semgrep.dev:
      rule:
        rule_id: NbUPwK
        version_id: LjT3ky
        url: https://semgrep.dev/playground/r/LjT3ky/kotlin.okhttp.secrets.hardcoded-secret-in-request-header-decoded.hardcoded-secret-in-request-header-decoded
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            ...
            $Y = "..."
            ...
        - pattern-inside: |
            ...
            $Y = "...".toByteArray()
            ...
      - pattern-not-inside: |
          ...
          $Y = "...${...}..."
          ...
      - pattern-not-inside: |
          ...
          $Y = ""
          ...
      - pattern-not-inside: |
          ...
          $Y = "...${...}...".toByteArray()
          ...
      - pattern-not-inside: |
          ...
          $Y = "".toByteArray()
          ...
      - pattern-inside: |
          ...
          $X = Base64. ... .decode($Y,...). ...
          ...
    - patterns:
      - pattern-inside: |
          ...
          $X = Base64. ... .decode("...",...). ...
          ...
      - pattern-not-inside: |
          ...
          $X = Base64. ... .decode("",...). ...
          ...
  - pattern-either:
    - pattern: $REQ. ... .addHeader("Authorization", "bearer ${$X}")
    - pattern: $REQ. ... .addHeader("Authorization", "Bearer ${$X}")
  - focus-metavariable: $X
- id: kotlin.okhttp.secrets.hardcoded-secret-in-request-header-encoded.hardcoded-secret-in-request-header-encoded
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - okhttp
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.okhttp.secrets.hardcoded-secret-in-request-header-encoded.hardcoded-secret-in-request-header-encoded
    shortlink: https://sg.run/oPgd
    semgrep.dev:
      rule:
        rule_id: kxUNnE
        version_id: 8KTZ5E
        url: https://semgrep.dev/playground/r/8KTZ5E/kotlin.okhttp.secrets.hardcoded-secret-in-request-header-encoded.hardcoded-secret-in-request-header-encoded
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              ...
              $Y = "..."
              ...
          - pattern-inside: |
              ...
              $Y = "...".toByteArray()
              ...
        - pattern-not-inside: |
            ...
            $Y = "...${...}..."
            ...
        - pattern-not-inside: |
            ...
            $Y = ""
            ...
        - pattern-not-inside: |
            ...
            $Y = "...${...}...".toByteArray()
            ...
        - pattern-not-inside: |
            ...
            $Y = "".toByteArray()
            ...
        - pattern-inside: |
            ...
            $X = Base64. ... .encode($Y,...). ...
            ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              ...
              $X = Base64. ... .encode("...",...). ...
              ...
          - pattern-inside: |
              ...
              $X = Base64. ... .encode("...".toByteArray(),...). ...
              ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("",...). ...
            ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("...${...}...",...). ...
            ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("".toByteArray(),...). ...
            ...
        - pattern-not-inside: |
            ...
            $X = Base64. ... .encode("...${...}...".toByteArray(),...). ...
            ...
  - pattern-either:
    - pattern: $REQ. ... .addHeader("Authorization", "bearer ${$X}")
    - pattern: $REQ. ... .addHeader("Authorization", "Bearer ${$X}")
    - pattern: $REQ. ... .addHeader("Authorization", "Basic ${$X}")
    - pattern: $REQ. ... .addHeader("Authorization", "basic ${$X}")
  - focus-metavariable: $X
- id: kotlin.okhttp.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - okhttp
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.okhttp.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
    shortlink: https://sg.run/zqnP
    semgrep.dev:
      rule:
        rule_id: wdUX7r
        version_id: gETDBY
        url: https://semgrep.dev/playground/r/gETDBY/kotlin.okhttp.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          "$BEARER"
      - metavariable-pattern:
          language: generic
          metavariable: $BEARER
          patterns:
          - pattern: $HEADER $TOKEN
          - metavariable-regex:
              metavariable: $TOKEN
              regex: (eyJhbGciOi.*)
          - metavariable-regex:
              metavariable: $HEADER
              regex: (?i)(Bearer|Token)
          - metavariable-analysis:
              analyzer: entropy
              metavariable: $TOKEN
    - patterns:
      - pattern: |
          "$BASIC"
      - metavariable-pattern:
          language: generic
          metavariable: $BASIC
          patterns:
          - pattern: Basic $TOKEN
          - metavariable-regex:
              metavariable: $TOKEN
              regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
          - metavariable-analysis:
              analyzer: entropy
              metavariable: $TOKEN
  - pattern-inside: $VALUE. ... .addHeader("Authorization",...)
  - pattern-not: $VALUE. ... .addHeader("Authorization","")
  - pattern-not: $VALUE. ... .addHeader("Authorization","...${...}...")
- id: kotlin.openai.openai-hardcoded-secret.openai-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - openai
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.openai.openai-hardcoded-secret.openai-hardcoded-secret
    shortlink: https://sg.run/pJnJ
    semgrep.dev:
      rule:
        rule_id: x8UP7P
        version_id: QkTOGd
        url: https://semgrep.dev/playground/r/QkTOGd/kotlin.openai.openai-hardcoded-secret.openai-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import com.aallam.openai.*
            ...
        - pattern-inside: |
            import com.aallam.openai.client
            ...
      - patterns:
        - pattern: |
            client.OpenAIConfig(...,token="...",...)
        - pattern-regex: (sk-).*
        - pattern-not: |
            client.OpenAIConfig(...,token="",...)
        - pattern-not: |
            client.OpenAIConfig(...,token="...${...}...",...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import com.aallam.openai.client.*
            ...
        - pattern-inside: |
            import com.aallam.openai.client.OpenAIConfig
            ...
      - patterns:
        - pattern: |
            OpenAIConfig(...,token="...",...)
        - pattern-regex: (sk-).*
        - pattern-not: |
            OpenAIConfig(...,token="",...)
        - pattern-not: |
            OpenAIConfig(...,token="...${...}...",...)
- id: kotlin.spring.kmongo-nosqli.kmongo-nosqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - kmongo
    - mongo
    - nosql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.kmongo-nosqli.kmongo-nosqli
    shortlink: https://sg.run/Xdpw
    semgrep.dev:
      rule:
        rule_id: eqUQNJ
        version_id: 5PTzoA
        url: https://semgrep.dev/playground/r/5PTzoA/kotlin.spring.kmongo-nosqli.kmongo-nosqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${...}..."
      - pattern: |
          "...${...}...".$MD(...)
      - pattern: |
          "..." + ...
      - pattern: |
          ... + "..."
      - pattern: |
          "...${...}..." + ...
      - pattern: |
          ... + "...${...}..."
      - pattern: |
          String.format(...)
    requires: USER_INPUT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import org.litote.kmongo.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.coroutine.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactivestreams.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactor.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.rxjava2.*
          ...
      - pattern-inside: |
          import org.litote.kmongo.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.coroutine.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactivestreams.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.reactor.$METHOD
          ...
      - pattern-inside: |
          import org.litote.kmongo.rxjava2.$METHOD
          ...
    - pattern-either:
      - pattern-inside: |
          $COL = $X.getCollection(...)
          ...
      - pattern-inside: |
          class $CL(...) {
            ...
            val $COL = $X.getCollection(...)
            ...
          }
      - pattern: |
          ($COL: MongoCollection<$Z>).$METHOD(...)
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: aggregate
          - pattern: bulkWrite
          - pattern: countDocuments
          - pattern: createIndex
          - pattern: deleteMany
          - pattern: deleteOne
          - pattern: distinct
          - pattern: dropIndex
          - pattern: dropIndexOfKeys
          - pattern: ensureIndex
          - pattern: find
          - pattern: findOne
          - pattern: findOneAndDelete
          - pattern: findOneAndReplace
          - pattern: findOneAndUpdate
          - pattern: insertOne
          - pattern: mapReduce
          - pattern: mapReduceWith
          - pattern: replaceOne
          - pattern: updateMany
          - pattern: updateOne
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $COL.$METHOD($QUERY,...)
      - pattern: $COL.$METHOD($SESSION, $QUERY,...)
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
  - pattern: $X.json
- id: kotlin.spring.mongo-driver-nosqli.mongo-driver-nosqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - mongo
    - nosql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.mongo-driver-nosqli.mongo-driver-nosqli
    shortlink: https://sg.run/jLnn
    semgrep.dev:
      rule:
        rule_id: v8Ue77
        version_id: GxTRk8
        url: https://semgrep.dev/playground/r/GxTRk8/kotlin.spring.mongo-driver-nosqli.mongo-driver-nosqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${...}..."
      - pattern: |
          "...${...}...".$MD(...)
      - pattern: |
          "..." + ...
      - pattern: |
          ... + "..."
      - pattern: |
          "...${...}..." + ...
      - pattern: |
          ... + "...${...}..."
      - pattern: |
          String.format(...)
    requires: USER_INPUT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $VAL
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.RawBsonDocument
              ...
        - pattern-either:
          - pattern: RawBsonDocument($VAL)
          - pattern: RawBsonDocument.parse($VAL)
          - pattern: '($X: RawBsonDocument).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = RawBsonDocument(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: RawBsonDocument).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = RawBsonDocument(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.json.*
              ...
          - pattern-inside: |
              import org.bson.json.JsonObject
              ...
        - pattern-either:
          - pattern: JsonObject($VAL)
          - pattern: JsonObject.parse($VAL)
          - pattern: '($X: JsonObject).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = JsonObject(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: JsonObject).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = JsonObject(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.Document
              ...
        - pattern-either:
          - pattern: Document($VAL)
          - patterns:
            - pattern: Document($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: Document.parse($VAL)
          - pattern: '($X: Document).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = Document(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: Document).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = Document(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import com.mongodb.*
              ...
          - pattern-inside: |
              import com.mongodb.BasicDBObject
              ...
        - pattern-either:
          - patterns:
            - pattern: BasicDBObject($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: BasicDBObject.parse($VAL)
          - pattern: '($X: BasicDBObject).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = BasicDBObject(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: BasicDBObject).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = BasicDBObject(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.BsonDocument
              ...
        - pattern-either:
          - patterns:
            - pattern: BsonDocument($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: BsonDocument.parse($VAL)
          - pattern: '($X: BsonDocument).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = BsonDocument(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: BsonDocument).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = BsonDocument(...)
                    ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import org.bson.*
              ...
          - pattern-inside: |
              import org.bson.Document
              ...
        - pattern-either:
          - pattern: Document($VAL)
          - patterns:
            - pattern: Document($KEY, $VAL)
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
          - pattern: Document.parse($VAL)
          - pattern: '($X: Document).$METHOD($VAL)'
          - patterns:
            - pattern: $X.putAll($VAL)
            - pattern-inside: |
                $X = Document(...)
                ...
          - patterns:
            - metavariable-pattern:
                metavariable: $METHOD
                patterns:
                - pattern-either:
                  - pattern: append
                  - pattern: put
            - metavariable-regex:
                metavariable: $KEY
                regex: .*(where|expr|regex|jsonSchema).*
            - pattern-either:
              - pattern: '($X: Document).$METHOD($KEY, $VAL)'
              - patterns:
                - pattern: $X.$METHOD($KEY, $VAL)
                - pattern-inside: |
                    $X = Document(...)
                    ...
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.spring.spring-data-mongo-nosqli.spring-data-mongo-nosqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid using tainted user input to construct NoSQL statements if possible.
    Ideally, avoid raw queries and instead use parameterized queries. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - spring-data
    - mongo
    - nosql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.spring-data-mongo-nosqli.spring-data-mongo-nosqli
    shortlink: https://sg.run/1w35
    semgrep.dev:
      rule:
        rule_id: d8UXdG
        version_id: BjTAky
        url: https://semgrep.dev/playground/r/BjTAky/kotlin.spring.spring-data-mongo-nosqli.spring-data-mongo-nosqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${...}..."
      - pattern: |
          "...${...}...".$MD(...)
      - pattern: |
          "..." + ...
      - pattern: |
          ... + "..."
      - pattern: |
          "...${...}..." + ...
      - pattern: |
          ... + "...${...}..."
      - pattern: |
          String.format(...)
    requires: USER_INPUT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.springframework.data.mongodb.core.*
                ...
            - pattern-inside: |
                import org.springframework.data.mongodb.core.query
                ...
          - pattern: query.BasicQuery($QUERY,...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.springframework.data.mongodb.core.query.*
                ...
            - pattern-inside: |
                import org.springframework.data.mongodb.core.query.BasicQuery
                ...
          - pattern: BasicQuery($QUERY,...)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.springframework.data.mongodb.core.aggregation.*
                ...
            - pattern-inside: |
                import org.springframework.data.mongodb.core.aggregation.Aggregation
                ...
          - pattern: Aggregation.stage($QUERY,...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.springframework.data.mongodb.core.aggregation.Aggregation.*
                ...
            - pattern-inside: |
                import org.springframework.data.mongodb.core.aggregation.Aggregation.stage
                ...
          - pattern: stage($QUERY,...)
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.spring.tainted-ssrf-spring-add.tainted-ssrf-spring-add
  message: 'Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - spring
    - kotlin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.tainted-ssrf-spring-add.tainted-ssrf-spring-add
    shortlink: https://sg.run/9BXe
    semgrep.dev:
      rule:
        rule_id: ZqU0Yd
        version_id: DkTjRX
        url: https://semgrep.dev/playground/r/DkTjRX/kotlin.spring.tainted-ssrf-spring-add.tainted-ssrf-spring-add
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${$X}..."
      - pattern: |
          $F + $X
      - pattern: |
          String.format(..., $X, ...)
    - pattern-not: |
        "${$X}..."
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        "http://${$X}..."
    - pattern-not: |
        "https://${$X}..."
    - pattern-not: |
        "//${$X}..."
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
    requires: USER_INPUT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: HttpRequest. ... .newBuilder($URL)
      - pattern: HttpRequest. ... .uri($URL)
      - pattern: HttpGet($URL)
      - pattern: HttpHead($URL)
      - pattern: HttpOptions($URL)
      - pattern: HttpPatch($URL)
      - pattern: HttpPost($URL)
      - pattern: HttpPut($URL)
      - pattern: HttpDelete($URL)
      - pattern: Jsoup.connect($URL)
      - pattern: Request.Builder(). ... .url($URL)
      - patterns:
        - pattern-either:
          - pattern: '($REST: RestTemplate).$RESTFUNC($URL, ...)'
          - pattern: RestTemplate(...).$RESTFUNC($URL, ...)
          - patterns:
            - pattern: $REST.$RESTFUNC($URL, ...)
            - pattern-inside: |
                $REST = RestTemplate(...)
                ...
        - metavariable-regex:
            metavariable: $RESTFUNC
            regex: ^(exchange|doExecute|execute|getForEntity|getForObject|patchForObject|postForEntity|postForLocation|postForObject|put)$
      - patterns:
        - pattern-either:
          - pattern: WebClient. ... .$URIFUNC($URL). ... .retrieve(...)
          - pattern: '($CLIENT: WebClient). ... .$URIFUNC($URL). ... .retrieve(...)'
          - patterns:
            - pattern: $CLIENT. ... .$URIFUNC($URL). ... .retrieve(...)
            - pattern-inside: |
                $CLIENT = WebClient(...)
                ...
        - metavariable-regex:
            metavariable: $URIFUNC
            regex: ^(uri|baseUrl|create)$
      - patterns:
        - pattern-either:
          - pattern: URL($URL, ...).$FUNC(...)
          - pattern: |
              $NEW = URL($URL, ...)
              ...
              $NEW.$FUNC(...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(openConnection|openStream)$
    - focus-metavariable: $URL
    requires: USER_INPUT and not CONCAT
- id: kotlin.spring.tainted-ssrf-spring-format.tainted-ssrf-spring-format
  message: 'Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - spring
    - kotlin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.tainted-ssrf-spring-format.tainted-ssrf-spring-format
    shortlink: https://sg.run/yKn7
    semgrep.dev:
      rule:
        rule_id: nJUXgL
        version_id: WrTwqJ
        url: https://semgrep.dev/playground/r/WrTwqJ/kotlin.spring.tainted-ssrf-spring-format.tainted-ssrf-spring-format
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  - label: FORMAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            String.format("$REGEX", $X,...)
        - metavariable-regex:
            metavariable: $REGEX
            regex: ^(http://|https://|//)%s.*
      - patterns:
        - pattern: |
            "...".format($X,...)
        - pattern: |
            $REGEX.format($X,...)
        - metavariable-regex:
            metavariable: $REGEX
            regex: ^"(http://|https://|//)%s.*
    - focus-metavariable: $X
    requires: USER_INPUT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: HttpRequest. ... .newBuilder($URL)
      - pattern: HttpRequest. ... .uri($URL)
      - pattern: HttpGet($URL)
      - pattern: HttpHead($URL)
      - pattern: HttpOptions($URL)
      - pattern: HttpPatch($URL)
      - pattern: HttpPost($URL)
      - pattern: HttpPut($URL)
      - pattern: HttpDelete($URL)
      - pattern: Jsoup.connect($URL)
      - pattern: Request.Builder(). ... .url($URL)
      - patterns:
        - pattern-either:
          - pattern: '($REST: RestTemplate).$RESTFUNC($URL, ...)'
          - pattern: RestTemplate(...).$RESTFUNC($URL, ...)
          - patterns:
            - pattern: $REST.$RESTFUNC($URL, ...)
            - pattern-inside: |
                $REST = RestTemplate(...)
                ...
        - metavariable-regex:
            metavariable: $RESTFUNC
            regex: ^(exchange|doExecute|execute|getForEntity|getForObject|patchForObject|postForEntity|postForLocation|postForObject|put)$
      - patterns:
        - pattern-either:
          - pattern: WebClient. ... .$URIFUNC($URL). ... .retrieve(...)
          - pattern: '($CLIENT: WebClient). ... .$URIFUNC($URL). ... .retrieve(...)'
          - patterns:
            - pattern: $CLIENT. ... .$URIFUNC($URL). ... .retrieve(...)
            - pattern-inside: |
                $CLIENT = WebClient(...)
                ...
        - metavariable-regex:
            metavariable: $URIFUNC
            regex: ^(uri|baseUrl|create)$
      - patterns:
        - pattern-either:
          - pattern: URL($URL, ...).$FUNC(...)
          - pattern: |
              $NEW = URL($URL, ...)
              ...
              $NEW.$FUNC(...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(openConnection|openStream)$
    - focus-metavariable: $URL
    requires: FORMAT
- id: kotlin.spring.tainted-system-command.tainted-system-command
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the input, and use safe methods for executing the commands.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.tainted-system-command.tainted-system-command
    shortlink: https://sg.run/rGnW
    semgrep.dev:
      rule:
        rule_id: EwU70w
        version_id: 0bTXK9
        url: https://semgrep.dev/playground/r/0bTXK9/kotlin.spring.tainted-system-command.tainted-system-command
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  - label: CONCAT
    patterns:
    - pattern-either:
      - pattern: |
          "...${...}..."
      - pattern: |
          "...${...}...".$MD(...)
      - pattern: |
          "..." + ...
      - pattern: |
          ... + "..."
      - pattern: |
          "...${...}..." + ...
      - pattern: |
          ... + "...${...}..."
      - pattern: |
          String.format(...)
    requires: USER_INPUT
  pattern-propagators:
  - from: $INPUT
    label: STRBUILDER_CONCAT
    patterns:
    - patterns:
      - pattern-either:
        - pattern: '($STRB: StringBuilder).append($INPUT)'
        - patterns:
          - pattern: $STRB.append($INPUT)
          - pattern-inside: |
              $STRB = StringBuilder(...)
              ...
    requires: USER_INPUT
    to: $STRB
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $P = Process(...)
      - pattern: '($PB: ProcessBuilder).command(...)'
      - pattern: ProcessBuilder(...). ... .start(...)
      - pattern: ProcessBuilder(...). ... .command(...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: $R.$EXEC(...)
            - pattern-inside: |
                $R = Runtime.getRuntime(...)
                ...
          - pattern: '($R: Runtime).$EXEC(...)'
          - pattern: Runtime.getRuntime(...).$EXEC(...)
        - metavariable-regex:
            metavariable: $EXEC
            regex: (exec|loadLibrary|load)
      - patterns:
        - pattern-either:
          - pattern: '($PB: ProcessBuilder).command(...).$ADD(...)'
          - patterns:
            - pattern: $PB.command(...).$ADD(...)
            - pattern-inside: |
                $PB = ProcessBuilder(...)
                ...
        - metavariable-regex:
            metavariable: $ADD
            regex: (add|addAll)
      - patterns:
        - pattern-either:
          - pattern: $BUILDER.start(...)
          - pattern: $BUILDER.command(...)
        - pattern-inside: |
            $BUILDER = ProcessBuilder(...)
            ...
    requires: CONCAT or STRBUILDER_CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
  - pattern: arrayOf(...)
- id: kotlin.sql.apache-hardcoded-empty-secret.apache-hardcoded-empty-secret
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.sql.apache-hardcoded-empty-secret.apache-hardcoded-empty-secret
    shortlink: https://sg.run/bdkQ
    semgrep.dev:
      rule:
        rule_id: 7KU04A
        version_id: K3TXKO
        url: https://semgrep.dev/playground/r/K3TXKO/kotlin.sql.apache-hardcoded-empty-secret.apache-hardcoded-empty-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.apache.commons.*
            ...
        - pattern-inside: |
            import org.apache.commons.dbcp2
            ...
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $X = dbcp2.BasicDataSource(...)
              ...
          - pattern: |
              $X.password = ""
        - patterns:
          - pattern-inside: |
              dbcp2.BasicDataSource().apply {...}
          - pattern: |
              password = ""
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.apache.commons.dbcp2.*
            ...
        - pattern-inside: |
            import org.apache.commons.dbcp2.BasicDataSource
            ...
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $X = BasicDataSource(...)
              ...
          - pattern: |
              $X.password = ""
        - patterns:
          - pattern-inside: |
              BasicDataSource().apply {...}
          - pattern: |
              password = ""
- id: kotlin.sql.apache-hardcoded-secret.apache-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    - database
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.sql.apache-hardcoded-secret.apache-hardcoded-secret
    shortlink: https://sg.run/NkDA
    semgrep.dev:
      rule:
        rule_id: L1UZ8w
        version_id: qkTyR9
        url: https://semgrep.dev/playground/r/qkTyR9/kotlin.sql.apache-hardcoded-secret.apache-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.apache.commons.*
            ...
        - pattern-inside: |
            import org.apache.commons.dbcp2
            ...
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $X = dbcp2.BasicDataSource(...)
              ...
          - pattern: $X.password = "..."
          - pattern-not: $X.password = ""
          - pattern-not: $X.password = "...${...}..."
        - patterns:
          - pattern-inside: |
              dbcp2.BasicDataSource().apply {...}
          - pattern: password = "..."
          - pattern-not: password = ""
          - pattern-not: password = "...${...}..."
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.apache.commons.dbcp2.*
            ...
        - pattern-inside: |
            import org.apache.commons.dbcp2.BasicDataSource
            ...
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $X = BasicDataSource(...)
              ...
          - pattern: $X.password = "..."
          - pattern-not: $X.password = ""
          - pattern-not: $X.password = "...${...}..."
        - patterns:
          - pattern-inside: |
              BasicDataSource().apply {...}
          - pattern: password = "..."
          - pattern-not: password = ""
          - pattern-not: password = "...${...}..."
- id: kotlin.sql.drivermanager-hardcoded-empty-secret.drivermanager-hardcoded-empty-secret
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    - database
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.sql.drivermanager-hardcoded-empty-secret.drivermanager-hardcoded-empty-secret
    shortlink: https://sg.run/kdge
    semgrep.dev:
      rule:
        rule_id: 8GUR8d
        version_id: l4T0JY
        url: https://semgrep.dev/playground/r/l4T0JY/kotlin.sql.drivermanager-hardcoded-empty-secret.drivermanager-hardcoded-empty-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import java.*
            ...
        - pattern-inside: |
            import java.sql
            ...
      - patterns:
        - pattern-inside: |
            sql.DriverManager.getConnection($DB, $USERNAME, "")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import java.sql.*
            ...
        - pattern-inside: |
            import java.sql.DriverManager
            ...
      - patterns:
        - pattern-inside: |
            DriverManager.getConnection($DB, $USERNAME, "")
- id: kotlin.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    - database
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret
    shortlink: https://sg.run/wWnB
    semgrep.dev:
      rule:
        rule_id: gxUdQq
        version_id: YDT7Zg
        url: https://semgrep.dev/playground/r/YDT7Zg/kotlin.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import java.*
            ...
        - pattern-inside: |
            import java.sql
            ...
      - patterns:
        - pattern-inside: |
            sql.DriverManager.getConnection($DB, $USERNAME, "...")
        - pattern-not: sql.DriverManager.getConnection($DB, $USERNAME, "")
        - pattern-not: sql.DriverManager.getConnection($DB, $USERNAME, "...${...}...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import java.sql.*
            ...
        - pattern-inside: |
            import java.sql.DriverManager
            ...
      - patterns:
        - pattern-inside: |
            DriverManager.getConnection($DB, $USERNAME, "...")
        - pattern-not: DriverManager.getConnection($DB, $USERNAME, "")
        - pattern-not: DriverManager.getConnection($DB, $USERNAME, "...${...}...")
- id: kotlin.sql.jetbrains-hardcoded-empty-secret.jetbrains-hardcoded-empty-secret
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    - database
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.sql.jetbrains-hardcoded-empty-secret.jetbrains-hardcoded-empty-secret
    shortlink: https://sg.run/x0nl
    semgrep.dev:
      rule:
        rule_id: QrUPey
        version_id: 6xTo27
        url: https://semgrep.dev/playground/r/6xTo27/kotlin.sql.jetbrains-hardcoded-empty-secret.jetbrains-hardcoded-empty-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.jetbrains.exposed.*
            ...
        - pattern-inside: |
            import org.jetbrains.exposed.sql
            ...
      - patterns:
        - pattern: |
            sql.Database.connect(...,password = "",...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.jetbrains.exposed.sql.*
            ...
        - pattern-inside: |
            import org.jetbrains.exposed.sql.Database
            ...
      - patterns:
        - pattern: |
            Database.connect(...,password = "",...)
- id: kotlin.sql.jetbrains-hardcoded-secret.jetbrains-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - secrets
    - database
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.sql.jetbrains-hardcoded-secret.jetbrains-hardcoded-secret
    shortlink: https://sg.run/O3Ww
    semgrep.dev:
      rule:
        rule_id: 3qUq09
        version_id: o5Twbj
        url: https://semgrep.dev/playground/r/o5Twbj/kotlin.sql.jetbrains-hardcoded-secret.jetbrains-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.jetbrains.exposed.*
            ...
        - pattern-inside: |
            import org.jetbrains.exposed.sql
            ...
      - patterns:
        - pattern: |
            sql.Database.connect(...,password = "...",...)
        - pattern-not: |
            sql.Database.connect(...,password = "",...)
        - pattern-not: |
            sql.Database.connect(...,password = "...${...}...",...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import org.jetbrains.exposed.sql.*
            ...
        - pattern-inside: |
            import org.jetbrains.exposed.sql.Database
            ...
      - patterns:
        - pattern: |
            Database.connect(...,password = "...",...)
        - pattern-not: |
            Database.connect(...,password = "",...)
        - pattern-not: |
            Database.connect(...,password = "...${...}...",...)
- id: kotlin.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)` `$FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)` Beware, using a custom EntityResolver will render these settings useless
    and you will be responsible for handling security in the implementation of your
    EntityResolver. The best defense against XXE is to have an XML parser that supports
    disabling DTDs. Limiting the use of external entities from the start can prevent
    the parser from being used to process untrusted XML files. Reducing dependencies
    on external resources is also a good practice for performance reasons. It is difficult
    to guarantee that even a trusted XML file on your server or during transmission
    has not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity
    shortlink: https://sg.run/e7jZ
    semgrep.dev:
      rule:
        rule_id: 4bU4Py
        version_id: zyTZb0
        url: https://semgrep.dev/playground/r/zyTZb0/kotlin.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $FACTORY = DocumentBuilderFactory.newInstance()
  - pattern-inside: |
      $FACTORY = ...
      ...
      $PARSER = $FACTORY.newDocumentBuilder()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $PARSER = $FACTORY.newDocumentBuilder()
      ...
      $PARSER.setEntityResolver(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $PARSER = $FACTORY.newDocumentBuilder()
      ...
      $PARSER.entityResolver = ...
- id: kotlin.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setExpandEntityReferences(false)` `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)` `$FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
    false)`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe
    shortlink: https://sg.run/vDG8
    semgrep.dev:
      rule:
        rule_id: PeU4rJ
        version_id: pZTY0d
        url: https://semgrep.dev/playground/r/pZTY0d/kotlin.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $FACTORY = DocumentBuilderFactory.newInstance()
  - pattern-inside: |
      $FACTORY = ...
      ...
      $PARSER = $FACTORY.newDocumentBuilder()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setExpandEntityReferences(false)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $PARSER = $FACTORY.newDocumentBuilder()
      ...
      $PARSER.setEntityResolver(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $PARSER = $FACTORY.newDocumentBuilder()
      ...
      $PARSER.entityResolver = ...
- id: kotlin.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,
    "")` `$PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities
    shortlink: https://sg.run/ddX6
    semgrep.dev:
      rule:
        rule_id: JDU0r5
        version_id: 2KTjvZ
        url: https://semgrep.dev/playground/r/2KTjvZ/kotlin.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = SAXBuilder(...)
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
- id: kotlin.xxe.saxbuilder-xxe.saxbuilder-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The XML parser $PARSER is not securely configured.
    The current configuration allows for XXE attacks. It is our recommendation to
    secure this parser against XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` `$PARSER.setExpandEntities(false)` It is also possible to use one of the
    constructor parameters that will result in a more secure parser by default: `new
    SAXBuilder(XMLReaders.DTDVALIDATING)` or `new SAXBuilder(XMLReaders.XSDVALIDATING)`.
    The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxbuilder-xxe.saxbuilder-xxe
    shortlink: https://sg.run/Zd0W
    semgrep.dev:
      rule:
        rule_id: 5rUWDP
        version_id: X0TqzE
        url: https://semgrep.dev/playground/r/X0TqzE/kotlin.xxe.saxbuilder-xxe.saxbuilder-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = SAXBuilder(...)
  - pattern-not: $PARSER = SAXBuilder(XMLReaders.DTDVALIDATING)
  - pattern-not: $PARSER = SAXBuilder(XMLReaders.XSDVALIDATING)
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setExpandEntities(false)
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false)
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      $PARSER = SAXBuilder(...)
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
- id: kotlin.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    all types of XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)` `$FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)` `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. The best
    defense against XXE is to have an XML parser that supports disabling DTDs. Limiting
    the use of external entities from the start can prevent the parser from being
    used to process untrusted XML files. Reducing dependencies on external resources
    is also a good practice for performance reasons. It is difficult to guarantee
    that even a trusted XML file on your server or during transmission has not been
    tampered with by a malicious third-party. For more information, see: [Java XXE
    prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity
    shortlink: https://sg.run/n4xd
    semgrep.dev:
      rule:
        rule_id: GdUNE7
        version_id: jQT2nd
        url: https://semgrep.dev/playground/r/jQT2nd/kotlin.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $PARSER = $FACTORY.newSAXParser()
      - pattern-inside: |
          $FACTORY = SAXParserFactory.newInstance()
          ...
          $PARSER = $FACTORY.newSAXParser()
    - pattern: $PARSER = SAXParserFactory.newInstance().newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $PARSER = $FACTORY.newSAXParser()
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = $FACTORY.newSAXParser()
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
- id: kotlin.xxe.saxparserfactory-xxe.saxparserfactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`
    `$FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. The best
    defense against XXE is to have an XML parser that supports disabling DTDs. Limiting
    the use of external entities from the start can prevent the parser from being
    used to process untrusted XML files. Reducing dependencies on external resources
    is also a good practice for performance reasons. It is difficult to guarantee
    that even a trusted XML file on your server or during transmission has not been
    tampered with by a malicious third-party. For more information, see: [Java XXE
    prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxparserfactory-xxe.saxparserfactory-xxe
    shortlink: https://sg.run/E295
    semgrep.dev:
      rule:
        rule_id: ReUJGP
        version_id: 1QTvyG
        url: https://semgrep.dev/playground/r/1QTvyG/kotlin.xxe.saxparserfactory-xxe.saxparserfactory-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $PARSER = $FACTORY.newSAXParser()
      - pattern-inside: |
          $FACTORY = SAXParserFactory.newInstance()
          ...
          $PARSER = $FACTORY.newSAXParser()
    - pattern: $PARSER = SAXParserFactory.newInstance().newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $PARSER = $FACTORY.newSAXParser()
  - pattern-not-inside: |
      $PARSER = $FACTORY.newSAXParser()
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = $FACTORY.newSAXParser()
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
- id: kotlin.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities
    shortlink: https://sg.run/7RWG
    semgrep.dev:
      rule:
        rule_id: AbUD7G
        version_id: 9lTw4x
        url: https://semgrep.dev/playground/r/9lTw4x/kotlin.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = SAXReader(...)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.setEntityResolver(...)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.entityResolver = ...
- id: kotlin.xxe.saxreader-xxe.saxreader-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
    false)`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxreader-xxe.saxreader-xxe
    shortlink: https://sg.run/LbxX
    semgrep.dev:
      rule:
        rule_id: BYUq0d
        version_id: yeTrx7
        url: https://semgrep.dev/playground/r/yeTrx7/kotlin.xxe.saxreader-xxe.saxreader-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = SAXReader(...)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.setEntityResolver(...)
  - pattern-not-inside: |
      $PARSER = SAXReader(...)
      ...
      $PARSER.entityResolver = ...
- id: kotlin.xxe.saxtransformerfactory-xxe-stylesheet.saxtransformerfactory-xxe-stylesheet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The current configuration allows for XXE attacks
    in XML Stylesheet (.xsl files). It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. The
    best defense against XXE is to have an XML parser that supports disabling DTDs.
    Limiting the use of external entities from the start can prevent the parser from
    being used to process untrusted XML files. Reducing dependencies on external resources
    is also a good practice for performance reasons. It is difficult to guarantee
    that even a trusted XML file on your server or during transmission has not been
    tampered with by a malicious third-party. For more information, see: [Java XXE
    prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxtransformerfactory-xxe-stylesheet.saxtransformerfactory-xxe-stylesheet
    shortlink: https://sg.run/8A0g
    semgrep.dev:
      rule:
        rule_id: DbUl0x
        version_id: rxTeAz
        url: https://semgrep.dev/playground/r/rxTeAz/kotlin.xxe.saxtransformerfactory-xxe-stylesheet.saxtransformerfactory-xxe-stylesheet
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern-either:
    - pattern: $PARSER = TransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = SAXTransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = SAXTransformerFactory.newDefaultInstance(...).newTransformer(...)
    - patterns:
      - pattern-either:
        - pattern: '$PARSER = ($FACTORY: SAXTransformerFactory).newTransformer(...)'
        - pattern: '$PARSER = ($FACTORY: TransformerFactory).newTransformer(...)'
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setFeature("=~/.*secure-processing.*/", true)
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "")
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "")
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $PARSER.transform(($S: DOMSource),...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $S = DOMSource(...)
          ...
          $PARSER.transform($S,...)
      - pattern-not-inside: |
          $S = DOMSource(...)
          ...
          $FACTORY = ...
          ...
          $PARSER.transform($S,...)
- id: kotlin.xxe.saxtransformerfactory-xxe.saxtransformerfactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. The
    best defense against XXE is to have an XML parser that supports disabling DTDs.
    Limiting the use of external entities from the start can prevent the parser from
    being used to process untrusted XML files. Reducing dependencies on external resources
    is also a good practice for performance reasons. It is difficult to guarantee
    that even a trusted XML file on your server or during transmission has not been
    tampered with by a malicious third-party. For more information, see: [Java XXE
    prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.saxtransformerfactory-xxe.saxtransformerfactory-xxe
    shortlink: https://sg.run/g39R
    semgrep.dev:
      rule:
        rule_id: WAUBpd
        version_id: bZTd5o
        url: https://semgrep.dev/playground/r/bZTd5o/kotlin.xxe.saxtransformerfactory-xxe.saxtransformerfactory-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern-either:
    - pattern: $PARSER = TransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = SAXTransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = SAXTransformerFactory.newDefaultInstance(...).newTransformer(...)
    - patterns:
      - pattern-either:
        - pattern: '$PARSER = ($FACTORY: SAXTransformerFactory).newTransformer(...)'
        - pattern: '$PARSER = ($FACTORY: TransformerFactory).newTransformer(...)'
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setFeature("=~/.*secure-processing.*/", true)
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "")
          ...
          $PARSER = $FACTORY.newTransformer(...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $PARSER.transform(($S: DOMSource),...)
      - pattern-not-inside: |
          $FACTORY = ...
          ...
          $S = DOMSource(...)
          ...
          $PARSER.transform($S,...)
      - pattern-not-inside: |
          $S = DOMSource(...)
          ...
          $FACTORY = ...
          ...
          $PARSER.transform($S,...)
- id: kotlin.xxe.schemafactory-xxe-schema.schemafactory-xxe-schema
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The current configuration allows for XXE attacks
    via XML Schema (`.xsd` files). It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")`.
    The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.schemafactory-xxe-schema.schemafactory-xxe-schema
    shortlink: https://sg.run/QdPJ
    semgrep.dev:
      rule:
        rule_id: 0oUNbp
        version_id: NdTjzy
        url: https://semgrep.dev/playground/r/NdTjzy/kotlin.xxe.schemafactory-xxe-schema.schemafactory-xxe-schema
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = $FACTORY.newSchema(...)
  - pattern-inside: |
      $FACTORY = SchemaFactory.newInstance(...)
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true)
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setProperty("=~/.*accessExternalSchema.*/", "")
      ...
      $PARSER = $FACTORY.newSchema(...)
- id: kotlin.xxe.schemafactory-xxe.schemafactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA,
    "")`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.schemafactory-xxe.schemafactory-xxe
    shortlink: https://sg.run/3PRG
    semgrep.dev:
      rule:
        rule_id: KxUEqJ
        version_id: kbTbzb
        url: https://semgrep.dev/playground/r/kbTbzb/kotlin.xxe.schemafactory-xxe.schemafactory-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = $FACTORY.newSchema(...)
  - pattern-inside: |
      $FACTORY = SchemaFactory.newInstance(...)
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true)
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
      ...
      $PARSER = $FACTORY.newSchema(...)
  - pattern-not-inside: |
      $FACTORY = ...
      ...
      $FACTORY.setProperty("=~/.*accessExternalDTD.*/", "")
      ...
      $PARSER = $FACTORY.newSchema(...)
- id: kotlin.xxe.validator-xxe.validator-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $PARSER with `$PARSER.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""). The best
    defense against XXE is to have an XML parser that supports disabling DTDs. Limiting
    the use of external entities from the start can prevent the parser from being
    used to process untrusted XML files. Reducing dependencies on external resources
    is also a good practice for performance reasons. It is difficult to guarantee
    that even a trusted XML file on your server or during transmission has not been
    tampered with by a malicious third-party. For more information, see: [Java XXE
    prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.validator-xxe.validator-xxe
    shortlink: https://sg.run/4JAL
    semgrep.dev:
      rule:
        rule_id: qNU6nx
        version_id: w8TLRw
        url: https://semgrep.dev/playground/r/w8TLRw/kotlin.xxe.validator-xxe.validator-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: '$PARSER = ($S: Schema).newValidator(...)'
  - pattern-not-inside: |
      $PARSER = ...
      ...
      $PARSER.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)
  - pattern-not-inside: |
      $PARSER = ...
      ...
      $PARSER.setFeature("=~/.*secure-processing.*/", true)
  - pattern-not-inside: |
      $PARSER = ...
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = ...
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
- id: kotlin.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks through parameter entities by configuring $FACTORY with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities
    shortlink: https://sg.run/Pd43
    semgrep.dev:
      rule:
        rule_id: lBUkO6
        version_id: xyT5jX
        url: https://semgrep.dev/playground/r/xyT5jX/kotlin.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = $S.$CREATE(...)
  - metavariable-pattern:
      metavariable: $S
      patterns:
      - pattern-either:
        - pattern: SAXParserFactory.newInstance().newSAXParser()
        - pattern: $FACTORY.newSAXParser()
        - pattern: '($X: SAXParser)'
        - pattern: XMLReaderFactory
  - metavariable-pattern:
      metavariable: $CREATE
      patterns:
      - pattern-either:
        - pattern: getXMLReader
        - pattern: createXMLReader
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...)
        ...
      }
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
- id: kotlin.xxe.xmlreader-xxe.xmlreader-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
    false)`. The best defense against XXE is to have an XML parser that supports disabling
    DTDs. Limiting the use of external entities from the start can prevent the parser
    from being used to process untrusted XML files. Reducing dependencies on external
    resources is also a good practice for performance reasons. It is difficult to
    guarantee that even a trusted XML file on your server or during transmission has
    not been tampered with by a malicious third-party. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/776.html
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    technology:
    - kotlin
    - xml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.xxe.xmlreader-xxe.xmlreader-xxe
    shortlink: https://sg.run/JykR
    semgrep.dev:
      rule:
        rule_id: PeU4rR
        version_id: O9TbpP
        url: https://semgrep.dev/playground/r/O9TbpP/kotlin.xxe.xmlreader-xxe.xmlreader-xxe
        origin: pro_rules
  languages:
  - kotlin
  patterns:
  - pattern: $PARSER = $S.$CREATE(...)
  - metavariable-pattern:
      metavariable: $S
      patterns:
      - pattern-either:
        - pattern: SAXParserFactory.newInstance().newSAXParser()
        - pattern: $FACTORY.newSAXParser()
        - pattern: '($X: SAXParser)'
        - pattern: XMLReaderFactory
  - metavariable-pattern:
      metavariable: $CREATE
      patterns:
      - pattern-either:
        - pattern: getXMLReader
        - pattern: createXMLReader
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "")
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...)
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false)
- id: java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://blog.sonarsource.com/secure-xml-processor
    - https://xerces.apache.org/xerces2-j/features.html
    category: security
    technology:
    - java
    - xml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled
    shortlink: https://sg.run/1wyQ
    semgrep.dev:
      rule:
        rule_id: v8UeQ1
        version_id: 7ZTyKK
        url: https://semgrep.dev/playground/r/7ZTyKK/java.lang.security.audit.xxe.transformerfactory-dtds-not-disabled.transformerfactory-dtds-not-disabled
        origin: community
  message: DOCTYPE declarations are enabled for this TransformerFactory. This is vulnerable
    to XML external entity attacks. Disable this by setting the attributes "accessExternalDTD"
    and "accessExternalStylesheet" to "".
  mode: taint
  pattern-sources:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: |
          $FACTORY = TransformerFactory.newInstance();
      - patterns:
        - pattern: $FACTORY
        - pattern-inside: |
            class $C {
              ...
              $V $FACTORY = TransformerFactory.newInstance();
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = TransformerFactory.newInstance();
              static {
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = TransformerFactory.newInstance();
              static {
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = TransformerFactory.newInstance();
              static {
                ...
                $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
                ...
                $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "");
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = TransformerFactory.newInstance();
              static {
                ...
                $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "");
                ...
                $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
                ...
              }
              ...
            }
  pattern-sinks:
  - patterns:
    - pattern: $FACTORY.newTransformer(...);
  pattern-sanitizers:
  - by-side-effect: true
    pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, ""); ...
            $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
        - pattern: |
            $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
            ...
            $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
        - pattern: |
            $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", ""); ...
            $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
        - pattern: |
            $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
            ...
            $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "");
      - focus-metavariable: $FACTORY
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
                ...
                $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "");
                ...
                $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
                ...
                $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "");
                ...
              }
              ...
            }
      - pattern: $M($X)
      - focus-metavariable: $X
  fix: |
    $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
    $FACTORY.newTransformer(...);
  languages:
  - java
- id: javascript.express.regexp-redos.regexp-redos
  message: 'Detected `$REQ` argument enters calls to `RegExp`. This could lead to
    a Regular Expression Denial of Service (ReDoS) through catastrophic backtracking.
    If the input is attacker controllable, this vulnerability can lead to systems
    being non-responsive or may crash due to ReDoS. Where possible avoid calls to
    `RegExp` with user input, if required ensure user input is escaped or validated. '
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    references:
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    - https://www.regular-expressions.info/catastrophic.html
    technology:
    - javascript
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.regexp-redos.regexp-redos
    shortlink: https://sg.run/D0nY
    semgrep.dev:
      rule:
        rule_id: X5UpjY
        version_id: l4TOkG
        url: https://semgrep.dev/playground/r/l4TOkG/javascript.express.regexp-redos.regexp-redos
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{ $REQ }: Request,...) => {...}
      - pattern-inside: |
          (...,{ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: new RegExp($REGEX,...)
      - pattern: $VALUE. ... .match($REGEX)
    - focus-metavariable: $REGEX
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $ESCAPE = require('escape-string-regexp')
          ...
      - pattern-inside: |
          import $ESCAPE = require('escape-string-regexp')
           ...
      - pattern-inside: |
          import $ESCAPE from 'escape-string-regexp'
           ...
      - pattern-inside: |
          import {...,$ESCAPE,...} from 'escape-string-regexp'
           ...
      - pattern-inside: |
          import * as $ESCAPE from 'escape-string-regexp'
           ...
    - pattern: $ESCAPE(...)
- id: javascript.jssha.jssha-sha1.jssha-sha1
  message: The SHA1 hashing algorithm is considered to be weak. If this is used in
    any sensitive operation such as password hashing, or is used to ensure data integrity
    (collision sensitive) then you should use a stronger hashing algorithm. For passwords,
    consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider
    using `SHA-256`.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    technology:
    - node.js
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.jssha.jssha-sha1.jssha-sha1
    shortlink: https://sg.run/ERyN
    semgrep.dev:
      rule:
        rule_id: OrULl4
        version_id: zyTJo2
        url: https://semgrep.dev/playground/r/zyTJo2/javascript.jssha.jssha-sha1.jssha-sha1
        origin: pro_rules
  languages:
  - js
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require("jssha")
        ...
    - pattern-inside: |
        $X = require("jssha/sha1")
        ...
    - pattern-inside: |
        $X = require("jssha/dist/sha1")
        ...
    - pattern-inside: |
        import $X from "jssha"
        ...
  - pattern: new $X("SHA-1",...)
- id: javascript.browser.security.raw-html-concat.raw-html-concat
  message: User controlled data in a HTML string may result in XSS
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/xss/
    category: security
    technology:
    - browser
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/javascript.browser.security.raw-html-concat.raw-html-concat
    shortlink: https://sg.run/4xAx
    semgrep.dev:
      rule:
        rule_id: 0oU5b5
        version_id: WrTDQ3
        url: https://semgrep.dev/playground/r/WrTDQ3/javascript.browser.security.raw-html-concat.raw-html-concat
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: location.href
      - pattern: location.hash
      - pattern: location.search
      - pattern: $WINDOW. ... .location.href
      - pattern: $WINDOW. ... .location.hash
      - pattern: $WINDOW. ... .location.search
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $STRING + $EXPR
        - pattern-not: $STRING + "..."
        - metavariable-pattern:
            patterns:
            - pattern: <$TAG ...
            - pattern-not: <$TAG ...>...</$TAG>...
            metavariable: $STRING
            language: generic
      - patterns:
        - pattern: $EXPR + $STRING
        - pattern-not: '"..." + $STRING'
        - metavariable-pattern:
            patterns:
            - pattern: '... </$TAG'
            metavariable: $STRING
            language: generic
      - patterns:
        - pattern: '[..., $STRING, ...].join(...)'
        - metavariable-pattern:
            patterns:
            - pattern: <$TAG ...
            metavariable: $STRING
            language: generic
      - patterns:
        - pattern: '[..., $STRING, ...].join(...)'
        - metavariable-pattern:
            patterns:
            - pattern: '... </$TAG'
            metavariable: $STRING
            language: generic
      - patterns:
        - pattern: $VAR += $STRING
        - metavariable-pattern:
            patterns:
            - pattern: <$TAG ...
            metavariable: $STRING
            language: generic
      - patterns:
        - pattern: $VAR += $STRING
        - metavariable-pattern:
            patterns:
            - pattern: '... </$TAG'
            metavariable: $STRING
            language: generic
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
  message: If unverified user data can reach the `addInitScript` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - playwright
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
    shortlink: https://sg.run/Zv94
    semgrep.dev:
      rule:
        rule_id: 4bUkj1
        version_id: BjTGPW
        url: https://semgrep.dev/playground/r/BjTGPW/javascript.playwright.security.audit.playwright-addinitscript-code-injection.playwright-addinitscript-code-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-not-inside: |
      var $INPUT = function $FNAME(...){...};
      ...
  - pattern: $CONTEXT.addInitScript($INPUT,...)
  - pattern-not: $CONTEXT.addInitScript("...",...)
  - pattern-not: $CONTEXT.addInitScript(function(...){...},...)
- id: javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - puppeteer
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
    shortlink: https://sg.run/Q5Yq
    semgrep.dev:
      rule:
        rule_id: BYUNZk
        version_id: YDT8yD
        url: https://semgrep.dev/playground/r/YDT8yD/javascript.puppeteer.security.audit.puppeteer-evaluate-code-injection.puppeteer-evaluate-code-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('puppeteer');
      ...
  - pattern-not-inside: |
      var $INPUT = function $FNAME(...){...};
      ...
  - pattern-either:
    - pattern: $PAGE.evaluate($INPUT,...)
    - pattern: $PAGE.evaluateHandle($INPUT,...)
    - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
  - pattern-not: $PAGE.evaluate("...",...)
  - pattern-not: $PAGE.evaluate(function(...){...},...)
  - pattern-not: $PAGE.evaluateHandle("...",...)
  - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
- id: python.django.security.audit.xss.formathtml-fstring-parameter.formathtml-fstring-parameter
  message: Passing a formatted string as first parameter to `format_html` disables
    the proper encoding of variables. Any HTML in the first parameter is not encoded.
    Using a formatted string as first parameter obscures which parameters are encoded.
    Correct use of `format_html` is passing a static format string as first parameter,
    and the variables to substitute as subsequent parameters.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.html.format_html
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.formathtml-fstring-parameter.formathtml-fstring-parameter
    shortlink: https://sg.run/lxQo
    semgrep.dev:
      rule:
        rule_id: v8UjKg
        version_id: 9lTng2
        url: https://semgrep.dev/playground/r/9lTng2/python.django.security.audit.xss.formathtml-fstring-parameter.formathtml-fstring-parameter
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: format_html(<... f"..." ...>, ...)
  - pattern: format_html("..." % ..., ...)
  - pattern: format_html("...".format(...), ...)
- id: python.pymongo.security.mongodb.mongo-client-bad-auth
  pattern: |
    pymongo.MongoClient(..., authMechanism='MONGODB-CR')
  message: Warning MONGODB-CR was deprecated with the release of MongoDB 3.6 and is
    no longer supported by MongoDB 4.0 (see https://api.mongodb.com/python/current/examples/authentication.html
    for details).
  fix-regex:
    regex: MONGODB-CR
    replacement: SCRAM-SHA-256
  severity: WARNING
  languages:
  - python
  metadata:
    cwe:
    - 'CWE-477: Use of Obsolete Function'
    category: security
    technology:
    - pymongo
    references:
    - https://cwe.mitre.org/data/definitions/477.html
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pymongo.security.mongodb.mongo-client-bad-auth
    shortlink: https://sg.run/YXRd
    semgrep.dev:
      rule:
        rule_id: d8UlOX
        version_id: BjTG2w
        url: https://semgrep.dev/playground/r/BjTG2w/python.pymongo.security.mongodb.mongo-client-bad-auth
        origin: community
- id: generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth
  pattern-regex: '[fF][aA][cC][eE][bB][oO][oO][kK].*[tT][oO][kK][eE][nN].*[''|"]?[0-9a-f]{32}[''|"]?'
  languages:
  - regex
  message: Facebook OAuth detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - facebook
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth
    shortlink: https://sg.run/Klq6
    semgrep.dev:
      rule:
        rule_id: 9AU127
        version_id: xyT96b
        url: https://semgrep.dev/playground/r/xyT96b/generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth
        origin: community
- id: go.lang.security.injection.raw-html-format.raw-html-format
  languages:
  - go
  severity: WARNING
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. Use the `html/template` package which will
    safely render HTML instead, or inspect that the HTML is rendered safely.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - go
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    source: https://semgrep.dev/r/go.lang.security.injection.raw-html-format.raw-html-format
    shortlink: https://sg.run/3r1G
    semgrep.dev:
      rule:
        rule_id: PeUonQ
        version_id: w8T47o
        url: https://semgrep.dev/playground/r/w8T47o/go.lang.security.injection.raw-html-format.raw-html-format
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQUEST : *http.Request).$ANYTHING
      - pattern: |
          ($REQUEST : http.Request).$ANYTHING
    - metavariable-regex:
        metavariable: $ANYTHING
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$
  pattern-sanitizers:
  - pattern: html.EscapeString(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: fmt.Printf("$HTMLSTR", ...)
      - pattern: fmt.Sprintf("$HTMLSTR", ...)
      - pattern: fmt.Fprintf($W, "$HTMLSTR", ...)
      - pattern: '"$HTMLSTR" + ...'
    - metavariable-pattern:
        metavariable: $HTMLSTR
        language: generic
        pattern: <$TAG ...
- id: python.django.security.audit.raw-query.avoid-raw-sql
  message: 'Detected the use of ''RawSQL'' or ''raw'' indicating the execution of
    a non-parameterized SQL query. This could lead to a SQL injection and therefore
    protected information could be leaked. Instead, use Django ORM and parameterized
    queries before raw SQL. An example of using the Django ORM is: `People.objects.get(name=''Bob'')`'
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b611_django_rawsql_used.html
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#raw-sql-expressions
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql
    shortlink: https://sg.run/weDA
    semgrep.dev:
      rule:
        rule_id: EwU2JA
        version_id: rxTXz1
        url: https://semgrep.dev/playground/r/rxTXz1/python.django.security.audit.raw-query.avoid-raw-sql
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: $MODEL.objects.raw($QUERY, ...)
    - pattern: django.db.models.expressions.RawSQL(...)
  - pattern-not: $MODEL.objects.raw("...")
  - pattern-not: django.db.models.expressions.RawSQL("...")
- id: java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The XML parser $PARSER is not securely configured.
    The current configuration allows for XXE attacks. It is our recommendation to
    secure this parser against XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` `$PARSER.setExpandEntities(false)` It is also possible to use one of the
    constructor parameters that will result in a more secure parser by default: `new
    SAXBuilder(XMLReaders.DTDVALIDATING)` or `new SAXBuilder(XMLReaders.XSDVALIDATING)`.
    For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe
    shortlink: https://sg.run/Apb8
    semgrep.dev:
      rule:
        rule_id: L1Ukq7
        version_id: A8T2LR
        url: https://semgrep.dev/playground/r/A8T2LR/java.lang.security.xxe.saxbuilder-xxe.saxbuilder-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = new SAXBuilder(...);
  - pattern-not: $PARSER = new SAXBuilder(XMLReaders.DTDVALIDATING);
  - pattern-not: $PARSER = new SAXBuilder(XMLReaders.XSDVALIDATING);
  - pattern-not-inside: |
      $PARSER = new SAXBuilder(...);
      ...
      $PARSER.setExpandEntities(false);
  - pattern-not-inside: |
      $PARSER = new SAXBuilder(...);
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false);
  - pattern-not-inside: |
      $PARSER = new SAXBuilder(...);
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      $PARSER = new SAXBuilder(...);
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      $PARSER = new SAXBuilder(...);
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
- id: java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    all types of XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)` `$FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)` `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity
    shortlink: https://sg.run/BpY2
    semgrep.dev:
      rule:
        rule_id: 8GU5Qq
        version_id: BjTA8Y
        url: https://semgrep.dev/playground/r/BjTA8Y/java.lang.security.xxe.saxparserfactory-xxe-parameter-entity.saxparserfactory-xxe-parameter-entity
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: $PARSER = javax.xml.parsers.SAXParserFactory.newInstance().newSAXParser()
    - patterns:
      - pattern: |
          $PARSER = $FACTORY.newSAXParser();
      - pattern-inside: |
          $FACTORY = javax.xml.parsers.SAXParserFactory.newInstance();
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("=~/.*secure-processing.*/", true);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $PARSER = $FACTORY.newSAXParser();
          ...
          $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern-not-inside: |
          $PARSER = $FACTORY.newSAXParser();
          ...
          $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
- id: java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true)`
    `$FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe
    shortlink: https://sg.run/Dxbo
    semgrep.dev:
      rule:
        rule_id: gxUB31
        version_id: DkTjvz
        url: https://semgrep.dev/playground/r/DkTjvz/java.lang.security.xxe.saxparserfactory-xxe.saxparserfactory-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: $PARSER = javax.xml.parsers.SAXParserFactory.newInstance().newSAXParser()
    - patterns:
      - pattern: |
          $PARSER = $FACTORY.newSAXParser();
      - pattern-inside: |
          $FACTORY = javax.xml.parsers.SAXParserFactory.newInstance();
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("=~/.*secure-processing.*/", true);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
          ...
          $PARSER = $FACTORY.newSAXParser();
      - pattern-not-inside: |
          $PARSER = $FACTORY.newSAXParser();
          ...
          $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern-not-inside: |
          $PARSER = $FACTORY.newSAXParser();
          ...
          $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
- id: java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")`, or enabling
    both `factory.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` and `factory.setFeature("http://xml.org/sax/features/external-general-entities",
    false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring
    shortlink: https://sg.run/nDoX
    semgrep.dev:
      rule:
        rule_id: GdUgnL
        version_id: o5Tw55
        url: https://semgrep.dev/playground/r/o5Tw55/java.spring.security.xxe.tainted-documentbuilderfactory-xxe-spring.tainted-documentbuilderfactory-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: FACTORY
    patterns:
    - pattern-either:
      - pattern: (DocumentBuilderFactory $FACTORY)
      - pattern: DocumentBuilderFactory.newInstance(...)
  - label: DTD_DISABLED
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
          true);
      - pattern: $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $FACTORY
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  - label: ENTITY_RESOLVER
    by-side-effect: true
    patterns:
    - pattern: (DocumentBuilder $PARSER).setEntityResolver(...);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $FACTORY
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and FACTORY) and not (DTD_DISABLED or FSP or ENTITY_RESOLVER
      or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (DocumentBuilder $PARSER).parse(...)
- id: java.spring.security.xxe.tainted-saxbuilder-xxe-spring.tainted-saxbuilder-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the SAXBuilder parser with `parser.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`, enabling
    both of `parser.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` and `parser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`, and enabling both of `parser.setExpandEntities(false)` and parser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)` It is also possible to use one of the constructor parameters that will
    result in a more secure parser by default: `new SAXBuilder(XMLReaders.DTDVALIDATING)`
    or `new SAXBuilder(XMLReaders.XSDVALIDATING)`. For more information, see: [Java
    XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-saxbuilder-xxe-spring.tainted-saxbuilder-xxe-spring
    shortlink: https://sg.run/EKgw
    semgrep.dev:
      rule:
        rule_id: ReUd6D
        version_id: zyTZeX
        url: https://semgrep.dev/playground/r/zyTZeX/java.spring.security.xxe.tainted-saxbuilder-xxe-spring.tainted-saxbuilder-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SAXBUILDER
    patterns:
    - pattern: $PARSER = new SAXBuilder(...);
    - pattern-not: $PARSER = new SAXBuilder(XMLReaders.DTDVALIDATING);
    - pattern-not: $PARSER = new SAXBuilder(XMLReaders.XSDVALIDATING);
  - label: DTD_DISABLED
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  - label: DOCTYPE_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $PARSER
  - label: EXPAND_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setExpandEntities(false);
    - focus-metavariable: $PARSER
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and SAXBUILDER) and not (DTD_DISABLED or DOCTYPE_DISABLED
      or (EXPAND_ENT_DISABLED and PARAM_ENT_DISABLED) or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (SAXBuilder $PARSER).build(...)
- id: java.spring.security.xxe.tainted-saxparser-xxe-spring.tainted-saxparser-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the SAXParserFactory with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations for the SAXParserFactory also
    provide protection against XXE attacks. `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`, enabling both of `factory.setFeature("http://xml.org/sax/features/external-general-entities",
    and `factory.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. Furthermore, you can configure the SAXParser itself with `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,
    "")` to provide protection against XXE attacks. For more information, see: [Java
    XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-saxparser-xxe-spring.tainted-saxparser-xxe-spring
    shortlink: https://sg.run/726Z
    semgrep.dev:
      rule:
        rule_id: AbUxOk
        version_id: pZTYQJ
        url: https://semgrep.dev/playground/r/pZTYQJ/java.spring.security.xxe.tainted-saxparser-xxe-spring.tainted-saxparser-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SAXPARSER
    pattern: (SAXParser $PARSER)
  - label: DTD_DISABLED
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  - label: DOCTYPE_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $FACTORY
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $FACTORY
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and SAXPARSER) and not (DTD_DISABLED or DOCTYPE_DISABLED
      or FSP or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (SAXParser $PARSER).parse(...)
- id: java.spring.security.xxe.tainted-saxreader-xxe-spring.tainted-saxreader-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the SAXReader parser with `parser.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, configuring both of the below also provides protection
    against XXE attacks. `parser.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` `praser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-saxreader-xxe-spring.tainted-saxreader-xxe-spring
    shortlink: https://sg.run/Lpnr
    semgrep.dev:
      rule:
        rule_id: BYUogD
        version_id: 2KTj6n
        url: https://semgrep.dev/playground/r/2KTj6n/java.spring.security.xxe.tainted-saxreader-xxe-spring.tainted-saxreader-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SAXREADER
    patterns:
    - pattern: (SAXReader $PARSER)
  - label: DOCTYPE_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $PARSER
  - label: ENTITY_RESOLVER
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setEntityResolver(...);
    - focus-metavariable: $PARSER
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and SAXREADER) and not (DOCTYPE_DISABLED or ENTITY_RESOLVER
      or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (SAXReader $PARSER).read(...)
- id: java.spring.security.xxe.tainted-saxtransformerfactory-xxe-spring.tainted-saxtransformerfactory-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the parser with `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-saxtransformerfactory-xxe-spring.tainted-saxtransformerfactory-xxe-spring
    shortlink: https://sg.run/8Xoy
    semgrep.dev:
      rule:
        rule_id: DbULPp
        version_id: X0TqJe
        url: https://semgrep.dev/playground/r/X0TqJe/java.spring.security.xxe.tainted-saxtransformerfactory-xxe-spring.tainted-saxtransformerfactory-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SAXTRANSFORMER
    patterns:
    - pattern: (TransformerFactory $TF)
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and SAXTRANSFORMER) and not FSP
    patterns:
    - pattern-either:
      - pattern: (Transformer $T).transform(...)
      - pattern: (TransformerFactory $TF).newTransformer(...)
    - pattern-not: (Transformer $T).transform((DOMSource $S), ...)
- id: java.spring.security.xxe.tainted-schemafactory-xxe-spring.tainted-schemafactory-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the parser with `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, enabling both of the following configurations also provides
    protection against XXE attacks. `factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,
    "")` and `factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")`. For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-schemafactory-xxe-spring.tainted-schemafactory-xxe-spring
    shortlink: https://sg.run/gPWJ
    semgrep.dev:
      rule:
        rule_id: WAUgXZ
        version_id: jQT29A
        url: https://semgrep.dev/playground/r/jQT29A/java.spring.security.xxe.tainted-schemafactory-xxe-spring.tainted-schemafactory-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: SCHEMAFACTORY
    patterns:
    - pattern-either:
      - pattern: (SchemaFactory $FACTORY)
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  - label: EXTERNAL_SCHEMA
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      - pattern: $FACTORY.setProperty("=~/.*accessExternalSchema.*/", "");
    - focus-metavariable: $FACTORY
  - label: DTD
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setProperty("=~/.*accessExternalDTD.*/", "");
      - pattern: $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and SCHEMAFACTORY) and not (FSP or (DTD and EXTERNAL_SCHEMA))
    patterns:
    - pattern: (SchemaFactory $FACTORY).newSchema(...)
- id: java.spring.security.xxe.tainted-validator-xxe-spring.tainted-validator-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the Validator parser with `parser.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""). For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-validator-xxe-spring.tainted-validator-xxe-spring
    shortlink: https://sg.run/Qxn4
    semgrep.dev:
      rule:
        rule_id: 0oUZ8J
        version_id: 1QTvXw
        url: https://semgrep.dev/playground/r/1QTvXw/java.spring.security.xxe.tainted-validator-xxe-spring.tainted-validator-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: VALIDATOR
    patterns:
    - pattern-either:
      - pattern: (Validator $PARSER)
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $PARSER.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $PARSER
  - label: DTD
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and VALIDATOR) and not (FSP or DTD)
    patterns:
    - pattern: (Validator $PARSER).validate(...)
- id: java.spring.security.xxe.tainted-xmlreader-xxe-spring.tainted-xmlreader-xxe-spring
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the XMLReader parser with `parser.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,"")`, configuring
    the both of `parser.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` and `parser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.xxe.tainted-xmlreader-xxe-spring.tainted-xmlreader-xxe-spring
    shortlink: https://sg.run/36Kr
    semgrep.dev:
      rule:
        rule_id: KxURD7
        version_id: 9lTwnG
        url: https://semgrep.dev/playground/r/9lTwnG/java.spring.security.xxe.tainted-xmlreader-xxe-spring.tainted-xmlreader-xxe-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  - label: XMLREADER
    patterns:
    - pattern: (XMLReader $PARSER)
  - label: DTD
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  - label: DISALLOW_DOCTYPE
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern: $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $PARSER
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and XMLREADER) and not (DTD or DISALLOW_DOCTYPE or (GEN_ENT_DISABLED
      and PARAM_ENT_DISABLED))
    patterns:
    - pattern: (XMLReader $PARSER).parse(...)
- id: swift.commoncrypto.hardcoded-iv.hardcoded-iv
  message: Initialization Vectors (IVs) for block ciphers should be randomly generated
    each time they are used. Using a static IV means the same plaintext encrypts to
    the same ciphertext every time, weakening the strength of the encryption.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-329: Not using a random initialization Vector (IV) with Cipher Block Chaining
      (CBC) Mode causes algorithms to be susceptible to dictionary attacks.'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.hardcoded-iv.hardcoded-iv
    shortlink: https://sg.run/GjGn
    semgrep.dev:
      rule:
        rule_id: YGUWe3
        version_id: kbTbZ1
        url: https://semgrep.dev/playground/r/kbTbZ1/swift.commoncrypto.hardcoded-iv.hardcoded-iv
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          "...".data(...)
      - pattern: |
          Data(bytes:[$Y,...])
      - pattern: |
          $IVDATA = [$Y,...]
          ...
          Data(bytes: $IVDATA)
      - pattern: |
          nil
      - pattern: |
          .none
      - pattern: |
          Optional.none
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, $B, CCOptions($OPTIONS), $D, $E, $X, ...)
      - pattern: |
          CCCryptorCreate($A, $B, CCOptions($OPTIONS), $D, $E, $X, ...)
    - focus-metavariable: $X
    - metavariable-regex:
        metavariable: $OPTIONS
        regex: ^((?!ECB).)*$
- id: swift.commoncrypto.hardcoded-pbkdf2-passphrase.hardcoded-pbkdf2-passphrase
  message: A hardcoded passphrase was used with a call to the Password Based Key Derivation
    Function (PBKDF2) function which derives a cryptographic key from the password
    input. Because of this, the derived key is predictable and can be considered hard-coded
    too. Keys should be derived using a unique passphrase and randomly generated salt
    - per user.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-259: Use of Hard-coded Password'
    masvs:
    - 'MSTG-CRYPTO-1: The app does not rely on symmetric cryptography with hardcoded
      keys as a sole method of encryption.'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://pages.nist.gov/800-63-3/sp800-63b.html#sec5
    technology:
    - ios
    - macos
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.hardcoded-pbkdf2-passphrase.hardcoded-pbkdf2-passphrase
    shortlink: https://sg.run/Rd6K
    semgrep.dev:
      rule:
        rule_id: 6JUn9e
        version_id: w8TL07
        url: https://semgrep.dev/playground/r/w8TL07/swift.commoncrypto.hardcoded-pbkdf2-passphrase.hardcoded-pbkdf2-passphrase
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          CCKeyDerivationPBKDF($A, "...", ...)
      - pattern-not: |
          CCKeyDerivationPBKDF($A, "", ...)
    - patterns:
      - pattern: |
          CCKeyDerivationPBKDF($A, NSString(string: "...").UTF8String, ...)
      - pattern-not: |
          CCKeyDerivationPBKDF($A, NSString(string: "").UTF8String, ...)
- id: swift.commoncrypto.hardcoded-salt.hardcoded-salt
  message: Cryptographic operations were identified that leverage a hardcoded salt/nonce.
    A salt does not need to remain secret, but should be random, generated from cryptographically
    secure sources of entropy, such as an CSPRNG. On iOS/macOS platforms, secure random
    data can be obtained via the `SecCopyRandomBytes` API available from RandomizationServices.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-323: Nonces should be used for the present occasion and only once.'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://developer.apple.com/documentation/security/randomization_services
    technology:
    - ios
    - macos
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.hardcoded-salt.hardcoded-salt
    shortlink: https://sg.run/A6E4
    semgrep.dev:
      rule:
        rule_id: oqUqDx
        version_id: xyT53e
        url: https://semgrep.dev/playground/r/xyT53e/swift.commoncrypto.hardcoded-salt.hardcoded-salt
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          "...".data(...)
      - pattern: |
          Data(bytes:[$Y,...])
      - pattern: |
          Data(base64Encoded: "...")
      - patterns:
        - pattern-inside: $SALTDATA = [$Y,...] ...
        - pattern: |
            Data(bytes: $SALTDATA)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $X, ...)
      - pattern: |
          $OBJ.hkdfDerivedSymmetricKey(...,salt: $X,...)
      - pattern: |
          ChaChaPoly.seal(...,nonce: $X,...)
      - pattern: |
          AES.GCM.seal(..., nonce: $X, ...)
    - focus-metavariable: $X
- id: swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key
  message: A hard-coded cryptographic key was detected. An attacker that obtains this
    key via reverse engineering or access to source code will be able to re-use this
    key to encrypt, decrypt, and/or sign data at will. Cryptographic keys should be
    unique, and randomly generated per user, per client.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-321: Use of Hard-coded Cryptographic Key'
    masvs:
    - 'MSTG-CRYPTO-1: The app does not rely on symmetric cryptography with hardcoded
      keys as a sole method of encryption.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key
    shortlink: https://sg.run/BoE5
    semgrep.dev:
      rule:
        rule_id: zdUo2P
        version_id: O9TbZ7
        url: https://semgrep.dev/playground/r/O9TbZ7/swift.commoncrypto.hardcoded-symmetric-key.hardcoded-symmetric-key
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          "...".data(...)
      - pattern: |
          Data(bytes:[$Y,...])
      - pattern: |
          Data(base64Encoded: ...)
      - patterns:
        - pattern-inside: |
            $KEYDATA = [$Y,...]
            ...
        - pattern: |
            Data(bytes: $KEYDATA)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, $B, $OPTIONS, $X, ...)
      - pattern: |
          CCCryptorCreate($A, $B, $OPTIONS, $X, ...)
      - pattern: |
          SymmetricKey(data: $X)
    - focus-metavariable: $X
- id: swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize
  message: AES symmetric cryptographic operations were identified using a key size
    of 128bit which is less than the industry standard recommendation of 256bit.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize
    shortlink: https://sg.run/Dp4j
    semgrep.dev:
      rule:
        rule_id: pKUZYP
        version_id: e1TOAj
        url: https://semgrep.dev/playground/r/e1TOAj/swift.commoncrypto.insecure-crypto-aes-keysize.insecure-crypto-aes-keysize
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          size_t($KEYLEN)
      - pattern: |
          $X = $KEYLEN
    - metavariable-regex:
        metavariable: $KEYLEN
        regex: ^kCCKeySizeAES128$|^16$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, CCAlgorithm(kCCAlgorithmAES), $C, $D, $X, $E, $F, $G, $H, $I, $J)
      - pattern: |
          CCCryptorCreate($A, CCAlgorithm(kCCAlgorithmAES), $C, $D, $X, $E, $F, $G, $H, $I, $J)
      - pattern: |
          CCCryptorCreateFromData($A, CCAlgorithm(kCCAlgorithmAES), $C, $D, $X, $E, $F, $G, $H, $I, $J)
    - focus-metavariable: $X
- id: swift.commoncrypto.insecure-crypto-algorithm-blowfish.insecure-crypto-algorithm-blowfish
  message: 'The use of the insecure Blowfish encryption algorithm was detected. Blowfish
    uses a 64-bit block size that makes it vulnerable to birthday attacks, and is
    therefore considered unfit for purpose. '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://crypto.stackexchange.com/questions/87278/why-dont-we-use-blowfish-if-it-hasnt-been-cracked
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-algorithm-blowfish.insecure-crypto-algorithm-blowfish
    shortlink: https://sg.run/Wd2A
    semgrep.dev:
      rule:
        rule_id: 2ZUyjz
        version_id: vdTR3R
        url: https://semgrep.dev/playground/r/vdTR3R/swift.commoncrypto.insecure-crypto-algorithm-blowfish.insecure-crypto-algorithm-blowfish
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          CCAlgorithm(kCCAlgorithmBlowfish)
      - pattern: |
          CCAlgorithm(6)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, $ALG, ...)
      - pattern: |
          CCCryptorCreate($A, $ALG, ...)
      - pattern: |
          CCCryptorCreateFromData($A, $ALG, ...)
    - focus-metavariable: $ALG
- id: swift.commoncrypto.insecure-crypto-algorithm-des.insecure-crypto-algorithm-des
  message: The use of the insecure DES/3DES encryption algorithm(s) were detected.
    DES is deprecated and considered insecure. The application should leverage more
    suitable algorithms such as AES in GCM mode, or ChaChaPoly.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-algorithm-des.insecure-crypto-algorithm-des
    shortlink: https://sg.run/0kzb
    semgrep.dev:
      rule:
        rule_id: X5UDqO
        version_id: d6TWbZ
        url: https://semgrep.dev/playground/r/d6TWbZ/swift.commoncrypto.insecure-crypto-algorithm-des.insecure-crypto-algorithm-des
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          CCAlgorithm(kCCAlgorithmDES)
      - pattern: |
          CCAlgorithm(kCCAlgorithm3DES)
      - pattern: |
          CCAlgorithm(1)
      - pattern: |
          CCAlgorithm(2)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, $ALG, ...)
      - pattern: |
          CCCryptorCreate($A, $ALG, ...)
      - pattern: |
          CCCryptorCreateFromData($A, $ALG, ...)
    - focus-metavariable: $ALG
- id: swift.commoncrypto.insecure-crypto-algorithm-rc4.insecure-crypto-algorithm-rc4
  message: The use of the insecure RC4 stream cipher encryption algorithm was identified.
    RC4 is deprecated and considered insecure. The application should leverage more
    suitable algorithms such as AES in GCM mode, or ChaChaPoly.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-algorithm-rc4.insecure-crypto-algorithm-rc4
    shortlink: https://sg.run/KrBd
    semgrep.dev:
      rule:
        rule_id: j2Ud26
        version_id: ZRTZyz
        url: https://semgrep.dev/playground/r/ZRTZyz/swift.commoncrypto.insecure-crypto-algorithm-rc4.insecure-crypto-algorithm-rc4
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          CCAlgorithm(kCCAlgorithmRC4)
      - pattern: |
          CCAlgorithm(4)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, $ALG, ...)
      - pattern: |
          CCCryptorCreate($A, $ALG, ...)
      - pattern: |
          CCCryptorCreateFromData($A, $ALG, ...)
    - focus-metavariable: $ALG
- id: swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode
  message: Symmetric cryptographic operations were identified that use Cipher Block
    Chaining (CBC) mode. AES in CBC mode provides unauthenticated cryptographic encryption.
    CBC is also malleable, meaning that an attacker can influence the decrypted plaintext
    by modifying bits of the ciphertext (bit flipping attacks). Consider using an
    authenticated encryption mechanism, such as AES-GCM or ChaChaPoly. If CBC mode
    is **required**, consider augmenting the encryption with authentication by signing
    the ciphertexts with a Message Authentication Code (e.g. HMAC).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://zhangzeyu2001.medium.com/attacking-cbc-mode-bit-flipping-7e0a1c185511
    - https://arxumpathsecurity.com/blog/2019/10/16/cbc-mode-is-malleable-dont-trust-it-for-authentication
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode
    shortlink: https://sg.run/q5Dx
    semgrep.dev:
      rule:
        rule_id: 10U6vK
        version_id: nWTRw6
        url: https://semgrep.dev/playground/r/nWTRw6/swift.commoncrypto.insecure-crypto-cbc-mode.insecure-crypto-cbc-mode
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern: |
      $FUNC($A, CCAlgorithm($ALG), CCOptions($OPTS), ...)
  - metavariable-pattern:
      metavariable: $OPTS
      patterns:
      - pattern-not-regex: .*kCCOptionECBMode.*
  - metavariable-pattern:
      metavariable: $FUNC
      patterns:
      - pattern-regex: ^CCCrypt$|^CCCryptorCreate$|^CCCryptorCreateFromData$
  - focus-metavariable: $FUNC
- id: swift.commoncrypto.insecure-crypto-ecb-mode.insecure-crypto-ecb-mode
  message: 'Symmetric cryptographic operations were identified that use Electronic
    Code Book (ECB) mode. ECB mode is considered insecure as identical plaintext blocks
    encrypt to identical ciphertexts revealing patterns in the data. Use stronger,
    better alternatives such as AES-GCM or ChaChaPoly. '
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption
    - https://medium.com/asecuritysite-when-bob-met-alice/surely-no-one-uses-ecb-mode-in-aes-332ed90f29d0
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-ecb-mode.insecure-crypto-ecb-mode
    shortlink: https://sg.run/ld5j
    semgrep.dev:
      rule:
        rule_id: 9AUrwO
        version_id: ExTwYn
        url: https://semgrep.dev/playground/r/ExTwYn/swift.commoncrypto.insecure-crypto-ecb-mode.insecure-crypto-ecb-mode
        origin: pro_rules
  languages:
  - swift
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern: |
        kCCOptionECBMode
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          CCCrypt($A, $ALG, $OPTS, ...)
      - pattern: |
          CCCryptorCreate($A, $ALG, $OPTS, ...)
      - pattern: |
          CCCryptorCreateFromData($A, $ALG, $OPTS, ...)
    - focus-metavariable: $OPTS
- id: swift.commoncrypto.insecure-crypto-keystorage.insecure-crypto-keystorage
  message: Key generation routines were identified where the resultant keys are not
    stored protected by the Secure Enclave. On iOS/macOS systems, cryptographic keys
    can be generated within the Secure Enclave - making them inaccessible to the rest
    of the system. The keys can be used for operations (signing, decryption, etc)
    but the private keys cannot be dumped or copied - even on rooted/jailbroken systems.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-922: Insecure Storage of Sensitive Information'
    masvs:
    - 'MSTG-CRYPTO-2: The app uses proven implementations ofcryptographic primitives.'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-keystorage.insecure-crypto-keystorage
    shortlink: https://sg.run/YdjX
    semgrep.dev:
      rule:
        rule_id: yyUlry
        version_id: 7ZTyY7
        url: https://semgrep.dev/playground/r/7ZTyY7/swift.commoncrypto.insecure-crypto-keystorage.insecure-crypto-keystorage
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $X = $ATTRIBS
          ...
      - metavariable-pattern:
          metavariable: $ATTRIBS
          patterns:
          - pattern-not-regex: |
              .*kSecAttrTokenIDSecureEnclave.*
      - pattern-either:
        - pattern: SecKeyCreateRandomKey($X, ...)
        - pattern: SecKeyGeneratePair($X, ...)
      - focus-metavariable:
        - $X
    - pattern: |
        CCRSACryptorGeneratePair(...)
    - pattern: |
        CCRSACryptorGeneratePair!(...)
- id: swift.commoncrypto.insecure-crypto-rsa-keysize.insecure-crypto-rsa-keysize
  message: RSA key generation was identified where the key size was less than the
    industry standard recommendation of 2048 bits minimum. Use a key strength of at
    least 2048 bit, or stronger where appropriate.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-crypto-rsa-keysize.insecure-crypto-rsa-keysize
    shortlink: https://sg.run/6G96
    semgrep.dev:
      rule:
        rule_id: r6Udew
        version_id: LjT3p6
        url: https://semgrep.dev/playground/r/LjT3p6/swift.commoncrypto.insecure-crypto-rsa-keysize.insecure-crypto-rsa-keysize
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern: |
      CCRSACryptorGeneratePair($SIZE, ...)
  - focus-metavariable: $SIZE
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
- id: swift.commoncrypto.insecure-hashing-algorithm-md2.insecure-hashing-algorithm-md2
  message: The use of the MD2 hashing algorithm was identified which is considered
    insecure. MD2 is not collision resistant and is therefore not suitable for cryptographic
    or secure use-cases. Use stronger algorithms such as SHA256, SHA512, or adaptive
    hashing algorithms such as argon2 or bcrypt.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-hashing-algorithm-md2.insecure-hashing-algorithm-md2
    shortlink: https://sg.run/oPAN
    semgrep.dev:
      rule:
        rule_id: bwUpdz
        version_id: 8KTZWY
        url: https://semgrep.dev/playground/r/8KTZWY/swift.commoncrypto.insecure-hashing-algorithm-md2.insecure-hashing-algorithm-md2
        origin: pro_rules
  languages:
  - swift
  pattern-either:
  - pattern: CC_MD2(...)
  - pattern: CC_MD2_Init(...)
  - pattern: CC_MD2_Update(...)
  - pattern: CC_MD2_Finally(...)
- id: swift.commoncrypto.insecure-hashing-algorithm-md4.insecure-hashing-algorithm-md4
  message: The use of the MD4 hashing algorithm was identified which is considered
    insecure. MD4 is not collision resistant and is therefore not suitable for cryptographic
    or secure use-cases. Use stronger algorithms such as SHA256, SHA512, or adaptive
    hashing algorithms such as argon2 or bcrypt.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-hashing-algorithm-md4.insecure-hashing-algorithm-md4
    shortlink: https://sg.run/zqz1
    semgrep.dev:
      rule:
        rule_id: NbUPjB
        version_id: gETDL3
        url: https://semgrep.dev/playground/r/gETDL3/swift.commoncrypto.insecure-hashing-algorithm-md4.insecure-hashing-algorithm-md4
        origin: pro_rules
  languages:
  - swift
  pattern-either:
  - pattern: CC_MD4(...)
  - pattern: CC_MD4_Init(...)
  - pattern: CC_MD4_Update(...)
  - pattern: CC_MD4_Finally(...)
- id: swift.commoncrypto.insecure-hashing-algorithm-md5.insecure-hashing-algorithm-md5
  message: 'The use of the MD5 hashing algorithm was identified which is considered
    insecure. MD5 is not collision resistant and is therefore not suitable for cryptographic
    or secure use-cases. Use stronger algorithms such as SHA256, SHA512, or adaptive
    hashing algorithms such as argon2 or bcrypt. **Note**: MD5 is still considered
    acceptable when used for Message Authentication Purposes, e.g. with HMAC although
    better and stronger algorithms should be strongly considered.'
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-hashing-algorithm-md5.insecure-hashing-algorithm-md5
    shortlink: https://sg.run/pJBN
    semgrep.dev:
      rule:
        rule_id: kxUNbO
        version_id: QkTOB8
        url: https://semgrep.dev/playground/r/QkTOB8/swift.commoncrypto.insecure-hashing-algorithm-md5.insecure-hashing-algorithm-md5
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - pattern: CC_MD5(...)
    - pattern: CC_MD5_Init(...)
    - pattern: CC_MD5_Update(...)
    - pattern: CC_MD5_Finally(...)
    - pattern: Insecure.MD5.$A(...)
- id: swift.commoncrypto.insecure-hashing-algorithm-sha1.insecure-hashing-algorithm-sha1
  message: 'The use of the SHA1 hashing algorithm was identified which is considered
    insecure. SHA1 is not collision resistant and is therefore not suitable for cryptographic
    or secure use-cases. Use stronger algorithms such as SHA256, SHA512, or adaptive
    hashing algorithms such as argon2 or bcrypt. **Note**: SHA1 is still considered
    acceptable when used for Message Authentication Purposes, e.g. with HMAC although
    better and stronger algorithms should be strongly considered.'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    masvs:
    - 'MSTG-CRYPTO-4: The app does not use cryptographic protocols or algorithms that
      are widely considered deprecated for security purposes.'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insecure-hashing-algorithm-sha1.insecure-hashing-algorithm-sha1
    shortlink: https://sg.run/2425
    semgrep.dev:
      rule:
        rule_id: wdUXLK
        version_id: 3ZT17p
        url: https://semgrep.dev/playground/r/3ZT17p/swift.commoncrypto.insecure-hashing-algorithm-sha1.insecure-hashing-algorithm-sha1
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - pattern: CC_SHA1(...)
    - pattern: CC_SHA1_Init(...)
    - pattern: CC_SHA1_Update(...)
    - pattern: CC_SHA1_Finally(...)
    - pattern: Insecure.SHA1.$A(...)
- id: swift.commoncrypto.insufficient-pbkdf2-work-factor-sha1.insufficient-pbkdf2-work-factor-sha1
  message: PBKDF2 usage was identified with an insufficient work factor, i.e. an iteration
    count (rounds) lower than modern guidelines prescribe. Per OWASP guidance, 1.3M
    iterations should be used with SHA1
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-916: Use of Password Hash With Insufficient Computational Effort'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://pages.nist.gov/800-63-3/sp800-63b.html#sec5
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insufficient-pbkdf2-work-factor-sha1.insufficient-pbkdf2-work-factor-sha1
    shortlink: https://sg.run/XdXA
    semgrep.dev:
      rule:
        rule_id: x8UP5Z
        version_id: 44Tdxk
        url: https://semgrep.dev/playground/r/44Tdxk/swift.commoncrypto.insufficient-pbkdf2-work-factor-sha1.insufficient-pbkdf2-work-factor-sha1
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $D, $E, $ALG, UInt32($ROUNDS), ...)
      - focus-metavariable: $ROUNDS
    - patterns:
      - pattern-inside: |
          $X = UInt32($ROUNDS)
          ...
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $D, $E, $ALG, $X, ...)
      - focus-metavariable: $X
  - metavariable-comparison:
      metavariable: $ROUNDS
      comparison: $ROUNDS < 1300000
  - metavariable-regex:
      metavariable: $ALG
      regex: .*PRFHmacAlgSHA1.*
- id: swift.commoncrypto.insufficient-pbkdf2-work-factor-sha256.insufficient-pbkdf2-work-factor-sha256
  message: PBKDF2 usage was identified with an insufficient work factor, i.e. an iteration
    count (rounds) lower than modern guidelines prescribe. Per OWASP guidance, 600K
    iterations should be used with SHA256
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-916: Use of Password Hash With Insufficient Computational Effort'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://pages.nist.gov/800-63-3/sp800-63b.html#sec5
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insufficient-pbkdf2-work-factor-sha256.insufficient-pbkdf2-work-factor-sha256
    shortlink: https://sg.run/jLPA
    semgrep.dev:
      rule:
        rule_id: OrUwbd
        version_id: PkTyEk
        url: https://semgrep.dev/playground/r/PkTyEk/swift.commoncrypto.insufficient-pbkdf2-work-factor-sha256.insufficient-pbkdf2-work-factor-sha256
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $D, $E, $ALG, UInt32($ROUNDS), ...)
      - focus-metavariable: $ROUNDS
    - patterns:
      - pattern-inside: |
          $X = UInt32($ROUNDS)
          ...
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $D, $E, $ALG, $X, ...)
      - focus-metavariable: $X
  - metavariable-comparison:
      metavariable: $ROUNDS
      comparison: $ROUNDS < 600000
  - metavariable-regex:
      metavariable: $ALG
      regex: .*PRFHmacAlgSHA256.*
- id: swift.commoncrypto.insufficient-pbkdf2-work-factor-sha512.insufficient-pbkdf2-work-factor-sha512
  message: PBKDF2 usage was identified with an insufficient work factor, i.e. an iteration
    count (rounds) lower than modern guidelines prescribe. Per OWASP guidance, 210K
    iterations should be used with SHA512
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-916: Use of Password Hash With Insufficient Computational Effort'
    masvs:
    - 'MSTG-CRYPTO-3: The app uses cryptographic primitives that are appropriate for
      the particular use-case, configured with parameters that adhere to industry
      best practices.'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://mobile-security.gitbook.io/masvs/security-requirements/0x08-v3-cryptography_verification_requirements
    - https://pages.nist.gov/800-63-3/sp800-63b.html#sec5
    technology:
    - ios
    - macos
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.commoncrypto.insufficient-pbkdf2-work-factor-sha512.insufficient-pbkdf2-work-factor-sha512
    shortlink: https://sg.run/1wpD
    semgrep.dev:
      rule:
        rule_id: eqUQOy
        version_id: JdTj2Q
        url: https://semgrep.dev/playground/r/JdTj2Q/swift.commoncrypto.insufficient-pbkdf2-work-factor-sha512.insufficient-pbkdf2-work-factor-sha512
        origin: pro_rules
  languages:
  - swift
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $D, $E, $ALG, UInt32($ROUNDS), ...)
      - focus-metavariable: $ROUNDS
    - patterns:
      - pattern-inside: |
          $X = UInt32($ROUNDS)
          ...
      - pattern: |
          CCKeyDerivationPBKDF($A, $B, $C, $D, $E, $ALG, $X, ...)
      - focus-metavariable: $X
  - metavariable-comparison:
      metavariable: $ROUNDS
      comparison: $ROUNDS < 210000
  - metavariable-regex:
      metavariable: $ALG
      regex: .*PRFHmacAlgSHA512.*
- id: yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern-inside: |
      - name: $CONTAINER
        ...
  - pattern: |
      image: ...
      ...
  - pattern-not: |
      image: ...
      ...
      securityContext:
        ...
  - focus-metavariable: $CONTAINER
  fix: |
    $CONTAINER
          securityContext:
            allowPrivilegeEscalation: false
  message: In Kubernetes, each pod runs in its own isolated environment with its own  set
    of security policies. However, certain container images may contain  `setuid`
    or `setgid` binaries that could allow an attacker to perform  privilege escalation
    and gain access to sensitive resources. To mitigate  this risk, it's recommended
    to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation`
    set to `false`.  This will prevent the container from running any privileged processes
    and  limit the impact of any potential attacks.  By adding a `securityContext`
    to your Kubernetes pod, you can help to  ensure that your containerized applications
    are more secure and less  vulnerable to privilege escalation attacks.
  metadata:
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag
    category: security
    technology:
    - kubernetes
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext
    shortlink: https://sg.run/eleR
    semgrep.dev:
      rule:
        rule_id: WAU5J6
        version_id: QkTDDx
        url: https://semgrep.dev/playground/r/QkTDDx/yaml.kubernetes.security.allow-privilege-escalation-no-securitycontext.allow-privilege-escalation-no-securitycontext
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.allow-privilege-escalation-true.allow-privilege-escalation-true
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern-inside: |
      - name: $CONTAINER
        ...
  - pattern-inside: |
      image: ...
      ...
  - pattern-inside: |
      securityContext:
        ...
  - pattern: |
      allowPrivilegeEscalation: $TRUE
  - metavariable-pattern:
      metavariable: $TRUE
      pattern: |
        true
  - focus-metavariable: $TRUE
  fix: |
    false
  message: In Kubernetes, each pod runs in its own isolated environment with its own  set
    of security policies. However, certain container images may contain  `setuid`
    or `setgid` binaries that could allow an attacker to perform  privilege escalation
    and gain access to sensitive resources. To mitigate  this risk, it's recommended
    to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation`
    set to `false`.  This will prevent the container from running any privileged processes
    and  limit the impact of any potential attacks.  In the container `$CONTAINER`
    this parameter is set to `true` which makes this container much more vulnerable
    to privelege escalation attacks.
  metadata:
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag
    category: security
    technology:
    - kubernetes
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation-true.allow-privilege-escalation-true
    shortlink: https://sg.run/vw3W
    semgrep.dev:
      rule:
        rule_id: 0oUkqQ
        version_id: 3ZTnn0
        url: https://semgrep.dev/playground/r/3ZTnn0/yaml.kubernetes.security.allow-privilege-escalation-true.allow-privilege-escalation-true
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: dockerfile.security.missing-user-entrypoint.missing-user-entrypoint
  patterns:
  - pattern: |
      ENTRYPOINT $...VARS
  - pattern-not-inside: |
      USER $USER
      ...
  fix: |
    USER non-root
    ENTRYPOINT $...VARS
  message: By not specifying a USER, a program in the container may run as 'root'.
    This is a security hazard. If an attacker can control a process running as root,
    they may have control over the container. Ensure that the last USER in a Dockerfile
    is a USER other than 'root'.
  severity: ERROR
  languages:
  - dockerfile
  metadata:
    cwe:
    - 'CWE-269: Improper Privilege Management'
    category: security
    technology:
    - dockerfile
    confidence: MEDIUM
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint
    shortlink: https://sg.run/k281
    semgrep.dev:
      rule:
        rule_id: ReUW9E
        version_id: QkTPnP
        url: https://semgrep.dev/playground/r/QkTPnP/dockerfile.security.missing-user-entrypoint.missing-user-entrypoint
        origin: community
- id: kotlin.jedis.jedis-auth-hardcoded-secret.jedis-auth-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.jedis.jedis-auth-hardcoded-secret.jedis-auth-hardcoded-secret
    shortlink: https://sg.run/8A2g
    semgrep.dev:
      rule:
        rule_id: DbUlrx
        version_id: QkTOj5
        url: https://semgrep.dev/playground/r/QkTOj5/kotlin.jedis.jedis-auth-hardcoded-secret.jedis-auth-hardcoded-secret
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import redis.clients.*
              ...
          - pattern-inside: |
              import redis.clients.jedis
              ...
        - pattern-either:
          - pattern-inside: |
              $X = ($Y: jedis.Jedis)
              ...
          - pattern-inside: |
              $X = jedis.Jedis(...)
              ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import redis.clients.jedis.*
              ...
          - pattern-inside: |
              import redis.clients.jedis.Jedis
              ...
        - pattern-either:
          - pattern-inside: |
              $X = ($Y: Jedis)
              ...
          - pattern-inside: |
              $X = Jedis(...)
              ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import redis.clients.*
              ...
          - pattern-inside: |
              import redis.clients.jedis
              ...
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $Y = jedis.JedisPool(...)
                ...
            - pattern-inside: |
                $X = $Y.resource
                ...
          - pattern-inside: |
              $X = ($Y: jedis.JedisPool).resource
              ...
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import redis.clients.jedis.*
              ...
          - pattern-inside: |
              import redis.clients.jedis.JedisPool
              ...
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $Y = JedisPool(...)
                ...
            - pattern-inside: |
                $X = $Y.resource
                ...
          - pattern-inside: |
              $X = ($Y: JedisPool).resource
              ...
  - pattern: $X.auth("...")
  - pattern-not: $X.auth("...${...}...")
  - pattern-not: $X.auth("")
- id: kotlin.jedis.jedis-hardcoded-password.jedis-hardcoded-password
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.jedis.jedis-hardcoded-password.jedis-hardcoded-password
    shortlink: https://sg.run/g3nR
    semgrep.dev:
      rule:
        rule_id: WAUB4d
        version_id: 3ZT1zn
        url: https://semgrep.dev/playground/r/3ZT1zn/kotlin.jedis.jedis-hardcoded-password.jedis-hardcoded-password
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import redis.clients.*
            ...
        - pattern-inside: |
            import redis.clients.jedis
            ...
      - patterns:
        - pattern-either:
          - pattern: |
              ($Y: jedis.DefaultJedisClientConfig). ... .password("...")
          - pattern: |
              jedis.DefaultJedisClientConfig. ... .password("...")
        - pattern-not: |
            jedis.DefaultJedisClientConfig. ... .password("")
        - pattern-not: |
            jedis.DefaultJedisClientConfig. ... .password("...${...}...")
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import redis.clients.jedis.*
            ...
        - pattern-inside: |
            import redis.clients.jedis.DefaultJedisClientConfig
            ...
      - patterns:
        - pattern-either:
          - pattern: |
              ($Y: DefaultJedisClientConfig). ... .password("...")
          - pattern: |
              DefaultJedisClientConfig. ... .password("...")
        - pattern-not: |
            DefaultJedisClientConfig. ... .password("")
        - pattern-not: |
            DefaultJedisClientConfig. ... .password("...${...}...")
- id: kotlin.jedis.jedis-hardcoded-pool.jedis-hardcoded-pool
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.jedis.jedis-hardcoded-pool.jedis-hardcoded-pool
    shortlink: https://sg.run/QdKJ
    semgrep.dev:
      rule:
        rule_id: 0oUNPp
        version_id: 44Tdw4
        url: https://semgrep.dev/playground/r/44Tdw4/kotlin.jedis.jedis-hardcoded-pool.jedis-hardcoded-pool
        origin: pro_rules
  languages:
  - kotlin
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import redis.clients.*
            ...
        - pattern-inside: |
            import redis.clients.jedis
            ...
      - patterns:
        - pattern: |
            jedis.JedisPool($USER,$HOST,$PORT,$TIMEOUT,"...",...)
        - pattern-not: |
            jedis.JedisPool($USER,$HOST,$PORT,$TIMEOUT,"",...)
        - pattern-not: |
            jedis.JedisPool($USER,$HOST,$PORT,$TIMEOUT,"...${...}...",...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import redis.clients.jedis.*
            ...
        - pattern-inside: |
            import redis.clients.jedis.JedisPool
            ...
      - patterns:
        - pattern: |
            JedisPool($USER,$HOST,$PORT,$TIMEOUT,"...",...)
        - pattern-not: |
            JedisPool($USER,$HOST,$PORT,$TIMEOUT,"",...)
        - pattern-not: |
            JedisPool($USER,$HOST,$PORT,$TIMEOUT,"...${...}...",...)
- id: kotlin.ktor.session.hardcoded-signing-key.hardcoded-signing-key
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - ktor
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.ktor.session.hardcoded-signing-key.hardcoded-signing-key
    shortlink: https://sg.run/55oK
    semgrep.dev:
      rule:
        rule_id: 6JUnP8
        version_id: PkTyX8
        url: https://semgrep.dev/playground/r/PkTyX8/kotlin.ktor.session.hardcoded-signing-key.hardcoded-signing-key
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        hex("...")
    - pattern-not: |
        hex("")
    - pattern-not: |
        hex("...${...}...")
  pattern-sinks:
  - patterns:
    - pattern: SessionTransportTransformerMessageAuthentication($X,...)
    - focus-metavariable: $X
- id: javascript.express.express-child-process.express-child-process
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the user input, and use safe methods for executing the commands.
    For more information, see [Command injection prevention for JavaScript ](https://semgrep.dev/docs/cheat-sheets/javascript-command-injection/).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    technology:
    - javascript
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.express-child-process.express-child-process
    shortlink: https://sg.run/9p1R
    semgrep.dev:
      rule:
        rule_id: L1Uk12
        version_id: YDTbxA
        url: https://semgrep.dev/playground/r/YDTbxA/javascript.express.express-child-process.express-child-process
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{ $REQ }: Request,...) => {...}
      - pattern-inside: |
          (...,{ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern: child_process.$EXEC($CMD,...)
    - metavariable-regex:
        metavariable: $EXEC
        regex: ^(exec|execSync|spawn|spawnSync)$
    - pattern-not-inside: child_process.$EXEC("...",...)
    - pattern-not-inside: child_process.$EXEC(["...",...],...)
    - pattern-not-inside: |
        $CMD = "..."
        ...
    - pattern-not-inside: |
        $CMD = ["...",...]
        ...
    - focus-metavariable: $CMD
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $CP = require("child_process").$EXEC
          ...
      - pattern-inside: |
          $CP = require("child_process")
          ...
      - pattern-inside: |
          import $CP = require("child_process")
          ...
    - metavariable-regex:
        metavariable: $EXEC
        regex: ^(exec|execSync|spawn|spawnSync)$
    - pattern-either:
      - pattern: $CP($CMD,...)
      - pattern: $CP.$EXEC($CMD,...)
    - focus-metavariable: $CMD
    - pattern-not-inside: $CP("...",...)
    - pattern-not-inside: $CP(["...",...],...)
    - pattern-not-inside: $CP.$EXEC("...",...)
    - pattern-not-inside: $CP.$EXEC(["...",...],...)
- id: java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor
  languages:
  - java
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://securitylab.github.com/research/swagger-yaml-parser-vulnerability/#snakeyaml-deserialization-vulnerability
    category: security
    technology:
    - snakeyaml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor
    shortlink: https://sg.run/L8qY
    semgrep.dev:
      rule:
        rule_id: 6JU67x
        version_id: w8T0xA
        url: https://semgrep.dev/playground/r/w8T0xA/java.lang.security.use-snakeyaml-constructor.use-snakeyaml-constructor
        origin: community
  message: Used SnakeYAML org.yaml.snakeyaml.Yaml() constructor with no arguments,
    which is vulnerable to deserialization attacks. Use the one-argument Yaml(...)
    constructor instead, with SafeConstructor or a custom Constructor as the argument.
  patterns:
  - pattern: |
      $Y = new org.yaml.snakeyaml.Yaml();
      ...
      $Y.load(...);
  severity: WARNING
- id: javascript.angular.security.detect-angular-open-redirect.detect-angular-open-redirect
  message: Use of $window.location.href can lead to open-redirect if user input is
    used for redirection.
  metadata:
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      version: '4'
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    technology:
    - angular
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-open-redirect.detect-angular-open-redirect
    shortlink: https://sg.run/rdn1
    semgrep.dev:
      rule:
        rule_id: ZqU5Yn
        version_id: K3TOqL
        url: https://semgrep.dev/playground/r/K3TOqL/javascript.angular.security.detect-angular-open-redirect.detect-angular-open-redirect
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern: |
      $window.location.href = ...
  - pattern-not: |
      $window.location.href = "..."
- id: javascript.angular.security.detect-angular-resource-loading.detect-angular-resource-loading
  message: $sceDelegateProvider allowlisting can introduce security issues if wildcards
    are used.
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    technology:
    - angular
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-resource-loading.detect-angular-resource-loading
    shortlink: https://sg.run/b7kd
    semgrep.dev:
      rule:
        rule_id: nJUzgX
        version_id: qkTKn7
        url: https://semgrep.dev/playground/r/qkTKn7/javascript.angular.security.detect-angular-resource-loading.detect-angular-resource-loading
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: |
      $sceDelegateProvider.resourceUrlWhitelist([...,'**',...]);
  - patterns:
    - pattern: |
        $sceDelegateProvider.resourceUrlWhitelist([...,$DOM,...]);
    - metavariable-regex:
        metavariable: $DOM
        regex: ^'.*\*\*.+'$
- id: javascript.angular.security.detect-angular-trust-as-css.detect-angular-trust-as-css-method
  message: The use of $sce.trustAsCss can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsCss
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angular
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-trust-as-css.detect-angular-trust-as-css-method
    shortlink: https://sg.run/kXgo
    semgrep.dev:
      rule:
        rule_id: 7KUQ4k
        version_id: YDT80y
        url: https://semgrep.dev/playground/r/YDT80y/javascript.angular.security.detect-angular-trust-as-css.detect-angular-trust-as-css-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsCss($SOURCE);
    - pattern: |
        $sce.trustAsCss($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
- id: javascript.angular.security.detect-angular-trust-as-html-method.detect-angular-trust-as-html-method
  message: The use of $sce.trustAsHtml can be dangerous if unsanitized user input
    flows through this API.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsHtml
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angular
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-trust-as-html-method.detect-angular-trust-as-html-method
    shortlink: https://sg.run/wenn
    semgrep.dev:
      rule:
        rule_id: L1Uy88
        version_id: 6xT0gd
        url: https://semgrep.dev/playground/r/6xT0gd/javascript.angular.security.detect-angular-trust-as-html-method.detect-angular-trust-as-html-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsHtml($SOURCE);
    - pattern: |
        $sce.trustAsHtml($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
- id: javascript.angular.security.detect-angular-trust-as-js-method.detect-angular-trust-as-js-method
  message: The use of $sce.trustAsJs can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsJs
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    technology:
    - angular
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-trust-as-js-method.detect-angular-trust-as-js-method
    shortlink: https://sg.run/x1nA
    semgrep.dev:
      rule:
        rule_id: 8GUj8k
        version_id: o5T5E7
        url: https://semgrep.dev/playground/r/o5T5E7/javascript.angular.security.detect-angular-trust-as-js-method.detect-angular-trust-as-js-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsJs($SOURCE);
    - pattern: |
        $sce.trustAsJs($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
- id: javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled
  message: $sceProvider is set to false. Disabling Strict Contextual escaping (SCE)
    in an AngularJS application could provide additional attack surface for XSS vulnerabilities.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://docs.angularjs.org/api/ng/service/$sce
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angular
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled
    shortlink: https://sg.run/N4DG
    semgrep.dev:
      rule:
        rule_id: EwU20Z
        version_id: NdTW6W
        url: https://semgrep.dev/playground/r/NdTW6W/javascript.angular.security.detect-angular-sce-disabled.detect-angular-sce-disabled
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  pattern: |
    $sceProvider.enabled(false);
- id: javascript.angular.security.detect-angular-element-methods.detect-angular-element-methods
  message: Use of angular.element can lead to XSS if user-input is treated as part
    of the HTML element within `$SINK`. It is recommended to contextually output encode
    user-input, before inserting into `$SINK`. If the HTML needs to be preserved it
    is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.
  metadata:
    confidence: LOW
    references:
    - https://docs.angularjs.org/api/ng/function/angular.element
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    technology:
    - angularjs
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-element-methods.detect-angular-element-methods
    shortlink: https://sg.run/ydnO
    semgrep.dev:
      rule:
        rule_id: d8Ujdo
        version_id: 5PTgLQ
        url: https://semgrep.dev/playground/r/5PTgLQ/javascript.angular.security.detect-angular-element-methods.detect-angular-element-methods
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            function(..., $SCOPE, ...) { ... }
        - focus-metavariable: $SCOPE
        - metavariable-regex:
            metavariable: $SCOPE
            regex: ^\$scope$
      - pattern: $rootScope
      - pattern: $injector.get('$rootScope')
      - pattern: $injector.get('$scope')
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          angular.element(...). ... .$SINK($QUERY)
      - pattern-inside: |
          $ANGULAR = angular.element(...)
          ...
          $ANGULAR. ... .$SINK($QUERY)
    - metavariable-regex:
        metavariable: $SINK
        regex: ^(after|append|html|prepend|replaceWith|wrap)$
    - focus-metavariable: $QUERY
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $sce.getTrustedHtml(...)
      - pattern: $sanitize(...)
      - pattern: DOMPurify.sanitize(...)
- id: java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities
    shortlink: https://sg.run/WGAg
    semgrep.dev:
      rule:
        rule_id: QrUGW6
        version_id: WrTw6z
        url: https://semgrep.dev/playground/r/WrTw6z/java.lang.security.xxe.saxreader-xxe-parameter-entities.saxreader-xxe-parameter-entities
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = new org.dom4j.io.SAXReader(...);
  - pattern-not-inside: |
      $PARSER = new org.dom4j.io.SAXReader(...);
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  - pattern-not-inside: |
      $PARSER = new org.dom4j.io.SAXReader(...);
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      $PARSER = new org.dom4j.io.SAXReader(...);
      ...
      $PARSER.setEntityResolver(...);
- id: java.lang.security.xxe.saxreader-xxe.saxreader-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxreader-xxe.saxreader-xxe
    shortlink: https://sg.run/0Bo5
    semgrep.dev:
      rule:
        rule_id: 3qU4kE
        version_id: 0bTX6L
        url: https://semgrep.dev/playground/r/0bTX6L/java.lang.security.xxe.saxreader-xxe.saxreader-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = new org.dom4j.io.SAXReader(...);
  - pattern-not-inside: |
      $PARSER = new org.dom4j.io.SAXReader(...);
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false);
  - pattern-not-inside: |
      $PARSER = new org.dom4j.io.SAXReader(...);
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      $PARSER = new org.dom4j.io.SAXReader(...);
      ...
      $PARSER.setEntityResolver(...);
- id: java.lang.security.xxe.saxtransformerfactory-xxe-stylesheet.saxtransformerfactory-xxe-stylesheet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The current configuration allows for XXE attacks
    in XML Stylesheet (.xsl files). It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. For
    more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxtransformerfactory-xxe-stylesheet.saxtransformerfactory-xxe-stylesheet
    shortlink: https://sg.run/KAxX
    semgrep.dev:
      rule:
        rule_id: 4bUER1
        version_id: K3TXOn
        url: https://semgrep.dev/playground/r/K3TXOn/java.lang.security.xxe.saxtransformerfactory-xxe-stylesheet.saxtransformerfactory-xxe-stylesheet
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: $PARSER = javax.xml.transform.TransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = javax.xml.transform.sax.SAXTransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = javax.xml.transform.sax.SAXTransformerFactory.newDefaultInstance(...).newTransformer(...)
    - patterns:
      - pattern-either:
        - pattern: |
            $PARSER = (javax.xml.transform.sax.SAXTransformerFactory $FACTORY).newTransformer(...);
        - pattern: |
            $PARSER = (javax.xml.transform.TransformerFactory $FACTORY).newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("=~/.*secure-processing.*/", true);
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setAttribute("=~/.*accessExternalStylesheet.*/", "");
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $PARSER.transform((DOMSource $S),...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $S = new DOMSource(...);
          ...
          $PARSER.transform($S,...);
      - pattern-not-inside: |
          $S = new DOMSource(...);
          ...
          $FACTORY = ...;
          ...
          $PARSER.transform($S,...);
- id: java.lang.security.xxe.saxtransformerfactory-xxe.saxtransformerfactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`. For
    more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxtransformerfactory-xxe.saxtransformerfactory-xxe
    shortlink: https://sg.run/qLNy
    semgrep.dev:
      rule:
        rule_id: PeURJ0
        version_id: qkTyK1
        url: https://semgrep.dev/playground/r/qkTyK1/java.lang.security.xxe.saxtransformerfactory-xxe.saxtransformerfactory-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: $PARSER = javax.xml.transform.TransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = javax.xml.transform.sax.SAXTransformerFactory.newInstance(...).newTransformer(...)
    - pattern: $PARSER = javax.xml.transform.sax.SAXTransformerFactory.newDefaultInstance(...).newTransformer(...)
    - patterns:
      - pattern-either:
        - pattern: |
            $PARSER = (javax.xml.transform.sax.SAXTransformerFactory $FACTORY).newTransformer(...);
        - pattern: |
            $PARSER = (javax.xml.transform.TransformerFactory $FACTORY).newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setFeature("=~/.*secure-processing.*/", true);
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
          ...
          $PARSER = $FACTORY.newTransformer(...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $PARSER.transform((DOMSource $S),...);
      - pattern-not-inside: |
          $FACTORY = ...;
          ...
          $S = new DOMSource(...);
          ...
          $PARSER.transform($S,...);
      - pattern-not-inside: |
          $S = new DOMSource(...);
          ...
          $FACTORY = ...;
          ...
          $PARSER.transform($S,...);
- id: java.lang.security.xxe.schemafactory-xxe-schema.schemafactory-xxe-schema
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The current configuration allows for XXE attacks
    via XML Schema (`.xsd` files). It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")`.
    For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.schemafactory-xxe-schema.schemafactory-xxe-schema
    shortlink: https://sg.run/lKB9
    semgrep.dev:
      rule:
        rule_id: JDUzNl
        version_id: l4T0N9
        url: https://semgrep.dev/playground/r/l4T0N9/java.lang.security.xxe.schemafactory-xxe-schema.schemafactory-xxe-schema
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = $FACTORY.newSchema(...);
  - pattern-inside: |
      $FACTORY = SchemaFactory.newInstance(...);
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true);
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setProperty("=~/.*accessExternalSchema.*/", "");
      ...
      $PARSER = $FACTORY.newSchema(...);
- id: java.lang.security.xxe.schemafactory-xxe.schemafactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA,
    "")`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.schemafactory-xxe.schemafactory-xxe
    shortlink: https://sg.run/Y3G4
    semgrep.dev:
      rule:
        rule_id: 5rUodN
        version_id: YDT78r
        url: https://semgrep.dev/playground/r/YDT78r/java.lang.security.xxe.schemafactory-xxe.schemafactory-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = $FACTORY.newSchema(...);
  - pattern-inside: |
      $FACTORY = SchemaFactory.newInstance(...);
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true);
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      ...
      $PARSER = $FACTORY.newSchema(...);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setProperty("=~/.*accessExternalDTD.*/", "");
      ...
      $PARSER = $FACTORY.newSchema(...);
- id: java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly
  message: A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly'
    flag for cookies instructs the browser to forbid client-side scripts from reading
    the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - audit
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.2 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/www-community/HttpOnly
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly
    shortlink: https://sg.run/2WZD
    semgrep.dev:
      rule:
        rule_id: DbUR6k
        version_id: rxTzEW
        url: https://semgrep.dev/playground/r/rxTzEW/java.servlets.security.audit.cookie-missing-httponly.cookie-missing-httponly
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-not-inside: $COOKIE.setValue(""); ...
  - pattern-not-inside: $COOKIE.setHttpOnly(...); ...
  - pattern: $RESPONSE.addCookie($COOKIE);
- id: java.servlets.security.audit.cookie-httponly-false.cookie-httponly-false
  message: A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly'
    flag for cookies instructs the browser to forbid client-side scripts from reading
    the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - audit
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.2 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/www-community/HttpOnly
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.audit.cookie-httponly-false.cookie-httponly-false
    shortlink: https://sg.run/pLKL
    semgrep.dev:
      rule:
        rule_id: BYUkXk
        version_id: vdTQkN
        url: https://semgrep.dev/playground/r/vdTQkN/java.servlets.security.audit.cookie-httponly-false.cookie-httponly-false
        origin: pro_rules
  languages:
  - java
  fix: |
    $COOKIE.setHttpOnly(true);
  pattern: |
    $COOKIE.setHttpOnly(false);
- id: java.servlets.security.servletresponse-writer-xss.servletresponse-writer-xss
  message: 'Cross-site scripting detected in HttpServletResponse writer with variable
    ''$VAR''. User input was detected going directly from the HttpServletRequest into
    output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml:
    ''Encode.forHtml($VAR)''.'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Fstored
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Freflected
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.servletresponse-writer-xss.servletresponse-writer-xss
    shortlink: https://sg.run/O0rn
    semgrep.dev:
      rule:
        rule_id: BYUkXg
        version_id: PkTrvo
        url: https://semgrep.dev/playground/r/PkTrvo/java.servlets.security.servletresponse-writer-xss.servletresponse-writer-xss
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - pattern: |
      (PrintWriter $WRITER).write(...);
  - pattern: |
      $RESP.getWriter().write(...);
  pattern-sanitizers:
  - pattern: Encode.forHtml(...)
- id: java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request
  message: Detected input from a HTTPServletRequest going into a session command,
    like `setAttribute`. User input into such a command could lead to an attacker
    inputting malicious code into your session parameters, blurring the line between
    what's trusted and untrusted, and therefore leading to a trust boundary violation.
    This could lead to programmers trusting unvalidated data. Instead, thoroughly
    sanitize user input before passing it into such function calls.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-501: Trust Boundary Violation'
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://cwe.mitre.org/data/definitions/501.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request
    shortlink: https://sg.run/ZBqo
    semgrep.dev:
      rule:
        rule_id: KxUKvx
        version_id: WrTp98
        url: https://semgrep.dev/playground/r/WrTp98/java.servlets.security.tainted-session-from-http-request.tainted-session-from-http-request
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).getSession().$FUNC(...);
- id: java.servlets.security.no-direct-response-writer.no-direct-response-writer
  message: This rule is deprecated
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.no-direct-response-writer.no-direct-response-writer
    shortlink: https://sg.run/xL8g
    semgrep.dev:
      rule:
        rule_id: AbUg9Z
        version_id: ZRTdBn
        url: https://semgrep.dev/playground/r/ZRTdBn/java.servlets.security.no-direct-response-writer.no-direct-response-writer
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.servlets.security.tainted-ssrf.tainted-ssrf
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fssrf~2Fgeneric
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URLCONNECTION_SSRF_FD
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-ssrf.tainted-ssrf
    shortlink: https://sg.run/E4we
    semgrep.dev:
      rule:
        rule_id: lBUJ4n
        version_id: 44TqxO
        url: https://semgrep.dev/playground/r/44TqxO/java.servlets.security.tainted-ssrf.tainted-ssrf
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          new URL(...).openConnection()
      - pattern: |
          new URL(...).openStream()
      - pattern: |
          new URL(...).getContent()
  pattern-sanitizers:
  - pattern: getName(...)
- id: java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent command
    injection, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the user input, and use safe methods for executing the commands.
    For more information, see [JavaScript command injection prevention](https://semgrep.dev/docs/cheat-sheets/java-command-injection/)
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    - https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection
    - https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-os-command-injection
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Foscmd
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request
    shortlink: https://sg.run/eGqy
    semgrep.dev:
      rule:
        rule_id: DbUR6g
        version_id: 3ZTwJg
        url: https://semgrep.dev/playground/r/3ZTwJg/java.servlets.security.tainted-cmd-from-http-request.tainted-cmd-from-http-request
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (ProcessBuilder $PB) = ...;
      - pattern: |
          (Process $P) = ...;
      - patterns:
        - pattern-either:
          - pattern-inside: "(java.util.List<$TYPE> $ARGLIST) = ...;  \n...\n(ProcessBuilder
              $PB) = ...;\n...\n$PB.command($ARGLIST);\n"
          - pattern-inside: "(java.util.List<$TYPE> $ARGLIST) = ...;  \n...\n(ProcessBuilder
              $PB) = ...;\n"
          - pattern-inside: "(java.util.List<$TYPE> $ARGLIST) = ...;  \n...\n(Process
              $P) = ...;\n"
        - pattern: |
            $ARGLIST.add(...);
- id: java.servlets.security.tainted-code-injection-from-http-request.tainted-code-injection-from-http-request
  message: Passing unsanitized user input to a Script Engine or other means of dynamic
    code evaluation is unsafe. This could lead to code injection with data leakage
    or arbitrary code execution as a result. Avoid this, or use proper sandboxing
    if user code evaluation is intended.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://cwe.mitre.org/data/definitions/95.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-code-injection-from-http-request.tainted-code-injection-from-http-request
    shortlink: https://sg.run/vL8b
    semgrep.dev:
      rule:
        rule_id: WAUqW9
        version_id: 44Tq3K
        url: https://semgrep.dev/playground/r/44Tq3K/java.servlets.security.tainted-code-injection-from-http-request.tainted-code-injection-from-http-request
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (ScriptEngine $ENGINE).eval(...)
      - pattern: |
          (ExpressionFactory $FACTORY).createMethodExpression(...)
      - pattern: |
          (ExpressionFactory $FACTORY).createValueExpression(...)
- id: java.servlets.security.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request
  message: Detected input from a HTTPServletRequest going into an LDAP query. This
    could lead to LDAP injection if the input is not properly santized, which could
    result in attackers modifying objects in the LDAP tree structure. Ensure data
    passed to an LDAP query is not controllable or properly sanitize the data.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/LDAP_Injection
    - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/90.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request
    shortlink: https://sg.run/d58d
    semgrep.dev:
      rule:
        rule_id: 0oUKLN
        version_id: JdTRgA
        url: https://semgrep.dev/playground/r/JdTRgA/java.servlets.security.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ)
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.naming.directory.InitialDirContext $IDC).search(...)
      - pattern: |
          (javax.naming.directory.DirContext $CTX).search(...)
    - pattern-not: |
        (javax.naming.directory.InitialDirContext $IDC).search($Y, "...", ...)
    - pattern-not: |
        (javax.naming.directory.DirContext $CTX).search($Y, "...", ...)
- id: ruby.rails.security.injection.raw-html-format.raw-html-format
  languages:
  - ruby
  severity: WARNING
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. Use the `render template` and make template
    files which will safely render HTML instead, or inspect that the HTML is absolutely
    rendered safely with a function like `sanitize`.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - rails
    references:
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
    - https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.injection.raw-html-format.raw-html-format
    shortlink: https://sg.run/b2JQ
    semgrep.dev:
      rule:
        rule_id: kxUwZX
        version_id: 0bTQZ4
        url: https://semgrep.dev/playground/r/0bTQZ4/ruby.rails.security.injection.raw-html-format.raw-html-format
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern-either:
    - pattern: sanitize(...)
    - pattern: strip_tags(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: params
      - pattern: request
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $HTMLSTR
        - pattern-regex: <\w+.*
      - patterns:
        - pattern-either:
          - pattern: Kernel::sprintf("$HTMLSTR", ...)
          - pattern: |
              "$HTMLSTR" + $EXPR
          - pattern: |
              "$HTMLSTR" % $EXPR
        - metavariable-pattern:
            metavariable: $HTMLSTR
            language: generic
            pattern: <$TAG ...
- id: java.lang.security.crypto.hardcoded-secret-key-spec.hardcoded-secret-key-spec
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - javax
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.crypto.hardcoded-secret-key-spec.hardcoded-secret-key-spec
    shortlink: https://sg.run/KE86
    semgrep.dev:
      rule:
        rule_id: pKUvwD
        version_id: 2KTOA3
        url: https://semgrep.dev/playground/r/2KTOA3/java.lang.security.crypto.hardcoded-secret-key-spec.hardcoded-secret-key-spec
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - pattern: |
      "...".getBytes(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: new SecretKeySpec($SECRET, ...)
      - pattern: new javax.crypto.spec.SecretKeySpec($SECRET, ...)
    - focus-metavariable: $SECRET
- id: php.laravel.security.laravel-unsafe-validator.laravel-unsafe-validator
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        public function $F(...,Request $R,...){...}
    - focus-metavariable: $R
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  pattern-sinks:
  - patterns:
    - pattern: |
        Illuminate\Validation\Rule::unique(...)->ignore(...,$IGNORE,...)
    - focus-metavariable: $IGNORE
  message: Found a request argument passed to an `ignore()` definition in a Rule constraint.
    This can lead to SQL injection.
  languages:
  - php
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - php
    - laravel
    references:
    - https://laravel.com/docs/9.x/validation#rule-unique
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.laravel.security.laravel-unsafe-validator.laravel-unsafe-validator
    shortlink: https://sg.run/vkeb
    semgrep.dev:
      rule:
        rule_id: X5ULgE
        version_id: RGTYe5
        url: https://semgrep.dev/playground/r/RGTYe5/php.laravel.security.laravel-unsafe-validator.laravel-unsafe-validator
        origin: community
- id: php.laravel.security.laravel-api-route-sql-injection.laravel-api-route-sql-injection
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $ARG
    - pattern-inside: |
        Route::$METHOD($ROUTE_NAME, function(...,$ARG,...){...})
  pattern-sanitizers:
  - patterns:
    - pattern: |
        DB::raw("...",[...])
  pattern-sinks:
  - patterns:
    - pattern: |
        DB::raw(...)
  message: HTTP method [$METHOD] to Laravel route $ROUTE_NAME is vulnerable to SQL
    injection via string concatenation or unsafe interpolation.
  languages:
  - php
  severity: WARNING
  metadata:
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md
    technology:
    - php
    - laravel
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.laravel.security.laravel-api-route-sql-injection.laravel-api-route-sql-injection
    shortlink: https://sg.run/x94g
    semgrep.dev:
      rule:
        rule_id: zdUln0
        version_id: kbT1l8
        url: https://semgrep.dev/playground/r/kbT1l8/php.laravel.security.laravel-api-route-sql-injection.laravel-api-route-sql-injection
        origin: community
- id: python.django.security.injection.command.subprocess-injection.subprocess-injection
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $REQUEST, ...):
          ...
    - focus-metavariable: $REQUEST
    - metavariable-pattern:
        metavariable: $REQUEST
        patterns:
        - pattern: request
        - pattern-not-inside: request.build_absolute_uri
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: subprocess.$FUNC(...)
        - pattern-not: subprocess.$FUNC("...", ...)
        - pattern-not: subprocess.$FUNC(["...", ...], ...)
        - pattern-not-inside: |
            $CMD = ["...", ...]
            ...
            subprocess.$FUNC($CMD, ...)
      - patterns:
        - pattern: subprocess.$FUNC(["$SHELL", "-c", ...], ...)
        - metavariable-regex:
            metavariable: $SHELL
            regex: ^(sh|bash|ksh|csh|tcsh|zsh)$
      - patterns:
        - pattern: subprocess.$FUNC(["$INTERPRETER", ...], ...)
        - metavariable-regex:
            metavariable: $INTERPRETER
            regex: ^(python|python\d)$
  pattern-sanitizers:
  - patterns:
    - pattern: $DICT[$KEY]
    - focus-metavariable: $KEY
  severity: ERROR
  message: Detected user input entering a `subprocess` call unsafely. This could result
    in a command injection vulnerability. An attacker could use this vulnerability
    to execute arbitrary commands on the host, which allows them to download malware,
    scan sensitive data, or run any command they wish on the server. Do not let users
    choose the command to run. In general, prefer to use Python API versions of system
    commands. If you must use subprocess, use a dictionary to allowlist a set of commands.
  metadata:
    category: security
    technology:
    - flask
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.command.subprocess-injection.subprocess-injection
    shortlink: https://sg.run/49BE
    semgrep.dev:
      rule:
        rule_id: EwUepx
        version_id: gET5bA
        url: https://semgrep.dev/playground/r/gET5bA/python.django.security.injection.command.subprocess-injection.subprocess-injection
        origin: community
- id: java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
  message: Insecure HostnameVerifier implementation detected. This will accept any
    SSL certificate with any hostname, which creates the possibility for man-in-the-middle
    attacks.
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
    shortlink: https://sg.run/5QoD
    semgrep.dev:
      rule:
        rule_id: lBU9n8
        version_id: d6Tbdr
        url: https://semgrep.dev/playground/r/d6Tbdr/java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier
        origin: community
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      class $CLASS implements HostnameVerifier {
        ...
        public boolean verify(...) { return true; }
      }
  - pattern: |-
      new HostnameVerifier(...){
        public boolean verify(...) {
          return true;
        }
      }
  - pattern: import org.apache.http.conn.ssl.NoopHostnameVerifier;
- id: problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request
  message: Detected an HTTP request sent via HttpGet. This could lead to sensitive
    information being sent  over an insecure channel. Instead, it is recommended to
    send requests over HTTPS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request
    shortlink: https://sg.run/QE2q
    semgrep.dev:
      rule:
        rule_id: 6JUOJ2
        version_id: l4TkEB
        url: https://semgrep.dev/playground/r/l4TkEB/problem-based-packs.insecure-transport.java-stdlib.httpget-http-request.httpget-http-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  patterns:
  - pattern: |
      "=~/[Hh][Tt][Tt][Pp]://.*/"
  - pattern-inside: |
      $R = new HttpGet("=~/[Hh][Tt][Tt][Pp]://.*/");
      ...
      $CLIENT. ... .execute($R, ...);
- id: java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb
  pattern: $CIPHER.getInstance("=~/AES/ECB.*/")
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb
    shortlink: https://sg.run/dB2Y
    semgrep.dev:
      rule:
        rule_id: WAU2yA
        version_id: GxTNKz
        url: https://semgrep.dev/playground/r/GxTNKz/java.lang.security.audit.crypto.use-of-aes-ecb.use-of-aes-ecb
        origin: community
  message: 'Use of AES with ECB mode detected. ECB doesn''t provide message confidentiality
    and  is not semantically secure so should not be used. Instead, use a strong,
    secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions
    for more information.'
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish
  pattern: $CIPHER.getInstance("Blowfish")
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish
    shortlink: https://sg.run/ZE4n
    semgrep.dev:
      rule:
        rule_id: 0oUR28
        version_id: RGTJZK
        url: https://semgrep.dev/playground/r/RGTJZK/java.lang.security.audit.crypto.use-of-blowfish.use-of-blowfish
        origin: community
  message: 'Use of Blowfish was detected. Blowfish uses a 64-bit block size that  makes
    it vulnerable to birthday attacks, and is therefore considered non-compliant.  Instead,
    use a strong, secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions
    for more information.'
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.use-of-rc2.use-of-rc2
  pattern: $CIPHER.getInstance("RC2")
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-rc2.use-of-rc2
    shortlink: https://sg.run/EEvA
    semgrep.dev:
      rule:
        rule_id: qNUzXG
        version_id: BjTqn1
        url: https://semgrep.dev/playground/r/BjTqn1/java.lang.security.audit.crypto.use-of-rc2.use-of-rc2
        origin: community
  message: 'Use of RC2 was detected. RC2 is vulnerable to related-key attacks, and
    is therefore considered non-compliant. Instead, use a strong, secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING").
    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for
    more information.'
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.use-of-rc4.use-of-rc4
  pattern: $CIPHER.getInstance("RC4")
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-rc4.use-of-rc4
    shortlink: https://sg.run/7OYR
    semgrep.dev:
      rule:
        rule_id: lBUw8k
        version_id: DkTlZn
        url: https://semgrep.dev/playground/r/DkTlZn/java.lang.security.audit.crypto.use-of-rc4.use-of-rc4
        origin: community
  message: 'Use of RC4 was detected. RC4 is vulnerable to several attacks, including
    stream cipher attacks and bit flipping attacks. Instead, use a strong, secure
    cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING"). See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions
    for more information.'
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import javax;
          ...
    - pattern-either:
      - pattern: javax.crypto.Cipher.getInstance("AES")
      - pattern: (javax.crypto.Cipher $CIPHER).getInstance("AES")
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import javax.*;
          ...
      - pattern-inside: |
          import javax.crypto;
          ...
    - pattern-either:
      - pattern: crypto.Cipher.getInstance("AES")
      - pattern: (crypto.Cipher $CIPHER).getInstance("AES")
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import javax.crypto.*;
          ...
      - pattern-inside: |
          import javax.crypto.Cipher;
          ...
    - pattern-either:
      - pattern: Cipher.getInstance("AES")
      - pattern: (Cipher $CIPHER).getInstance("AES")
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
    shortlink: https://sg.run/nzKO
    semgrep.dev:
      rule:
        rule_id: KxUB7Z
        version_id: gETNAO
        url: https://semgrep.dev/playground/r/gETNAO/java.lang.security.audit.crypto.use-of-default-aes.use-of-default-aes
        origin: community
  message: 'Use of AES with no settings detected. By default, java.crypto.Cipher uses
    ECB mode. ECB doesn''t  provide message confidentiality and is not semantically
    secure so should not be used. Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance("AES/CBC/PKCS7PADDING").
    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for
    more information.'
  severity: WARNING
  languages:
  - java
- id: terraform.aws.security.aws-athena-workgroup-unencrypted.aws-athena-workgroup-unencrypted
  patterns:
  - pattern: |
      resource "aws_athena_workgroup" $ANYTHING {
        ...
        configuration {
          ...
          result_configuration {
            ...
          }
          ...
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_athena_workgroup" $ANYTHING {
        ...
        configuration {
          ...
          result_configuration {
            ...
            encryption_configuration {
              ...
            }
            ...
          }
          ...
        }
        ...
      }
  message: The AWS Athena Work Group is unencrypted. The AWS KMS encryption key protects
    backups in the work group. To create your own, create a aws_kms_key resource or
    use the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-athena-workgroup-unencrypted.aws-athena-workgroup-unencrypted
    shortlink: https://sg.run/gX7J
    semgrep.dev:
      rule:
        rule_id: NbUXOA
        version_id: e1TBKo
        url: https://semgrep.dev/playground/r/e1TBKo/terraform.aws.security.aws-athena-workgroup-unencrypted.aws-athena-workgroup-unencrypted
        origin: community
- id: terraform.aws.security.aws-cloudtrail-encrypted-with-cmk.aws-cloudtrail-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_cloudtrail" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_cloudtrail" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure CloudTrail logs are encrypted at rest using KMS CMKs. CMKs gives
    you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-cloudtrail-encrypted-with-cmk.aws-cloudtrail-encrypted-with-cmk
    shortlink: https://sg.run/38kr
    semgrep.dev:
      rule:
        rule_id: wdUl2j
        version_id: ZRTbd0
        url: https://semgrep.dev/playground/r/ZRTbd0/terraform.aws.security.aws-cloudtrail-encrypted-with-cmk.aws-cloudtrail-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-cloudwatch-log-group-unencrypted.aws-cloudwatch-log-group-unencrypted
  patterns:
  - pattern: |
      resource "aws_cloudwatch_log_group" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_cloudwatch_log_group" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: By default, AWS CloudWatch Log Group is encrypted using AWS-managed keys.
    However, for added security, it's recommended to configure your own AWS KMS encryption
    key to protect your log group in CloudWatch. You can either create a new aws_kms_key
    resource or use the ARN of an existing key in your AWS account to do so.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-cloudwatch-log-group-unencrypted.aws-cloudwatch-log-group-unencrypted
    shortlink: https://sg.run/Pg6Y
    semgrep.dev:
      rule:
        rule_id: OrUl0J
        version_id: ExTZWz
        url: https://semgrep.dev/playground/r/ExTZWz/terraform.aws.security.aws-cloudwatch-log-group-unencrypted.aws-cloudwatch-log-group-unencrypted
        origin: community
- id: terraform.aws.security.aws-config-aggregator-not-all-regions.aws-config-aggregator-not-all-regions
  pattern-either:
  - pattern: |
      resource "aws_config_configuration_aggregator" $ANYTHING {
        ...
        account_aggregation_source {
          ...
          regions = ...
          ...
        }
        ...
      }
  - pattern: |
      resource "aws_config_configuration_aggregator" $ANYTHING {
        ...
        organization_aggregation_source {
          ...
          regions = ...
          ...
        }
        ...
      }
  message: The AWS configuration aggregator does not aggregate all AWS Config region.
    This may result in unmonitored configuration in regions that are thought to be
    unused. Configure the aggregator with all_regions for the source.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A09:2021 - Security Logging and Monitoring Failures
    cwe:
    - 'CWE-778: Insufficient Logging'
    references:
    - https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-config-aggregator-not-all-regions.aws-config-aggregator-not-all-regions
    shortlink: https://sg.run/O6A7
    semgrep.dev:
      rule:
        rule_id: DbUo7v
        version_id: 8KTDll
        url: https://semgrep.dev/playground/r/8KTDll/terraform.aws.security.aws-config-aggregator-not-all-regions.aws-config-aggregator-not-all-regions
        origin: community
- id: terraform.aws.security.aws-docdb-encrypted-with-cmk.aws-docdb-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_docdb_cluster" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_docdb_cluster" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure DocDB is encrypted at rest using KMS CMKs. CMKs gives you control
    over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-docdb-encrypted-with-cmk.aws-docdb-encrypted-with-cmk
    shortlink: https://sg.run/RyzO
    semgrep.dev:
      rule:
        rule_id: ZqUGEp
        version_id: QkT9NO
        url: https://semgrep.dev/playground/r/QkT9NO/terraform.aws.security.aws-docdb-encrypted-with-cmk.aws-docdb-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-documentdb-auditing-disabled.aws-documentdb-auditing-disabled
  patterns:
  - pattern: |
      resource "aws_docdb_cluster" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_docdb_cluster" $ANYTHING {
        ...
        enabled_cloudwatch_logs_exports = [..., "audit", ...]
        ...
      }
  message: Auditing is not enabled for DocumentDB. To ensure that you are able to
    accurately audit the usage of your DocumentDB cluster, you should enable auditing
    and export logs to CloudWatch.
  languages:
  - hcl
  severity: INFO
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A09:2021 - Security Logging and Monitoring Failures
    cwe:
    - 'CWE-778: Insufficient Logging'
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/docdb_cluster#enabled_cloudwatch_logs_exports
    - https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-documentdb-auditing-disabled.aws-documentdb-auditing-disabled
    shortlink: https://sg.run/xJYP
    semgrep.dev:
      rule:
        rule_id: AbU1WN
        version_id: 3ZT8wN
        url: https://semgrep.dev/playground/r/3ZT8wN/terraform.aws.security.aws-documentdb-auditing-disabled.aws-documentdb-auditing-disabled
        origin: community
- id: terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted
  patterns:
  - pattern: |
      resource "aws_dynamodb_table" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_dynamodb_table" $ANYTHING {
        ...
        server_side_encryption {
          enabled = true
          kms_key_arn = ...
        }
        ...
      }
  message: By default, AWS DynamoDB Table is encrypted using AWS-managed keys. However,
    for added security, it's recommended to configure your own AWS KMS encryption
    key to protect your data in the DynamoDB table. You can either create a new aws_kms_key
    resource or use the ARN of an existing key in your AWS account to do so.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted
    shortlink: https://sg.run/Ay4p
    semgrep.dev:
      rule:
        rule_id: nJUGe2
        version_id: JdTXRq
        url: https://semgrep.dev/playground/r/JdTXRq/terraform.aws.security.aws-dynamodb-table-unencrypted.aws-dynamodb-table-unencrypted
        origin: community
- id: terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk.aws-ebs-snapshot-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_ebs_snapshot_copy" $ANYTHING {
        ...
        encrypted = true
        ...
      }
  - pattern-not-inside: |
      resource "aws_ebs_snapshot_copy" $ANYTHING {
        ...
        encrypted = true
        kms_key_id = ...
        ...
      }
  message: Ensure EBS Snapshot is encrypted at rest using KMS CMKs. CMKs gives you
    control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk.aws-ebs-snapshot-encrypted-with-cmk
    shortlink: https://sg.run/ByPW
    semgrep.dev:
      rule:
        rule_id: EwUqko
        version_id: 5PTZG5
        url: https://semgrep.dev/playground/r/5PTZG5/terraform.aws.security.aws-ebs-snapshot-encrypted-with-cmk.aws-ebs-snapshot-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-ebs-unencrypted.aws-ebs-unencrypted
  patterns:
  - pattern: |
      resource "aws_ebs_encryption_by_default" $ANYTHING {
        ...
        enabled = false
        ...
      }
  message: The AWS EBS is unencrypted. The AWS EBS encryption protects data in the
    EBS.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ebs-unencrypted.aws-ebs-unencrypted
    shortlink: https://sg.run/Dy5Y
    semgrep.dev:
      rule:
        rule_id: 7KUW7K
        version_id: GxT1X9
        url: https://semgrep.dev/playground/r/GxT1X9/terraform.aws.security.aws-ebs-unencrypted.aws-ebs-unencrypted
        origin: community
- id: terraform.aws.security.aws-ebs-volume-encrypted-with-cmk.aws-ebs-volume-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_ebs_volume" $ANYTHING {
        ...
        encrypted = true
        ...
      }
  - pattern-not-inside: |
      resource "aws_ebs_volume" $ANYTHING {
        ...
        encrypted = true
        kms_key_id = ...
        ...
      }
  message: Ensure EBS Volume is encrypted at rest using KMS CMKs. CMKs gives you control
    over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ebs-volume-encrypted-with-cmk.aws-ebs-volume-encrypted-with-cmk
    shortlink: https://sg.run/WW14
    semgrep.dev:
      rule:
        rule_id: L1UPY9
        version_id: RGTyLO
        url: https://semgrep.dev/playground/r/RGTyLO/terraform.aws.security.aws-ebs-volume-encrypted-with-cmk.aws-ebs-volume-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted
  patterns:
  - pattern: |
      resource "aws_ebs_volume" $ANYTHING {
        ...
      }
  - pattern-not: |
      resource "aws_ebs_volume" $ANYTHING {
        ...
        encrypted = true
        ...
      }
  message: The AWS EBS volume is unencrypted. The volume, the disk I/O and any derived
    snapshots could be read if compromised. Volumes should be encrypted to ensure
    sensitive data is stored securely.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted
    shortlink: https://sg.run/6ZbY
    semgrep.dev:
      rule:
        rule_id: YGUKl1
        version_id: A8TBd9
        url: https://semgrep.dev/playground/r/A8TBd9/terraform.aws.security.aws-ebs-volume-unencrypted.aws-ebs-volume-unencrypted
        origin: community
- id: terraform.aws.security.aws-ec2-has-public-ip.aws-ec2-has-public-ip
  patterns:
  - pattern-either:
    - pattern: |
        resource "aws_instance" $ANYTHING {
          ...
          associate_public_ip_address = true
          ...
        }
    - pattern: |
        resource "aws_launch_template" $ANYTHING {
          ...
          network_interfaces {
            ...
            associate_public_ip_address = true
            ...
          }
          ...
        }
  message: EC2 instances should not have a public IP address attached in order to
    block public access to the instances. To fix this, set your `associate_public_ip_address`
    to `"false"`.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ec2-has-public-ip.aws-ec2-has-public-ip
    shortlink: https://sg.run/08rv
    semgrep.dev:
      rule:
        rule_id: 8GUA2n
        version_id: BjTRZx
        url: https://semgrep.dev/playground/r/BjTRZx/terraform.aws.security.aws-ec2-has-public-ip.aws-ec2-has-public-ip
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled.aws-ec2-launch-template-metadata-service-v1-enabled
  patterns:
  - pattern: |
      resource "aws_launch_template" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_launch_template" $ANYTHING {
        ...
        metadata_options {
          ...
          http_endpoint = "disabled"
          ...
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_launch_template" $ANYTHING {
        ...
        metadata_options {
          ...
          http_tokens = "required"
          ...
        }
        ...
      }
  message: The EC2 launch template has Instance Metadata Service Version 1 (IMDSv1)
    enabled. IMDSv2 introduced session authentication tokens which improve security
    when talking to IMDS. You should either disable IMDS or require the use of IMDSv2.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-1390: Weak Authentication'
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/launch_configuration#metadata_options
    - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled.aws-ec2-launch-template-metadata-service-v1-enabled
    shortlink: https://sg.run/pg9J
    semgrep.dev:
      rule:
        rule_id: zdU0Wo
        version_id: 0bTnzE
        url: https://semgrep.dev/playground/r/0bTnzE/terraform.aws.security.aws-ec2-launch-template-metadata-service-v1-enabled.aws-ec2-launch-template-metadata-service-v1-enabled
        origin: community
- id: terraform.aws.security.aws-ecr-repository-wildcard-principal.aws-ecr-repository-wildcard-principal
  patterns:
  - pattern-inside: |
      resource "aws_ecr_repository_policy" $ANYTHING {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: policy = "$JSONPOLICY"
      - metavariable-pattern:
          metavariable: $JSONPOLICY
          language: json
          patterns:
          - pattern-not-inside: |
              {..., "Effect": "Deny", ...}
          - pattern-either:
            - pattern: |
                {..., "Principal": "*", ...}
            - pattern: |
                {..., "Principal": [..., "*", ...], ...}
            - pattern: |
                {..., "Principal": { "AWS": "*" }, ...}
            - pattern: |
                {..., "Principal": { "AWS": [..., "*", ...] }, ...}
    - patterns:
      - pattern-inside: policy = jsonencode(...)
      - pattern-not-inside: |
          {..., Effect = "Deny", ...}
      - pattern-either:
        - pattern: |
            {..., Principal = "*", ...}
        - pattern: |
            {..., Principal = [..., "*", ...], ...}
        - pattern: |
            {..., Principal = { AWS = "*" }, ...}
        - pattern: |
            {..., Principal = { AWS = [..., "*", ...] }, ...}
  message: Detected wildcard access granted in your ECR repository policy principal.
    This grants access to all users, including anonymous users (public access). Instead,
    limit principals, actions and resources to what you need according to least privilege.
  metadata:
    category: security
    technology:
    - aws
    - terraform
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository_policy
    - https://docs.aws.amazon.com/lambda/latest/operatorguide/wildcard-permissions-iam.html
    - https://docs.aws.amazon.com/prescriptive-guidance/latest/patterns/monitor-amazon-ecr-repositories-for-wildcard-permissions-using-aws-cloudformation-and-aws-config.html
    - https://cwe.mitre.org/data/definitions/732.html
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ecr-repository-wildcard-principal.aws-ecr-repository-wildcard-principal
    shortlink: https://sg.run/nzqb
    semgrep.dev:
      rule:
        rule_id: qNUzov
        version_id: YDTLel
        url: https://semgrep.dev/playground/r/YDTLel/terraform.aws.security.aws-ecr-repository-wildcard-principal.aws-ecr-repository-wildcard-principal
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk.aws-efs-filesystem-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_efs_file_system" $ANYTHING {
        ...
        encrypted  = true
        ...
      }
  - pattern-not-inside: |
      resource "aws_efs_file_system" $ANYTHING {
        ...
        encrypted  = true
        kms_key_id = ...
        ...
      }
  message: Ensure EFS filesystem is encrypted at rest using KMS CMKs. CMKs gives you
    control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk.aws-efs-filesystem-encrypted-with-cmk
    shortlink: https://sg.run/Kk07
    semgrep.dev:
      rule:
        rule_id: gxUJ4n
        version_id: JdTXxo
        url: https://semgrep.dev/playground/r/JdTXxo/terraform.aws.security.aws-efs-filesystem-encrypted-with-cmk.aws-efs-filesystem-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-elasticache-replication-group-encrypted-with-cmk.aws-elasticache-replication-group-encrypted-with-cmk
  patterns:
  - pattern: a()
  - pattern: b()
  message: This rule has been deprecated.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-elasticache-replication-group-encrypted-with-cmk.aws-elasticache-replication-group-encrypted-with-cmk
    shortlink: https://sg.run/qyAz
    semgrep.dev:
      rule:
        rule_id: QrUnyQ
        version_id: 5PTZ19
        url: https://semgrep.dev/playground/r/5PTZ19/terraform.aws.security.aws-elasticache-replication-group-encrypted-with-cmk.aws-elasticache-replication-group-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-elasticsearch-nodetonode-encryption.aws-elasticsearch-nodetonode-encryption-not-enabled
  patterns:
  - pattern-either:
    - pattern: |
        resource "aws_elasticsearch_domain" $ANYTHING {
          ...
          node_to_node_encryption {
            ...
            enabled = false
            ...
          }
          ...
        }
    - pattern: |
        resource "aws_elasticsearch_domain" $ANYTHING {
          ...
          cluster_config {
            ...
            instance_count = $COUNT
            ...
          }
        }
  - pattern-not-inside: |
      resource "aws_elasticsearch_domain" $ANYTHING {
        ...
        cluster_config {
          ...
          instance_count = $COUNT
          ...
        }
        node_to_node_encryption {
          ...
          enabled = true
          ...
        }
      }
  - metavariable-comparison:
      metavariable: $COUNT
      comparison: $COUNT > 1
  message: "Ensure all Elasticsearch has node-to-node encryption enabled.\t"
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-elasticsearch-nodetonode-encryption.aws-elasticsearch-nodetonode-encryption-not-enabled
    shortlink: https://sg.run/lp3y
    semgrep.dev:
      rule:
        rule_id: 3qU6J7
        version_id: RGTyLR
        url: https://semgrep.dev/playground/r/RGTyLR/terraform.aws.security.aws-elasticsearch-nodetonode-encryption.aws-elasticsearch-nodetonode-encryption-not-enabled
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-elb-access-logs-not-enabled.aws-elb-access-logs-not-enabled
  patterns:
  - pattern-either:
    - pattern: |
        resource "aws_lb" $ANYTHING {
          ...
        }
    - pattern: |
        resource "aws_alb" $ANYTHING {
          ...
        }
  - pattern-not-inside: |
      resource $ANYLB $ANYTHING {
        ...
        access_logs {
          ...
          enabled = true
          ...
        }
        ...
      }
  - pattern-not-inside: "resource $ANYLB $ANYTHING {\n  ...\n  subnet_mapping {\n
      \   ...\n  }\n  ...\n} \n"
  message: ELB has no logging. Missing logs can cause missing important event information.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-elb-access-logs-not-enabled.aws-elb-access-logs-not-enabled
    shortlink: https://sg.run/Yrye
    semgrep.dev:
      rule:
        rule_id: 4bUg3J
        version_id: A8TBdg
        url: https://semgrep.dev/playground/r/A8TBdg/terraform.aws.security.aws-elb-access-logs-not-enabled.aws-elb-access-logs-not-enabled
        origin: community
- id: terraform.aws.security.aws-emr-encrypted-with-cmk.aws-emr-encrypted-with-cmk
  patterns:
  - pattern-inside: |
      resource "aws_emr_security_configuration" $ANYTHING {
        ...
      }
  - pattern: configuration = "$STATEMENT"
  - metavariable-pattern:
      metavariable: $STATEMENT
      language: json
      patterns:
      - pattern-not-inside: |
          "AwsKmsKey": ...
  message: Ensure EMR is encrypted at rest using KMS CMKs. CMKs gives you control
    over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-emr-encrypted-with-cmk.aws-emr-encrypted-with-cmk
    shortlink: https://sg.run/6gOo
    semgrep.dev:
      rule:
        rule_id: PeU0L7
        version_id: BjTRZb
        url: https://semgrep.dev/playground/r/BjTRZb/terraform.aws.security.aws-emr-encrypted-with-cmk.aws-emr-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-fsx-lustre-filesystem-encrypted-with-cmk.aws-fsx-lustre-filesystem-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_fsx_lustre_file_system" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_fsx_lustre_file_system" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs
    gives you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-fsx-lustre-filesystem-encrypted-with-cmk.aws-fsx-lustre-filesystem-encrypted-with-cmk
    shortlink: https://sg.run/zJ6G
    semgrep.dev:
      rule:
        rule_id: 5rUp50
        version_id: DkTEbw
        url: https://semgrep.dev/playground/r/DkTEbw/terraform.aws.security.aws-fsx-lustre-filesystem-encrypted-with-cmk.aws-fsx-lustre-filesystem-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-fsx-ontapfs-encrypted-with-cmk.aws-fsx-ontapfs-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_fsx_ontap_file_system" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_fsx_ontap_file_system" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure FSX ONTAP file system is encrypted at rest using KMS CMKs. CMKs
    gives you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-fsx-ontapfs-encrypted-with-cmk.aws-fsx-ontapfs-encrypted-with-cmk
    shortlink: https://sg.run/pyRg
    semgrep.dev:
      rule:
        rule_id: GdUzwK
        version_id: WrTLKG
        url: https://semgrep.dev/playground/r/WrTLKG/terraform.aws.security.aws-fsx-ontapfs-encrypted-with-cmk.aws-fsx-ontapfs-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-fsx-windows-encrypted-with-cmk.aws-fsx-windows-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_fsx_windows_file_system" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_fsx_windows_file_system" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure FSX Windows file system is encrypted at rest using KMS CMKs. CMKs
    gives you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-fsx-windows-encrypted-with-cmk.aws-fsx-windows-encrypted-with-cmk
    shortlink: https://sg.run/2pN0
    semgrep.dev:
      rule:
        rule_id: ReUqv6
        version_id: 0bTnzq
        url: https://semgrep.dev/playground/r/0bTnzq/terraform.aws.security.aws-fsx-windows-encrypted-with-cmk.aws-fsx-windows-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-glacier-vault-any-principal.aws-glacier-vault-any-principal
  patterns:
  - pattern-inside: |
      resource "aws_glacier_vault" $ANYTHING {
        ...
      }
  - pattern: access_policy = "$STATEMENT"
  - metavariable-pattern:
      metavariable: $STATEMENT
      language: json
      patterns:
      - pattern-inside: |
          {..., "Effect": "Allow", ...}
      - pattern-either:
        - pattern: |
            "Principal": "*"
        - pattern: |
            "Principal": {..., "AWS": "*", ...}
        - pattern-inside: |
            "Principal": {..., "AWS": ..., ...}
        - pattern-regex: |
            (^\"arn:aws:iam::\*:(.*)\"$)
  message: 'Detected wildcard access granted to Glacier Vault. This means anyone within
    your AWS account ID can perform actions on Glacier resources. Instead, limit to
    a specific identity in your account, like this: `arn:aws:iam::<account_id>:<identity>`.'
  metadata:
    category: security
    technology:
    - aws
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-glacier-vault-any-principal.aws-glacier-vault-any-principal
    shortlink: https://sg.run/XN9K
    semgrep.dev:
      rule:
        rule_id: AbUeYK
        version_id: K3TxkQ
        url: https://semgrep.dev/playground/r/K3TxkQ/terraform.aws.security.aws-glacier-vault-any-principal.aws-glacier-vault-any-principal
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.aws.security.aws-iam-admin-policy-ssoadmin.aws-iam-admin-policy-ssoadmin
  patterns:
  - pattern-inside: |
      resource "aws_ssoadmin_permission_set_inline_policy" $ANYTHING {
        ...
      }
  - pattern: inline_policy = "$STATEMENT"
  - metavariable-pattern:
      metavariable: $STATEMENT
      language: json
      patterns:
      - pattern-not-inside: |
          {..., "Effect": "Deny", ...}
      - pattern-either:
        - pattern: |
            {..., "Action": [..., "*", ...], "Resource": [..., "*", ...], ...}
        - pattern: |
            {..., "Action": "*", "Resource": "*", ...}
        - pattern: |
            {..., "Action": "*", "Resource": [...], ...}
        - pattern: |
            {..., "Action": [...], "Resource": "*", ...}
  message: Detected admin access granted in your policy. This means anyone with this
    policy can perform administrative actions. Instead, limit actions and resources
    to what you need according to least privilege.
  metadata:
    category: security
    technology:
    - aws
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-iam-admin-policy-ssoadmin.aws-iam-admin-policy-ssoadmin
    shortlink: https://sg.run/jzgY
    semgrep.dev:
      rule:
        rule_id: BYUzY5
        version_id: qkTD7K
        url: https://semgrep.dev/playground/r/qkTD7K/terraform.aws.security.aws-iam-admin-policy-ssoadmin.aws-iam-admin-policy-ssoadmin
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.aws.security.aws-iam-admin-policy.aws-iam-admin-policy
  patterns:
  - pattern-inside: |
      resource "aws_iam_policy" $ANYTHING {
        ...
      }
  - pattern: policy = "$STATEMENT"
  - metavariable-pattern:
      metavariable: $STATEMENT
      language: json
      patterns:
      - pattern-not-inside: |
          {..., "Effect": "Deny", ...}
      - pattern-either:
        - pattern: |
            {..., "Action": [..., "*", ...], "Resource": [..., "*", ...], ...}
        - pattern: |
            {..., "Action": "*", "Resource": "*", ...}
        - pattern: |
            {..., "Action": "*", "Resource": [...], ...}
        - pattern: |
            {..., "Action": [...], "Resource": "*", ...}
  message: Detected admin access granted in your policy. This means anyone with this
    policy can perform administrative actions. Instead, limit actions and resources
    to what you need according to least privilege.
  metadata:
    category: security
    technology:
    - aws
    - terraform
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-iam-admin-policy.aws-iam-admin-policy
    shortlink: https://sg.run/1zbw
    semgrep.dev:
      rule:
        rule_id: DbUx8l
        version_id: l4TERe
        url: https://semgrep.dev/playground/r/l4TERe/terraform.aws.security.aws-iam-admin-policy.aws-iam-admin-policy
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.aws.security.aws-imagebuilder-component-encrypted-with-cmk.aws-imagebuilder-component-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_imagebuilder_component" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_imagebuilder_component" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure ImageBuilder component is encrypted at rest using KMS CMKs. CMKs
    gives you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-imagebuilder-component-encrypted-with-cmk.aws-imagebuilder-component-encrypted-with-cmk
    shortlink: https://sg.run/9vdY
    semgrep.dev:
      rule:
        rule_id: WAUNxL
        version_id: YDTLex
        url: https://semgrep.dev/playground/r/YDTLex/terraform.aws.security.aws-imagebuilder-component-encrypted-with-cmk.aws-imagebuilder-component-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-insecure-redshift-ssl-configuration.aws-insecure-redshift-ssl-configuration
  patterns:
  - pattern: |
      resource "aws_redshift_parameter_group" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_redshift_parameter_group" $ANYTHING {
        ...
        parameter {
          name  = "require_ssl"
          value = "true"
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_redshift_parameter_group" $ANYTHING {
        ...
        parameter {
          name  = "require_ssl"
          value = true
        }
        ...
      }
  message: Detected an AWS Redshift configuration with a SSL disabled. To fix this,
    set your `require_ssl` to `"true"`.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-insecure-redshift-ssl-configuration.aws-insecure-redshift-ssl-configuration
    shortlink: https://sg.run/yPYx
    semgrep.dev:
      rule:
        rule_id: 0oUrOj
        version_id: o5TADQ
        url: https://semgrep.dev/playground/r/o5TADQ/terraform.aws.security.aws-insecure-redshift-ssl-configuration.aws-insecure-redshift-ssl-configuration
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-kinesis-stream-encrypted-with-cmk.aws-kinesis-stream-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_kinesis_stream" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_kinesis_stream" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure Kinesis stream is encrypted at rest using KMS CMKs. CMKs gives you
    control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-kinesis-stream-encrypted-with-cmk.aws-kinesis-stream-encrypted-with-cmk
    shortlink: https://sg.run/ryBn
    semgrep.dev:
      rule:
        rule_id: KxU5yW
        version_id: zyTz2v
        url: https://semgrep.dev/playground/r/zyTz2v/terraform.aws.security.aws-kinesis-stream-encrypted-with-cmk.aws-kinesis-stream-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-kinesis-video-stream-encrypted-with-cmk.aws-kinesis-video-stream-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_kinesis_video_stream" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_kinesis_video_stream" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure Kinesis video stream is encrypted at rest using KMS CMKs. CMKs gives
    you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-kinesis-video-stream-encrypted-with-cmk.aws-kinesis-video-stream-encrypted-with-cmk
    shortlink: https://sg.run/bXvp
    semgrep.dev:
      rule:
        rule_id: qNUWqn
        version_id: pZTE34
        url: https://semgrep.dev/playground/r/pZTE34/terraform.aws.security.aws-kinesis-video-stream-encrypted-with-cmk.aws-kinesis-video-stream-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-kms-key-wildcard-principal.aws-kms-key-wildcard-principal
  patterns:
  - pattern-inside: |
      resource "aws_kms_key" $ANYTHING {
        ...
      }
  - pattern: policy = "$STATEMENT"
  - metavariable-pattern:
      metavariable: $STATEMENT
      language: json
      patterns:
      - pattern-not-inside: |
          {..., "Effect": "Deny", ...}
      - pattern-either:
        - pattern: |
            {..., "Principal": "*", "Action": "kms:*", "Resource": "*", ...}
        - pattern: |
            {..., "Principal": [..., "*", ...], "Action": "kms:*", "Resource": "*", ...}
        - pattern: |
            {..., "Principal": { "AWS": "*" }, "Action": "kms:*", "Resource": "*", ...}
        - pattern: |
            {..., "Principal": { "AWS": [..., "*", ...] }, "Action": "kms:*", "Resource": "*", ...}
  message: Detected wildcard access granted in your KMS key. This means anyone with
    this policy can perform administrative actions over the keys. Instead, limit principals,
    actions and resources to what you need according to least privilege.
  metadata:
    category: security
    technology:
    - aws
    - terraform
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-kms-key-wildcard-principal.aws-kms-key-wildcard-principal
    shortlink: https://sg.run/Nwlp
    semgrep.dev:
      rule:
        rule_id: lBUWPD
        version_id: 2KT82k
        url: https://semgrep.dev/playground/r/2KT82k/terraform.aws.security.aws-kms-key-wildcard-principal.aws-kms-key-wildcard-principal
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation
  patterns:
  - pattern-either:
    - pattern: |
        resource "aws_kms_key" $ANYTHING {
          ...
          enable_key_rotation = false
          ...
        }
    - pattern: |
        resource "aws_kms_key" $ANYTHING {
          ...
          customer_master_key_spec = "SYMMETRIC_DEFAULT"
          enable_key_rotation = false
          ...
        }
    - pattern: |
        resource "aws_kms_key" $ANYTHING {
          ...
        }
  - pattern-not-inside: |
      resource "aws_kms_key" $ANYTHING {
        ...
        enable_key_rotation = true
        ...
      }
  - pattern-not-inside: |
      resource "aws_kms_key" $ANYTHING {
        ...
        customer_master_key_spec = "RSA_2096"
        ...
      }
  message: The AWS KMS has no rotation. Missing rotation can cause leaked key to be
    used by attackers. To fix this, set a `enable_key_rotation`.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation
    shortlink: https://sg.run/kz47
    semgrep.dev:
      rule:
        rule_id: PeU0L3
        version_id: X0TRy1
        url: https://semgrep.dev/playground/r/X0TRy1/terraform.aws.security.aws-kms-no-rotation.aws-kms-no-rotation
        origin: community
- id: terraform.aws.security.aws-lambda-environment-unencrypted.aws-lambda-environment-unencrypted
  patterns:
  - pattern-inside: |
      resource "aws_lambda_function" $ANYTHING {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: |
          environment { ... }
      - pattern-not-inside: |
          resource $A $B {
            ...
            kms_key_arn = ...
            ...
          }
    - patterns:
      - pattern: |
          kms_key_arn = ...
      - pattern-not-inside: |
          resource $A $B {
            ...
            environment { ... }
            ...
          }
    - pattern: kms_key_arn = ""
  message: By default, the AWS Lambda Environment is encrypted using AWS-managed keys.
    However, for added security, it's recommended to configure your own AWS KMS encryption
    key to protect your environment variables in Lambda. You can either create a new
    aws_kms_key resource or use the ARN of an existing key in your AWS account to
    do so.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-lambda-environment-unencrypted.aws-lambda-environment-unencrypted
    shortlink: https://sg.run/x4lz
    semgrep.dev:
      rule:
        rule_id: 5rUp5w
        version_id: 1QTGp6
        url: https://semgrep.dev/playground/r/1QTGp6/terraform.aws.security.aws-lambda-environment-unencrypted.aws-lambda-environment-unencrypted
        origin: community
- id: terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention
  patterns:
  - pattern-either:
    - pattern: |
        resource "aws_rds_cluster" $ANYTHING {
          ...
          backup_retention_period = 0
          ...
        }
    - pattern: |
        resource "aws_db_instance" $ANYTHING {
          ...
          backup_retention_period = 0
          ...
        }
  message: The AWS RDS has no retention. Missing retention can cause losing important
    event information. To fix this, set a `backup_retention_period`.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention
    shortlink: https://sg.run/OyYB
    semgrep.dev:
      rule:
        rule_id: GdUzwQ
        version_id: rxTWK7
        url: https://semgrep.dev/playground/r/rxTWK7/terraform.aws.security.aws-rds-backup-no-retention.aws-rds-backup-no-retention
        origin: community
- id: terraform.aws.security.aws-redshift-cluster-encrypted-with-cmk.aws-redshift-cluster-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_redshift_cluster" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_redshift_cluster" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure AWS Redshift cluster is encrypted at rest using KMS CMKs. CMKs gives
    you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-redshift-cluster-encrypted-with-cmk.aws-redshift-cluster-encrypted-with-cmk
    shortlink: https://sg.run/eXnb
    semgrep.dev:
      rule:
        rule_id: ReUqvX
        version_id: bZTy3e
        url: https://semgrep.dev/playground/r/bZTy3e/terraform.aws.security.aws-redshift-cluster-encrypted-with-cmk.aws-redshift-cluster-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-s3-bucket-object-encrypted-with-cmk.aws-s3-bucket-object-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_s3_bucket_object" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_s3_bucket_object" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure S3 bucket object is encrypted at rest using KMS CMKs. CMKs gives
    you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-s3-bucket-object-encrypted-with-cmk.aws-s3-bucket-object-encrypted-with-cmk
    shortlink: https://sg.run/veKA
    semgrep.dev:
      rule:
        rule_id: AbUeYR
        version_id: NdT4yR
        url: https://semgrep.dev/playground/r/NdT4yR/terraform.aws.security.aws-s3-bucket-object-encrypted-with-cmk.aws-s3-bucket-object-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-s3-object-copy-encrypted-with-cmk.aws-s3-object-copy-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_s3_object_copy" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_s3_object_copy" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure S3 object copies are encrypted at rest using KMS CMKs. CMKs gives
    you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-s3-object-copy-encrypted-with-cmk.aws-s3-object-copy-encrypted-with-cmk
    shortlink: https://sg.run/d1ZZ
    semgrep.dev:
      rule:
        rule_id: BYUzYY
        version_id: kbTJGG
        url: https://semgrep.dev/playground/r/kbTJGG/terraform.aws.security.aws-s3-object-copy-encrypted-with-cmk.aws-s3-object-copy-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-secretsmanager-secret-unencrypted.aws-secretsmanager-secret-unencrypted
  patterns:
  - pattern: |
      resource "aws_secretsmanager_secret" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_secretsmanager_secret" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: By default, AWS SecretManager secrets are encrypted using AWS-managed keys.
    However, for added security, it's recommended to configure your own AWS KMS encryption
    key to protect your secrets in the Secret Manager. You can either create a new
    aws_kms_key resource or use the ARN of an existing key in your AWS account to
    do so.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-secretsmanager-secret-unencrypted.aws-secretsmanager-secret-unencrypted
    shortlink: https://sg.run/nrRX
    semgrep.dev:
      rule:
        rule_id: WAUNrz
        version_id: xyT6zo
        url: https://semgrep.dev/playground/r/xyT6zo/terraform.aws.security.aws-secretsmanager-secret-unencrypted.aws-secretsmanager-secret-unencrypted
        origin: community
- id: terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address
  patterns:
  - pattern-either:
    - pattern: |
        resource "aws_subnet" $ANYTHING {
          ...
          map_public_ip_on_launch = true
          ...
        }
    - pattern: |
        resource "aws_default_subnet" $ANYTHING {
          ...
        }
  - pattern-not: |
      resource "aws_default_subnet" $ANYTHING {
        ...
        map_public_ip_on_launch = false
        ...
      }
  message: Resources in the AWS subnet are assigned a public IP address. Resources
    should not be exposed on the public internet, but should have access limited to
    consumers required for the function of your application. Set `map_public_ip_on_launch`
    to false so that resources are not publicly-accessible.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control/
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/subnet#map_public_ip_on_launch
    - https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html#concepts-public-addresses
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address
    shortlink: https://sg.run/XJZw
    semgrep.dev:
      rule:
        rule_id: 2ZUo79
        version_id: vdTl62
        url: https://semgrep.dev/playground/r/vdTl62/terraform.aws.security.aws-subnet-has-public-ip-address.aws-subnet-has-public-ip-address
        origin: community
- id: ocaml.lang.portability.crlf-support.broken-input-line
  pattern: |
    input_line
  message: '''input_line'' leaves a ''\r'' (CR) character when reading lines from
    a Windows text file, whose lines end in "\r\n" (CRLF). This is a problem for any
    Windows file that is being read either on a Unix-like platform or on Windows in
    binary mode. If the code already takes care of removing any trailing ''\r'' after
    reading the line, add a ''(* nosemgrep *)'' comment to disable this warning.'
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.crlf-support.broken-input-line
    shortlink: https://sg.run/v2gY
    semgrep.dev:
      rule:
        rule_id: DbUKZX
        version_id: kbTOJw
        url: https://semgrep.dev/playground/r/kbTOJw/ocaml.lang.portability.crlf-support.broken-input-line
        origin: community
- id: ocaml.lang.portability.crlf-support.prefer-read-in-binary-mode
  pattern: open_in
  fix: open_in_bin
  message: '''open_in'' behaves differently on Windows and on Unix-like systems with
    respect to line endings. To get the same behavior everywhere, use ''open_in_bin''
    or ''open_in_gen [Open_binary]''. If you really want CRLF-to-LF translations to
    take place when running on Windows, use ''open_in_gen [Open_text]''.'
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.crlf-support.prefer-read-in-binary-mode
    shortlink: https://sg.run/d0YE
    semgrep.dev:
      rule:
        rule_id: WAUPAJ
        version_id: w8TkYl
        url: https://semgrep.dev/playground/r/w8TkYl/ocaml.lang.portability.crlf-support.prefer-read-in-binary-mode
        origin: community
- id: ocaml.lang.portability.crlf-support.prefer-write-in-binary-mode
  pattern: open_out
  fix: open_out_bin
  message: '''open_out'' behaves differently on Windows and on Unix-like systems with
    respect to line endings. To get the same behavior everywhere, use ''open_out_bin''
    or ''open_out_gen [Open_binary]''. If you really want LF-to-CRLF translations
    to take place when running on Windows, use ''open_out_gen [Open_text]''.'
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.crlf-support.prefer-write-in-binary-mode
    shortlink: https://sg.run/ZkGw
    semgrep.dev:
      rule:
        rule_id: 0oUJY9
        version_id: xyTd6N
        url: https://semgrep.dev/playground/r/xyTd6N/ocaml.lang.portability.crlf-support.prefer-write-in-binary-mode
        origin: community
- id: ocaml.lang.portability.slash-tmp.not-portable-tmp-string
  pattern: |
    "=~/\/tmp/"
  message: You should probably use Filename.get_temp_dirname().
  languages:
  - ocaml
  severity: WARNING
  metadata:
    category: portability
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.portability.slash-tmp.not-portable-tmp-string
    shortlink: https://sg.run/Q4ZZ
    semgrep.dev:
      rule:
        rule_id: zdU100
        version_id: O9Tv1v
        url: https://semgrep.dev/playground/r/O9Tv1v/ocaml.lang.portability.slash-tmp.not-portable-tmp-string
        origin: community
- id: python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
    shortlink: https://sg.run/9oyr
    semgrep.dev:
      rule:
        rule_id: OrU3e6
        version_id: BjTGwp
        url: https://semgrep.dev/playground/r/BjTGwp/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
        origin: community
  message: Avoid using insecure deserialization library, backed by `pickle`, `_pickle`,
    `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code
    execution vulnerabilities.
  languages:
  - python
  severity: ERROR
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          def $INSIDE(..., $PARAM, ...):
            ...
      - pattern-either:
        - pattern: request.$REQFUNC(...)
        - pattern: request.$REQFUNC.get(...)
        - pattern: request.$REQFUNC[...]
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            pickle.$PICKLEFUNC(...)
        - pattern: |
            _pickle.$PICKLEFUNC(...)
        - pattern: |
            cPickle.$PICKLEFUNC(...)
        - pattern: |
            shelve.$PICKLEFUNC(...)
      - metavariable-regex:
          metavariable: $PICKLEFUNC
          regex: dumps|dump|load|loads
    - patterns:
      - pattern: dill.$DILLFUNC(...)
      - metavariable-regex:
          metavariable: $DILLFUNC
          regex: dump|dump_session|dumps|load|load_session|loads
    - patterns:
      - pattern: yaml.$YAMLFUNC(...)
      - pattern-not: yaml.$YAMLFUNC(..., Dumper=SafeDumper, ...)
      - pattern-not: yaml.$YAMLFUNC(..., Dumper=yaml.SafeDumper, ...)
      - pattern-not: yaml.$YAMLFUNC(..., Loader=SafeLoader, ...)
      - pattern-not: yaml.$YAMLFUNC(..., Loader=yaml.SafeLoader, ...)
      - metavariable-regex:
          metavariable: $YAMLFUNC
          regex: dump|dump_all|load|load_all
- id: python.django.security.audit.query-set-extra.avoid-query-set-extra
  message: QuerySet.extra' does not provide safeguards against SQL injection and requires
    very careful use. SQL injection can lead to critical data being stolen by attackers.
    Instead of using '.extra', use the Django ORM and parameterized queries such as
    `People.objects.get(name='Bob')`.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b610_django_extra_used.html
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra
    shortlink: https://sg.run/kXZP
    semgrep.dev:
      rule:
        rule_id: nJUzBP
        version_id: YDT8J8
        url: https://semgrep.dev/playground/r/YDT8J8/python.django.security.audit.query-set-extra.avoid-query-set-extra
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern: $MODEL.extra(...)
  - pattern-not-inside: '$MODEL.extra(select = {$KEY: "..."})'
- id: python.django.security.injection.command.command-injection-os-system.command-injection-os-system
  message: Request data detected in os.system. This could be vulnerable to a command
    injection and should be avoided. If this must be done, use the 'subprocess' module
    instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection
    for more information.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system
    shortlink: https://sg.run/Gen2
    semgrep.dev:
      rule:
        rule_id: KxUbp2
        version_id: 8KTLd4
        url: https://semgrep.dev/playground/r/8KTLd4/python.django.security.injection.command.command-injection-os-system.command-injection-os-system
        origin: community
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: os.system(..., request.$W.get(...), ...)
    - pattern: os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: os.system(..., $S % request.$W.get(...), ...)
    - pattern: os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W.get(...), ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $A = os.system(..., $S % request.$W.get(...), ...)
    - pattern: $A = os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: return os.system(..., request.$W.get(...), ...)
    - pattern: return os.system(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: return os.system(..., $S % request.$W.get(...), ...)
    - pattern: return os.system(..., f"...{request.$W.get(...)}...", ...)
    - pattern: os.system(..., request.$W(...), ...)
    - pattern: os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: os.system(..., $S % request.$W(...), ...)
    - pattern: os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W(...), ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $A = os.system(..., $S % request.$W(...), ...)
    - pattern: $A = os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: return os.system(..., request.$W(...), ...)
    - pattern: return os.system(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: return os.system(..., $S % request.$W(...), ...)
    - pattern: return os.system(..., f"...{request.$W(...)}...", ...)
    - pattern: os.system(..., request.$W[...], ...)
    - pattern: os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: os.system(..., $S % request.$W[...], ...)
    - pattern: os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W[...], ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $A = os.system(..., $S % request.$W[...], ...)
    - pattern: $A = os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: return os.system(..., request.$W[...], ...)
    - pattern: return os.system(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: return os.system(..., $S % request.$W[...], ...)
    - pattern: return os.system(..., f"...{request.$W[...]}...", ...)
    - pattern: os.system(..., request.$W, ...)
    - pattern: os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: os.system(..., $S % request.$W, ...)
    - pattern: os.system(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        os.system(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        os.system(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        os.system(..., $INTERM, ...)
    - pattern: $A = os.system(..., request.$W, ...)
    - pattern: $A = os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: $A = os.system(..., $S % request.$W, ...)
    - pattern: $A = os.system(..., f"...{request.$W}...", ...)
    - pattern: return os.system(..., request.$W, ...)
    - pattern: return os.system(..., $S.format(..., request.$W, ...), ...)
    - pattern: return os.system(..., $S % request.$W, ...)
    - pattern: return os.system(..., f"...{request.$W}...", ...)
- id: python.lang.compatibility.python36.python36-compatibility-ssl
  pattern: ssl.get_ciphers()
  message: this function is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-ssl
    shortlink: https://sg.run/kXn2
    semgrep.dev:
      rule:
        rule_id: ZqU5wR
        version_id: 3ZTLXP
        url: https://semgrep.dev/playground/r/3ZTLXP/python.lang.compatibility.python36.python36-compatibility-ssl
        origin: community
- id: python.lang.compatibility.python36.python36-compatibility-Popen1
  pattern: subprocess.Popen(errors=$X, ...)
  message: the `errors` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-Popen1
    shortlink: https://sg.run/weBP
    semgrep.dev:
      rule:
        rule_id: nJUz7A
        version_id: 44Tejz
        url: https://semgrep.dev/playground/r/44Tejz/python.lang.compatibility.python36.python36-compatibility-Popen1
        origin: community
- id: python.lang.compatibility.python36.python36-compatibility-Popen2
  pattern: subprocess.Popen(encoding=$X, ...)
  message: the `encoding` argument to Popen is only available on Python 3.6+
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python36.python36-compatibility-Popen2
    shortlink: https://sg.run/x1Dg
    semgrep.dev:
      rule:
        rule_id: EwU2n3
        version_id: PkTj3B
        url: https://semgrep.dev/playground/r/PkTj3B/python.lang.compatibility.python36.python36-compatibility-Popen2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-importlib
  pattern: importlib.source_hash()
  message: source_hash' is only available on Python 3.7+. This does not work in lower
    versions, and therefore is not backwards compatible. Instead, use another hash
    function.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib
    shortlink: https://sg.run/OPDn
    semgrep.dev:
      rule:
        rule_id: 7KUQOl
        version_id: JdToxL
        url: https://semgrep.dev/playground/r/JdToxL/python.lang.compatibility.python37.python37-compatibility-importlib
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-importlib2
  pattern: import importlib.resources
  message: Found 'importlib.resources', which is a module only available on Python
    3.7+. This does not work in lower versions, and therefore is not backwards compatible.
    Use importlib_resources instead for older Python versions.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib2
    shortlink: https://sg.run/eL3y
    semgrep.dev:
      rule:
        rule_id: L1Uy0n
        version_id: 5PTN1p
        url: https://semgrep.dev/playground/r/5PTN1p/python.lang.compatibility.python37.python37-compatibility-importlib2
        origin: community
- id: python.jwt.security.jwt-none-alg.jwt-python-none-alg
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.jwt.security.jwt-none-alg.jwt-python-none-alg
    shortlink: https://sg.run/Yvp4
    semgrep.dev:
      rule:
        rule_id: j2UvKw
        version_id: RGTwbW
        url: https://semgrep.dev/playground/r/RGTwbW/python.jwt.security.jwt-none-alg.jwt-python-none-alg
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      jwt.encode(...,algorithm="none",...)
  - pattern: jwt.decode(...,algorithms=[...,"none",...],...)
- id: python.sqlalchemy.performance.performance-improvements.len-all-count
  pattern: len($X.all())
  message: Using QUERY.count() instead of len(QUERY.all()) sends less data to the
    client since the SQLAlchemy method is performed server-side.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.len-all-count
    shortlink: https://sg.run/4y8g
    semgrep.dev:
      rule:
        rule_id: ReUPOw
        version_id: PkTjgO
        url: https://semgrep.dev/playground/r/PkTjgO/python.sqlalchemy.performance.performance-improvements.len-all-count
        origin: community
- id: python.sqlalchemy.performance.performance-improvements.batch-import
  pattern: |
    for $X in $Y:
      db.session.add($Z)
  message: Rather than adding one element at a time, consider batch loading to improve
    performance.
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    technology:
    - sqlalchemy
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.performance.performance-improvements.batch-import
    shortlink: https://sg.run/PprN
    semgrep.dev:
      rule:
        rule_id: AbUWjy
        version_id: JdTodZ
        url: https://semgrep.dev/playground/r/JdTodZ/python.sqlalchemy.performance.performance-improvements.batch-import
        origin: community
- id: python.lang.security.unquoted-csv-writer.unquoted-csv-writer
  patterns:
  - pattern: a()
  - pattern: b()
  message: This rule is deprecated.
  metadata:
    cwe:
    - 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    owasp: A01:2017 - Injection
    references:
    - https://github.com/returntocorp/semgrep-rules/issues/2351
    category: security
    technology:
    - python
    deprecated: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.unquoted-csv-writer.unquoted-csv-writer
    shortlink: https://sg.run/b7vp
    semgrep.dev:
      rule:
        rule_id: eqU8dk
        version_id: d6Tb9E
        url: https://semgrep.dev/playground/r/d6Tb9E/python.lang.security.unquoted-csv-writer.unquoted-csv-writer
        origin: community
  fix-regex:
    regex: (.*)\)
    replacement: \1, quoting=csv.QUOTE_ALL)
  languages:
  - python
  severity: ERROR
- id: typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
  message: Detection of $HTML from non-constant definition. This can inadvertently
    expose users to cross-site scripting (XSS) attacks if this comes from user-provided
    input. If you have to use $HTML, consider using a sanitization library such as
    DOMPurify to sanitize your HTML.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln
    - https://developer.mozilla.org/en-US/docs/Web/API/Document/write
    - https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
    category: security
    confidence: MEDIUM
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    source: https://semgrep.dev/r/typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
    shortlink: https://sg.run/E5x8
    semgrep.dev:
      rule:
        rule_id: QrU68w
        version_id: qkTPZj
        url: https://semgrep.dev/playground/r/qkTPZj/typescript.react.security.audit.react-unsanitized-method.react-unsanitized-method
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function ...({..., $X, ...}) { ... }
      - pattern-inside: |
          function ...(..., $X, ...) { ... }
    - focus-metavariable: $X
    - pattern-either:
      - pattern: $X.$Y
      - pattern: $X[...]
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "this.window.document. ... .$HTML('...',$SINK) \n"
      - pattern: "window.document. ... .$HTML('...',$SINK) \n"
      - pattern: "document.$HTML($SINK)  \n"
    - metavariable-regex:
        metavariable: $HTML
        regex: (writeln|write)
    - focus-metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern: "$PROP. ... .$HTML('...',$SINK) \n"
    - metavariable-regex:
        metavariable: $HTML
        regex: (insertAdjacentHTML)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern-inside: |
      - name: $CONTAINER
        ...
  - pattern: |
      image: ...
      ...
  - pattern-inside: |
      image: ...
      ...
      $SC:
        ...
  - metavariable-regex:
      metavariable: $SC
      regex: ^(securityContext)$
  - pattern-not-inside: |
      image: ...
      ...
      securityContext:
        ...
        allowPrivilegeEscalation: $VAL
  - focus-metavariable: $SC
  fix: |
    securityContext:
            allowPrivilegeEscalation: false #
  message: In Kubernetes, each pod runs in its own isolated environment with its own  set
    of security policies. However, certain container images may contain  `setuid`
    or `setgid` binaries that could allow an attacker to perform  privilege escalation
    and gain access to sensitive resources. To mitigate  this risk, it's recommended
    to add a `securityContext` to the container in  the pod, with the parameter `allowPrivilegeEscalation`
    set to `false`.  This will prevent the container from running any privileged processes
    and  limit the impact of any potential attacks.  By adding the `allowPrivilegeEscalation`
    parameter to your the  `securityContext`, you can help to  ensure that your containerized
    applications are more secure and less  vulnerable to privilege escalation attacks.
  metadata:
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privilege-escalation
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag
    category: security
    technology:
    - kubernetes
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation
    shortlink: https://sg.run/ljp6
    semgrep.dev:
      rule:
        rule_id: 6JUqEO
        version_id: 44TppP
        url: https://semgrep.dev/playground/r/44TppP/yaml.kubernetes.security.allow-privilege-escalation.allow-privilege-escalation
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: typescript.react.security.audit.react-router-redirect.react-router-redirect
  message: this rule has been deprecated.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    deprecated: true
    category: security
    technology:
    - react
    references:
    - https://v5.reactrouter.com/web/api/Redirect
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    - https://r2c.dev
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-router-redirect.react-router-redirect
    shortlink: https://sg.run/ZeR7
    semgrep.dev:
      rule:
        rule_id: 8GUE4K
        version_id: O9T4k5
        url: https://semgrep.dev/playground/r/O9T4k5/typescript.react.security.audit.react-router-redirect.react-router-redirect
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
  message: this rule has been deprecated.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://styled-components.com/docs/advanced#security
    category: security
    deprecated: true
    technology:
    - react
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
    shortlink: https://sg.run/nqWG
    semgrep.dev:
      rule:
        rule_id: gxUW6x
        version_id: e1TEgN
        url: https://semgrep.dev/playground/r/e1TEgN/typescript.react.security.audit.react-styled-components-injection.react-styled-components-injection
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: typescript.react.security.react-controlled-component-password.react-controlled-component-password
  message: this rule has been deprecated.
  metadata:
    category: security
    deprecated: true
    technology:
    - react
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://r2c.dev
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.react-controlled-component-password.react-controlled-component-password
    shortlink: https://sg.run/jN2Z
    semgrep.dev:
      rule:
        rule_id: bwUObG
        version_id: ZRTB6A
        url: https://semgrep.dev/playground/r/ZRTB6A/typescript.react.security.react-controlled-component-password.react-controlled-component-password
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: typescript.react.security.react-insecure-request.react-insecure-request
  message: Unencrypted request over HTTP detected.
  metadata:
    vulnerability: Insecure Transport
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://www.npmjs.com/package/axios
    category: security
    technology:
    - react
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request
    shortlink: https://sg.run/1n0b
    semgrep.dev:
      rule:
        rule_id: NbUA3O
        version_id: nWTdOR
        url: https://semgrep.dev/playground/r/nWTdOR/typescript.react.security.react-insecure-request.react-insecure-request
        origin: community
  languages:
  - typescript
  - javascript
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $AXIOS from 'axios';
          ...
          $AXIOS.$METHOD(...)
      - pattern-inside: |
          $AXIOS = require('axios');
          ...
          $AXIOS.$METHOD(...)
    - pattern-either:
      - pattern: $AXIOS.get("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.post("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.delete("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.head("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.patch("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.put("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
      - pattern: $AXIOS.options("=~/[Hh][Tt][Tt][Pp]:\/\/.*/",...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $AXIOS from 'axios';
          ...
          $AXIOS(...)
      - pattern-inside: |
          $AXIOS = require('axios');
          ...
          $AXIOS(...)
    - pattern-either:
      - pattern: '$AXIOS({url: "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"}, ...)'
      - pattern: |
          $OPTS = {url: "=~/[Hh][Tt][Tt][Pp]:\/\/.*/"}
          ...
          $AXIOS($OPTS, ...)
  - pattern: fetch("=~/[Hh][Tt][Tt][Pp]:\/\/.*/", ...)
- id: typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
  message: Overwriting `transformLinkUri` or `transformImageUri` to something insecure,
    or turning `allowDangerousHtml` on, or turning `escapeHtml` off, will open the
    code up to XSS vectors.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www.npmjs.com/package/react-markdown#security
    category: security
    technology:
    - react
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
    shortlink: https://sg.run/9qAk
    semgrep.dev:
      rule:
        rule_id: kxURd4
        version_id: ExTdRG
        url: https://semgrep.dev/playground/r/ExTdRG/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X = require('react-markdown/with-html');
        ...
    - pattern-inside: |
        $X = require('react-markdown');
        ...
    - pattern-inside: |
        import 'react-markdown/with-html';
        ...
    - pattern-inside: |
        import 'react-markdown';
        ...
  - pattern-either:
    - pattern: |
        <$EL allowDangerousHtml />
    - pattern: |
        <$EL escapeHtml={false} />
    - pattern: |
        <$EL transformLinkUri=... />
    - pattern: |
        <$EL transformImageUri=... />
- id: yaml.docker-compose.security.exposing-docker-socket-volume.exposing-docker-socket-volume
  patterns:
  - pattern-inside: |
      version: ...
      ...
  - pattern-either:
    - pattern: |
        volumes:
          - ...
          - /var/run/docker.sock:/var/run/docker.sock
          - ...
    - pattern: |
        volumes:
          - ...
          - /run/docker.sock:/run/docker.sock
          - ...
    - pattern: |
        volumes:
          - ...
          - /var/run/docker.sock:/run/docker.sock
          - ...
    - pattern: |
        volumes:
          - ...
          - /run/docker.sock:/var/run/docker.sock
          - ...
    - pattern: |
        volumes:
          - ...
          - /var/run/docker.sock
          - ...
    - pattern: |
        volumes:
          - ...
          - /run/docker.sock
          - ...
    - pattern: |
        volumes:
          - ...
          - ...
            source: /var/run/docker.sock
            ...
          - ...
    - pattern: |
        volumes:
          - ...
          - ...
            source: /run/docker.sock
            ...
          - ...
  message: Exposing host's Docker socket to containers via a volume. The owner of
    this socket is root. Giving someone access to it is equivalent to giving unrestricted
    root access to your host. Remove 'docker.sock' from volumes to prevent this.
  metadata:
    references:
    - https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers
    category: security
    technology:
    - docker-compose
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.docker-compose.security.exposing-docker-socket-volume.exposing-docker-socket-volume
    shortlink: https://sg.run/O14b
    semgrep.dev:
      rule:
        rule_id: eqUvZ9
        version_id: PkTE9d
        url: https://semgrep.dev/playground/r/PkTE9d/yaml.docker-compose.security.exposing-docker-socket-volume.exposing-docker-socket-volume
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.docker-compose.security.seccomp-confinement-disabled.seccomp-confinement-disabled
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
        ...
        security_opt:
          - ...
          - seccomp:unconfined
  message: Service '$SERVICE' is explicitly disabling seccomp confinement. This runs
    the service in an unrestricted state. Remove 'seccomp:unconfined' to prevent this.
  metadata:
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://docs.docker.com/engine/security/seccomp/
    category: security
    technology:
    - docker-compose
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.docker-compose.security.seccomp-confinement-disabled.seccomp-confinement-disabled
    shortlink: https://sg.run/KWkY
    semgrep.dev:
      rule:
        rule_id: lBUdW3
        version_id: GxT43l
        url: https://semgrep.dev/playground/r/GxT43l/yaml.docker-compose.security.seccomp-confinement-disabled.seccomp-confinement-disabled
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.docker-compose.security.selinux-separation-disabled.selinux-separation-disabled
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
        ...
        security_opt:
          - ...
          - label:disable
  message: Service '$SERVICE' is explicitly disabling SELinux separation. This runs
    the service as an unconfined type. Remove 'label:disable' to prevent this.
  metadata:
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://www.projectatomic.io/blog/2016/03/dwalsh_selinux_containers/
    - https://docs.docker.com/engine/reference/run/#security-configuration
    category: security
    technology:
    - docker-compose
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.docker-compose.security.selinux-separation-disabled.selinux-separation-disabled
    shortlink: https://sg.run/qryb
    semgrep.dev:
      rule:
        rule_id: YGUrAG
        version_id: RGTB8n
        url: https://semgrep.dev/playground/r/RGTB8n/yaml.docker-compose.security.selinux-separation-disabled.selinux-separation-disabled
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
        ...
  - pattern-not: |
      $SERVICE:
        ...
        image: ...
        ...
        read_only: true
  - focus-metavariable: $SERVICE
  message: 'Service ''$SERVICE'' is running with a writable root filesystem. This
    may allow malicious applications to download and run additional payloads, or modify
    container files. If an application inside a container has to save something temporarily
    consider using a tmpfs. Add ''read_only: true'' to this service to prevent this.'
  metadata:
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://docs.docker.com/compose/compose-file/compose-file-v3/#domainname-hostname-ipc-mac_address-privileged-read_only-shm_size-stdin_open-tty-user-working_dir
    - https://blog.atomist.com/security-of-docker-kubernetes/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-8-set-filesystem-and-volumes-to-read-only
    category: security
    technology:
    - docker-compose
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
    shortlink: https://sg.run/e4JE
    semgrep.dev:
      rule:
        rule_id: v8U5vN
        version_id: A8TyKp
        url: https://semgrep.dev/playground/r/A8TyKp/yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath
  patterns:
  - pattern-inside: |
      volumes:
        ...
  - pattern: |
      hostPath:
        ...
        path: /var/run/docker.sock
  message: Exposing host's Docker socket to containers via a volume. The owner of
    this socket is root. Giving someone access to it is equivalent to giving unrestricted
    root access to your host. Remove 'docker.sock' from hostpath to prevent this.
  metadata:
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    references:
    - https://kubernetes.io/docs/concepts/storage/volumes/#hostpath
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#volumes-and-file-systems
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-1-do-not-expose-the-docker-daemon-socket-even-to-the-containers
    category: security
    technology:
    - kubernetes
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath
    shortlink: https://sg.run/v0pR
    semgrep.dev:
      rule:
        rule_id: d8Uz6v
        version_id: JdT2EB
        url: https://semgrep.dev/playground/r/JdT2EB/yaml.kubernetes.security.exposing-docker-socket-hostpath.exposing-docker-socket-hostpath
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.privileged-container.privileged-container
  pattern-either:
  - patterns:
    - pattern-inside: |
        containers:
          ...
    - pattern: |
        image: ...
        ...
        securityContext:
          ...
          privileged: true
  - patterns:
    - pattern-inside: |
        spec:
          ...
    - pattern-not-inside: |
        image: ...
        ...
    - pattern: |
        privileged: true
  message: Container or pod is running in privileged mode. This grants the container
    the equivalent of root capabilities on the host machine. This can lead to container
    escapes, privilege escalation, and other security concerns. Remove the 'privileged'
    key to disable this capability.
  metadata:
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#privileged
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html
    category: security
    technology:
    - kubernetes
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.privileged-container.privileged-container
    shortlink: https://sg.run/Ygr5
    semgrep.dev:
      rule:
        rule_id: oqUz2p
        version_id: A8TyKB
        url: https://semgrep.dev/playground/r/A8TyKB/yaml.kubernetes.security.privileged-container.privileged-container
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled
  patterns:
  - pattern-inside: |
      containers:
        ...
  - pattern: |
      image: ...
      ...
      securityContext:
        ...
        seccompProfile: unconfined
  message: 'Container is explicitly disabling seccomp confinement. This runs the service
    in an unrestricted state. Remove ''seccompProfile: unconfined'' to prevent this.'
  metadata:
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
    - https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    category: security
    technology:
    - kubernetes
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled
    shortlink: https://sg.run/6rgY
    semgrep.dev:
      rule:
        rule_id: zdUynw
        version_id: WrTkDp
        url: https://semgrep.dev/playground/r/WrTkDp/yaml.kubernetes.security.seccomp-confinement-disabled.seccomp-confinement-disabled
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://blog.sonarsource.com/secure-xml-processor
    - https://xerces.apache.org/xerces2-j/features.html
    category: security
    technology:
    - java
    - xml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false
    shortlink: https://sg.run/4Dv5
    semgrep.dev:
      rule:
        rule_id: j2UrJ8
        version_id: l4T04G
        url: https://semgrep.dev/playground/r/l4T04G/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-false.documentbuilderfactory-disallow-doctype-decl-false
        origin: community
  message: DOCTYPE declarations are enabled for $DBFACTORY. Without prohibiting external
    entity declarations, this is vulnerable to XML external entity attacks. Disable
    this by setting the feature "http://apache.org/xml/features/disallow-doctype-decl"
    to true. Alternatively, allow DOCTYPE declarations and only prohibit external
    entities declarations. This can be done by setting the features "http://xml.org/sax/features/external-general-entities"
    and "http://xml.org/sax/features/external-parameter-entities" to false.
  patterns:
  - pattern: $DBFACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
      false);
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...){
        ...
        $DBF.setFeature("http://xml.org/sax/features/external-general-entities", false);
        ...
        $DBF.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...){
        ...
        $DBF.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        ...
        $DBF.setFeature("http://xml.org/sax/features/external-general-entities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...){
        ...
        $DBF.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
        ...
        $DBF.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...){
        ...
        $DBF.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
        ...
        $DBF.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
        ...
      }
  languages:
  - java
- id: java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#xmlinputfactory-a-stax-parser
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
    shortlink: https://sg.run/XBwA
    semgrep.dev:
      rule:
        rule_id: OrU35O
        version_id: 5PT2zX
        url: https://semgrep.dev/playground/r/5PT2zX/java.lang.security.xmlinputfactory-possible-xxe.xmlinputfactory-possible-xxe
        origin: community
  message: XML external entities are not explicitly disabled for this XMLInputFactory.
    This could be vulnerable to XML external entity vulnerabilities. Explicitly disable
    external entities by setting "javax.xml.stream.isSupportingExternalEntities" to
    false.
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false);
        ...
      }
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(...) {
        ...
        $XMLFACTORY.setProperty(java.xml.stream.XMLFactoryInput.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
        ...
      }
  - pattern-either:
    - pattern: $XMLFACTORY = $W.newFactory(...);
    - pattern: $XMLFACTORY = new XMLInputFactory(...);
  languages:
  - java
- id: javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
  message: Detected an explicit unescape in a Mustache template, using triple braces
    '{{{...}}}' or ampersand '&'. If external data can reach these locations, your
    application is exposed to a cross-site scripting (XSS) vulnerability. If you must
    do this, ensure no external data can reach this location.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/janl/mustache.js/#variables
    - https://ractive.js.org/v0.x/0.7/mustaches#variables
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
    shortlink: https://sg.run/Lwx9
    semgrep.dev:
      rule:
        rule_id: ReUgG1
        version_id: A8TZ2Y
        url: https://semgrep.dev/playground/r/A8TZ2Y/javascript.express.security.audit.xss.mustache.explicit-unescape.template-explicit-unescape
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  pattern-either:
  - pattern-regex: '{{{((?!include).)*?}}}'
  - pattern-regex: '{{[\\s]*&.*}}'
- id: java.servlets.security.xxe.tainted-saxbuilder-xxe-servlet.tainted-saxbuilder-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the SAXBuilder parser with `parser.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")`, enabling
    both of `parser.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` and `parser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`, and enabling both of `parser.setExpandEntities(false)` and parser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)` It is also possible to use one of the constructor parameters that will
    result in a more secure parser by default: `new SAXBuilder(XMLReaders.DTDVALIDATING)`
    or `new SAXBuilder(XMLReaders.XSDVALIDATING)`. For more information, see: [Java
    XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-saxbuilder-xxe-servlet.tainted-saxbuilder-xxe-servlet
    shortlink: https://sg.run/y2gx
    semgrep.dev:
      rule:
        rule_id: nJUl1v
        version_id: DkTjen
        url: https://semgrep.dev/playground/r/DkTjen/java.servlets.security.xxe.tainted-saxbuilder-xxe-servlet.tainted-saxbuilder-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SAXBUILDER
    patterns:
    - pattern: $PARSER = new SAXBuilder(...);
    - pattern-not: $PARSER = new SAXBuilder(XMLReaders.DTDVALIDATING);
    - pattern-not: $PARSER = new SAXBuilder(XMLReaders.XSDVALIDATING);
  - label: DTD_DISABLED
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  - label: DOCTYPE_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $PARSER
  - label: EXPAND_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setExpandEntities(false);
    - focus-metavariable: $PARSER
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and SAXBUILDER) and not (DTD_DISABLED or DOCTYPE_DISABLED
      or (EXPAND_ENT_DISABLED and PARAM_ENT_DISABLED) or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (SAXBuilder $PARSER).build(...)
- id: java.servlets.security.tainted-xpath-from-http-request-deepsemgrep.tainted-xpath-from-http-request-deepsemgrep
  message: Detected input from a HTTPServletRequest going into a XPath evaluate or
    compile command. This could lead to xpath injection if variables passed into the
    evaluate or compile commands are not properly sanitized. Xpath injection could
    lead to unauthorized access to sensitive information in XML documents. Instead,
    thoroughly sanitize user input or use parameterized xpath queries if you can.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-643: Improper Neutralization of Data within XPath Expressions (''XPath
      Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/XPATH_Injection
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Fxpath
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-xpath-from-http-request-deepsemgrep.tainted-xpath-from-http-request-deepsemgrep
    shortlink: https://sg.run/gBq5
    semgrep.dev:
      rule:
        rule_id: PeUnNd
        version_id: pZTjog
        url: https://semgrep.dev/playground/r/pZTjog/java.servlets.security.tainted-xpath-from-http-request-deepsemgrep.tainted-xpath-from-http-request-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.xml.xpath.XPath $XP).evaluate($EXPR, ...)
      - pattern: |
          (XPath $XP).evaluate($EXPR, ...)
      - pattern: |
          (javax.xml.xpath.XPath $XP).compile($EXPR, ...).evaluate(...)
      - pattern: |
          (XPath $XP).compile($EXPR, ...).evaluate(...)
      - pattern: "XPathExpression $XEXPR = (XPath $XP).compile($EXPR, ...);\n...\n$XEXPR.evaluate(...);
          \n"
      - pattern: "javax.xml.xpath.XPathExpression $XEXPR = (javax.xml.xpath.XPath
          $XP).compile($EXPR, ...);\n...\n$XEXPR.evaluate(...); \n"
    - focus-metavariable: $EXPR
- id: python.peewee.python-peewee-hardcoded-database-password-uri.python-peewee-hardcoded-database-password-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - peewee
    - orm
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.peewee.python-peewee-hardcoded-database-password-uri.python-peewee-hardcoded-database-password-uri
    shortlink: https://sg.run/nY82
    semgrep.dev:
      rule:
        rule_id: ReUwAj
        version_id: vdTQKZ
        url: https://semgrep.dev/playground/r/vdTQKZ/python.peewee.python-peewee-hardcoded-database-password-uri.python-peewee-hardcoded-database-password-uri
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$STRING"
    - metavariable-regex:
        metavariable: $STRING
        regex: ([A-Za-z0-9_\-\+]*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
  pattern-sinks:
  - patterns:
    - pattern: playhouse.db_url.connect($URL,...)
    - focus-metavariable: $URL
- id: ruby.pg.ruby-pg-hardcoded-connection-string.ruby-pg-hardcoded-connection-string
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - postgres
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.pg.ruby-pg-hardcoded-connection-string.ruby-pg-hardcoded-connection-string
    shortlink: https://sg.run/lAYL
    semgrep.dev:
      rule:
        rule_id: EwUbL0
        version_id: d6TgND
        url: https://semgrep.dev/playground/r/d6TgND/ruby.pg.ruby-pg-hardcoded-connection-string.ruby-pg-hardcoded-connection-string
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $STRING
    - metavariable-regex:
        metavariable: $STRING
        regex: .*password=["']?[^'"%\s]+.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "pg"
        ...
    - pattern-either:
      - pattern: |
          PG.connect($SINK, ...)
      - pattern: |
          PG::Connection.new($SINK, ...)
      - pattern: |
          PG::Connection.connect_start($SINK, ...)
    - focus-metavariable: $SINK
- id: ruby.pg.ruby-pg-hardcoded-uri.ruby-pg-hardcoded-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - postgres
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.pg.ruby-pg-hardcoded-uri.ruby-pg-hardcoded-uri
    shortlink: https://sg.run/6pYw
    semgrep.dev:
      rule:
        rule_id: L1UJWe
        version_id: nWTNDq
        url: https://semgrep.dev/playground/r/nWTNDq/ruby.pg.ruby-pg-hardcoded-uri.ruby-pg-hardcoded-uri
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: ([A-Za-z0-9_\-\+]*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "pg"
        ...
    - pattern-either:
      - pattern: |
          PG.connect($SINK, ...)
      - pattern: |
          PG::Connection.new($SINK, ...)
      - pattern: |
          PG::Connection.connect_start($SINK, ...)
    - focus-metavariable: $SINK
- id: ruby.redis.ruby-redis-hardcoded-sentinels-secret.ruby-redis-hardcoded-sentinels-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.redis.ruby-redis-hardcoded-sentinels-secret.ruby-redis-hardcoded-sentinels-secret
    shortlink: https://sg.run/p0p3
    semgrep.dev:
      rule:
        rule_id: QrULYo
        version_id: LjTeD7
        url: https://semgrep.dev/playground/r/LjTeD7/ruby.redis.ruby-redis-hardcoded-sentinels-secret.ruby-redis-hardcoded-sentinels-secret
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        { ..., password: "...", ... }
    - pattern-not: |
        { ..., password: "", ... }
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "redis"
        ...
    - pattern: |
        Redis.new(..., sentinels: $SINK, ...)
    - focus-metavariable: $SINK
- id: ruby.redis.ruby-redis-hardcoded-uri.ruby-redis-hardcoded-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.redis.ruby-redis-hardcoded-uri.ruby-redis-hardcoded-uri
    shortlink: https://sg.run/230z
    semgrep.dev:
      rule:
        rule_id: 3qUgGv
        version_id: 8KTlOq
        url: https://semgrep.dev/playground/r/8KTlOq/ruby.redis.ruby-redis-hardcoded-uri.ruby-redis-hardcoded-uri
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: (redis|rediss)://(?!<.*>)([A-Za-z0-9_-]){0,31}:(?!<.*>)([^@]*)@.*
    - patterns:
      - pattern: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: unix://\S.*&password=(?!<.*>)([^@]*).*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "redis"
        ...
    - pattern: |
        Redis.new(..., url: $SINK, ...)
    - focus-metavariable: $SINK
- id: ruby.redis.ruby-redis-sentinels-empty-password.ruby-redis-sentinels-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.redis.ruby-redis-sentinels-empty-password.ruby-redis-sentinels-empty-password
    shortlink: https://sg.run/Xxnl
    semgrep.dev:
      rule:
        rule_id: 4bUJLX
        version_id: gETXG1
        url: https://semgrep.dev/playground/r/gETXG1/ruby.redis.ruby-redis-sentinels-empty-password.ruby-redis-sentinels-empty-password
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - pattern: |
      { ..., password: "", ... }
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "redis"
        ...
    - pattern: |
        Redis.new(..., sentinels: $SINK, ...)
    - focus-metavariable: $SINK
- id: ruby.pg.ruby-pg-hardcoded-secret.ruby-pg-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - postgres
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.pg.ruby-pg-hardcoded-secret.ruby-pg-hardcoded-secret
    shortlink: https://sg.run/YenW
    semgrep.dev:
      rule:
        rule_id: 7KUwl9
        version_id: 0bT3WP
        url: https://semgrep.dev/playground/r/0bT3WP/ruby.pg.ruby-pg-hardcoded-secret.ruby-pg-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "pg"
      ...
  - pattern-either:
    - pattern: |
        PG.connect(..., password: "...", ...)
    - pattern: |
        PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "...", ...)
    - pattern: |
        PG::Connection.new(..., password: "...", ...)
    - pattern: |
        PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "...", ...)
    - pattern: |
        PG::Connection.connect_start(..., password: "...", ...)
    - pattern: |
        PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER, "...", ...)
  - pattern-not: |
      PG.connect(..., password: "", ...)
  - pattern-not: |
      PG.connect($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
  - pattern-not: |
      PG::Connection.new(..., password: "", ...)
  - pattern-not: |
      PG::Connection.new($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
  - pattern-not: |
      PG::Connection.connect_start(..., password: "", ...)
  - pattern-not: |
      PG::Connection.connect_start($HOST, $PORT, $OPS, $TTY, $DB, $USER, "", ...)
- id: ruby.redis.ruby-redis-empty-password.ruby-redis-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.redis.ruby-redis-empty-password.ruby-redis-empty-password
    shortlink: https://sg.run/oWz7
    semgrep.dev:
      rule:
        rule_id: 8GU0Jr
        version_id: K3TLNq
        url: https://semgrep.dev/playground/r/K3TLNq/ruby.redis.ruby-redis-empty-password.ruby-redis-empty-password
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "redis"
      ...
  - pattern: |
      Redis.new(..., password: "", ...)
- id: ruby.redis.ruby-redis-hardcoded-secret.ruby-redis-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.redis.ruby-redis-hardcoded-secret.ruby-redis-hardcoded-secret
    shortlink: https://sg.run/zX3z
    semgrep.dev:
      rule:
        rule_id: gxUpRD
        version_id: qkTwlw
        url: https://semgrep.dev/playground/r/qkTwlw/ruby.redis.ruby-redis-hardcoded-secret.ruby-redis-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "redis"
      ...
  - pattern: |
      Redis.new(..., password: "...", ...)
  - pattern-not: |
      Redis.new(..., password: "", ...)
- id: python.django.security.audit.avoid-mark-safe.avoid-mark-safe
  patterns:
  - pattern-not-inside: django.utils.html.format_html(...)
  - pattern-not: django.utils.safestring.mark_safe("...")
  - pattern: django.utils.safestring.mark_safe(...)
  message: '''mark_safe()'' is used to mark a string as "safe" for HTML output. This
    disables escaping and could therefore subject the content to XSS attacks. Use
    ''django.utils.html.format_html()'' to build HTML for rendering instead.'
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b703_django_mark_safe.html
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.safestring.mark_safe
    - https://docs.djangoproject.com/en/3.0/ref/utils/#django.utils.html.format_html
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe
    shortlink: https://sg.run/yd0P
    semgrep.dev:
      rule:
        rule_id: eqU8Wr
        version_id: DkTeDR
        url: https://semgrep.dev/playground/r/DkTeDR/python.django.security.audit.avoid-mark-safe.avoid-mark-safe
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.extends-custom-expression.extends-custom-expression
  languages:
  - python
  message: 'Found extension of custom expression: $CLASS. Extending expressions in
    this way could inadvertently lead to a SQL injection vulnerability, which can
    result in attackers exfiltrating sensitive data. Instead, ensure no user input
    enters this function or that user input is properly sanitized.'
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.extends-custom-expression.extends-custom-expression
    shortlink: https://sg.run/N4Ay
    semgrep.dev:
      rule:
        rule_id: ZqU5z3
        version_id: l4TN72
        url: https://semgrep.dev/playground/r/l4TN72/python.django.security.audit.extends-custom-expression.extends-custom-expression
        origin: community
  severity: WARNING
  pattern-either:
  - pattern: |
      class $CLASS(..., django.db.models.Func, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Func, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Expression, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Expression, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Value, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Value, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.DurationValue, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.DurationValue, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.RawSQL, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.RawSQL, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Star, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Star, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Random, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Random, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Col, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Col, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Ref, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Ref, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.ExpressionList, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.ExpressionList, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.ExpressionWrapper, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.ExpressionWrapper, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.When, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.When, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Case, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Case, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Subquery, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Subquery, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Exists, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Exists, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.Window, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.Window, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.WindowFrame, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.WindowFrame, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.RowRange, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.RowRange, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.ValueRange, ...):
          ...
  - pattern: |
      class $CLASS(..., django.db.models.expressions.ValueRange, ...):
          ...
- id: python.django.security.injection.code.user-exec.user-exec
  message: Found user data in a call to 'exec'. This is extremely dangerous because
    it can enable an attacker to execute arbitrary remote code on the system. Instead,
    refactor your code to not use 'eval' and instead use a safe library for the specific
    functionality you need.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - django
    references:
    - https://owasp.org/www-community/attacks/Code_Injection
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec
    shortlink: https://sg.run/5Q3X
    semgrep.dev:
      rule:
        rule_id: 0oU5AW
        version_id: LjTp1q
        url: https://semgrep.dev/playground/r/LjTp1q/python.django.security.injection.code.user-exec.user-exec
        origin: community
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: exec(..., request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., $V, ...)
    - pattern: exec(..., request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., $V, ...)
    - pattern: exec(..., request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., $V, ...)
    - pattern: |
        loop = asyncio.get_running_loop()
        ...
        await loop.run_in_executor(None, exec, request.$W[...])
    - pattern: |
        $V = request.$W[...]
        ...
        loop = asyncio.get_running_loop()
        ...
        await loop.run_in_executor(None, exec, $V)
    - pattern: |
        loop = asyncio.get_running_loop()
        ...
        await loop.run_in_executor(None, exec, request.$W.get(...))
    - pattern: |
        $V = request.$W.get(...)
        ...
        loop = asyncio.get_running_loop()
        ...
        await loop.run_in_executor(None, exec, $V)
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.secure-set-cookie.secure-set-cookie
  patterns:
  - pattern-either:
    - pattern-inside: |
        $RESP = flask.make_response(...)
        ...
    - pattern-inside: |
        $RESP = flask.Response(...)
        ...
  - pattern-not: $RESPONSE.set_cookie(..., secure=$A, httponly=$B, samesite=$C, ...)
  - pattern-not: $RESPONSE.set_cookie(..., **$A)
  - pattern: $RESPONSE.set_cookie(...)
  message: Found a Flask cookie without secure, httponly, or samesite correctly set.
    Flask cookies should be handled securely by setting secure=True, httponly=True,
    and samesite='Lax' in response.set_cookie(...). If these parameters are not properly
    set, your cookies are not properly protected and are at risk of being stolen by
    an attacker. Include the 'secure=True', 'httponly=True', samesite='Lax' arguments
    or set these to be true in the Flask configuration.
  metadata:
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://blog.r2c.dev/2020/bento-check-keeping-cookies-safe-in-flask/
    - https://bento.dev/checks/flask/secure-set-cookie/
    - https://flask.palletsprojects.com/en/1.1.x/security/#set-cookie-options
    category: security
    technology:
    - flask
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie
    shortlink: https://sg.run/gLkZ
    semgrep.dev:
      rule:
        rule_id: GdU7GR
        version_id: zyTex2
        url: https://semgrep.dev/playground/r/zyTex2/python.flask.security.audit.secure-set-cookie.secure-set-cookie
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization
  patterns:
  - pattern-inside: |
      @app.route(...)
      def $X(filename):
        ...
  - pattern: flask.send_file(filename, ...)
  message: Detected a user-controlled `filename` that could flow to `flask.send_file()`
    function. This could lead to an attacker reading arbitrary file from the system,
    leaking private information. Make sure to properly sanitize filename or use `flask.send_from_directory`
  metadata:
    cwe:
    - 'CWE-73: External Control of File Name or Path'
    owasp:
    - A04:2021 - Insecure Design
    category: security
    technology:
    - flask
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization
    shortlink: https://sg.run/weGP
    semgrep.dev:
      rule:
        rule_id: nJUz6A
        version_id: ZRTywe
        url: https://semgrep.dev/playground/r/ZRTywe/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.eval-detected.eval-detected
  patterns:
  - pattern-not: eval("...")
  - pattern: eval(...)
  message: Detected the use of eval(). eval() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
    category: security
    technology:
    - python
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected
    shortlink: https://sg.run/ZvrD
    semgrep.dev:
      rule:
        rule_id: gxU149
        version_id: O9TZ0D
        url: https://semgrep.dev/playground/r/O9TZ0D/python.lang.security.audit.eval-detected.eval-detected
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.exec-detected.exec-detected
  patterns:
  - pattern-not: exec("...")
  - pattern: exec(...)
  message: Detected the use of exec(). exec() can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b102_exec_used.html
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
    category: security
    technology:
    - python
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected
    shortlink: https://sg.run/ndRX
    semgrep.dev:
      rule:
        rule_id: QrUzKv
        version_id: e1TAdz
        url: https://semgrep.dev/playground/r/e1TAdz/python.lang.security.audit.exec-detected.exec-detected
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.logging.listeneval.listen-eval
  languages:
  - python
  message: Because portions of the logging configuration are passed through eval(),
    use of this function may open its users to a security risk. While the function
    only binds to a socket on localhost, and so does not accept connections from remote
    machines, there are scenarios where untrusted code could be run under the account
    of the process which calls listen(). To avoid this happening, use the `verify()`
    argument to `listen()` to prevent unrecognized configurations.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.logging.listeneval.listen-eval
    shortlink: https://sg.run/9okY
    semgrep.dev:
      rule:
        rule_id: wdUJQY
        version_id: K3TOyE
        url: https://semgrep.dev/playground/r/K3TOyE/python.lang.security.audit.logging.listeneval.listen-eval
        origin: community
  severity: WARNING
  pattern: logging.config.listen(...)
- id: python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
  patterns:
  - pattern: sqlalchemy.text(...)
  - pattern-not-inside: sqlalchemy.text("...")
  message: sqlalchemy.text passes the constructed SQL statement to the database mostly
    unchanged. This means that the usual SQL injection protections are not applied
    and this function is vulnerable to SQL injection if user input can reach here.
    Use normal SQLAlchemy operators (such as or_, and_, etc.) to construct SQL.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - sqlalchemy
    confidence: MEDIUM
    references:
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
    shortlink: https://sg.run/yP1O
    semgrep.dev:
      rule:
        rule_id: r6U2wE
        version_id: kbTrKW
        url: https://semgrep.dev/playground/r/kbTrKW/python.sqlalchemy.security.audit.avoid-sqlalchemy-text.avoid-sqlalchemy-text
        origin: community
  languages:
  - python
  severity: ERROR
- id: bash.curl.security.curl-eval.curl-eval
  severity: WARNING
  languages:
  - bash
  message: Data is being eval'd from a `curl` command. An attacker with control of
    the server in the `curl` command could inject malicious code into the `eval`,
    resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If
    you must do this, consider checking the SHA sum of the content returned by the
    server to verify its integrity.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    category: security
    technology:
    - bash
    - curl
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/bash.curl.security.curl-eval.curl-eval
    shortlink: https://sg.run/0yqJ
    semgrep.dev:
      rule:
        rule_id: KxU7Rq
        version_id: 7ZT5Z7
        url: https://semgrep.dev/playground/r/7ZT5Z7/bash.curl.security.curl-eval.curl-eval
        origin: community
  mode: taint
  pattern-sources:
  - pattern: |
      $(curl ...)
  - pattern: |
      `curl ...`
  pattern-sinks:
  - pattern: eval ...
- id: ruby.rails.security.audit.xss.templates.avoid-html-safe.avoid-html-safe
  message: '''html_safe'' renders raw HTML. This means that normal HTML escaping is
    bypassed. If user data can be controlled here, this exposes your application to
    cross-site scripting (XSS). If you need to do this, be sure to correctly sanitize
    the data using a library such as DOMPurify.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cross_site_scripting.rb
    references:
    - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===
    - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027
    category: security
    technology:
    - rails
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.avoid-html-safe.avoid-html-safe
    shortlink: https://sg.run/Q8rD
    semgrep.dev:
      rule:
        rule_id: 5rU4dE
        version_id: bZTxJ1
        url: https://semgrep.dev/playground/r/bZTxJ1/ruby.rails.security.audit.xss.templates.avoid-html-safe.avoid-html-safe
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern: $SOMETHING.html_safe
- id: python.jinja2.security.audit.autoescape-disabled.autoescape-disabled
  patterns:
  - pattern-not: jinja2.Environment(..., autoescape=True, ...)
  - pattern-not: jinja2.Environment(..., autoescape=jinja2.select_autoescape(...),
      ...)
  - pattern: jinja2.Environment(...)
  fix-regex:
    regex: (.*)\)
    replacement: \1, autoescape=True)
  message: Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape
    by default. This is dangerous if you are rendering to a browser because this allows
    for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping
    by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()'
    to only enable automatic escaping for certain file extensions.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b701_jinja2_autoescape_false.html
    cwe: 'CWE-116: Improper Encoding or Escaping of Output'
    owasp: 'A6: Security Misconfiguration'
    references:
    - https://jinja.palletsprojects.com/en/2.11.x/api/#basics
    category: security
    technology:
    - jinja2
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.jinja2.security.audit.autoescape-disabled.autoescape-disabled
    shortlink: https://sg.run/KlGX
    semgrep.dev:
      rule:
        rule_id: pKUOrp
        version_id: yeTDg8
        url: https://semgrep.dev/playground/r/yeTDg8/python.jinja2.security.audit.autoescape-disabled.autoescape-disabled
        origin: community
  languages:
  - python
  severity: WARNING
- id: terraform.aws.security.missing-athena-workgroup-encryption.missing-athena-workgroup-encryption
  patterns:
  - pattern: resource "aws_athena_workgroup" $ANYTHING {...}
  - pattern-not-inside: |
      resource "aws_athena_workgroup" $ANYTHING {
        ...
        encryption_configuration {...}
        ...
      }
  message: 'The AWS Athena Workgroup is unencrypted. Encryption protects query results
    in your workgroup. To enable, add: `encryption_configuration { encryption_option
    = "SSE_KMS" kms_key_arn =  aws_kms_key.example.arn }` within `result_configuration
    { }` in your resource block,  where `encryption_option` is your chosen encryption
    method and `kms_key_arn`  is your KMS key ARN.'
  languages:
  - hcl
  severity: WARNING
  metadata:
    technology:
    - aws
    - terraform
    category: security
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.missing-athena-workgroup-encryption.missing-athena-workgroup-encryption
    shortlink: https://sg.run/kzro
    semgrep.dev:
      rule:
        rule_id: wdUljO
        version_id: LjTj32
        url: https://semgrep.dev/playground/r/LjTj32/terraform.aws.security.missing-athena-workgroup-encryption.missing-athena-workgroup-encryption
        origin: community
- id: terraform.lang.security.eks-insufficient-control-plane-logging.eks-insufficient-control-plane-logging
  patterns:
  - pattern: |
      name = ...
  - pattern-inside: |
      resource "aws_eks_cluster" "..." {
        ...
      }
  - pattern-not-inside: |
      resource "aws_eks_cluster" "..." {
        ...
        enabled_cluster_log_types = [..., "api", ..., "audit", ...]
        ...
      }
  - pattern-not-inside: |
      resource "aws_eks_cluster" "..." {
        ...
        enabled_cluster_log_types = [..., "audit", ..., "api", ...]
        ...
      }
  languages:
  - hcl
  message: Missing EKS control plane logging. It is recommended to enable at least
    Kubernetes API server component logs ("api") and audit logs ("audit") of the EKS
    control plane through the enabled_cluster_log_types attribute.
  severity: WARNING
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster#enabling-control-plane-logging
    - https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html
    category: security
    cwe:
    - 'CWE-778: Insufficient Logging'
    technology:
    - terraform
    - aws
    owasp:
    - A10:2017 - Insufficient Logging & Monitoring
    - A09:2021 - Security Logging and Monitoring Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.eks-insufficient-control-plane-logging.eks-insufficient-control-plane-logging
    shortlink: https://sg.run/wZ3n
    semgrep.dev:
      rule:
        rule_id: x8UGx7
        version_id: gETK4K
        url: https://semgrep.dev/playground/r/gETK4K/terraform.lang.security.eks-insufficient-control-plane-logging.eks-insufficient-control-plane-logging
        origin: community
- id: javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-argument
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-argument
    shortlink: https://sg.run/E7ZB
    semgrep.dev:
      rule:
        rule_id: 2ZUwo7
        version_id: 3ZTwg1
        url: https://semgrep.dev/playground/r/3ZTwg1/javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-argument
        origin: pro_rules
  languages:
  - js
  - ts
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SQL = require('$IMPORT')
        ...
    - pattern-inside: |
        import $SQL from '$IMPORT'
        ...
    - pattern-inside: |
        import * as $SQL from '$IMPORT'
        ...
    - pattern-inside: |
        import {...,$SQL,...} from '$IMPORT'
        ...
  - metavariable-regex:
      metavariable: $IMPORT
      regex: ^(sequelize)$
  - patterns:
    - pattern: |
        new $SQL($DB, $USER, "$PWD", $OPTS)
    - pattern-not: |
        new $SQL($DB, $USER, "", $OPTS)
    - focus-metavariable: $PWD
- id: javascript.sequelize.node-sequelize-hardcoded-secret-connection-string.node-sequelize-hardcoded-secret-connection-string
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.sequelize.node-sequelize-hardcoded-secret-connection-string.node-sequelize-hardcoded-secret-connection-string
    shortlink: https://sg.run/7bwQ
    semgrep.dev:
      rule:
        rule_id: X5Ul0A
        version_id: 44TqJO
        url: https://semgrep.dev/playground/r/44TqJO/javascript.sequelize.node-sequelize-hardcoded-secret-connection-string.node-sequelize-hardcoded-secret-connection-string
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('$IMPORT')
          ...
      - pattern-inside: |
          import $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(sequelize)$
    - patterns:
      - pattern-inside: |
          new $SQL($URL)
      - focus-metavariable: $URL
- id: bash.curl.security.curl-pipe-bash.curl-pipe-bash
  languages:
  - bash
  severity: WARNING
  message: Data is being piped into `bash` from a `curl` command. An attacker with
    control of the server in the `curl` command could inject malicious code into the
    pipe, resulting in a system compromise. Avoid piping untrusted data into `bash`
    or any other shell if you can. If you must do this, consider checking the SHA
    sum of the content returned by the server to verify its integrity.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    category: security
    technology:
    - bash
    - curl
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/bash.curl.security.curl-pipe-bash.curl-pipe-bash
    shortlink: https://sg.run/KXz6
    semgrep.dev:
      rule:
        rule_id: qNUXrw
        version_id: GxTpd8
        url: https://semgrep.dev/playground/r/GxTpd8/bash.curl.security.curl-pipe-bash.curl-pipe-bash
        origin: community
  patterns:
  - pattern-either:
    - pattern: curl ... | ... bash ...
    - pattern: curl ... | ... /bin/bash ...
    - pattern: '... bash <(curl ...)'
    - pattern: '... /bin/bash <(curl ...)'
- id: clojure.lang.security.use-of-md5.use-of-md5
  languages:
  - clojure
  severity: WARNING
  message: MD5 hash algorithm detected. This is not collision resistant and leads
    to easily-cracked password hashes. Replace with current recommended hashing algorithms.
  metadata:
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
    technology:
    - clojure
    source-rule-url: https://github.com/clj-holmes/clj-holmes-rules/blob/main/security/weak-hash-function-md5.yml
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    - 'CWE-328: Use of Weak Hash'
    author: Gabriel Marquet <gab.marquet@gmail.com>
    category: security
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/clojure.lang.security.use-of-md5.use-of-md5
    shortlink: https://sg.run/BgPx
    semgrep.dev:
      rule:
        rule_id: nJU1ep
        version_id: A8Twoq
        url: https://semgrep.dev/playground/r/A8Twoq/clojure.lang.security.use-of-md5.use-of-md5
        origin: community
  pattern-either:
  - pattern: (MessageDigest/getInstance "MD5")
  - pattern: (MessageDigest/getInstance MessageDigestAlgorithms/MD5)
  - pattern: (MessageDigest/getInstance org.apache.commons.codec.digest.MessageDigestAlgorithms/MD5)
  - pattern: (java.security.MessageDigest/getInstance "MD5")
  - pattern: (java.security.MessageDigest/getInstance MessageDigestAlgorithms/MD5)
  - pattern: (java.security.MessageDigest/getInstance org.apache.commons.codec.digest.MessageDigestAlgorithms/MD5)
- id: generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak
  patterns:
  - pattern-regex: ^(AIza[0-9A-Za-z_-]{35}(?!\S))$
  message: Detects potential Google Maps API keys in code
  languages:
  - generic
  severity: WARNING
  metadata:
    description: Detects potential Google Maps API keys in code
    severity: MEDIUM
    category: security
    confidence: MEDIUM
    impact: HIGH
    likelihood: MEDIUM
    subcategory:
    - audit
    owasp:
    - A3:2017 Sensitive Data Exposure
    references:
    - https://ozguralp.medium.com/unauthorized-google-maps-api-key-usage-cases-and-why-you-need-to-care-1ccb28bf21e
    cwe:
    - 'CWE-538: Insertion of Sensitive Information into Externally-Accessible File
      or Directory'
    technology:
    - Google Maps
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak
    shortlink: https://sg.run/DL5d
    semgrep.dev:
      rule:
        rule_id: EwU3kN
        version_id: JdT89w
        url: https://semgrep.dev/playground/r/JdT89w/generic.secrets.security.google-maps-apikeyleak.google-maps-apikeyleak
        origin: community
- id: javascript.aws-lambda.security.tainted-eval.tainted-eval
  message: The `eval()` function evaluates JavaScript code represented as a string.
    Executing JavaScript from a string is an enormous security risk. It is far too
    easy for a bad actor to run arbitrary code when you use `eval()`. Ensure evaluated
    content is not definable by external sources.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - javascript
    - aws-lambda
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.tainted-eval.tainted-eval
    shortlink: https://sg.run/WjY2
    semgrep.dev:
      rule:
        rule_id: x8UNw5
        version_id: o5T68N
        url: https://semgrep.dev/playground/r/o5T68N/javascript.aws-lambda.security.tainted-eval.tainted-eval
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CODE
    - pattern-either:
      - pattern: eval($CODE)
      - pattern: Function(...,$CODE)
      - pattern: new Function(...,$CODE)
- id: javascript.aws-lambda.security.tainted-html-response.tainted-html-response
  message: Detected user input flowing into an HTML response. You may be accidentally
    bypassing secure methods of rendering HTML by manually constructing HTML and this
    could create a cross-site scripting vulnerability, which could let attackers steal
    sensitive user data.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.tainted-html-response.tainted-html-response
    shortlink: https://sg.run/0Gvj
    semgrep.dev:
      rule:
        rule_id: OrUJBY
        version_id: zyTE7p
        url: https://semgrep.dev/playground/r/zyTE7p/javascript.aws-lambda.security.tainted-html-response.tainted-html-response
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $BODY
    - pattern-inside: |
        {..., headers: {..., 'Content-Type': 'text/html', ...}, body: $BODY, ... }
- id: javascript.express.security.express-expat-xxe.express-expat-xxe
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities.
  metadata:
    interfile: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://github.com/astro/node-expat
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-expat-xxe.express-expat-xxe
    shortlink: https://sg.run/BkXx
    semgrep.dev:
      rule:
        rule_id: zdUkJl
        version_id: 1QT1L8
        url: https://semgrep.dev/playground/r/1QT1L8/javascript.express.security.express-expat-xxe.express-expat-xxe
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $XML = require('node-expat')
          ...
      - pattern-inside: |
          import $XML from 'node-expat'
          ...
      - pattern-inside: |
          import * as $XML from 'node-expat'
          ...
    - pattern-either:
      - pattern-inside: |
          $PARSER = new $XML.Parser(...);
          ...
    - pattern-either:
      - pattern: $PARSER.parse($QUERY)
      - pattern: $PARSER.write($QUERY)
    - focus-metavariable: $QUERY
- id: javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
  message: Detected possible user input going into a `path.join` or `path.resolve`
    function. This could possibly lead to a path traversal vulnerability,  where the
    attacker can access arbitrary files stored in the file system. Instead, be sure
    to sanitize or validate user input first.
  metadata:
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    category: security
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    technology:
    - javascript
    - node.js
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
    shortlink: https://sg.run/OPqk
    semgrep.dev:
      rule:
        rule_id: 8GUjrq
        version_id: yeTK13
        url: https://semgrep.dev/playground/r/yeTK13/javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern-inside: |
          function ... (...,$X,...) {...}
      - pattern-inside: |
          function ... (...,{...,$X,...},...) {...}
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern-inside: |
          $PATH = require('path');
          ...
      - pattern-inside: |
          import $PATH from 'path';
          ...
    - pattern-either:
      - pattern: $PATH.join(...,$SINK,...)
      - pattern: $PATH.resolve(...,$SINK,...)
  - patterns:
    - focus-metavariable: $SINK
    - pattern-inside: |
        import 'path';
        ...
    - pattern-either:
      - pattern-inside: path.join(...,$SINK,...)
      - pattern-inside: path.resolve(...,$SINK,...)
  pattern-sanitizers:
  - pattern: $Y.replace(...)
  - pattern: $Y.indexOf(...)
  - pattern: |
      function ... (...) {
          ...
          <... $Y.indexOf(...) ...>
          ...
      }
  - patterns:
    - pattern: $FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: sanitize
- id: python.flask.security.injection.subprocess-injection.subprocess-injection
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: flask.request.form.get(...)
        - pattern: flask.request.form[...]
        - pattern: flask.request.args.get(...)
        - pattern: flask.request.args[...]
        - pattern: flask.request.values.get(...)
        - pattern: flask.request.values[...]
        - pattern: flask.request.cookies.get(...)
        - pattern: flask.request.cookies[...]
        - pattern: flask.request.stream
        - pattern: flask.request.headers.get(...)
        - pattern: flask.request.headers[...]
        - pattern: flask.request.data
        - pattern: flask.request.full_path
        - pattern: flask.request.url
        - pattern: flask.request.json
        - pattern: flask.request.get_json()
        - pattern: flask.request.view_args.get(...)
        - pattern: flask.request.view_args[...]
    - patterns:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
      - focus-metavariable: $ROUTEVAR
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: subprocess.$FUNC(...)
        - pattern-not: subprocess.$FUNC("...", ...)
        - pattern-not: subprocess.$FUNC(["...", ...], ...)
        - pattern-not-inside: |
            $CMD = ["...", ...]
            ...
            subprocess.$FUNC($CMD, ...)
      - patterns:
        - pattern: subprocess.$FUNC(["$SHELL", "-c", ...], ...)
        - metavariable-regex:
            metavariable: $SHELL
            regex: ^(sh|bash|ksh|csh|tcsh|zsh)$
      - patterns:
        - pattern: subprocess.$FUNC(["$INTERPRETER", ...], ...)
        - metavariable-regex:
            metavariable: $INTERPRETER
            regex: ^(python|python\d)$
  pattern-sanitizers:
  - patterns:
    - pattern: $DICT[$KEY]
    - focus-metavariable: $KEY
  severity: ERROR
  message: Detected user input entering a `subprocess` call unsafely. This could result
    in a command injection vulnerability. An attacker could use this vulnerability
    to execute arbitrary commands on the host, which allows them to download malware,
    scan sensitive data, or run any command they wish on the server. Do not let users
    choose the command to run. In general, prefer to use Python API versions of system
    commands. If you must use subprocess, use a dictionary to allowlist a set of commands.
  metadata:
    category: security
    technology:
    - flask
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.subprocess-injection.subprocess-injection
    shortlink: https://sg.run/5gW3
    semgrep.dev:
      rule:
        rule_id: 8GU3qp
        version_id: 3ZTyA7
        url: https://semgrep.dev/playground/r/3ZTyA7/python.flask.security.injection.subprocess-injection.subprocess-injection
        origin: community
- id: terraform.aws.security.aws-kinesis-stream-unencrypted.aws-kinesis-stream-unencrypted
  patterns:
  - pattern: |
      resource "aws_kinesis_stream" $ANYTHING {
        ...
      }
  - pattern-not: |
      resource "aws_kinesis_stream" $ANYTHING {
        ...
        encryption_type = "KMS"
        ...
      }
  message: The AWS Kinesis stream does not encrypt data at rest. The data could be
    read if the Kinesis stream storage layer is compromised. Enable Kinesis stream
    server-side encryption.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kinesis_stream#encryption_type
    - https://docs.aws.amazon.com/streams/latest/dev/server-side-encryption.html
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    rule-origin-note: published from /src/aws-kinesis-stream-unencrypted.yml in None
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-kinesis-stream-unencrypted.aws-kinesis-stream-unencrypted
    shortlink: https://sg.run/KZ0L
    semgrep.dev:
      rule:
        rule_id: 8GU72N
        version_id: DkTA0l
        url: https://semgrep.dev/playground/r/DkTA0l/terraform.aws.security.aws-kinesis-stream-unencrypted.aws-kinesis-stream-unencrypted
        origin: community
- id: java.servlets.security.tainted-sql-from-http-request-deepsemgrep.tainted-sql-from-http-request-deepsemgrep
  message: This rule is deprecated
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://owasp.org/www-community/attacks/SQL_Injection
    technology:
    - sql
    - java
    - servlets
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-sql-from-http-request-deepsemgrep.tainted-sql-from-http-request-deepsemgrep
    shortlink: https://sg.run/7L7Q
    semgrep.dev:
      rule:
        rule_id: QrUQx1
        version_id: LjTex8
        url: https://semgrep.dev/playground/r/LjTex8/java.servlets.security.tainted-sql-from-http-request-deepsemgrep.tainted-sql-from-http-request-deepsemgrep
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.servlets.security.nosql-injection-servlets.nosql-injection-servlets
  message: Untrusted input might be used to build a database query, which can lead
    to a NoSQL injection vulnerability. An attacker can execute malicious NoSQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Make sure all user input is validated and sanitized,
    and avoid if possible to use it to construct the NoSQL statement.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://owasp.org/www-community/attacks/SQL_Injection
    technology:
    - sql
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.nosql-injection-servlets.nosql-injection-servlets
    shortlink: https://sg.run/dq1E
    semgrep.dev:
      rule:
        rule_id: kxUv65
        version_id: 5PT1Q3
        url: https://semgrep.dev/playground/r/5PT1Q3/java.servlets.security.nosql-injection-servlets.nosql-injection-servlets
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: CONCAT
    requires: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: $X + $SOURCE
      - pattern: $SOURCE + $X
      - pattern: (StringBuilder $STRB).append($SOURCE)
      - pattern: String.format("...", ..., $SOURCE, ...)
      - pattern: String.join("...", ..., $SOURCE, ...)
      - pattern: (String $STR).concat($SOURCE)
      - pattern: $SOURCE.concat(...)
      - pattern: $X += SOURCE
      - pattern: $SOURCE += $X
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $CLIENT = new MongoClient(...);
          ...
      - pattern-inside: |
          $CLIENT = new Mongo(...);
          ...
    - pattern-either:
      - patterns:
        - pattern: |
            (BasicDBObject $DBO).$QUERYFUNC($COMMAND, $INPUT)
        - metavariable-regex:
            metavariable: $QUERYFUNC
            regex: ^(append|put)$
      - pattern: |
          new BasicDBObject($COMMAND, $INPUT)
    - focus-metavariable: $INPUT
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open
  message: Found request data in a call to 'open'. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks and therefore
    sensitive data being leaked. To mitigate, consider using os.path.abspath or os.path.realpath
    or the pathlib library.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open
    shortlink: https://sg.run/W8qg
    semgrep.dev:
      rule:
        rule_id: oqUe7z
        version_id: 2KTJL3
        url: https://semgrep.dev/playground/r/2KTJL3/python.django.security.injection.path-traversal.path-traversal-open.path-traversal-open
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: open(..., request.$W.get(...), ...)
    - pattern: open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: open(..., $S % request.$W.get(...), ...)
    - pattern: open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W.get(...), ...)
    - pattern: $A = open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $A = open(..., $S % request.$W.get(...), ...)
    - pattern: $A = open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: return open(..., request.$W.get(...), ...)
    - pattern: return open(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: return open(..., $S % request.$W.get(...), ...)
    - pattern: return open(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        with open(..., $DATA, ...) as $FD:
          ...
    - pattern: open(..., request.$W(...), ...)
    - pattern: open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: open(..., $S % request.$W(...), ...)
    - pattern: open(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W(...)
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W(...), ...)
    - pattern: $A = open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $A = open(..., $S % request.$W(...), ...)
    - pattern: $A = open(..., f"...{request.$W(...)}...", ...)
    - pattern: return open(..., request.$W(...), ...)
    - pattern: return open(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: return open(..., $S % request.$W(...), ...)
    - pattern: return open(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        with open(..., $DATA, ...) as $FD:
          ...
    - pattern: open(..., request.$W[...], ...)
    - pattern: open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: open(..., $S % request.$W[...], ...)
    - pattern: open(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W[...]
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W[...], ...)
    - pattern: $A = open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $A = open(..., $S % request.$W[...], ...)
    - pattern: $A = open(..., f"...{request.$W[...]}...", ...)
    - pattern: return open(..., request.$W[...], ...)
    - pattern: return open(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: return open(..., $S % request.$W[...], ...)
    - pattern: return open(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        with open(..., $DATA, ...) as $FD:
          ...
    - pattern: open(..., request.$W, ...)
    - pattern: open(..., $S.format(..., request.$W, ...), ...)
    - pattern: open(..., $S % request.$W, ...)
    - pattern: open(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: |
        $DATA = request.$W
        ...
        open(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        open(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        with open(..., $INTERM, ...) as $FD:
          ...
    - pattern: $A = open(..., request.$W, ...)
    - pattern: $A = open(..., $S.format(..., request.$W, ...), ...)
    - pattern: $A = open(..., $S % request.$W, ...)
    - pattern: $A = open(..., f"...{request.$W}...", ...)
    - pattern: return open(..., request.$W, ...)
    - pattern: return open(..., $S.format(..., request.$W, ...), ...)
    - pattern: return open(..., $S % request.$W, ...)
    - pattern: return open(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        with open(..., $DATA, ...) as $FD:
          ...
- id: ruby.rails.security.audit.rails-check-header-dos.rails-check-header-dos
  languages:
  - generic
  patterns:
  - pattern-either:
    - patterns:
      - pattern: gem 'rails', '3.$Y'
      - metavariable-comparison:
          metavariable: $Y
          comparison: $Y <= 2
    - patterns:
      - pattern-either:
        - pattern: gem 'rails', '3.0.$Z'
        - pattern: gem 'rails', '3.1.$Z'
    - patterns:
      - pattern: gem 'rails', '3.2.$Z'
      - metavariable-comparison:
          metavariable: $Z
          comparison: $Z < 16
    - patterns:
      - pattern: gem 'rails', '4.0.$Z'
      - metavariable-comparison:
          metavariable: $Z
          comparison: $Z == 0 or $Z == 1
  message: Rails versions 3.0.0 - 3.2.15 and 4.0.0 and 4.0.1 are vulnerable to a DoS
    attack (CVE-2013-6414). This can cause your service to be taken down for substantial
    amount of time. Instead, upgrade to 4.0.2 or 3.2.16 or higher.
  severity: WARNING
  metadata:
    technology:
    - rails
    category: security
    cwe:
    - 'CWE-20: Improper Input Validation'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_header_dos.rb
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-check-header-dos.rails-check-header-dos
    shortlink: https://sg.run/5LY6
    semgrep.dev:
      rule:
        rule_id: eqUDRY
        version_id: e1TNr2
        url: https://semgrep.dev/playground/r/e1TNr2/ruby.rails.security.audit.rails-check-header-dos.rails-check-header-dos
        origin: community
  paths:
    include:
    - '*Gemfile'
    - gems.rb
- id: ruby.rails.security.brakeman.check-unsafe-reflection-methods.check-unsafe-reflection-methods
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: |
        cookies[...]
    - patterns:
      - pattern: |
          cookies. ... .$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: (?!signed|encrypted)
    - pattern: |
        params[...]
    - pattern: |
        request.env[...]
  pattern-sinks:
  - patterns:
    - pattern: $X
    - pattern-either:
      - pattern-inside: |
          $X. ... .to_proc
      - pattern-inside: |
          $Y.method(...)
      - pattern-inside: |
          $Y.tap(...)
  message: Found user-controllable input to a reflection method. This may allow a
    user to alter program behavior and potentially execute arbitrary instructions
    in the context of the process. Do not provide arbitrary user input to `tap`, `method`,
    or `to_proc`
  languages:
  - ruby
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection_methods.rb
    category: security
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    technology:
    - ruby
    - rails
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails6/app/controllers/groups_controller.rb
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-unsafe-reflection-methods.check-unsafe-reflection-methods
    shortlink: https://sg.run/dPYd
    semgrep.dev:
      rule:
        rule_id: eqUZ2Q
        version_id: nWTgGX
        url: https://semgrep.dev/playground/r/nWTgGX/ruby.rails.security.brakeman.check-unsafe-reflection-methods.check-unsafe-reflection-methods
        origin: community
- id: ruby.rails.security.brakeman.check-unsafe-reflection.check-unsafe-reflection
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: |
        cookies[...]
    - patterns:
      - pattern: |
          cookies. ... .$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: (?!signed|encrypted)
    - pattern: |
        params[...]
    - pattern: |
        request.env[...]
  pattern-sinks:
  - patterns:
    - pattern: $X
    - pattern-either:
      - pattern-inside: |
          $X.constantize
      - pattern-inside: |
          $X. ... .safe_constantize
      - pattern-inside: |
          const_get(...)
      - pattern-inside: |
          qualified_const_get(...)
  message: Found user-controllable input to Ruby reflection functionality. This allows
    a remote user to influence runtime behavior, up to and including arbitrary remote
    code execution. Do not provide user-controllable input to reflection functionality.
    Do not call symbol conversion on user-controllable input.
  languages:
  - ruby
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unsafe_reflection.rb
    category: security
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    technology:
    - ruby
    - rails
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails2/app/controllers/application_controller.rb
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-unsafe-reflection.check-unsafe-reflection
    shortlink: https://sg.run/vpEX
    semgrep.dev:
      rule:
        rule_id: wdUkYA
        version_id: ExT0qZ
        url: https://semgrep.dev/playground/r/ExT0qZ/ruby.rails.security.brakeman.check-unsafe-reflection.check-unsafe-reflection
        origin: community
- id: python.django.deserialization.tainted-pickle-django.tainted-pickle-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are
    considered insecure.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.django.security.audit.avoid-insecure-deserialization
    technology:
    - python
    - django
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-pickle-django.tainted-pickle-django
    shortlink: https://sg.run/ez5X
    semgrep.dev:
      rule:
        rule_id: PeU7x0
        version_id: zyTZq2
        url: https://semgrep.dev/playground/r/zyTZq2/python.django.deserialization.tainted-pickle-django.tainted-pickle-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: $PACKAGE.Unpickler($SINK, ...)
    - metavariable-regex:
        metavariable: $PACKAGE
        regex: ^(pickle|_pickle|cPickle)$
- id: python.django.deserialization.tainted-pyyaml-django.tainted-pyyaml-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    PyYAML''s `yaml` module is as powerful as `pickle` and so may call any Python
    function. It is recommended to secure your application by using `yaml.SafeLoader`
    or `yaml.CSafeLoader`.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
    technology:
    - python
    - django
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-pyyaml-django.tainted-pyyaml-django
    shortlink: https://sg.run/vQXX
    semgrep.dev:
      rule:
        rule_id: JDUOll
        version_id: pZTYPY
        url: https://semgrep.dev/playground/r/pZTYPY/python.django.deserialization.tainted-pyyaml-django.tainted-pyyaml-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - pattern: |
        yaml.$FUNC($SINK, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(scan|parse|compose|compose_all|load|load_all|unsafe_load)$
  - patterns:
    - pattern: yaml.$LOADER($SINK)
    - metavariable-regex:
        metavariable: $LOADER
        regex: ^(Loader|BaseLoader|CLoader|CBaseLoader)$
- id: python.django.deserialization.tainted-ruamel-django.tainted-ruamel-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Starting from `ruamel.yaml` version 0.15.0 The default loader (`typ=''rt''`) is
    a direct derivative of the safe loader. Before this version, use the optional
    argument `Loader` with value `SafeLoader` or `CSafeLoader`, or use the `safe_load`
    function.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-unsafe-ruamel
    technology:
    - python
    - django
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-ruamel-django.tainted-ruamel-django
    shortlink: https://sg.run/doJP
    semgrep.dev:
      rule:
        rule_id: 5rUKyN
        version_id: 2KTjlq
        url: https://semgrep.dev/playground/r/2KTjlq/python.django.deserialization.tainted-ruamel-django.tainted-ruamel-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-either:
            - pattern-inside: |
                @rest_framework.decorators.api_view(...)
                def $FUNC(..., $REQ, ...):
                  ...
            - patterns:
              - pattern-either:
                - pattern-inside: |
                    class $VIEW(..., rest_framework.views.APIView, ...):
                      ...
                - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                    \ ...                              \n"
              - pattern-inside: |
                  def $METHOD(self, $REQ, ...):
                    ...
              - metavariable-regex:
                  metavariable: $METHOD
                  regex: (get|post|put|patch|delete|head)
          - pattern-either:
            - pattern-inside: |
                def $VIEW($REQ, ...):
                  ...
                  return django.shortcuts.render($REQ, ...)
            - pattern-inside: |
                def $VIEW($REQ, ...):
                  ...
                  return django.shortcuts.redirect(...)
            - pattern-inside: |
                def $VIEW($REQ, ...):
                  ...
                  return django.http.HttpResponseRedirect(...)
            - pattern-inside: |
                $REQ = django.http.HttpRequest()
                ...
        - pattern-either:
          - patterns:
            - pattern: $REQ.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
          - patterns:
            - pattern-either:
              - pattern: $REQ.$PROPERTY
              - pattern: $REQ.$PROPERTY[...]
              - pattern: $REQ.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
      - patterns:
        - pattern-either:
          - pattern-inside: |
              def $VIEW($REQ, ..., $PARAM, ...):
                ...
                return django.shortcuts.render($REQ, ...)
          - pattern-inside: |
              def $VIEW($REQ, ..., $PARAM, ...):
                ...
                return django.shortcuts.redirect(...)
          - pattern-inside: |
              def $VIEW($REQ, ..., $PARAM, ...):
                ...
                return django.http.HttpResponseRedirect(...)
        - focus-metavariable: $PARAM
  - label: TYP_UNSAFE
    pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  pattern-sinks:
  - requires: USER_INPUT
    patterns:
    - pattern: ruamel.yaml.$FUNC($SINK)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.SafeLoader, ...)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(load|load_all|round_trip_load)$
  - requires: USER_INPUT and TYP_UNSAFE
    patterns:
    - pattern: $YAML.load($SINK)
- id: python.django.deserialization.tainted-shelve-django.tainted-shelve-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `shelve` module uses `pickle` and should not be used with data from untrusted
    sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://docs.python.org/3/library/shelve.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.aws-lambda.security.tainted-pickle-deserialization
    - python.lang.security.deserialization.avoid-shelve
    technology:
    - python
    - django
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-shelve-django.tainted-shelve-django
    shortlink: https://sg.run/ZAK7
    semgrep.dev:
      rule:
        rule_id: GdUbDP
        version_id: X0TqWb
        url: https://semgrep.dev/playground/r/X0TqWb/python.django.deserialization.tainted-shelve-django.tainted-shelve-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: shelve.open($SINK, ...)
      - pattern: shelve.DbfilenameShelf($SINK, ...)
    - focus-metavariable: $SINK
- id: python.django.deserialization.tainted-torch-pickle-django.tainted-torch-pickle-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    A number of functions and packages in the `torch` module rely on the `pickle`
    module and should not be used to unpackage data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    - https://pytorch.org/docs/stable/generated/torch.load.html
    - https://pytorch.org/docs/stable/_modules/torch/distributed/distributed_c10d.html#broadcast_object_list:~:text=.BytesIO()-,_pickler,-(f)
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - torch
    - django
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-torch-pickle-django.tainted-torch-pickle-django
    shortlink: https://sg.run/nQ9G
    semgrep.dev:
      rule:
        rule_id: ReUNKk
        version_id: jQT2kE
        url: https://semgrep.dev/playground/r/jQT2kE/python.django.deserialization.tainted-torch-pickle-django.tainted-torch-pickle-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: torch.load($SINK, ...)
      - pattern: torch.package.PackageImporter($SINK, ...)
      - pattern: torch.distributed.broadcast_object_list($SINK,...)
      - pattern: torch.distributed.all_gather_object($OUT, $SINK,...)
      - pattern: torch.distributed.gather_object($SINK,...)
      - pattern: torch.distributed.scatter_object_list($OUT, $SINK, ...)
- id: typescript.nextjs.react-nextjs-router-dangerouslysetinnerhtml.react-nextjs-router-dangerouslysetinnerhtml
  message: Detected the use of dangerouslySetInnerHTML where input comes from the
    request URL. This can introduce a Cross-Site-Scripting (XSS) vulnerability if
    this comes from user-provided input. If you have to use dangerouslySetInnerHTML,
    consider using a sanitization library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - react
    - browser
    - nextjs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-dangerouslysetinnerhtml.react-nextjs-router-dangerouslysetinnerhtml
    shortlink: https://sg.run/WGr4
    semgrep.dev:
      rule:
        rule_id: gxUB6E
        version_id: o5TE1o
        url: https://semgrep.dev/playground/r/o5TE1o/typescript.nextjs.react-nextjs-router-dangerouslysetinnerhtml.react-nextjs-router-dangerouslysetinnerhtml
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$IMPORT,... } from 'next/router'
          ...
      - pattern-inside: |
          import $IMPORT from 'next/router';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern-either:
          - pattern-inside: |
              var { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              const { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              let { ...,$PROPS,... } = $ROUTER.query
              ...
        - focus-metavariable: $PROPS
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern: "$ROUTER.query.$VALUE \n"
      - patterns:
        - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        <$EL ... dangerouslySetInnerHTML={$PROP}></$EL>
    - focus-metavariable: $PROP
    - pattern-not-inside: |
        <script ... dangerouslySetInnerHTML={$PROP}/>
    - pattern-not-inside: |
        <style ... dangerouslySetInnerHTML={$PROP}/>
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: typescript.nextjs.react-nextjs-router-refs.react-nextjs-router-refs
  message: Detected the use of innerHTML/outerHTML where input comes from a request
    URL. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes
    from user-provided input. If you have to use dangerouslySetInnerHTML, consider
    using a sanitization library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - react
    - browser
    - nextjs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-refs.react-nextjs-router-refs
    shortlink: https://sg.run/qLkz
    semgrep.dev:
      rule:
        rule_id: 4bUE7Y
        version_id: 2KTxO6
        url: https://semgrep.dev/playground/r/2KTxO6/typescript.nextjs.react-nextjs-router-refs.react-nextjs-router-refs
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$IMPORT,... } from 'next/router'
          ...
      - pattern-inside: |
          import $IMPORT from 'next/router';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern-either:
          - pattern-inside: |
              var { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              const { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              let { ...,$PROPS,... } = $ROUTER.query
              ...
        - focus-metavariable: $PROPS
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern: "$ROUTER.query.$VALUE \n"
      - patterns:
        - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $BODY = useRef(...)
          ...
      - pattern-inside: |
          $BODY = React.useRef(...)
          ...
    - pattern-either:
      - pattern: "$BODY. ... .innerHTML = $SINK \n"
      - pattern: "$BODY.innerHTML = $SINK \n"
      - pattern: "$BODY. ... .outerHTML = $SINK \n"
      - pattern: "$BODY.outerHTML = $SINK \n"
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: python.peewee.python-peewee-pg-empty-password.python-peewee-pg-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - peewee
    - orm
    - sql
    - mysql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.peewee.python-peewee-pg-empty-password.python-peewee-pg-empty-password
    shortlink: https://sg.run/ElJe
    semgrep.dev:
      rule:
        rule_id: L1Upg8
        version_id: nWTN5q
        url: https://semgrep.dev/playground/r/nWTN5q/python.peewee.python-peewee-pg-empty-password.python-peewee-pg-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: $DB(..., password="",...)
    - patterns:
      - pattern-inside: |
          $X = $DB(...)
          ...
      - pattern: $X.init(..., password="", ...)
  - metavariable-pattern:
      metavariable: $DB
      patterns:
      - pattern-either:
        - pattern: PostgresqlDatabase
        - pattern: peewee.PostgresqlDatabase
        - pattern: PostgresqlExtDatabase
        - pattern: playhouse.postgres_ext.PostgresqlExtDatabase
        - pattern: PooledPostgresqlDatabase
        - pattern: playhouse.pool.PooledPostgresqlDatabase
        - pattern: CockroachDatabase
        - pattern: playhouse.cockroachdb.CockroachDatabase
        - pattern: PooledCockroachDatabase
        - pattern: playhouse.cockroachdb.PooledCockroachDatabase
- id: typescript.nextjs.react-nextjs-router-push.react-nextjs-router-push
  message: User controllable data from the query parameter `$VALUE` within the Next.js
    $ROUTER push()/replace() functions. This can introduce a Cross-Site-Scripting
    (XSS) vulnerability if this comes from user-provided input due to the JavaScript
    URI. It is recommended to validate URLs before leveraging them with your codebase,
    a secure utility example is provided in the references. This issue can also lead
    to open-redirection vulnerabilities as users control the location of the page,
    therefore it is recommended to have an allow-list of return locations or ensure
    only relative paths are allowed.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    technology:
    - react
    - nextjs
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-push.react-nextjs-router-push
    shortlink: https://sg.run/KA37
    semgrep.dev:
      rule:
        rule_id: 3qU4le
        version_id: WrTKzW
        url: https://semgrep.dev/playground/r/WrTKzW/typescript.nextjs.react-nextjs-router-push.react-nextjs-router-push
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$IMPORT,... } from 'next/router'
          ...
      - pattern-inside: |
          import $IMPORT from 'next/router';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern-either:
          - pattern-inside: |
              var { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              const { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              let { ...,$PROPS,... } = $ROUTER.query
              ...
        - focus-metavariable: $PROPS
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern: "$ROUTER.query.$VALUE \n"
      - patterns:
        - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $ROUTER.replace($X)
      - pattern-inside: |
          $ROUTER.replace(`$X`)
      - pattern-inside: |
          $ROUTER.push(`$X`)
      - pattern-inside: |
          $ROUTER.push($X)
    - focus-metavariable: $X
  pattern-sanitizers:
  - patterns:
    - pattern: |
        `...`
    - pattern-not: |
        `${$VALUE}...`
  - patterns:
    - pattern: |
        "..." + $ANYTHING
- id: csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure
  patterns:
  - pattern: $APP.UseDeveloperExceptionPage(...);
  - pattern-not-inside: "if ($ENV.IsDevelopment(...)) {\n  ... \n  $APP.UseDeveloperExceptionPage(...);
      \n  ...\n}\n"
  message: Stacktrace information is displayed in a non-Development environment. Accidentally
    disclosing sensitive stack trace information in a production environment aids
    an attacker in reconnaissance and information gathering.
  metadata:
    category: security
    technology:
    - csharp
    owasp:
    - A06:2017 - Security Misconfiguration
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-209: Generation of Error Message Containing Sensitive Information'
    references:
    - https://cwe.mitre.org/data/definitions/209.html
    - https://owasp.org/Top10/A04_2021-Insecure_Design/
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure
    shortlink: https://sg.run/XvkA
    semgrep.dev:
      rule:
        rule_id: lBU6Dv
        version_id: ExTd6n
        url: https://semgrep.dev/playground/r/ExTd6n/csharp.lang.security.stacktrace-disclosure.stacktrace-disclosure
        origin: community
  languages:
  - csharp
  severity: WARNING
- id: python.flask.security.injection.tainted-url-host.tainted-url-host
  languages:
  - python
  message: User data flows into the host portion of this manually-constructed URL.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data such as cookies or authorization information sent with this request.
    They could also probe internal servers or other resources that the server runnig
    this code can access. (This is called server-side request forgery, or SSRF.) Do
    not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode
    the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.flask.security.injection.tainted-url-host.tainted-url-host
    shortlink: https://sg.run/RXpK
    semgrep.dev:
      rule:
        rule_id: ReU3Wb
        version_id: xyT34W
        url: https://semgrep.dev/playground/r/xyT34W/python.flask.security.injection.tainted-url-host.tainted-url-host
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '"$URLSTR" % ...'
        - metavariable-pattern:
            metavariable: $URLSTR
            language: generic
            patterns:
            - pattern-either:
              - pattern: $SCHEME://%s
              - pattern: $SCHEME://%r
      - patterns:
        - pattern: '"$URLSTR".format(...)'
        - metavariable-pattern:
            metavariable: $URLSTR
            language: generic
            pattern: $SCHEME:// { ... }
      - patterns:
        - pattern: '"$URLSTR" + ...'
        - metavariable-regex:
            metavariable: $URLSTR
            regex: .*://$
      - patterns:
        - pattern: f"$URLSTR{...}..."
        - metavariable-regex:
            metavariable: $URLSTR
            regex: .*://$
      - patterns:
        - pattern-inside: |
            $URL = "$URLSTR"
            ...
        - pattern: $URL += ...
        - metavariable-regex:
            metavariable: $URLSTR
            regex: .*://$
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: flask.request.$ANYTHING
      - patterns:
        - pattern-inside: |
            @$APP.route(...)
            def $FUNC(..., $ROUTEVAR, ...):
              ...
        - pattern: $ROUTEVAR
  severity: WARNING
- id: javascript.axios.hardcoded-basic-token.hardcoded-basic-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.axios.hardcoded-basic-token.hardcoded-basic-token
    shortlink: https://sg.run/YlN4
    semgrep.dev:
      rule:
        rule_id: NbUQqe
        version_id: K3TLR4
        url: https://semgrep.dev/playground/r/K3TLR4/javascript.axios.hardcoded-basic-token.hardcoded-basic-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BASIC'
    - metavariable-pattern:
        metavariable: $BASIC
        language: generic
        patterns:
        - pattern: Basic $TOKEN
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $AXIOS.defaults.headers.common['Authorization'] = $BEARER
    - focus-metavariable: $BEARER
- id: javascript.axios.hardcoded-bearer-token.hardcoded-bearer-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    - jwt
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.axios.hardcoded-bearer-token.hardcoded-bearer-token
    shortlink: https://sg.run/63BB
    semgrep.dev:
      rule:
        rule_id: kxUZYY
        version_id: qkTwrb
        url: https://semgrep.dev/playground/r/qkTwrb/javascript.axios.hardcoded-bearer-token.hardcoded-bearer-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BEARER'
    - metavariable-pattern:
        metavariable: $BEARER
        language: generic
        patterns:
        - pattern: $HEADER $TOKEN
        - metavariable-regex:
            metavariable: $HEADER
            regex: (Bearer|bearer)
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (eyJhbGciOi.*)
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $AXIOS.defaults.headers.common['Authorization'] = $BEARER
    - focus-metavariable: $BEARER
- id: javascript.lang.hardcoded.headers.hardcoded-basic-token.hardcoded-basic-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.lang.hardcoded.headers.hardcoded-basic-token.hardcoded-basic-token
    shortlink: https://sg.run/o6eR
    semgrep.dev:
      rule:
        rule_id: wdU0Kn
        version_id: rxTvXG
        url: https://semgrep.dev/playground/r/rxTvXG/javascript.lang.hardcoded.headers.hardcoded-basic-token.hardcoded-basic-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BASIC'
    - metavariable-pattern:
        metavariable: $BASIC
        language: generic
        patterns:
        - pattern: Basic $TOKEN
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          { ..., Authorization: $BEARER,...}
      - pattern-inside: "{ ..., authorization: $BEARER,...}      \n"
      - pattern-inside: "{ ..., \"authorization\": $BEARER,...}     \n"
      - pattern-inside: "{ ..., \"Authorization\": $BEARER,...}           \n"
    - focus-metavariable: $BEARER
- id: javascript.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    - jwt
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token
    shortlink: https://sg.run/zApW
    semgrep.dev:
      rule:
        rule_id: x8U3qp
        version_id: bZToJ4
        url: https://semgrep.dev/playground/r/bZToJ4/javascript.lang.hardcoded.headers.hardcoded-bearer-token.hardcoded-bearer-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BEARER'
    - metavariable-pattern:
        metavariable: $BEARER
        language: generic
        patterns:
        - pattern: $HEADER $TOKEN
        - metavariable-regex:
            metavariable: $HEADER
            regex: (Bearer|bearer|token|Token)
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (eyJhbGciOi.*)
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          { ..., Authorization: $BEARER,...}
      - pattern-inside: "{ ..., authorization: $BEARER,...}      \n"
      - pattern-inside: "{ ..., \"authorization\": $BEARER,...}     \n"
      - pattern-inside: "{ ..., \"Authorization\": $BEARER,...}                  \n"
    - focus-metavariable: $BEARER
- id: javascript.lang.hardcoded.headers.hardcoded-github-token.hardcoded-github-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    - github
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.lang.hardcoded.headers.hardcoded-github-token.hardcoded-github-token
    shortlink: https://sg.run/po6L
    semgrep.dev:
      rule:
        rule_id: OrUZXp
        version_id: NdTRE5
        url: https://semgrep.dev/playground/r/NdTRE5/javascript.lang.hardcoded.headers.hardcoded-github-token.hardcoded-github-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$GITHUB'
    - metavariable-pattern:
        metavariable: $GITHUB
        language: generic
        patterns:
        - pattern: $HEADER $TOKEN
        - metavariable-regex:
            metavariable: $HEADER
            regex: (Bearer|bearer|token|Token)
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (gh[pousr]|github_pat)_[A-Za-z0-9_]{36,251}
        - pattern-not: exa
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          { ..., Authorization: $BEARER,...}
      - pattern-inside: "{ ..., authorization: $BEARER,...}      \n"
      - pattern-inside: "{ ..., \"authorization\": $BEARER,...}     \n"
      - pattern-inside: "{ ..., \"Authorization\": $BEARER,...}              \n"
    - focus-metavariable: $BEARER
- id: javascript.lang.hardcoded.tokens.hardcoded-aws-secretaccesskey.hardcoded-aws-secretaccesskey
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    - aws
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.lang.hardcoded.tokens.hardcoded-aws-secretaccesskey.hardcoded-aws-secretaccesskey
    shortlink: https://sg.run/215D
    semgrep.dev:
      rule:
        rule_id: eqUA9e
        version_id: w8Tbvq
        url: https://semgrep.dev/playground/r/w8Tbvq/javascript.lang.hardcoded.tokens.hardcoded-aws-secretaccesskey.hardcoded-aws-secretaccesskey
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$AWS'
    - metavariable-regex:
        metavariable: $AWS
        regex: ([^A-Za-z0-9+\/]{0,1}([A-Za-z0-9+\/]{40})[^A-Za-z0-9+\/]{0,1})
    - metavariable-analysis:
        analyzer: entropy
        metavariable: $AWS
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        { ..., secretAccessKey: $FOO, ... }
    - focus-metavariable: $FOO
- id: javascript.lang.hardcoded.tokens.hardcoded-github-pat.hardcoded-github-pat
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - headers
    - github
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.lang.hardcoded.tokens.hardcoded-github-pat.hardcoded-github-pat
    shortlink: https://sg.run/Xq1b
    semgrep.dev:
      rule:
        rule_id: v8U3GL
        version_id: xyTr1b
        url: https://semgrep.dev/playground/r/xyTr1b/javascript.lang.hardcoded.tokens.hardcoded-github-pat.hardcoded-github-pat
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$GITHUB'
    - metavariable-regex:
        metavariable: $GITHUB
        regex: gh[pousr]_[A-Za-z0-9_]{36,251}
    - metavariable-analysis:
        analyzer: entropy
        metavariable: $GITHUB
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "{ ..., auth: $AUTH,...}       \n"
      - pattern-inside: "{ ..., token: $AUTH,...}     \n"
    - focus-metavariable: $AUTH
- id: javascript.mssql.node-mssql-empty-password.node-mssql-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mssql
    - sql
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.mssql.node-mssql-empty-password.node-mssql-empty-password
    shortlink: https://sg.run/1eJv
    semgrep.dev:
      rule:
        rule_id: ZqUy3W
        version_id: vdTQJw
        url: https://semgrep.dev/playground/r/vdTQJw/javascript.mssql.node-mssql-empty-password.node-mssql-empty-password
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          {...,password:'',...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., password: "", ...}, ...}, ...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., token: "", ...}, ...}, ...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., msiSecret: "", ...}, ...}, ...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., clientSecret: "", ...}, ...}, ...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('mssql')
          ...
      - pattern-inside: |
          import $SQL from 'mssql'
          ...
      - pattern-inside: |
          import * as $SQL from 'mssql'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from 'mssql'
          ...
    - pattern-inside: |
        $SQL. ... .connect($FOO)
    - focus-metavariable: $FOO
- id: python.cassandra.python-cassandra-hardcoded-secret.python-cassandra-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - nosql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.cassandra.python-cassandra-hardcoded-secret.python-cassandra-hardcoded-secret
    shortlink: https://sg.run/NJyz
    semgrep.dev:
      rule:
        rule_id: 8GULKP
        version_id: 0bT30g
        url: https://semgrep.dev/playground/r/0bT30g/python.cassandra.python-cassandra-hardcoded-secret.python-cassandra-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: cassandra.auth.PlainTextAuthProvider(...,password="...",...)
    - pattern: cassandra.auth.PlainTextAuthProvider($USER,"...",...)
    - pattern: cassandra.auth.SaslAuthProvider(...,password="...",...)
  - pattern-not: cassandra.auth.PlainTextAuthProvider(...,password="",...)
  - pattern-not: cassandra.auth.PlainTextAuthProvider($USER,"",...)
  - pattern-not: cassandra.auth.SaslAuthProvider(...,password="",...)
- id: javascript.mssql.node-mssql-hardcoded-secret-connection-string.node-mssql-hardcoded-secret-connection-string
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mssql
    - sql
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.mssql.node-mssql-hardcoded-secret-connection-string.node-mssql-hardcoded-secret-connection-string
    shortlink: https://sg.run/9P08
    semgrep.dev:
      rule:
        rule_id: nJUwp0
        version_id: qkTwqw
        url: https://semgrep.dev/playground/r/qkTwqw/javascript.mssql.node-mssql-hardcoded-secret-connection-string.node-mssql-hardcoded-secret-connection-string
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$CONN"
    - metavariable-regex:
        metavariable: $CONN
        regex: (.*Password=.*;.*)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('mssql')
          ...
      - pattern-inside: |
          import $SQL from 'mssql'
          ...
      - pattern-inside: |
          import * as $SQL from 'mssql'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from 'mssql'
          ...
    - pattern-inside: |
        $SQL. ... .connect(...)
- id: javascript.browser.open-redirect-pathname.open-redirect-pathname
  message: The application builds a URL using user-controlled input which can lead
    to an open redirect vulnerability. An attacker can manipulate the URL and redirect
    users to an arbitrary domain. Open redirect vulnerabilities can lead to issues
    such as Cross-site scripting (XSS) or redirecting to a malicious domain for activities
    such as phishing to capture users' credentials. To prevent this vulnerability
    perform strict input validation of the domain against an allowlist of approved
    domains. Notify a user in your application that they are leaving the website.
    Display a domain where they are redirected to the user. A user can then either
    accept or deny the redirect to an untrusted site.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    technology:
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.browser.open-redirect-pathname.open-redirect-pathname
    shortlink: https://sg.run/PxnY
    semgrep.dev:
      rule:
        rule_id: lBUYKy
        version_id: LjT3Nk
        url: https://semgrep.dev/playground/r/LjT3Nk/javascript.browser.open-redirect-pathname.open-redirect-pathname
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern: $THIS. ... .location.pathname
      - pattern: location.pathname
  - label: CONCAT
    requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: |
          `...${$X}...`
      - pattern: |
          $F + $X
    - pattern-not: |
        `${$X}...`
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        `http://${$X}...`
    - pattern-not: |
        `https://${$X}...`
    - pattern-not: |
        `//${$X}...`
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
  pattern-sinks:
  - requires: TAINTED and not CONCAT
    patterns:
    - pattern-either:
      - pattern: location.href = $SINK
      - pattern: $THIS. ... .location.href = $SINK
      - pattern: location.replace($SINK)
      - pattern: $THIS. ... .location.replace($SINK)
      - pattern: location = $SINK
      - pattern: $WINDOW. ... .location = $SINK
      - pattern: window. ... .open($SINK)
      - pattern: this. ... .window.open($SINK)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
- id: java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in Java, it is possible to adopt prepared statements by using
    the `java.sql.PreparedStatement` class with bind variables.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli
    shortlink: https://sg.run/QqrQ
    semgrep.dev:
      rule:
        rule_id: pKU01W
        version_id: RGTL8B
        url: https://semgrep.dev/playground/r/RGTL8B/java.spring.security.jdbctemplate-sqli.jdbctemplate-sqli
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SQL
    - pattern-inside: (org.springframework.jdbc.core.JdbcTemplate $JT).$METHOD($SQL,
        ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(batchUpdate|execute|query|queryForList|queryForMap|queryForObject|queryForRowSet|queryForStream|update)$
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: java.spring.security.jdo-sqli.jdo-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in Java, it is possible to adopt prepared statements by using
    the `java.sql.PreparedStatement` class with bind variables.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.jdo-sqli.jdo-sqli
    shortlink: https://sg.run/30qp
    semgrep.dev:
      rule:
        rule_id: 2ZUvzg
        version_id: A8TdKx
        url: https://semgrep.dev/playground/r/A8TdKx/java.spring.security.jdo-sqli.jdo-sqli
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SQL
    - pattern-either:
      - pattern: (javax.jdo.PersistenceManager $PM).newQuery(..., $SQL)
      - pattern: (javax.jdo.Query $Q).setFilter($SQL, ...)
      - pattern: (javax.jdo.Query $Q).setGrouping($SQL, ...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: java.spring.security.jpa-sqli.jpa-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in Java, it is possible to adopt prepared statements by using
    the `java.sql.PreparedStatement` class with bind variables.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.jpa-sqli.jpa-sqli
    shortlink: https://sg.run/4Kbz
    semgrep.dev:
      rule:
        rule_id: X5UzQv
        version_id: BjTZl4
        url: https://semgrep.dev/playground/r/BjTZl4/java.spring.security.jpa-sqli.jpa-sqli
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SQL
    - pattern-either:
      - pattern: (javax.persistence.EntityManager $EM).createQuery($SQL,...)
      - pattern: (javax.persistence.EntityManager $EM).createNativeQuery($SQL,...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags
  patterns:
  - pattern: |
      resource "aws_ecr_repository" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_ecr_repository" $ANYTHING {
        ...
        image_tag_mutability = "IMMUTABLE"
        ...
      }
  message: The ECR repository allows tag mutability. Image tags could be overwritten
    with compromised images. ECR images should be set to IMMUTABLE to prevent code
    injection through image mutation. This can be done by setting `image_tag_mutability`
    to IMMUTABLE.
  languages:
  - hcl
  severity: WARNING
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ecr_repository#image_tag_mutability
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags
    shortlink: https://sg.run/ZEeL
    semgrep.dev:
      rule:
        rule_id: KxUB4o
        version_id: l4TO2x
        url: https://semgrep.dev/playground/r/l4TO2x/terraform.aws.security.aws-ecr-mutable-image-tags.aws-ecr-mutable-image-tags
        origin: community
- id: python.aws-lambda.security.pymysql-sqli.pymysql-sqli
  languages:
  - python
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `cursor.execute(''SELECT
    * FROM projects WHERE status = %s'', (''active''))`'
  mode: taint
  metadata:
    references:
    - https://pypi.org/project/PyMySQL/#id4
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - pymysql
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.pymysql-sqli.pymysql-sqli
    shortlink: https://sg.run/reve
    semgrep.dev:
      rule:
        rule_id: JDUlel
        version_id: LjTvb9
        url: https://semgrep.dev/playground/r/LjTvb9/python.aws-lambda.security.pymysql-sqli.pymysql-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern: $CURSOR.execute($QUERY,...)
    - pattern-either:
      - pattern-inside: |
          import pymysql
          ...
      - pattern-inside: |
          import pymysql.cursors
          ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  severity: WARNING
- id: python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli
  languages:
  - python
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `cursor.execute(''SELECT
    * FROM projects WHERE status = ?'', ''active'')`'
  mode: taint
  metadata:
    references:
    - https://docs.sqlalchemy.org/en/14/core/connections.html#sqlalchemy.engine.Connection.execute
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - sqlalchemy
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli
    shortlink: https://sg.run/b48W
    semgrep.dev:
      rule:
        rule_id: 5rUy3N
        version_id: 8KTwkn
        url: https://semgrep.dev/playground/r/8KTwkn/python.aws-lambda.security.sqlalchemy-sqli.sqlalchemy-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern: $CURSOR.execute($QUERY,...)
    - pattern-inside: |
        import sqlalchemy
        ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  severity: WARNING
- id: csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $LIFETIME = $FALSE
      - pattern-inside: new TokenValidationParameters {...}
    - patterns:
      - pattern: |
          (TokenValidationParameters $OPTS). ... .$LIFETIME = $FALSE
  - metavariable-regex:
      metavariable: $LIFETIME
      regex: (RequireExpirationTime|ValidateLifetime)
  - metavariable-regex:
      metavariable: $FALSE
      regex: (false)
  - focus-metavariable: $FALSE
  fix: |
    true
  message: The TokenValidationParameters.$LIFETIME is set to $FALSE, this means the
    JWT tokens lifetime is not validated. This can lead to an JWT token being used
    after it has expired, which has security implications. It is recommended to validate
    the JWT lifetime to ensure only valid tokens are used.
  metadata:
    category: security
    technology:
    - csharp
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-613: Insufficient Session Expiration'
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
    - https://cwe.mitre.org/data/definitions/613.html
    - https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.tokens.tokenvalidationparameters?view=azure-dotnet
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation
    shortlink: https://sg.run/KA0d
    semgrep.dev:
      rule:
        rule_id: bwU5kK
        version_id: 1QTqdb
        url: https://semgrep.dev/playground/r/1QTqdb/csharp.lang.security.ad.jwt-tokenvalidationparameters-no-expiry-validation.jwt-tokenvalidationparameters-no-expiry-validation
        origin: community
  languages:
  - csharp
  severity: WARNING
- id: javascript.express.security.express-data-exfiltration.express-data-exfiltration
  message: Depending on the context, user control data in `Object.assign` can cause
    web response to include data that it should not have or can lead to a mass assignment
    vulnerability.
  metadata:
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://en.wikipedia.org/wiki/Mass_assignment_vulnerability
    - https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html
    category: security
    technology:
    - express
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-data-exfiltration.express-data-exfiltration
    shortlink: https://sg.run/pkpL
    semgrep.dev:
      rule:
        rule_id: ReUo60
        version_id: kbTZGr
        url: https://semgrep.dev/playground/r/kbTZGr/javascript.express.security.express-data-exfiltration.express-data-exfiltration
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - pattern: Object.assign(...)
- id: javascript.lang.security.insecure-object-assign.insecure-object-assign
  message: Depending on the context, user control data in `Object.assign` can cause
    web response to include data that it should not have or can lead to a mass assignment
    vulnerability.
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html
    - https://en.wikipedia.org/wiki/Mass_assignment_vulnerability
    category: security
    technology:
    - javascript
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.insecure-object-assign.insecure-object-assign
    shortlink: https://sg.run/2R0D
    semgrep.dev:
      rule:
        rule_id: AbUGOq
        version_id: LjTdRg
        url: https://semgrep.dev/playground/r/LjTdRg/javascript.lang.security.insecure-object-assign.insecure-object-assign
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: JSON.parse(...)
    - pattern-not: JSON.parse("...",...)
  pattern-sinks:
  - pattern: Object.assign(...)
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
  message: If unverified user data can reach the `compileScript` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - chrome-remote-interface
    references:
    - https://github.com/cyrus-and/chrome-remote-interface
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
    shortlink: https://sg.run/J9kj
    semgrep.dev:
      rule:
        rule_id: qNUjnb
        version_id: 5PTYGR
        url: https://semgrep.dev/playground/r/5PTYGR/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-compilescript-injection.chrome-remote-interface-compilescript-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: function ... (..., $ARG,...) {...}
    - focus-metavariable: $ARG
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('chrome-remote-interface');
          ...
      - pattern-inside: |
          import 'chrome-remote-interface';
          ...
    - pattern-either:
      - pattern: |
          $RUNTIME.compileScript({expression: $SINK},...)
      - pattern: |
          $RUNTIME.evaluate({expression: $SINK},...)
      - pattern: |
          $PAGE.navigate({url: $SINK},...)
      - pattern: |
          $RUNTIME.printToPDF({headerTemplate: $SINK},...)
      - pattern: |
          $RUNTIME.printToPDF({footerTemplate: $SINK},...)
      - pattern: |
          $PAGE.setDocumentContent({html: $SINK},...)
    - focus-metavariable: $SINK
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
  message: this rule has been deprecated.
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - chrome-remote-interface
    references:
    - https://github.com/cyrus-and/chrome-remote-interface
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
    shortlink: https://sg.run/5QBD
    semgrep.dev:
      rule:
        rule_id: lBU9O8
        version_id: GxTWX3
        url: https://semgrep.dev/playground/r/GxTWX3/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-evaluate-injection.chrome-remote-interface-evaluate-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
  message: this rule has been deprecated.
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - chrome-remote-interface
    references:
    - https://github.com/cyrus-and/chrome-remote-interface
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
    shortlink: https://sg.run/Gery
    semgrep.dev:
      rule:
        rule_id: YGUR0A
        version_id: RGTwx7
        url: https://semgrep.dev/playground/r/RGTwx7/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-navigate-injection.chrome-remote-interface-navigate-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
  message: this rule has been deprecated.
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - chrome-remote-interface
    references:
    - https://github.com/cyrus-and/chrome-remote-interface
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
    shortlink: https://sg.run/RoJg
    semgrep.dev:
      rule:
        rule_id: 6JUjgD
        version_id: A8TnlD
        url: https://semgrep.dev/playground/r/A8TnlD/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-printtopdf-injection.chrome-remote-interface-printtopdf-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
  message: this rule has been deprecated.
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - chrome-remote-interface
    references:
    - https://github.com/cyrus-and/chrome-remote-interface
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
    shortlink: https://sg.run/Av2L
    semgrep.dev:
      rule:
        rule_id: oqUeEK
        version_id: BjTGLR
        url: https://semgrep.dev/playground/r/BjTGLR/javascript.chrome-remote-interface.security.audit.chrome-remote-interface-setdocumentcontent-injection.chrome-remote-interface-setdocumentcontent-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
  message: Make sure that unverified user data can not reach `sandbox`.
  metadata:
    owasp:
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - express
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
    shortlink: https://sg.run/KlwL
    semgrep.dev:
      rule:
        rule_id: j2UvXB
        version_id: d6Tbx0
        url: https://semgrep.dev/playground/r/d6Tbx0/javascript.express.security.express-sandbox-injection.express-sandbox-code-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $SANDBOX = require('sandbox');
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $S = new $SANDBOX(...);
            ...
        - pattern: |
            $S.run(...)
      - pattern: |
          new $SANDBOX($OPTS).run(...)
      - pattern: new $SANDBOX().run(...)
- id: javascript.express.security.express-vm-injection.express-vm-injection
  message: Make sure that unverified user data can not reach `$VM`.
  metadata:
    owasp:
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - express
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-vm-injection.express-vm-injection
    shortlink: https://sg.run/jkqJ
    semgrep.dev:
      rule:
        rule_id: DbUKPX
        version_id: ZRTyA8
        url: https://semgrep.dev/playground/r/ZRTyA8/javascript.express.security.express-vm-injection.express-vm-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $VM = require('vm');
        ...
    - pattern-either:
      - pattern: |
          $VM.runInContext(...)
      - pattern: |
          $VM.runInNewContext(...)
      - pattern: |
          $VM.compileFunction(...)
      - pattern: |
          $VM.runInThisContext(...)
      - pattern: new $VM.Script(...)
- id: javascript.express.security.express-vm2-injection.express-vm2-injection
  message: Make sure that unverified user data can not reach `vm2`.
  metadata:
    owasp:
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - express
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-vm2-injection.express-vm2-injection
    shortlink: https://sg.run/1GWv
    semgrep.dev:
      rule:
        rule_id: WAUPXJ
        version_id: nWTwLj
        url: https://semgrep.dev/playground/r/nWTwLj/javascript.express.security.express-vm2-injection.express-vm2-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require('vm2')
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $VM = new VM(...)
              ...
          - pattern-inside: |
              $VM = new NodeVM(...)
              ...
        - pattern: |
            $VM.run(...)
      - pattern: |
          new VM(...).run(...)
      - pattern: |
          new NodeVM(...).run(...)
      - pattern: |
          new VMScript(...)
      - pattern: |
          new VM(...)
      - pattern: new NodeVM(...)
- id: generic.secrets.security.detected-jwt-token.detected-jwt-token
  pattern-regex: eyJ[A-Za-z0-9-_=]{14,}\.[A-Za-z0-9-_=]{13,}\.?[A-Za-z0-9-_.+/=]*?
  languages:
  - regex
  message: JWT token detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/jwt.py
    category: security
    technology:
    - secrets
    - jwt
    confidence: LOW
    references:
    - https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    cwe:
    - 'CWE-321: Use of Hard-coded Cryptographic Key'
    owasp:
    - A02:2021 - Cryptographic Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-jwt-token.detected-jwt-token
    shortlink: https://sg.run/05N5
    semgrep.dev:
      rule:
        rule_id: kxU8E8
        version_id: gETLKX
        url: https://semgrep.dev/playground/r/gETLKX/generic.secrets.security.detected-jwt-token.detected-jwt-token
        origin: community
- id: generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key
  pattern-regex: SG\.[a-zA-Z0-9]{22}\.[a-zA-Z0-9-]{43}\b
  languages:
  - regex
  message: SendGrid API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/narendrakadali/gitrob/blob/master/rules/contentsignatures.json
    category: security
    technology:
    - secrets
    - sendgrid
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key
    shortlink: https://sg.run/qqOy
    semgrep.dev:
      rule:
        rule_id: x8U2EG
        version_id: WrTk0l
        url: https://semgrep.dev/playground/r/WrTk0l/generic.secrets.security.detected-sendgrid-api-key.detected-sendgrid-api-key
        origin: community
- id: generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key
  pattern-regex: (?i)snyk.{0,50}['|"|`]?[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}['"\s]?
  languages:
  - regex
  message: Snyk API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    category: security
    technology:
    - secrets
    - snyk
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key
    shortlink: https://sg.run/lxO9
    semgrep.dev:
      rule:
        rule_id: OrUD9J
        version_id: qkT93b
        url: https://semgrep.dev/playground/r/qkT93b/generic.secrets.security.detected-snyk-api-key.detected-snyk-api-key
        origin: community
- id: generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key
  pattern-regex: (?i)softlayer.{0,50}["|'|`]?[a-z0-9]{64}["|'|`]?
  languages:
  - regex
  message: SoftLayer API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/softlayer.py
    category: security
    technology:
    - secrets
    - softlayer
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key
    shortlink: https://sg.run/YXq4
    semgrep.dev:
      rule:
        rule_id: eqUplZ
        version_id: l4TeG8
        url: https://semgrep.dev/playground/r/l4TeG8/generic.secrets.security.detected-softlayer-api-key.detected-softlayer-api-key
        origin: community
- id: problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
  message: Checks for setting the environment variable NODE_TLS_REJECT_UNAUTHORIZED
    to 0, which disables TLS verification. This should only be used for debugging
    purposes. Setting the option rejectUnauthorized to false bypasses verification
    against the list of trusted CAs, which also leads to insecure transport. These
    options lead to vulnerability to MTM attacks, and should not be used.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://nodejs.org/api/https.html#https_https_request_options_callback
    - https://stackoverflow.com/questions/20433287/node-js-request-cert-has-expired#answer-29397100
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
    shortlink: https://sg.run/9oxr
    semgrep.dev:
      rule:
        rule_id: OrU3Y6
        version_id: K3T6Qx
        url: https://semgrep.dev/playground/r/K3T6Qx/problem-based-packs.insecure-transport.js-node.bypass-tls-verification.bypass-tls-verification
        origin: community
  languages:
  - javascript
  - typescript
  pattern-either:
  - pattern: |
      process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
  - pattern: |
      {rejectUnauthorized:false}
- id: problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
  message: Detects direct creations of $HTTPS servers that don't disallow SSL v2,
    SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man in the middle
    attacks, and other vulnerabilities.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
    - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
    - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
    shortlink: https://sg.run/ydpP
    semgrep.dev:
      rule:
        rule_id: eqU8nr
        version_id: qkTPe3
        url: https://semgrep.dev/playground/r/qkTPe3/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions1.disallow-old-tls-versions1
        origin: community
  languages:
  - javascript
  - typescript
  patterns:
  - pattern-either:
    - pattern-inside: |
        $CONST = require('crypto');
        ...
    - pattern-inside: |
        $CONST = require('constants');
        ...
  - pattern-inside: |
      $HTTPS = require('https');
      ...
  - pattern: |
      $HTTPS.createServer(...).$FUNC(...);
  - pattern-not: |
      $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 }, ...).$FUNC(...);
  - pattern-not: |
      $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 }, ...).$FUNC(...);
  - pattern-not: |
      $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_SSLv3 |$CONST.SSL_OP_NO_TLSv1 }, ...).$FUNC(...);
  - pattern-not: |
      $HTTPS.createServer({secureOptions: $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3}, ...).$FUNC(...);
  - pattern-not: |
      $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 |$CONST.SSL_OP_NO_TLSv1}, ...).$FUNC(...);
  - pattern-not: |
      $HTTPS.createServer({secureOptions:$CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1| $CONST.SSL_OP_NO_SSLv2}, ...).$FUNC(...);
- id: problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
  message: Detects creations of $HTTPS servers from option objects that don't disallow
    SSL v2, SSL v3, and TLS v1. These protocols are deprecated due to POODLE, man
    in the middle attacks, and other vulnerabilities.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://us-cert.cisa.gov/ncas/alerts/TA14-290A
    - https://stackoverflow.com/questions/40434934/how-to-disable-the-ssl-3-0-and-tls-1-0-in-nodejs
    - https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
    shortlink: https://sg.run/rdKe
    semgrep.dev:
      rule:
        rule_id: v8UnPO
        version_id: l4TA2n
        url: https://semgrep.dev/playground/r/l4TA2n/problem-based-packs.insecure-transport.js-node.disallow-old-tls-versions2.disallow-old-tls-versions2
        origin: community
  languages:
  - javascript
  - typescript
  patterns:
  - pattern-either:
    - pattern-inside: |
        $CONST = require('crypto');
        ...
    - pattern-inside: |
        $CONST = require('constants');
        ...
  - pattern-inside: |
      $HTTPS = require('https');
      ...
  - pattern: |
      $OPTIONS = {};
      ...
      $HTTPS.createServer($OPTIONS, ...);
  - pattern-not: |
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2};
      ...
      $HTTPS.createServer($OPTIONS, ...);
  - pattern-not: |
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3};
      ...
      $HTTPS.createServer($OPTIONS, ...);
  - pattern-not: |
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2  | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv3};
      ...
      $HTTPS.createServer($OPTIONS, ...);
  - pattern-not: |
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1};
      ...
      $HTTPS.createServer($OPTIONS, ...);
  - pattern-not: |
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_SSLv2 | $CONST.SSL_OP_NO_TLSv1};
      ...
      $HTTPS.createServer($OPTIONS, ...);
  - pattern-not: |
      $OPTIONS = {secureOptions: $CONST.SSL_OP_NO_SSLv3 | $CONST.SSL_OP_NO_TLSv1 | $CONST.SSL_OP_NO_SSLv2};
      ...
      $HTTPS.createServer($OPTIONS, ...);
- id: problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
  message: 'Checks for lack of usage of the "secure: true" option when sending ftp
    requests through the nodejs ftp module. This leads to unencrypted traffic being
    sent to the ftp server. There are other options such as "implicit" that still
    does not encrypt all traffic. ftp is the most utilized npm ftp module.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://www.npmjs.com/package/ftp
    - https://openbase.io/js/ftp
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
    shortlink: https://sg.run/b7QW
    semgrep.dev:
      rule:
        rule_id: d8UjZ6
        version_id: YDTKO0
        url: https://semgrep.dev/playground/r/YDTKO0/problem-based-packs.insecure-transport.js-node.ftp-request.ftp-request
        origin: community
  languages:
  - javascript
  - typescript
  patterns:
  - pattern-inside: |
      $X = require('ftp');
      ...
      $C = new $X();
      ...
  - pattern-not-inside: |
      $OPTIONS = {secure: true};
      ...
  - pattern: |
      $C.connect($OPTIONS,...);
  - pattern-not: |
      $C.connect({...,secure: true});
- id: problem-based-packs.insecure-transport.js-node.http-request.http-request
  message: Checks for requests sent to http:// URLs. This is dangerous as the server
    is attempting to connect to a website that does not encrypt traffic with TLS.
    Instead, only send requests to https:// URLs.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://nodejs.org/api/http.html#http_http_request_options_callback
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.http-request.http-request
    shortlink: https://sg.run/N4Qy
    semgrep.dev:
      rule:
        rule_id: ZqU5r3
        version_id: JdTYeR
        url: https://semgrep.dev/playground/r/JdTYeR/problem-based-packs.insecure-transport.js-node.http-request.http-request
        origin: community
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      $HTTP = require('http');
      ...
  - pattern-either:
    - pattern: |
        $HTTP.request("=~/http://.*/",...);
    - pattern: |
        $HTTP.get("=~/http://.*/", ...)
    - pattern: |
        $VAR = new URL("=~/http://.*/");
        ...
        $HTTP.request($VAR, ...);
    - pattern: |
        $VAR = {...,hostname: "..."};
        ...
        $HTTP.request(..., $VAR, ...);
    - pattern: |
        $HTTP.request(..., {...,hostname: "..."}, ...);
  - pattern-not: |
      $VAR = {...,protocol: "https"};
      ...
      $HTTP.request(..., $VAR, ...);
  - pattern-not: |
      $HTTP.request(..., {...,protocol: "https"}, ...);
- id: problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
  message: Checks for requests to http (unencrypted) sites using some of node js's
    most popular REST/HTTP libraries, including node-rest-client, axios, and got.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://www.npmjs.com/package/axios
    - https://www.npmjs.com/package/got
    - https://www.npmjs.com/package/node-rest-client
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
    shortlink: https://sg.run/kXGP
    semgrep.dev:
      rule:
        rule_id: nJUzKP
        version_id: 5PT231
        url: https://semgrep.dev/playground/r/5PT231/problem-based-packs.insecure-transport.js-node.rest-http-client-support.rest-http-client-support
        origin: community
  languages:
  - javascript
  patterns:
  - pattern-either:
    - pattern-inside: |
        $CLIENT = require('node-rest-client').Client;
        ...
        $C = new $CLIENT();
        ...
    - pattern-inside: |
        $C = require('axios');
        ...
    - pattern-inside: |
        $C = require('got');
        ...
  - pattern-either:
    - pattern: |
        $C.$REQ("=~/http://.*/", ...)
    - pattern: |
        $C("=~/http://.*/", ...)
    - pattern: |
        $C({...,url: "=~/http://.*/"})
    - pattern: |
        $C.$REQ({...,url: "=~/http://.*/"})
- id: problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
  message: Checks for creation of telnet servers or attempts to connect through telnet.
    This is insecure as the telnet protocol supports no encryption, and data passes
    through unencrypted.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://www.npmjs.com/package/telnet
    - https://www.npmjs.com/package/telnet-client
    subcategory:
    - vuln
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
    shortlink: https://sg.run/weoA
    semgrep.dev:
      rule:
        rule_id: EwU2GA
        version_id: GxTKJR
        url: https://semgrep.dev/playground/r/GxTKJR/problem-based-packs.insecure-transport.js-node.telnet-request.telnet-request
        origin: community
  languages:
  - javascript
  patterns:
  - pattern-either:
    - pattern-inside: |
        $TEL = require('telnet-client');
        ...
        $SERVER = new $TEL();
        ...
    - pattern-inside: |
        $SERVER = require('telnet');
        ...
  - pattern-either:
    - pattern: |
        $SERVER.on(...)
    - pattern: |
        $SERVER.connect(...)
    - pattern: |
        $SERVER.createServer(...)
- id: problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
  message: Checks for any usage of http servers instead of https servers. Encourages
    the usage of https protocol instead of http, which does not have TLS and is therefore
    unencrypted. Using http can lead to man-in-the-middle attacks in which the attacker
    is able to read sensitive information.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A02:2021 - Cryptographic Failures
    - A03:2017 - Sensitive Data Exposure
    references:
    - https://nodejs.org/api/http.html#http_class_http_agent
    - https://groups.google.com/g/rubyonrails-security/c/NCCsca7TEtY
    subcategory:
    - audit
    technology:
    - node.js
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
    shortlink: https://sg.run/x1zL
    semgrep.dev:
      rule:
        rule_id: 7KUQAE
        version_id: 0bTk8o
        url: https://semgrep.dev/playground/r/0bTk8o/problem-based-packs.insecure-transport.js-node.using-http-server.using-http-server
        origin: community
  languages:
  - javascript
  patterns:
  - pattern-inside: |
      $HTTP = require('http');
      ...
  - pattern-either:
    - pattern: |
        $HTTP.$FUNC(...);
    - pattern: |
        new $HTTP.$FUNC2(...);
  - pattern: $HTTP
- id: java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request
  message: Detected input from a HTTPServletRequest going into a 'ProcessBuilder'
    or 'exec' command. This could lead to command injection if variables passed into
    the exec commands are not properly sanitized. Instead, avoid using these OS commands
    with user-supplied input, or, if you must use these commands, use a whitelist
    of specific values.
  languages:
  - java
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ)
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (ProcessBuilder $PB) = ...;
      - pattern: |
          (Process $P) = ...;
      - patterns:
        - pattern-either:
          - pattern-inside: "(java.util.List<$TYPE> $ARGLIST) = ...;  \n...\n(ProcessBuilder
              $PB) = ...;\n...\n$PB.command($ARGLIST);\n"
          - pattern-inside: "(java.util.List<$TYPE> $ARGLIST) = ...;  \n...\n(ProcessBuilder
              $PB) = ...;\n"
          - pattern-inside: "(java.util.List<$TYPE> $ARGLIST) = ...;  \n...\n(Process
              $P) = ...;\n"
        - pattern: |
            $ARGLIST.add(...);
  metadata:
    category: security
    technology:
    - java
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request
    shortlink: https://sg.run/8zPN
    semgrep.dev:
      rule:
        rule_id: zdUWrg
        version_id: gETQgp
        url: https://semgrep.dev/playground/r/gETQgp/java.lang.security.audit.tainted-cmd-from-http-request.tainted-cmd-from-http-request
        origin: community
- id: java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
  message: Detected input from a HTTPServletRequest going into a session command,
    like `setAttribute`. User input into such a command could lead to an attacker
    inputting malicious code into your session parameters, blurring the line between
    what's trusted and untrusted, and therefore leading to a trust boundary violation.
    This could lead to programmers trusting unvalidated data. Instead, thoroughly
    sanitize user input before passing it into such function calls.
  languages:
  - java
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            (HttpServletRequest $REQ).$FUNC(...)
        - pattern-not: |
            (HttpServletRequest $REQ).getSession()
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(... );
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
      - patterns:
        - pattern-inside: |
            $HEADERS = (HttpServletRequest $REQ).getHeaders(...);
            ...
            $PARAM = $HEADERS.$FUNC(...);
            ...
        - pattern: |
            java.net.URLDecoder.decode($PARAM, ...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).getSession().$FUNC(...);
  metadata:
    category: security
    technology:
    - java
    cwe:
    - 'CWE-501: Trust Boundary Violation'
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
    shortlink: https://sg.run/QbDZ
    semgrep.dev:
      rule:
        rule_id: 2ZU7Eo
        version_id: QkTedR
        url: https://semgrep.dev/playground/r/QkTedR/java.lang.security.audit.tainted-session-from-http-request.tainted-session-from-http-request
        origin: community
- id: java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request
  message: Detected input from a HTTPServletRequest going into a XPath evaluate or
    compile command. This could lead to xpath injection if variables passed into the
    evaluate or compile commands are not properly sanitized. Xpath injection could
    lead to unauthorized access to sensitive information in XML documents. Instead,
    thoroughly sanitize user input or use parameterized xpath queries if you can.
  languages:
  - java
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        (HttpServletRequest $REQ).$FUNC(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.xml.xpath.XPath $XP).evaluate(...)
      - pattern: |
          (javax.xml.xpath.XPath $XP).compile(...).evaluate(...)
  metadata:
    category: security
    technology:
    - java
    cwe:
    - 'CWE-643: Improper Neutralization of Data within XPath Expressions (''XPath
      Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request
    shortlink: https://sg.run/3BvK
    semgrep.dev:
      rule:
        rule_id: X5U5nj
        version_id: 3ZT0jK
        url: https://semgrep.dev/playground/r/3ZT0jK/java.lang.security.audit.tainted-xpath-from-http-request.tainted-xpath-from-http-request
        origin: community
- id: javascript.angular.security.detect-angular-element-taint.detect-angular-element-taint
  message: Use of angular.element can lead to XSS if user-input is treated as part
    of the HTML element within `$SINK`. It is recommended to contextually output encode
    user-input, before inserting into `$SINK`. If the HTML needs to be preserved it
    is recommended to sanitize the input using $sce.getTrustedHTML or $sanitize.
  metadata:
    confidence: MEDIUM
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://docs.angularjs.org/api/ng/function/angular.element
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angularjs
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-element-taint.detect-angular-element-taint
    shortlink: https://sg.run/5AQ0
    semgrep.dev:
      rule:
        rule_id: GdUP71
        version_id: GxTdry
        url: https://semgrep.dev/playground/r/GxTdry/javascript.angular.security.detect-angular-element-taint.detect-angular-element-taint
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: window.location.search
      - pattern: window.document.location.search
      - pattern: document.location.search
      - pattern: location.search
      - pattern: $location.search(...)
  - patterns:
    - pattern-either:
      - pattern: $DECODE(<... location.hash ...>)
      - pattern: $DECODE(<... window.location.hash ...>)
      - pattern: $DECODE(<... document.location.hash ...>)
      - pattern: $DECODE(<... location.href ...>)
      - pattern: $DECODE(<... window.location.href ...>)
      - pattern: $DECODE(<... document.location.href ...>)
      - pattern: $DECODE(<... document.URL ...>)
      - pattern: $DECODE(<... window.document.URL ...>)
      - pattern: $DECODE(<... document.location.href ...>)
      - pattern: $DECODE(<... document.location.href ...>)
      - pattern: $DECODE(<... $location.absUrl() ...>)
      - pattern: $DECODE(<... $location.url() ...>)
      - pattern: $DECODE(<... $location.hash() ...>)
    - metavariable-regex:
        metavariable: $DECODE
        regex: ^(unescape|decodeURI|decodeURIComponent)$
  - patterns:
    - pattern-inside: $http.$METHOD(...).$CONTINUE(function $FUNC($RES) {...})
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|delete|head|jsonp|post|put|patch)
    - pattern: $RES.data
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          angular.element(...). ... .$SINK($QUERY)
      - pattern-inside: |
          $ANGULAR = angular.element(...)
          ...
          $ANGULAR. ... .$SINK($QUERY)
    - metavariable-regex:
        metavariable: $SINK
        regex: ^(after|append|html|prepend|replaceWith|wrap)$
    - focus-metavariable: $QUERY
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $sce.getTrustedHtml(...)
      - pattern: $sanitize(...)
      - pattern: DOMPurify.sanitize(...)
- id: javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    - nodejs
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
    shortlink: https://sg.run/vz70
    semgrep.dev:
      rule:
        rule_id: QrUzq6
        version_id: 5PTgL6
        url: https://semgrep.dev/playground/r/5PTgL6/javascript.passport-jwt.security.passport-hardcode.hardcoded-passport-secret
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: |
          {..., clientSecret: "...", ...}
      - pattern: |
          {..., secretOrKey: "...", ...}
      - pattern: |
          {..., consumerSecret: "...", ...}
      - patterns:
        - pattern-inside: |
            $OBJ = {}
            ...
        - pattern-either:
          - pattern: |
              $OBJ.clientSecret = "..."
          - pattern: |
              $OBJ.secretOrKey = "..."
          - pattern: |
              $OBJ.consumerSecret = "..."
        - pattern: $OBJ
      - patterns:
        - pattern-inside: |
            $SECRET = '...'
            ...
        - pattern-either:
          - pattern: |
              {..., clientSecret: $SECRET, ...}
          - pattern: |
              {..., secretOrKey: $SECRET, ...}
          - pattern: |
              {..., consumerSecret: $SECRET, ...}
      - patterns:
        - pattern-inside: |
            $SECRET = '...'
            ...
        - pattern-either:
          - pattern-inside: |
              $VALUE = {..., clientSecret: $SECRET, ...}
              ...
          - pattern-inside: |
              $VALUE = {..., secretOrKey: $SECRET, ...}
              ...
          - pattern-inside: |
              $VALUE = {..., consumerSecret: $SECRET, ...}
              ...
        - pattern: $VALUE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $F = require("$I").Strategy
          ...
      - pattern-inside: |
          $F = require("$I")
          ...
      - pattern-inside: |
          import { $STRAT as $F } from '$I'
          ...
      - pattern-inside: |
          import $F from '$I'
          ...
    - metavariable-regex:
        metavariable: $I
        regex: (passport-.*)
    - pattern-inside: |
        new $F($VALUE,...)
    - focus-metavariable: $VALUE
- id: java.lang.security.xxe.validator-xxe.validator-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $PARSER with `$PARSER.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""). For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.validator-xxe.validator-xxe
    shortlink: https://sg.run/6lJB
    semgrep.dev:
      rule:
        rule_id: GdUkvP
        version_id: JdTjZQ
        url: https://semgrep.dev/playground/r/JdTjZQ/java.lang.security.xxe.validator-xxe.validator-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      (javax.xml.validation.Validator $PARSER) = ...
  - pattern-not-inside: |
      (javax.xml.validation.Validator $PARSER) = ...;
      ...
      $PARSER.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
  - pattern-not-inside: |
      (javax.xml.validation.Validator $PARSER) = ...;
      ...
      $PARSER.setFeature("=~/.*secure-processing.*/", true);
  - pattern-not-inside: |
      (javax.xml.validation.Validator $PARSER) = ...;
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      (javax.xml.validation.Validator $PARSER) = ...;
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
- id: terraform.aws.security.aws-sqs-queue-policy-wildcard-principal.aws-sqs-queue-policy-wildcard-principal
  patterns:
  - pattern-either:
    - pattern-inside: |
        resource "aws_sqs_queue_policy" $ANYTHING {
          ...
        }
    - pattern-inside: |
        resource "aws_sqs_queue" $ANYTHING {
          ...
        }
  - pattern-either:
    - patterns:
      - pattern: policy = "$JSONPOLICY"
      - metavariable-pattern:
          metavariable: $JSONPOLICY
          language: json
          patterns:
          - pattern-not-inside: |
              {..., "Effect": "Deny", ...}
          - pattern-either:
            - pattern: |
                {..., "Principal": "*", ...}
            - pattern: |
                {..., "Principal": [..., "*", ...], ...}
            - pattern: |
                {..., "Principal": { "AWS": "*" }, ...}
            - pattern: |
                {..., "Principal": { "AWS": [..., "*", ...] }, ...}
    - patterns:
      - pattern-inside: policy = jsonencode(...)
      - pattern-not-inside: |
          {..., Effect = "Deny", ...}
      - pattern-either:
        - pattern: |
            {..., Principal = "*", ...}
        - pattern: |
            {..., Principal = [..., "*", ...], ...}
        - pattern: |
            {..., Principal = { AWS = "*" }, ...}
        - pattern: |
            {..., Principal = { AWS = [..., "*", ...] }, ...}
  message: Wildcard used in your SQS queue policy principal. This grants access to
    all users, including anonymous users (public access). Unless you explicitly require
    anyone on the internet to be able to read or write to your queue, limit principals,
    actions and resources to what you need according to least privilege.
  metadata:
    category: security
    technology:
    - aws
    - terraform
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sqs_queue_policy
    - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-security-best-practices.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    rule-origin-note: published from /src/aws-sqs-queue-policy-wildcard-principal.yml
      in None
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-sqs-queue-policy-wildcard-principal.aws-sqs-queue-policy-wildcard-principal
    shortlink: https://sg.run/z3eW
    semgrep.dev:
      rule:
        rule_id: PeUl9d
        version_id: yeT79Q
        url: https://semgrep.dev/playground/r/yeT79Q/terraform.aws.security.aws-sqs-queue-policy-wildcard-principal.aws-sqs-queue-policy-wildcard-principal
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use HMAC
    instead.
  languages:
  - java
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-328: Use of Weak Hash'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils
    shortlink: https://sg.run/AWL2
    semgrep.dev:
      rule:
        rule_id: BYUGK0
        version_id: yeTbqQ
        url: https://semgrep.dev/playground/r/yeTbqQ/java.lang.security.audit.crypto.use-of-md5-digest-utils.use-of-md5-digest-utils
        origin: community
  patterns:
  - pattern: |
      $DU.$GET_ALGO().digest(...)
  - metavariable-pattern:
      metavariable: $GET_ALGO
      pattern: getMd5Digest
  - metavariable-pattern:
      metavariable: $DU
      pattern: DigestUtils
  - focus-metavariable: $GET_ALGO
  fix: |
    getSha512Digest
- id: python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
  patterns:
  - pattern: cryptography.hazmat.primitives.hashes.$SHA(...)
  - metavariable-pattern:
      metavariable: $SHA
      pattern: |
        SHA1
  - focus-metavariable: $SHA
  fix: |
    SHA256
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B303
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - cryptography
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
    shortlink: https://sg.run/J9Qy
    semgrep.dev:
      rule:
        rule_id: 0oU5dN
        version_id: DkToXW
        url: https://semgrep.dev/playground/r/DkToXW/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size
  patterns:
  - pattern-inside: cryptography.hazmat.primitives.asymmetric.ec.generate_private_key(...)
  - pattern: cryptography.hazmat.primitives.asymmetric.ec.$SIZE
  - metavariable-pattern:
      metavariable: $SIZE
      pattern-either:
      - pattern: SECP192R1
      - pattern: SECT163K1
      - pattern: SECT163R2
  - focus-metavariable: $SIZE
  fix: |
    SECP256R1
  message: Detected an insufficient curve size for EC. NIST recommends a key size
    of 224 or higher. For example, use 'ec.SECP256R1'.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    - https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ec/#elliptic-curves
    category: security
    technology:
    - cryptography
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size
    shortlink: https://sg.run/GeQq
    semgrep.dev:
      rule:
        rule_id: qNUjZ3
        version_id: WrT5GP
        url: https://semgrep.dev/playground/r/WrT5GP/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.xss.global-autoescape-off.global-autoescape-off
  message: 'Autoescape is globally disbaled for this Django application. If you are
    rendering any web pages, this exposes your application to cross-site scripting
    (XSS) vulnerabilities. Remove ''autoescape: False'' or set it to ''True''.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off
    shortlink: https://sg.run/LwG6
    semgrep.dev:
      rule:
        rule_id: 5rUOXK
        version_id: K3T985
        url: https://semgrep.dev/playground/r/K3T985/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern: |
      {..., 'BACKEND': ..., 'OPTIONS': {..., 'autoescape': $FALSE, ...}, ...}
  - metavariable-pattern:
      metavariable: $FALSE
      pattern: |
        False
  - focus-metavariable: $FALSE
  fix: |
    True
- id: html.security.plaintext-http-link.plaintext-http-link
  metadata:
    category: security
    technology:
    - html
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    confidence: HIGH
    subcategory:
    - vuln
    references:
    - https://cwe.mitre.org/data/definitions/319.html
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/html.security.plaintext-http-link.plaintext-http-link
    shortlink: https://sg.run/RA5q
    semgrep.dev:
      rule:
        rule_id: AbUnNo
        version_id: l4TqA1
        url: https://semgrep.dev/playground/r/l4TqA1/html.security.plaintext-http-link.plaintext-http-link
        origin: community
  patterns:
  - pattern: <a href="$URL">...</a>
  - metavariable-regex:
      metavariable: $URL
      regex: ^(?i)http://
  message: This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL
    if possible.
  severity: WARNING
  languages:
  - html
- id: ruby.rails.security.injection.tainted-sql-string.tainted-sql-string
  languages:
  - ruby
  severity: ERROR
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as ActiveRecord which will protect your queries.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - rails
    references:
    - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    source: https://semgrep.dev/r/ruby.rails.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/Y85o
    semgrep.dev:
      rule:
        rule_id: bwU8gl
        version_id: K3TPRl
        url: https://semgrep.dev/playground/r/K3TPRl/ruby.rails.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: params
      - pattern: request
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              $RECORD.where($X,...)
          - pattern: |
              $RECORD.find(..., :conditions => $X,...)
        - focus-metavariable: $X
      - patterns:
        - pattern: |
            "$SQLVERB#{$EXPR}..."
        - pattern-not-inside: |
            $FUNC("...",  "...#{$EXPR}...",...)
        - focus-metavariable: $SQLVERB
        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\b
      - patterns:
        - pattern-either:
          - pattern: Kernel::sprintf("$SQLSTR", $EXPR)
          - pattern: |
              "$SQLSTR" + $EXPR
          - pattern: |
              "$SQLSTR" % $EXPR
        - pattern-not-inside: |
            $FUNC("...",  "...#{$EXPR}...",...)
        - focus-metavariable: $EXPR
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(select|delete|insert|create|update|alter|drop)\b
- id: javascript.express.security.injection.tainted-sql-string.tainted-sql-string
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    technology:
    - express
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/javascript.express.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/66ZL
    semgrep.dev:
      rule:
        rule_id: NbUNpr
        version_id: BjTOyR
        url: https://semgrep.dev/playground/r/BjTOyR/javascript.express.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
      - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              "$SQLSTR" + $EXPR
          - pattern-inside: |
              "$SQLSTR".concat($EXPR)
          - pattern: util.format($SQLSTR, $EXPR)
          - pattern: |
              `$SQLSTR${$EXPR}...`
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
    - focus-metavariable: $EXPR
- id: java.spring.security.objectinputstream-deserialization-spring.objectinputstream-deserialization-spring
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `ObjectInputStream`.
    If you must, you can try overriding the `ObjectInputStream#resolveClass()` method
    or using a safe replacement for the generic `readObject()` method.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - serialization
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.objectinputstream-deserialization-spring.objectinputstream-deserialization-spring
    shortlink: https://sg.run/n1rY
    semgrep.dev:
      rule:
        rule_id: x8UbG3
        version_id: nWTRWp
        url: https://semgrep.dev/playground/r/nWTRWp/java.spring.security.objectinputstream-deserialization-spring.objectinputstream-deserialization-spring
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          new ObjectInputStream($IN)
      - pattern: |
          new java.io.ObjectInputStream($IN)
    - focus-metavariable: $IN
- id: java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the DocumentBuilder parser with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `factory.setExpandEntityReferences(false)`, `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`, `factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")`, or enabling
    both `factory.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` and `factory.setFeature("http://xml.org/sax/features/external-general-entities",
    false);`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet
    shortlink: https://sg.run/9jwY
    semgrep.dev:
      rule:
        rule_id: ZqUJvb
        version_id: BjTAG1
        url: https://semgrep.dev/playground/r/BjTAG1/java.servlets.security.xxe.tainted-documentbuilderfactory-xxe-servlet.tainted-documentbuilderfactory-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: FACTORY
    patterns:
    - pattern-either:
      - pattern: (DocumentBuilderFactory $FACTORY)
      - pattern: DocumentBuilderFactory.newInstance(...)
  - label: DTD_DISABLED
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
          true);
      - pattern: $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $FACTORY
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  - label: ENTITY_RESOLVER
    by-side-effect: true
    patterns:
    - pattern: (DocumentBuilder $PARSER).setEntityResolver(...);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $FACTORY
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and FACTORY) and not (DTD_DISABLED or FSP or ENTITY_RESOLVER
      or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (DocumentBuilder $PARSER).parse(...)
- id: java.servlets.security.xxe.tainted-saxparser-xxe-servlet.tainted-saxparser-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the SAXParserFactory with `factory.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations for the SAXParserFactory also
    provide protection against XXE attacks. `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`, enabling both of `factory.setFeature("http://xml.org/sax/features/external-general-entities",
    and `factory.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. Furthermore, you can configure the SAXParser itself with `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,
    "")` to provide protection against XXE attacks. For more information, see: [Java
    XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-saxparser-xxe-servlet.tainted-saxparser-xxe-servlet
    shortlink: https://sg.run/rqgn
    semgrep.dev:
      rule:
        rule_id: EwUb30
        version_id: WrTw63
        url: https://semgrep.dev/playground/r/WrTw63/java.servlets.security.xxe.tainted-saxparser-xxe-servlet.tainted-saxparser-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SAXPARSER
    pattern: (SAXParser $PARSER)
  - label: DTD_DISABLED
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  - label: DOCTYPE_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $FACTORY
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $FACTORY
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and SAXPARSER) and not (DTD_DISABLED or DOCTYPE_DISABLED
      or FSP or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (SAXParser $PARSER).parse(...)
- id: java.servlets.security.xxe.tainted-saxreader-xxe-servlet.tainted-saxreader-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the SAXReader parser with `parser.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, configuring both of the below also provides protection
    against XXE attacks. `parser.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` `praser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-saxreader-xxe-servlet.tainted-saxreader-xxe-servlet
    shortlink: https://sg.run/bEqp
    semgrep.dev:
      rule:
        rule_id: 7KUwj9
        version_id: 0bTX6K
        url: https://semgrep.dev/playground/r/0bTX6K/java.servlets.security.xxe.tainted-saxreader-xxe-servlet.tainted-saxreader-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SAXREADER
    patterns:
    - pattern: (SAXReader $PARSER)
  - label: DOCTYPE_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $PARSER
  - label: ENTITY_RESOLVER
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setEntityResolver(...);
    - focus-metavariable: $PARSER
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and SAXREADER) and not (DOCTYPE_DISABLED or ENTITY_RESOLVER
      or (PARAM_ENT_DISABLED and GEN_ENT_DISABLED))
    patterns:
    - pattern: (SAXReader $PARSER).read(...)
- id: java.servlets.security.xxe.tainted-saxtransformerfactory-xxe-servlet.tainted-saxtransformerfactory-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the parser with `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-saxtransformerfactory-xxe-servlet.tainted-saxtransformerfactory-xxe-servlet
    shortlink: https://sg.run/NXZp
    semgrep.dev:
      rule:
        rule_id: L1UJoe
        version_id: K3TXOo
        url: https://semgrep.dev/playground/r/K3TXOo/java.servlets.security.xxe.tainted-saxtransformerfactory-xxe-servlet.tainted-saxtransformerfactory-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SAXTRANSFORMER
    patterns:
    - pattern: (TransformerFactory $TF)
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and SAXTRANSFORMER) and not FSP
    patterns:
    - pattern-either:
      - pattern: (Transformer $T).transform(...)
      - pattern: (TransformerFactory $TF).newTransformer(...)
    - pattern-not: (Transformer $T).transform((DOMSource $S), ...)
- id: java.servlets.security.xxe.tainted-schemafactory-xxe-servlet.tainted-schemafactory-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the parser with `factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, enabling both of the following configurations also provides
    protection against XXE attacks. `factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,
    "")` and `factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "")`. For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-schemafactory-xxe-servlet.tainted-schemafactory-xxe-servlet
    shortlink: https://sg.run/kRj7
    semgrep.dev:
      rule:
        rule_id: 8GU07r
        version_id: qkTyKv
        url: https://semgrep.dev/playground/r/qkTyKv/java.servlets.security.xxe.tainted-schemafactory-xxe-servlet.tainted-schemafactory-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: SCHEMAFACTORY
    patterns:
    - pattern-either:
      - pattern: (SchemaFactory $FACTORY)
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $FACTORY.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $FACTORY
  - label: EXTERNAL_SCHEMA
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
      - pattern: $FACTORY.setProperty("=~/.*accessExternalSchema.*/", "");
    - focus-metavariable: $FACTORY
  - label: DTD
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $FACTORY.setProperty("=~/.*accessExternalDTD.*/", "");
      - pattern: $FACTORY.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
    - focus-metavariable: $FACTORY
  pattern-sinks:
  - requires: (USER_INPUT and SCHEMAFACTORY) and not (FSP or (DTD and EXTERNAL_SCHEMA))
    patterns:
    - pattern: (SchemaFactory $FACTORY).newSchema(...)
- id: javascript.express.session-fixation.session-fixation
  message: Detected `$REQ` argument which enters `$RES.$HEADER`, this can lead to
    session fixation vulnerabilities if an attacker can control the cookie value.
    This vulnerability can lead to unauthorized access to accounts, and in some esoteric
    cases, Cross-Site-Scripting (XSS). Users should not be able to influence cookies
    directly, for session cookies, they should be generated securely using an approved
    session management library. If the cookie does need to be set by a user, consider
    using an allow-list based approach to restrict the cookies which can be set.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-384: Session Fixation'
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    - https://owasp.org/www-community/attacks/Session_fixation
    technology:
    - javascript
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.session-fixation.session-fixation
    shortlink: https://sg.run/0qDv
    semgrep.dev:
      rule:
        rule_id: 10UnRQ
        version_id: 6xTgng
        url: https://semgrep.dev/playground/r/6xTgng/javascript.express.session-fixation.session-fixation
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{ $REQ }: Request,...) => {...}
      - pattern-inside: |
          (...,{ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$RES, ...) {...}
    - pattern-either:
      - patterns:
        - pattern: $RES.$HEADER("$COOKIE", $SOURCE)
        - metavariable-regex:
            metavariable: $COOKIE
            regex: ^(Set-Cookie|connect.sid|Cookie)$
        - metavariable-regex:
            metavariable: $HEADER
            regex: ^(setHeader)$
      - patterns:
        - pattern: |
            $RES.$HEADER('...',$SOURCE, ...);
        - metavariable-regex:
            metavariable: $HEADER
            regex: ^(cookie)$
    - focus-metavariable: $SOURCE
- id: java.servlets.security.tainted-xpath-from-http-request.tainted-xpath-from-http-request
  message: Detected input from a HTTPServletRequest going into a XPath evaluate or
    compile command. This could lead to xpath injection if variables passed into the
    evaluate or compile commands are not properly sanitized. Xpath injection could
    lead to unauthorized access to sensitive information in XML documents. Instead,
    thoroughly sanitize user input or use parameterized xpath queries if you can.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-643: Improper Neutralization of Data within XPath Expressions (''XPath
      Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/XPATH_Injection
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Finjection~2Fxpath
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-xpath-from-http-request.tainted-xpath-from-http-request
    shortlink: https://sg.run/LB1o
    semgrep.dev:
      rule:
        rule_id: 6JU2vX
        version_id: GxTXwn
        url: https://semgrep.dev/playground/r/GxTXwn/java.servlets.security.tainted-xpath-from-http-request.tainted-xpath-from-http-request
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.xml.xpath.XPath $XP).evaluate(...)
      - pattern: |
          (javax.xml.xpath.XPath $XP).compile(...).evaluate(...)
- id: javascript.browser.decoded-xss.decoded-xss
  message: Detected the use of a decoded Document/Location property that enters a
    dangerous web API. This can introduce a Cross-Site-Scripting (XSS) vulnerability
    if this comes from user-provided input. If you have to use a dangerous web API,
    consider using a sanitization library such as DOMPurify to sanitize the HTML before
    it is assigned.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.browser.decoded-xss.decoded-xss
    shortlink: https://sg.run/4oql
    semgrep.dev:
      rule:
        rule_id: qNUrdW
        version_id: PkT3zl
        url: https://semgrep.dev/playground/r/PkT3zl/javascript.browser.decoded-xss.decoded-xss
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern: location.hash
      - pattern: $THIS. ... .location.hash
      - pattern: location.pathname
      - pattern: $THIS. ... .location.pathname
      - pattern: $THIS. ... .location.href
      - pattern: location.href
      - pattern: location.search
      - pattern: $THIS. ... .location.search
      - pattern: $THIS. ... .document.baseURI
      - pattern: document.baseURI
      - pattern: $THIS. ... .document.documentURI
      - pattern: document.documentURI
  - label: DECODE
    requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: |
          decodeURIComponent($X)
      - pattern: |
          decodeURI($X)
      - pattern: |
          unescape($X)
    - focus-metavariable: $X
  pattern-sinks:
  - requires: DECODE
    patterns:
    - pattern-either:
      - pattern: $ELEMENT. ... .innerHTML = $X
      - pattern: $ELEMENT. ... .outerHTML = $X
      - pattern: document.write($X)
      - pattern: $THIS. ... .document.write($X)
      - pattern: document.writeln($X)
      - pattern: $THIS. ... .document.writeln($X)
      - pattern: $THIS. ... .insertAdjacentHTML(...,$X)
    - focus-metavariable: $X
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: python.aws-lambda.deserialization.tainted-jsonpickle-aws-lambda.tainted-jsonpickle-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `jsonpickle` module can execute arbitrary Python code. Do not load `jsonpickles`
    from untrusted sources. For deserializing data from untrusted sources we recommend
    using YAML or JSON libraries with built-in protections, such as json, PyYAML,
    or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.deserialization
    technology:
    - python
    - aws-lambda
    - json
    - jsonpickle
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-jsonpickle-aws-lambda.tainted-jsonpickle-aws-lambda
    shortlink: https://sg.run/6ogw
    semgrep.dev:
      rule:
        rule_id: kxUQ6P
        version_id: 44TdyG
        url: https://semgrep.dev/playground/r/44TdyG/python.aws-lambda.deserialization.tainted-jsonpickle-aws-lambda.tainted-jsonpickle-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: jsonpickle.unpickler.decode($SINK, ...)
      - pattern: jsonpickle.unpickler.loadclass($SINK, ...)
      - pattern: jsonpickle.unpickler.loadrepr($SINK)
      - pattern: jsonpickle.util.b64decode($SINK)
      - pattern: jsonpickle.util.b85decode($SINK)
      - patterns:
        - pattern-either:
          - pattern: $B.decode($SINK)
          - pattern: $B.loads($SINK)
        - pattern-inside: |
            $B = jsonpickle.backend.JSONBackend()
            ...
- id: python.aws-lambda.deserialization.tainted-marshal-aws-lambda.tainted-marshal-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `marshal` module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. For deserializing data from untrusted sources we recommend using YAML
    or JSON libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.audit.marshal-usage
    technology:
    - python
    - aws-lambda
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-marshal-aws-lambda.tainted-marshal-aws-lambda
    shortlink: https://sg.run/oQN7
    semgrep.dev:
      rule:
        rule_id: wdUqlo
        version_id: PkTy5n
        url: https://semgrep.dev/playground/r/PkTy5n/python.aws-lambda.deserialization.tainted-marshal-aws-lambda.tainted-marshal-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: marshal.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
- id: python.aws-lambda.deserialization.tainted-numpy-pickle-aws-lambda.tainted-numpy-pickle-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `numpy.load()` function allows `pickle` for object deserialization. This behaviour
    is turned off by default in version 1.16.3. Do not turn this on with `allow_pickle=True`
    when loading data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://numpy.org/doc/stable/reference/generated/numpy.load.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related_oss_rules:
    - trailofbits.python.pickles-in-numpy.pickles-in-numpy
    technology:
    - python
    - pickle
    - numpy
    - aws-lambda
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-numpy-pickle-aws-lambda.tainted-numpy-pickle-aws-lambda
    shortlink: https://sg.run/zQJz
    semgrep.dev:
      rule:
        rule_id: x8UlG5
        version_id: JdTj12
        url: https://semgrep.dev/playground/r/JdTj12/python.aws-lambda.deserialization.tainted-numpy-pickle-aws-lambda.tainted-numpy-pickle-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: numpy.load($SINK, ..., allow_pickle=True, ...)
- id: python.aws-lambda.deserialization.tainted-pandas-hdf-aws-lambda.tainted-pandas-hdf-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_hdf()` function uses `pickle` when the `fixed` format is used
    during serializing. This function should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_hdf.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - aws-lambda
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-pandas-hdf-aws-lambda.tainted-pandas-hdf-aws-lambda
    shortlink: https://sg.run/pQy3
    semgrep.dev:
      rule:
        rule_id: OrUAlY
        version_id: 5PTzJx
        url: https://semgrep.dev/playground/r/5PTzJx/python.aws-lambda.deserialization.tainted-pandas-hdf-aws-lambda.tainted-pandas-hdf-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_hdf($SINK, ...)
- id: python.aws-lambda.deserialization.tainted-pandas-pickle-aws-lambda.tainted-pandas-pickle-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_pickle()` function uses `pickle` for object deserialization and
    should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - aws-lambda
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-pandas-pickle-aws-lambda.tainted-pandas-pickle-aws-lambda
    shortlink: https://sg.run/2qpz
    semgrep.dev:
      rule:
        rule_id: eqUYrW
        version_id: GxTRLb
        url: https://semgrep.dev/playground/r/GxTRLb/python.aws-lambda.deserialization.tainted-pandas-pickle-aws-lambda.tainted-pandas-pickle-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_pickle($SINK, ...)
- id: python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are
    considered insecure.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.aws-lambda.security.tainted-pickle-deserialization.tainted-pickle-deserialization
    technology:
    - python
    - aws-lambda
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda
    shortlink: https://sg.run/X3Nl
    semgrep.dev:
      rule:
        rule_id: v8UK4Z
        version_id: RGTlOW
        url: https://semgrep.dev/playground/r/RGTlOW/python.aws-lambda.deserialization.tainted-pickle-aws-lambda.tainted-pickle-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: |
          def $HANDLER($EVENT, context):
            ...
      - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: $PACKAGE.Unpickler($SINK, ...)
    - metavariable-regex:
        metavariable: $PACKAGE
        regex: ^(pickle|_pickle|cPickle)$
- id: python.aws-lambda.deserialization.tainted-pyyaml-aws-lambda.tainted-pyyaml-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    PyYAML''s `yaml` module is as powerful as `pickle` and so may call any Python
    function. It is recommended to secure your application by using `yaml.SafeLoader`
    or `yaml.CSafeLoader`.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
    technology:
    - python
    - aws-lambda
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-pyyaml-aws-lambda.tainted-pyyaml-aws-lambda
    shortlink: https://sg.run/j1zZ
    semgrep.dev:
      rule:
        rule_id: d8UO4D
        version_id: A8T2j1
        url: https://semgrep.dev/playground/r/A8T2j1/python.aws-lambda.deserialization.tainted-pyyaml-aws-lambda.tainted-pyyaml-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - pattern: |
        yaml.$FUNC($SINK, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(scan|parse|compose|compose_all|load|load_all|unsafe_load)$
  - patterns:
    - pattern: yaml.$LOADER($SINK)
    - metavariable-regex:
        metavariable: $LOADER
        regex: ^(Loader|BaseLoader|CLoader|CBaseLoader)$
- id: python.aws-lambda.deserialization.tainted-ruamel-aws-lambda.tainted-ruamel-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Starting from `ruamel.yaml` version 0.15.0 the default loader (`typ=''rt''`) is
    a direct derivative of the safe loader. Before this version, use the optional
    argument `Loader` with value `SafeLoader` or `CSafeLoader`, or use the `safe_load`
    function.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-unsafe-ruamel
    technology:
    - python
    - aws-lambda
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-ruamel-aws-lambda.tainted-ruamel-aws-lambda
    shortlink: https://sg.run/1Kzb
    semgrep.dev:
      rule:
        rule_id: ZqUkGE
        version_id: BjTAWn
        url: https://semgrep.dev/playground/r/BjTAWn/python.aws-lambda.deserialization.tainted-ruamel-aws-lambda.tainted-ruamel-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  - label: TYP_UNSAFE
    pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  pattern-sinks:
  - requires: USER_INPUT
    patterns:
    - pattern: ruamel.yaml.$FUNC($SINK)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.SafeLoader, ...)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(load|load_all|round_trip_load)$
  - requires: USER_INPUT and TYP_UNSAFE
    patterns:
    - pattern: $YAML.load($SINK)
- id: python.aws-lambda.deserialization.tainted-shelve-aws-lambda.tainted-shelve-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `shelve` module uses `pickle` and should not be used with data from untrusted
    sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://docs.python.org/3/library/shelve.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.aws-lambda.security.tainted-pickle-deserialization
    - python.lang.security.deserialization.avoid-shelve
    technology:
    - python
    - aws-lambda
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-shelve-aws-lambda.tainted-shelve-aws-lambda
    shortlink: https://sg.run/92vk
    semgrep.dev:
      rule:
        rule_id: nJU5Gq
        version_id: DkTjdP
        url: https://semgrep.dev/playground/r/DkTjdP/python.aws-lambda.deserialization.tainted-shelve-aws-lambda.tainted-shelve-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $HANDLER($EVENT, context):
          ...
    - focus-metavariable: $EVENT
  pattern-sinks:
  - pattern-either:
    - pattern: shelve.DbfilenameShelf($SINK, ...)
- id: python.aws-lambda.deserialization.tainted-torch-pickle-aws-lambda.tainted-torch-pickle-aws-lambda
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    A number of functions and packages in the `torch` module rely on the `pickle`
    module and should not be used to unpackage data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    - https://pytorch.org/docs/stable/generated/torch.load.html
    - https://pytorch.org/docs/stable/_modules/torch/distributed/distributed_c10d.html#broadcast_object_list:~:text=.BytesIO()-,_pickler,-(f)
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - torch
    - aws-lambda
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.aws-lambda.deserialization.tainted-torch-pickle-aws-lambda.tainted-torch-pickle-aws-lambda
    shortlink: https://sg.run/yQX8
    semgrep.dev:
      rule:
        rule_id: EwUyr8
        version_id: WrTwzD
        url: https://semgrep.dev/playground/r/WrTwzD/python.aws-lambda.deserialization.tainted-torch-pickle-aws-lambda.tainted-torch-pickle-aws-lambda
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern: |
          def $HANDLER($EVENT, context):
            ...
      - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: torch.load($SINK, ...)
      - pattern: torch.package.PackageImporter($SINK, ...)
      - pattern: torch.distributed.broadcast_object_list($SINK,...)
      - pattern: torch.distributed.all_gather_object($OUT, $SINK,...)
      - pattern: torch.distributed.gather_object($SINK,...)
      - pattern: torch.distributed.scatter_object_list($OUT, $SINK, ...)
- id: python.django.deserialization.tainted-dill-django.tainted-dill-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `dill` module allows arbitrary user defined classes and functions to be serialized.
    We do not recommend using it for unpickling data from untrusted sources. For deserializing
    data from untrusted sources we recommend using YAML or JSON libraries with built-in
    protections.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pypi.org/project/dill/
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related-oss-rules:
    - python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization
    technology:
    - python
    - django
    - rest_framework
    - dill
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-dill-django.tainted-dill-django
    shortlink: https://sg.run/rQe6
    semgrep.dev:
      rule:
        rule_id: 7KUJxg
        version_id: 0bTXxB
        url: https://semgrep.dev/playground/r/0bTXxB/python.django.deserialization.tainted-dill-django.tainted-dill-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: dill.Unpickler($SINK, ...)
      - pattern-either:
        - pattern: dill.load($SINK, ...)
        - pattern: dill.loads($SINK, ...)
        - pattern: dill.load_module(..., filename=$SINK, ...)
        - pattern: dill.load_module_asdict(..., filename=$SINK, ...)
        - pattern: dill.temp.load($SINK, ...)
        - pattern: dill.temp.load_source($SINK, ...)
        - pattern: dill.temp.loadIO($SINK, ...)
        - pattern: dill.temp.loadIO_source($SINK, ...)
- id: python.django.deserialization.tainted-json-django.tainted-json-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Even for a data-only serialization format such as JSON, a malicious string may
    cause the decoder to consume considerable CPU and memory resources. Limiting the
    size of data to be parsed is recommended.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/json.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - django
    - json
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-json-django.tainted-json-django
    shortlink: https://sg.run/bY4Z
    semgrep.dev:
      rule:
        rule_id: L1ULE7
        version_id: K3TX2E
        url: https://semgrep.dev/playground/r/K3TX2E/python.django.deserialization.tainted-json-django.tainted-json-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: json.load($SINK, ...)
      - pattern: json.loads($SINK, ...)
      - patterns:
        - pattern-either:
          - pattern: $DEC.decode($SINK)
          - pattern: $DEC.raw_decode($SINK)
        - pattern-inside: |
            $DEC = json.JSONDecoder()
            ...
- id: python.django.deserialization.tainted-jsonpickle-django.tainted-jsonpickle-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `jsonpickle` module can execute arbitrary Python code. Do not load `jsonpickles`
    from untrusted sources. For deserializing data from untrusted sources we recommend
    using YAML or JSON libraries with built-in protections, such as json, PyYAML,
    or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.deserialization
    technology:
    - python
    - django
    - json
    - jsonpickle
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-jsonpickle-django.tainted-jsonpickle-django
    shortlink: https://sg.run/Nzgx
    semgrep.dev:
      rule:
        rule_id: 8GUPGq
        version_id: qkTyYD
        url: https://semgrep.dev/playground/r/qkTyYD/python.django.deserialization.tainted-jsonpickle-django.tainted-jsonpickle-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: jsonpickle.unpickler.decode($SINK, ...)
      - pattern: jsonpickle.unpickler.loadclass($SINK, ...)
      - pattern: jsonpickle.unpickler.loadrepr($SINK)
      - pattern: jsonpickle.util.b64decode($SINK)
      - pattern: jsonpickle.util.b85decode($SINK)
      - patterns:
        - pattern-either:
          - pattern: $B.decode($SINK)
          - pattern: $B.loads($SINK)
        - pattern-inside: |
            $B = jsonpickle.backend.JSONBackend()
            ...
- id: problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
  message: Checks for requests sent via HttpClient to http:// URLS. This is dangerous
    because the server is attempting to connect to a website that does not encrypt
    traffic with TLS. Instead, send requests only to https:// URLS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://openjdk.java.net/groups/net/httpclient/intro.html
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
    shortlink: https://sg.run/zv2d
    semgrep.dev:
      rule:
        rule_id: r6Ur3y
        version_id: RGTZrY
        url: https://semgrep.dev/playground/r/RGTZrY/problem-based-packs.insecure-transport.java-stdlib.httpclient-http-request.httpclient-http-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - patterns:
    - pattern: |
        URI.create("=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern-inside: |
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.sendAsync(...);
  - patterns:
    - pattern: |
        URI.create("=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern-inside: |
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.send(...);
  - patterns:
    - pattern: |
        URI.create($URI)
    - pattern-inside: |
        String $URI = "=~/[hH][tT][tT][pP]://.*/";
        ...
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.send(...);
  - patterns:
    - pattern: |
        URI.create($URI)
    - pattern-inside: |
        String $URI = "=~/[hH][tT][tT][pP]://.*/";
        ...
        HttpClient $CLIENT = ...;
        ...
        HttpRequest $REQ = ...;
        ...
        $CLIENT.sendAsync(...);
- id: generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key
  pattern-regex: k2sk_v[0-9]_[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Kolide API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    category: security
    technology:
    - secrets
    - kolide
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key
    shortlink: https://sg.run/d2YQ
    semgrep.dev:
      rule:
        rule_id: JDULYW
        version_id: QkTB9q
        url: https://semgrep.dev/playground/r/QkTB9q/generic.secrets.security.detected-kolide-api-key.detected-kolide-api-key
        origin: community
- id: csharp.dotnet.security.net-webconfig-trace-enabled.net-webconfig-trace-enabled
  message: OWASP guidance recommends disabling tracing for production applications
    to prevent accidental leakage of sensitive application information.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    cwe:
    - 'CWE-1323: Improper Management of Sensitive Trace Data'
    owasp: A05:2021 - Security Misconfiguration
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html#asp-net-web-forms-guidance
    - https://msdn.microsoft.com/en-us/library/e8z01xdh.aspx
    subcategory:
    - audit
    technology:
    - .net
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.net-webconfig-trace-enabled.net-webconfig-trace-enabled
    shortlink: https://sg.run/6bP1
    semgrep.dev:
      rule:
        rule_id: nJUyJq
        version_id: PkTXbE
        url: https://semgrep.dev/playground/r/PkTXbE/csharp.dotnet.security.net-webconfig-trace-enabled.net-webconfig-trace-enabled
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*web.config*'
  patterns:
  - pattern: |
      <trace ... enabled = "true" ... />
  - pattern-inside: |
      <system.web>
        ...
      </system.web>
- id: c.lang.security.insecure-use-memset.insecure-use-memset
  pattern: memset($...VARS)
  fix: memset_s($...VARS)
  message: When handling sensitive information in a buffer, it's important to ensure  that
    the data is securely erased before the buffer is deleted or reused.  While `memset()`
    is commonly used for this purpose, it can leave sensitive  information behind
    due to compiler optimizations or other factors.  To avoid this potential vulnerability,
    it's recommended to use the  `memset_s()` function instead. `memset_s()` is a
    standardized function  that securely overwrites the memory with a specified value,
    making it more  difficult for an attacker to recover any sensitive data that was
    stored in  the buffer. By using `memset_s()` instead of `memset()`, you can help
    to  ensure that your application is more secure and less vulnerable to exploits  that
    rely on residual data in memory.
  languages:
  - c
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-14: Compiler Removal of Code to Clear Buffers'
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://cwe.mitre.org/data/definitions/14.html
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
    category: security
    technology:
    - c
    confidence: LOW
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.insecure-use-memset.insecure-use-memset
    shortlink: https://sg.run/l9GE
    semgrep.dev:
      rule:
        rule_id: d8UK7D
        version_id: xyTOO3
        url: https://semgrep.dev/playground/r/xyTOO3/c.lang.security.insecure-use-memset.insecure-use-memset
        origin: community
- id: go.aws-lambda.security.tainted-sql-string.tainted-sql-string
  languages:
  - go
  severity: ERROR
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.aws-lambda.security.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/vX3Y
    semgrep.dev:
      rule:
        rule_id: 0oUwqg
        version_id: 3ZT8AN
        url: https://semgrep.dev/playground/r/3ZT8AN/go.aws-lambda.security.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          func $HANDLER($CTX $CTXTYPE, $EVENT $TYPE, ...) {...}
          ...
          lambda.Start($HANDLER, ...)
      - patterns:
        - pattern-inside: |
            func $HANDLER($EVENT $TYPE) {...}
            ...
            lambda.Start($HANDLER, ...)
        - pattern-not-inside: |
            func $HANDLER($EVENT context.Context) {...}
            ...
            lambda.Start($HANDLER, ...)
    - focus-metavariable: $EVENT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            "$SQLSTR" + ...
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(\s*select|\s*delete|\s*insert|\s*create|\s*update|\s*alter|\s*drop).*
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$SQLSTR", ...)
          - pattern: fmt.Sprintf("$SQLSTR", ...)
          - pattern: fmt.Printf("$SQLSTR", ...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*%(v|s|q).*
    - pattern-not-inside: |
        log.$PRINT(...)
  pattern-sanitizers:
  - pattern: strconv.Atoi(...)
- id: go.aws-lambda.security.database-sqli.database-sqli
  languages:
  - go
  message: Detected SQL statement that is tainted by `$EVENT` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use prepared statements with the 'Prepare' and 'PrepareContext'
    calls.
  mode: taint
  metadata:
    references:
    - https://pkg.go.dev/database/sql#DB.Query
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - database
    - sql
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.aws-lambda.security.database-sqli.database-sqli
    shortlink: https://sg.run/e5e8
    semgrep.dev:
      rule:
        rule_id: WAUdJ7
        version_id: ExTzpr
        url: https://semgrep.dev/playground/r/ExTzpr/go.aws-lambda.security.database-sqli.database-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $DB.Exec($QUERY,...)
      - pattern: $DB.ExecContent($QUERY,...)
      - pattern: $DB.Query($QUERY,...)
      - pattern: $DB.QueryContext($QUERY,...)
      - pattern: $DB.QueryRow($QUERY,...)
      - pattern: $DB.QueryRowContext($QUERY,...)
    - pattern-inside: |
        import "database/sql"
        ...
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          func $HANDLER($CTX $CTXTYPE, $EVENT $TYPE, ...) {...}
          ...
          lambda.Start($HANDLER, ...)
      - patterns:
        - pattern-inside: |
            func $HANDLER($EVENT $TYPE) {...}
            ...
            lambda.Start($HANDLER, ...)
        - pattern-not-inside: |
            func $HANDLER($EVENT context.Context) {...}
            ...
            lambda.Start($HANDLER, ...)
    - focus-metavariable: $EVENT
  severity: WARNING
- id: csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout.regular-expression-dos-infinite-timeout
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    owasp: A01:2017 - Injection
    references:
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    - https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.infinitematchtimeout
    - https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0
    category: security
    technology:
    - .net
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout.regular-expression-dos-infinite-timeout
    shortlink: https://sg.run/NgRy
    semgrep.dev:
      rule:
        rule_id: GdUDBP
        version_id: yeT7Pv
        url: https://semgrep.dev/playground/r/yeT7Pv/csharp.lang.security.regular-expression-dos.regular-expression-dos-infinite-timeout.regular-expression-dos-infinite-timeout
        origin: community
  message: 'Specifying the regex timeout leaves the system vulnerable to a regex-based
    Denial of Service (DoS) attack. Consider setting the timeout to a short amount
    of time like 2 or 3 seconds. If you are sure you need an infinite timeout, double
    check that your context meets the conditions outlined in the "Notes to Callers"
    section at the bottom of this page: https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regex.-ctor?view=net-6.0'
  patterns:
  - pattern-inside: |
      using System.Text.RegularExpressions;
      ...
  - pattern-either:
    - pattern: new Regex(..., TimeSpan.InfiniteMatchTimeout)
    - patterns:
      - pattern: new Regex(..., TimeSpan.FromSeconds($TIME))
      - metavariable-comparison:
          metavariable: $TIME
          comparison: $TIME > 5
    - pattern: new Regex(..., TimeSpan.FromMinutes(...))
    - pattern: new Regex(..., TimeSpan.FromHours(...))
- id: csharp.dotnet.security.mvc-missing-antiforgery.mvc-missing-antiforgery
  message: $METHOD is a state-changing MVC method that does not validate the antiforgery
    token or do strict content-type checking. State-changing controller methods should
    either enforce antiforgery tokens or do strict content-type checking to prevent
    simple HTTP request types from bypassing CORS preflight controls.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/DotNet_Security_Cheat_Sheet.html#cross-site-request-forgery
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests
    subcategory:
    - audit
    technology:
    - .net
    - mvc
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.mvc-missing-antiforgery.mvc-missing-antiforgery
    shortlink: https://sg.run/Y0Jy
    semgrep.dev:
      rule:
        rule_id: ZqUlxE
        version_id: JdTre1
        url: https://semgrep.dev/playground/r/JdTre1/csharp.dotnet.security.mvc-missing-antiforgery.mvc-missing-antiforgery
        origin: community
  languages:
  - csharp
  patterns:
  - pattern: |
      [$HTTPMETHOD]
      public IActionResult $METHOD(...){
          ...
      }
  - pattern-inside: |
      using Microsoft.AspNetCore.Mvc;
      ...
  - pattern-not: |
      [ValidateAntiForgeryToken]
      public IActionResult $METHOD(...){
          ...
      }
  - pattern-not: |
      [Consumes(...)]
      public IActionResult $METHOD(...){
        ...
      }
  - metavariable-regex:
      metavariable: $HTTPMETHOD
      regex: Http(Post|Put|Delete|Patch)
- id: csharp.dotnet.security.razor-template-injection.razor-template-injection
  message: User-controllable string passed to Razor.Parse. This leads directly to
    code execution in the context of the process.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    cwe2022-top25: true
    owasp:
    - A03:2021 - Injection
    references:
    - https://clement.notin.org/blog/2020/04/15/Server-Side-Template-Injection-(SSTI)-in-ASP.NET-Razor/
    subcategory:
    - vuln
    technology:
    - .net
    - razor
    - asp
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.razor-template-injection.razor-template-injection
    shortlink: https://sg.run/oyj0
    semgrep.dev:
      rule:
        rule_id: EwUr68
        version_id: 5PTD3d
        url: https://semgrep.dev/playground/r/5PTD3d/csharp.dotnet.security.razor-template-injection.razor-template-injection
        origin: community
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $ARG
    - pattern-inside: |
        public ActionResult $METHOD(..., string $ARG,...){...}
  pattern-sinks:
  - pattern: |
      Razor.Parse(...)
  pattern-sanitizers:
  - not_conflicting: true
    pattern: $F(...)
- id: csharp.dotnet.security.web-config-insecure-cookie-settings.web-config-insecure-cookie-settings
  message: Cookie Secure flag is explicitly disabled. You should enforce this value
    to avoid accidentally presenting sensitive cookie values over plaintext HTTP connections.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: LOW
    category: security
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/http-cookies
    - https://docs.microsoft.com/en-us/dotnet/api/system.web.security.formsauthentication.requiressl?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Security_FormsAuthentication_RequireSSL
    - https://docs.microsoft.com/en-us/dotnet/api/system.web.security.roles.cookierequiressl?redirectedfrom=MSDN&view=netframework-4.8#System_Web_Security_Roles_CookieRequireSSL
    subcategory:
    - audit
    technology:
    - .net
    - asp
    - webforms
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.web-config-insecure-cookie-settings.web-config-insecure-cookie-settings
    shortlink: https://sg.run/z1jd
    semgrep.dev:
      rule:
        rule_id: 7KUxPg
        version_id: GxTEJj
        url: https://semgrep.dev/playground/r/GxTEJj/csharp.dotnet.security.web-config-insecure-cookie-settings.web-config-insecure-cookie-settings
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*web.config'
  patterns:
  - pattern-either:
    - pattern: |
        requireSSL="false"
    - pattern: |
        cookieRequireSSL="false"
  - pattern-either:
    - pattern-inside: |
        <httpCookies ...>
    - pattern-inside: |
        <forms ...>
    - pattern-inside: |
        <roleManager ...>
- id: csharp.lang.security.xxe.xmldocument-unsafe-parser-override.xmldocument-unsafe-parser-override
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $ARG
    - pattern-inside: |
        public $T $M(...,string $ARG,...){...}
  pattern-sinks:
  - patterns:
    - pattern: |
        $XMLDOCUMENT.$METHOD(...)
    - pattern-inside: "XmlDocument $XMLDOCUMENT = new XmlDocument(...);\n...\n$XMLDOCUMENT.XmlResolver
        = new XmlUrlResolver(...);\n...  \n"
  message: XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling
    a string argument from a public method. Enabling Document Type Definition (DTD)
    parsing may cause XML External Entity (XXE) injection if supplied with user-controllable
    data.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    references:
    - https://www.jardinesoftware.net/2016/05/26/xxe-and-net/
    - https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks
    technology:
    - .net
    - xml
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.xxe.xmldocument-unsafe-parser-override.xmldocument-unsafe-parser-override
    shortlink: https://sg.run/k98P
    semgrep.dev:
      rule:
        rule_id: ReUK9k
        version_id: BjT08B
        url: https://semgrep.dev/playground/r/BjT08B/csharp.lang.security.xxe.xmldocument-unsafe-parser-override.xmldocument-unsafe-parser-override
        origin: community
- id: csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override.xmlreadersettings-unsafe-parser-override
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $ARG
    - pattern-inside: |
        public $T $M(...,string $ARG,...){...}
  pattern-sinks:
  - patterns:
    - pattern: |
        XmlReader $READER = XmlReader.Create(...,$RS,...);
    - pattern-inside: "XmlReaderSettings $RS = new XmlReaderSettings();\n...\n$RS.DtdProcessing
        = DtdProcessing.Parse;\n...        \n"
  message: XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling
    a string argument from a public method. Enabling Document Type Definition (DTD)
    parsing may cause XML External Entity (XXE) injection if supplied with user-controllable
    data.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    references:
    - https://www.jardinesoftware.net/2016/05/26/xxe-and-net/
    - https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks
    technology:
    - .net
    - xml
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override.xmlreadersettings-unsafe-parser-override
    shortlink: https://sg.run/wXjA
    semgrep.dev:
      rule:
        rule_id: AbU3pX
        version_id: DkT0vK
        url: https://semgrep.dev/playground/r/DkT0vK/csharp.lang.security.xxe.xmlreadersettings-unsafe-parser-override.xmlreadersettings-unsafe-parser-override
        origin: community
- id: csharp.lang.security.xxe.xmltextreader-unsafe-defaults.xmltextreader-unsafe-defaults
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $ARG
    - pattern-inside: |
        public $T $M(...,string $ARG,...){...}
  pattern-sinks:
  - patterns:
    - pattern: |
        $READER.$METHOD(...)
    - pattern-not-inside: |
        $READER.DtdProcessing = DtdProcessing.Prohibit;
        ...
    - pattern-inside: |
        XmlTextReader $READER = new XmlTextReader(...);
        ...
  message: XmlReaderSettings found with DtdProcessing.Parse on an XmlReader handling
    a string argument from a public method. Enabling Document Type Definition (DTD)
    parsing may cause XML External Entity (XXE) injection if supplied with user-controllable
    data.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    references:
    - https://www.jardinesoftware.net/2016/05/26/xxe-and-net/
    - https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmldocument.xmlresolver?view=net-6.0#remarks
    technology:
    - .net
    - xml
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.xxe.xmltextreader-unsafe-defaults.xmltextreader-unsafe-defaults
    shortlink: https://sg.run/xXjL
    semgrep.dev:
      rule:
        rule_id: BYUevk
        version_id: WrTpjy
        url: https://semgrep.dev/playground/r/WrTpjy/csharp.lang.security.xxe.xmltextreader-unsafe-defaults.xmltextreader-unsafe-defaults
        origin: community
- id: csharp.lang.security.cryptography.x509-subject-name-validation.X509-subject-name-validation
  severity: WARNING
  languages:
  - csharp
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.issuernameregistry?view=netframework-4.8
    category: security
    technology:
    - .net
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.cryptography.x509-subject-name-validation.X509-subject-name-validation
    shortlink: https://sg.run/XZ6B
    semgrep.dev:
      rule:
        rule_id: gxUy01
        version_id: K3TP3o
        url: https://semgrep.dev/playground/r/K3TP3o/csharp.lang.security.cryptography.x509-subject-name-validation.X509-subject-name-validation
        origin: community
  message: Validating certificates based on subject name is bad practice. Use the
    X509Certificate2.Verify() method instead.
  patterns:
  - pattern-inside: |
      using System.IdentityModel.Tokens;
      ...
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            X509SecurityToken $TOK = $RHS;
            ...
        - pattern-inside: |
            $T $M(..., X509SecurityToken $TOK, ...) {
                ...
            }
      - metavariable-pattern:
          metavariable: $RHS
          pattern-either:
          - pattern: $T as X509SecurityToken
          - pattern: new X509SecurityToken(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            X509Certificate2 $CERT = new X509Certificate2(...);
            ...
        - pattern-inside: |
            $T $M(..., X509Certificate2 $CERT, ...) {
                ...
            }
        - pattern-inside: |
            foreach (X509Certificate2 $CERT in $COLLECTION) {
                ...
            }
  - patterns:
    - pattern-either:
      - pattern: String.Equals($NAME, "...")
      - pattern: String.Equals("...", $NAME)
      - pattern: $NAME.Equals("...")
      - pattern: $NAME == "..."
      - pattern: $NAME != "..."
      - pattern: |
          "..." == $NAME
      - pattern: |
          "..." != $NAME
    - metavariable-pattern:
        metavariable: $NAME
        pattern-either:
        - pattern: $TOK.Certificate.SubjectName.Name
        - pattern: $CERT.SubjectName.Name
        - pattern: $CERT.GetNameInfo(...)
- id: csharp.lang.security.insecure-deserialization.data-contract-resolver.data-contract-resolver
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.data-contract-resolver.data-contract-resolver
    shortlink: https://sg.run/yXjP
    semgrep.dev:
      rule:
        rule_id: PeUxb0
        version_id: pZTqAJ
        url: https://semgrep.dev/playground/r/pZTqAJ/csharp.lang.security.insecure-deserialization.data-contract-resolver.data-contract-resolver
        origin: community
  message: Only use DataContractResolver if you are completely sure of what information
    is being serialized. Malicious types can cause unexpected behavior.
  patterns:
  - pattern: |
      class $MYDCR : DataContractResolver { ... }
- id: csharp.lang.security.insecure-deserialization.insecure-typefilterlevel-full.insecure-typefilterlevel-full
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.typefilterlevel?view=net-6.0
    - https://www.synacktiv.com/en/publications/izi-izi-pwn2own-ics-miami.html
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.insecure-typefilterlevel-full.insecure-typefilterlevel-full
    shortlink: https://sg.run/rere
    semgrep.dev:
      rule:
        rule_id: JDUlKl
        version_id: jQTLJA
        url: https://semgrep.dev/playground/r/jQTLJA/csharp.lang.security.insecure-deserialization.insecure-typefilterlevel-full.insecure-typefilterlevel-full
        origin: community
  message: Using a .NET remoting service can lead to RCE, even if you try to configure
    TypeFilterLevel. Recommended to switch from .NET Remoting to WCF https://docs.microsoft.com/en-us/dotnet/framework/wcf/migrating-from-net-remoting-to-wcf
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: new BinaryServerFormatterSinkProvider { TypeFilterLevel = $LEVEL
          }
      - patterns:
        - pattern-inside: |
            $TYPE $SP = new BinaryServerFormatterSinkProvider(...);
            ...
        - pattern: |
            $SP.TypeFilterLevel = $LEVEL
    - metavariable-regex:
        metavariable: $LEVEL
        regex: (.*)TypeFilterLevel\.(Full|Low)
  - patterns:
    - pattern-inside: |
        $DICT["typeFilterLevel"] = $VAL;
        ...
    - pattern: new BinaryServerFormatterSinkProvider(..., $DICT, ...)
    - metavariable-regex:
        metavariable: $VAL
        regex: (\"Full\"|\"Low\")
- id: csharp.lang.security.memory.memory-marshal-create-span.memory-marshal-create-span
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-125: Out-of-bounds Read'
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createspan?view=net-6.0
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.memorymarshal.createreadonlyspan?view=net-6.0
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.memory.memory-marshal-create-span.memory-marshal-create-span
    shortlink: https://sg.run/b4eW
    semgrep.dev:
      rule:
        rule_id: 5rUyEN
        version_id: NdT5J4
        url: https://semgrep.dev/playground/r/NdT5J4/csharp.lang.security.memory.memory-marshal-create-span.memory-marshal-create-span
        origin: community
  message: MemoryMarshal.CreateSpan and MemoryMarshal.CreateReadOnlySpan should be
    used with caution, as the length argument is not checked.
  pattern-either:
  - pattern: MemoryMarshal.CreateSpan(...)
  - pattern: MemoryMarshal.CreateReadOnlySpan(...)
- id: csharp.lang.security.http.http-listener-wildcard-bindings.http-listener-wildcard-bindings
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener?view=net-6.0
    category: security
    technology:
    - .net
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.http.http-listener-wildcard-bindings.http-listener-wildcard-bindings
    shortlink: https://sg.run/9LJr
    semgrep.dev:
      rule:
        rule_id: 4bUQ81
        version_id: A8TyRe
        url: https://semgrep.dev/playground/r/A8TyRe/csharp.lang.security.http.http-listener-wildcard-bindings.http-listener-wildcard-bindings
        origin: community
  message: The top level wildcard bindings $PREFIX leaves your application open to
    security vulnerabilities and give attackers more control over where traffic is
    routed. If you must use wildcards, consider using subdomain wildcard binding.
    For example, you can use "*.asdf.gov" if you own all of "asdf.gov".
  patterns:
  - pattern-inside: |
      using System.Net;
      ...
  - pattern: $LISTENER.Prefixes.Add("$PREFIX")
  - metavariable-regex:
      metavariable: $PREFIX
      regex: (http|https)://(\*|\+)(.[a-zA-Z]{2,})?:[0-9]+
- id: go.template.security.ssti.go-ssti
  patterns:
  - pattern-inside: |
      import ("html/template")
      ...
  - pattern: $TEMPLATE = fmt.Sprintf("...", $ARG, ...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          func $FN(..., $REQ *http.Request, ...){
          ...
          }
      - pattern-inside: |
          func $FN(..., $REQ http.Request, ...){
          ...
          }
      - pattern-inside: |
          func(..., $REQ *http.Request, ...){
          ...
          }
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $ARG := $REQ.URL.Query().Get(...)
          ...
          $T, $ERR := $TMPL.Parse($TEMPLATE)
      - pattern-inside: |
          $ARG := $REQ.Form.Get(...)
          ...
          $T, $ERR := $TMPL.Parse($TEMPLATE)
      - pattern-inside: |
          $ARG := $REQ.PostForm.Get(...)
          ...
          $T, $ERR := $TMPL.Parse($TEMPLATE)
  message: A server-side template injection occurs when an attacker is able to use
    native template syntax to inject a malicious payload into a template, which is
    then executed server-side. When using "html/template" always check that user inputs
    are validated and sanitized before included within the template.
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine'
    references:
    - https://www.onsecurity.io/blog/go-ssti-method-research/
    - http://blog.takemyhand.xyz/2020/05/ssti-breaking-gos-template-engine-to.html
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.template.security.ssti.go-ssti
    shortlink: https://sg.run/n9jY
    semgrep.dev:
      rule:
        rule_id: lBUy1N
        version_id: pZTvkz
        url: https://semgrep.dev/playground/r/pZTvkz/go.template.security.ssti.go-ssti
        origin: community
- id: ruby.aws-lambda.security.activerecord-sqli.activerecord-sqli
  languages:
  - ruby
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `Example.find_by_sql ["SELECT
    title FROM posts WHERE author = ? AND created > ?", author_id, start_date]`'
  mode: taint
  metadata:
    references:
    - https://guides.rubyonrails.org/active_record_querying.html#finding-by-sql
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - active-record
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.aws-lambda.security.activerecord-sqli.activerecord-sqli
    shortlink: https://sg.run/vXvY
    semgrep.dev:
      rule:
        rule_id: 0oUw9g
        version_id: JdT83X
        url: https://semgrep.dev/playground/r/JdT83X/ruby.aws-lambda.security.activerecord-sqli.activerecord-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern: ActiveRecord::Base.connection.execute($QUERY,...)
      - pattern: $MODEL.find_by_sql($QUERY,...)
      - pattern: $MODEL.select_all($QUERY,...)
    - pattern-inside: |
        require 'active_record'
        ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context)
          ...
        end
  severity: WARNING
- id: ruby.aws-lambda.security.mysql2-sqli.mysql2-sqli
  languages:
  - ruby
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use sanitize statements like so: `escaped = client.escape(user_input)`'
  mode: taint
  metadata:
    references:
    - https://github.com/brianmario/mysql2
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - mysql2
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.aws-lambda.security.mysql2-sqli.mysql2-sqli
    shortlink: https://sg.run/dJLE
    semgrep.dev:
      rule:
        rule_id: KxUrQ3
        version_id: 5PTbPb
        url: https://semgrep.dev/playground/r/5PTbPb/ruby.aws-lambda.security.mysql2-sqli.mysql2-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern: $CLIENT.query($QUERY,...)
      - pattern: $CLIENT.prepare($QUERY,...)
    - pattern-inside: |
        require 'mysql2'
        ...
  pattern-sanitizers:
  - pattern: $CLIENT.escape(...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context)
          ...
        end
  severity: WARNING
- id: ruby.aws-lambda.security.pg-sqli.pg-sqli
  languages:
  - ruby
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `conn.exec_params(''SELECT
    $1 AS a, $2 AS b, $3 AS c'', [1, 2, nil])`'
  mode: taint
  metadata:
    references:
    - https://www.rubydoc.info/gems/pg/PG/Connection
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - postgres
    - pg
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.aws-lambda.security.pg-sqli.pg-sqli
    shortlink: https://sg.run/ZKww
    semgrep.dev:
      rule:
        rule_id: qNUQee
        version_id: GxTpxd
        url: https://semgrep.dev/playground/r/GxTpxd/ruby.aws-lambda.security.pg-sqli.pg-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern: $CONN.exec($QUERY,...)
      - pattern: $CONN.exec_params($QUERY,...)
      - pattern: $CONN.exec_prepared($QUERY,...)
      - pattern: $CONN.async_exec($QUERY,...)
      - pattern: $CONN.async_exec_params($QUERY,...)
      - pattern: $CONN.async_exec_prepared($QUERY,...)
    - pattern-inside: |
        require 'pg'
        ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context)
          ...
        end
  severity: WARNING
- id: ruby.aws-lambda.security.sequel-sqli.sequel-sqli
  languages:
  - ruby
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `DB[''select * from items
    where name = ?'', name]`'
  mode: taint
  metadata:
    references:
    - https://github.com/jeremyevans/sequel#label-Arbitrary+SQL+queries
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - sequel
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.aws-lambda.security.sequel-sqli.sequel-sqli
    shortlink: https://sg.run/n9vY
    semgrep.dev:
      rule:
        rule_id: lBUy2N
        version_id: RGTjQG
        url: https://semgrep.dev/playground/r/RGTjQG/ruby.aws-lambda.security.sequel-sqli.sequel-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - pattern: $QUERY
    - pattern-either:
      - pattern: DB[$QUERY,...]
      - pattern: DB.run($QUERY,...)
    - pattern-inside: |
        require 'sequel'
        ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context)
          ...
        end
  severity: WARNING
- id: php.lang.security.deserialization.extract-user-data
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: $_GET[...]
    - pattern: $_FILES[...]
    - pattern: $_POST[...]
  pattern-sinks:
  - pattern: extract(...)
  pattern-sanitizers:
  - pattern: extract($VAR, EXTR_SKIP,...)
  message: Do not call 'extract()' on user-controllable data. If you must, then you
    must also provide the EXTR_SKIP flag to prevent overwriting existing variables.
  languages:
  - php
  metadata:
    category: security
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    technology:
    - php
    references:
    - https://www.php.net/manual/en/function.extract.php#refsect1-function.extract-notes
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.deserialization.extract-user-data
    shortlink: https://sg.run/6bv1
    semgrep.dev:
      rule:
        rule_id: nJUykq
        version_id: K3TqQr
        url: https://semgrep.dev/playground/r/K3TqQr/php.lang.security.deserialization.extract-user-data
        origin: community
  severity: ERROR
- id: javascript.aws-lambda.security.tainted-sql-string.tainted-sql-string
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/KgJ5
    semgrep.dev:
      rule:
        rule_id: eqUDqW
        version_id: vdT3Q8
        url: https://semgrep.dev/playground/r/vdT3Q8/javascript.aws-lambda.security.tainted-sql-string.tainted-sql-string
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              "$SQLSTR" + $EXPR
          - pattern: |
              "$SQLSTR".concat(...)
          - pattern: util.format($SQLSTR, ...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
      - patterns:
        - pattern: |
            `...${...}...`
        - pattern-regex: |
            .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
    - pattern-not-inside: |
        console.$LOG(...)
- id: javascript.aws-lambda.security.vm-runincontext-injection.vm-runincontext-injection
  message: The `vm` module enables compiling and running code within V8 Virtual Machine
    contexts. The `vm` module is not a security mechanism. Do not use it to run untrusted
    code. If code passed to `vm` functions is controlled by user input it could result
    in command injection. Do not let user input in `vm` functions.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    - aws-lambda
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.vm-runincontext-injection.vm-runincontext-injection
    shortlink: https://sg.run/q9w7
    semgrep.dev:
      rule:
        rule_id: v8UOdZ
        version_id: d6Tbgy
        url: https://semgrep.dev/playground/r/d6Tbgy/javascript.aws-lambda.security.vm-runincontext-injection.vm-runincontext-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('vm');
          ...
      - pattern-inside: |
          import 'vm'
          ...
    - pattern-either:
      - pattern: $VM.runInContext($X,...)
      - pattern: $VM.runInNewContext($X,...)
      - pattern: $VM.runInThisContext($X,...)
      - pattern: $VM.compileFunction($X,...)
      - pattern: new $VM.Script($X,...)
      - pattern: new $VM.SourceTextModule($X,...)
      - pattern: runInContext($X,...)
      - pattern: runInNewContext($X,...)
      - pattern: runInThisContext($X,...)
      - pattern: compileFunction($X,...)
      - pattern: new Script($X,...)
      - pattern: new SourceTextModule($X,...)
- id: ruby.lang.security.model-attributes-attr-protected.model-attributes-attr-protected
  message: 'Checks for models that use attr_protected, as use of allowlist instead
    of denylist is better practice. Attr_protected was also found to be vulnerable
    to bypass. The fixed versions of Rails are: 3.2.12, 3.1.11, 2.3.17. To prevent
    bypass, use attr_accessible instead.'
  metadata:
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attributes.rb
    - https://groups.google.com/g/rubyonrails-security/c/AFBKNY7VSH8/discussion
    category: security
    technology:
    - ruby
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.model-attributes-attr-protected.model-attributes-attr-protected
    shortlink: https://sg.run/9qZk
    semgrep.dev:
      rule:
        rule_id: kxURK4
        version_id: LjTxxQ
        url: https://semgrep.dev/playground/r/LjTxxQ/ruby.lang.security.model-attributes-attr-protected.model-attributes-attr-protected
        origin: community
  languages:
  - ruby
  severity: WARNING
  pattern: attr_protected
- id: javascript.lang.security.audit.sqli.node-knex-sqli.node-knex-sqli
  message: 'Detected SQL statement that is tainted by `$REQ` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, it is recommended to use parameterized queries
    or prepared statements. An example of parameterized queries like so: `knex.raw(''SELECT
    $1 from table'', [userinput])` can help prevent SQLi.'
  metadata:
    confidence: MEDIUM
    references:
    - https://knexjs.org/#Builder-fromRaw
    - https://knexjs.org/#Builder-whereRaw
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - express
    - nodejs
    - knex
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    source: https://semgrep.dev/r/javascript.lang.security.audit.sqli.node-knex-sqli.node-knex-sqli
    shortlink: https://sg.run/l9eE
    semgrep.dev:
      rule:
        rule_id: d8UKLD
        version_id: 7ZTqDG
        url: https://semgrep.dev/playground/r/7ZTqDG/javascript.lang.security.audit.sqli.node-knex-sqli.node-knex-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
      - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
      - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
      - pattern: files.$ANYTHING.data.toString('utf8')
      - pattern: files.$ANYTHING['data'].toString('utf8')
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern-inside: $KNEX.fromRaw($QUERY, ...)
      - pattern-inside: $KNEX.whereRaw($QUERY, ...)
      - pattern-inside: $KNEX.raw($QUERY, ...)
    - pattern-either:
      - pattern-inside: |
          require('knex')
          ...
      - pattern-inside: |
          import 'knex'
          ...
  pattern-sanitizers:
  - patterns:
    - pattern: parseInt(...)
- id: javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli
  message: Detected a `$IMPORT` SQL statement that comes from a function argument.
    This could lead to SQL injection if the variable is user-controlled and is not
    properly sanitized. In order to prevent SQL injection, it is recommended to use
    parameterized queries or prepared statements.
  metadata:
    references:
    - https://www.npmjs.com/package/mysql2
    - https://www.npmjs.com/package/mysql
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    confidence: LOW
    technology:
    - mysql
    - mysql2
    - javascript
    - nodejs
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    source: https://semgrep.dev/r/javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli
    shortlink: https://sg.run/Y0oy
    semgrep.dev:
      rule:
        rule_id: ZqUlWE
        version_id: LjTD7O
        url: https://semgrep.dev/playground/r/LjTD7O/javascript.lang.security.audit.sqli.node-mysql-sqli.node-mysql-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: function ... (..., $Y,...) {...}
    - pattern: $Y
    - pattern-not-inside: |
        function ... (..., $Y: number,...) {...}
    - pattern-not-inside: $Y.query
    - pattern-not-inside: $Y.body
    - pattern-not-inside: $Y.params
    - pattern-not-inside: $Y.cookies
    - pattern-not-inside: $Y.headers
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern-inside: $POOL.query($QUERY, ...)
      - pattern-inside: $POOL.execute($QUERY, ...)
    - pattern-either:
      - pattern-inside: |
          import $S from "$IMPORT"
          ...
      - pattern-inside: |
          import { ... } from "$IMPORT"
          ...
      - pattern-inside: |
          import * as $S from "$IMPORT"
          ...
      - pattern-inside: |
          require("$IMPORT")
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (mysql|mysql2)
  pattern-sanitizers:
  - patterns:
    - pattern: parseInt(...)
- id: scala.play.security.conf-insecure-cookie-settings.conf-insecure-cookie-settings
  patterns:
  - pattern: secure = false
  - pattern-inside: |
      session = {
        ...
      }
  message: Session cookie `Secure` flag is explicitly disabled. The `secure` flag
    for cookies prevents the client from transmitting the cookie over insecure channels
    such as HTTP. Set the `Secure` flag by setting `secure` to `true` in configuration
    file.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*.conf'
  metadata:
    category: security
    references:
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security
    - https://www.playframework.com/documentation/2.8.x/SettingsSession#Session-Configuration
    technology:
    - play
    - scala
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.play.security.conf-insecure-cookie-settings.conf-insecure-cookie-settings
    shortlink: https://sg.run/8z8N
    semgrep.dev:
      rule:
        rule_id: GdUDJO
        version_id: zyTvAY
        url: https://semgrep.dev/playground/r/zyTvAY/scala.play.security.conf-insecure-cookie-settings.conf-insecure-cookie-settings
        origin: community
- id: terraform.aws.security.aws-elasticsearch-insecure-tls-version.aws-elasticsearch-insecure-tls-version
  pattern: |
    resource "aws_elasticsearch_domain" $ANYTHING {
      ...
      domain_endpoint_options {
        ...
        enforce_https = true
        tls_security_policy = "Policy-Min-TLS-1-0-2019-07"
        ...
      }
      ...
    }
  message: Detected an AWS Elasticsearch domain using an insecure version of TLS.
    To fix this, set "tls_security_policy" equal to "Policy-Min-TLS-1-2-2019-07".
  languages:
  - terraform
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - aws
    - terraform
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-elasticsearch-insecure-tls-version.aws-elasticsearch-insecure-tls-version
    shortlink: https://sg.run/PYlq
    semgrep.dev:
      rule:
        rule_id: YGUle7
        version_id: GxT1e6
        url: https://semgrep.dev/playground/r/GxT1e6/terraform.aws.security.aws-elasticsearch-insecure-tls-version.aws-elasticsearch-insecure-tls-version
        origin: community
- id: php.lang.security.openssl-cbc-static-iv.openssl-cbc-static-iv
  patterns:
  - pattern-either:
    - pattern: openssl_encrypt($D, $M, $K, $FLAGS, "...",...);
    - pattern: openssl_decrypt($D, $M, $K, $FLAGS, "...",...);
  - metavariable-comparison:
      metavariable: $M
      comparison: re.match(".*-CBC",$M)
  message: Static IV used with AES in CBC mode. Static IVs enable chosen-plaintext
    attacks against encrypted data.
  languages:
  - php
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-329: Generation of Predictable IV with CBC Mode'
    references:
    - https://csrc.nist.gov/publications/detail/sp/800-38a/final
    owasp:
    - A02:2021 - Cryptographic Failures
    technology:
    - php
    - openssl
    category: security
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.openssl-cbc-static-iv.openssl-cbc-static-iv
    shortlink: https://sg.run/LgWJ
    semgrep.dev:
      rule:
        rule_id: DbUGbE
        version_id: qkTnep
        url: https://semgrep.dev/playground/r/qkTnep/php.lang.security.openssl-cbc-static-iv.openssl-cbc-static-iv
        origin: community
- id: scala.jwt-scala.security.jwt-scala-hardcode.jwt-scala-hardcode
  patterns:
  - pattern-inside: |
      import pdi.jwt.$DEPS
      ...
  - pattern-either:
    - pattern: $JWT.encode($X, "...", ...)
    - pattern: $JWT.decode($X, "...", ...)
    - pattern: $JWT.decodeRawAll($X, "...", ...)
    - pattern: $JWT.decodeRaw($X, "...", ...)
    - pattern: $JWT.decodeAll($X, "...", ...)
    - pattern: $JWT.validate($X, "...", ...)
    - pattern: $JWT.isValid($X, "...", ...)
    - pattern: $JWT.decodeJson($X, "...", ...)
    - pattern: $JWT.decodeJsonAll($X, "...", ...)
    - patterns:
      - pattern-either:
        - pattern: $JWT.encode($X, $KEY, ...)
        - pattern: $JWT.decode($X, $KEY, ...)
        - pattern: $JWT.decodeRawAll($X, $KEY, ...)
        - pattern: $JWT.decodeRaw($X, $KEY, ...)
        - pattern: $JWT.decodeAll($X, $KEY, ...)
        - pattern: $JWT.validate($X, $KEY, ...)
        - pattern: $JWT.isValid($X, $KEY, ...)
        - pattern: $JWT.decodeJson($X, $KEY, ...)
        - pattern: $JWT.decodeJsonAll($X, $KEY, ...)
        - pattern: $JWT.encode($X, this.$KEY, ...)
        - pattern: $JWT.decode($X, this.$KEY, ...)
        - pattern: $JWT.decodeRawAll($X, this.$KEY, ...)
        - pattern: $JWT.decodeRaw($X, this.$KEY, ...)
        - pattern: $JWT.decodeAll($X, this.$KEY, ...)
        - pattern: $JWT.validate($X, this.$KEY, ...)
        - pattern: $JWT.isValid($X, this.$KEY, ...)
        - pattern: $JWT.decodeJson($X, this.$KEY, ...)
        - pattern: $JWT.decodeJsonAll($X, this.$KEY, ...)
      - pattern-either:
        - pattern-inside: |
            class $CL {
              ...
              $KEY = "..."
              ...
            }
        - pattern-inside: |
            object $CL {
              ...
              $KEY = "..."
              ...
            }
  - metavariable-pattern:
      metavariable: $JWT
      patterns:
      - pattern-either:
        - pattern: Jwt
        - pattern: JwtArgonaut
        - pattern: JwtCirce
        - pattern: JwtJson4s
        - pattern: JwtJson
        - pattern: JwtUpickle
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables)'
  languages:
  - scala
  severity: WARNING
  metadata:
    references:
    - https://jwt-scala.github.io/jwt-scala/
    category: security
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    technology:
    - scala
    confidence: HIGH
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.jwt-scala.security.jwt-scala-hardcode.jwt-scala-hardcode
    shortlink: https://sg.run/8zE7
    semgrep.dev:
      rule:
        rule_id: WAUdK0
        version_id: O9T4yg
        url: https://semgrep.dev/playground/r/O9T4yg/scala.jwt-scala.security.jwt-scala-hardcode.jwt-scala-hardcode
        origin: community
- id: scala.lang.security.audit.documentbuilder-dtd-enabled.documentbuilder-dtd-enabled
  patterns:
  - pattern-either:
    - pattern: |
        $DF = DocumentBuilderFactory.newInstance(...)
        ...
        $DB = $DF.newDocumentBuilder(...)
    - patterns:
      - pattern: $DB = DocumentBuilderFactory.newInstance(...)
      - pattern-not-inside: |
          ...
          $X = $DB.newDocumentBuilder(...)
    - pattern: $DB = DocumentBuilderFactory.newInstance(...).newDocumentBuilder(...)
  - pattern-not-inside: |
      ...
      $DB.setXIncludeAware(true)
      ...
      $DB.setNamespaceAware(true)
      ...
      $DB.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      ...
      $DB.setXIncludeAware(true)
      ...
      $DB.setNamespaceAware(true)
      ...
      $DB.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-general-entities", false)
  - pattern-not-inside: |
      ...
      $DB.setXIncludeAware(true)
      ...
      $DB.setNamespaceAware(true)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $DB.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      ...
      $DB.setXIncludeAware(true)
      ...
      $DB.setNamespaceAware(true)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $DB.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
      ...
      $DB.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  message: Document Builder being instantiated without calling the `setFeature` functions
    that are generally used for disabling entity processing. User controlled data
    in XML Document builder can result in XML Internal Entity Processing vulnerabilities
    like the disclosure of confidential data, denial of service, Server Side Request
    Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.
  languages:
  - scala
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - scala
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.documentbuilder-dtd-enabled.documentbuilder-dtd-enabled
    shortlink: https://sg.run/gRQn
    semgrep.dev:
      rule:
        rule_id: 0oUwzP
        version_id: ZRTBwZ
        url: https://semgrep.dev/playground/r/ZRTBwZ/scala.lang.security.audit.documentbuilder-dtd-enabled.documentbuilder-dtd-enabled
        origin: community
- id: scala.lang.security.audit.sax-dtd-enabled.sax-dtd-enabled
  patterns:
  - pattern-either:
    - pattern: $SR = new SAXReader(...)
    - pattern: |
        $SF = SAXParserFactory.newInstance(...)
        ...
        $SR = $SF.newSAXParser(...)
    - patterns:
      - pattern: $SR = SAXParserFactory.newInstance(...)
      - pattern-not-inside: |
          ...
          $X = $SR.newSAXParser(...)
    - pattern: $SR = SAXParserFactory.newInstance(...).newSAXParser(...)
    - pattern: $SR = new SAXBuilder(...)
  - pattern-not-inside: |
      ...
      $SR.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $SR.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $SR.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      ...
      $SR.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $SR.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
      ...
      $SR.setFeature("http://xml.org/sax/features/external-general-entities", false)
  - pattern-not-inside: |
      ...
      $SR.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $SR.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
      ...
      $SR.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
  - pattern-not-inside: |
      ...
      $SR.setFeature("http://xml.org/sax/features/external-general-entities", false)
      ...
      $SR.setFeature("http://xml.org/sax/features/external-parameter-entities", false)
      ...
      $SR.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true)
  message: XML processor being instantiated without calling the `setFeature` functions
    that are generally used for disabling entity processing. User controlled data
    in XML Parsers can result in XML Internal Entity Processing vulnerabilities like
    the disclosure of confidential data, denial of service, Server Side Request Forgery
    (SSRF), port scanning. Make sure to disable entity processing functionality.
  languages:
  - scala
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - scala
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.sax-dtd-enabled.sax-dtd-enabled
    shortlink: https://sg.run/QbYP
    semgrep.dev:
      rule:
        rule_id: KxUrkq
        version_id: 8KTWb2
        url: https://semgrep.dev/playground/r/8KTWb2/scala.lang.security.audit.sax-dtd-enabled.sax-dtd-enabled
        origin: community
- id: scala.lang.security.audit.xmlinputfactory-dtd-enabled.xmlinputfactory-dtd-enabled
  patterns:
  - pattern-not-inside: |
      ...
      $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities", false)
  - pattern-either:
    - pattern: $XMLFACTORY = XMLInputFactory.newFactory(...)
    - pattern: $XMLFACTORY = XMLInputFactory.newInstance(...)
    - pattern: $XMLFACTORY = new XMLInputFactory(...)
  message: XMLInputFactory being instantiated without calling the setProperty functions
    that are generally used for disabling entity processing. User controlled data
    in XML Document builder can result in XML Internal Entity Processing vulnerabilities
    like the disclosure of confidential data, denial of service, Server Side Request
    Forgery (SSRF), port scanning. Make sure to disable entity processing functionality.
  languages:
  - scala
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - scala
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.xmlinputfactory-dtd-enabled.xmlinputfactory-dtd-enabled
    shortlink: https://sg.run/3BEb
    semgrep.dev:
      rule:
        rule_id: qNUQ7w
        version_id: JdT2gy
        url: https://semgrep.dev/playground/r/JdT2gy/scala.lang.security.audit.xmlinputfactory-dtd-enabled.xmlinputfactory-dtd-enabled
        origin: community
- id: yaml.kubernetes.security.env.flask-debugging-enabled.flask-debugging-enabled
  languages:
  - yaml
  severity: WARNING
  message: Do not set FLASK_ENV to "development" since that sets `debug=True` in Flask.
    Use "dev" or a similar term instead.
  metadata:
    owasp: A06:2017 - Security Misconfiguration
    cwe:
    - 'CWE-489: Active Debug Code'
    references:
    - https://flask.palletsprojects.com/en/2.0.x/debugging/
    - https://flask.palletsprojects.com/en/2.0.x/config/#ENV
    category: security
    technology:
    - kubernetes
    - flask
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.env.flask-debugging-enabled.flask-debugging-enabled
    shortlink: https://sg.run/y6x8
    semgrep.dev:
      rule:
        rule_id: WAUP0z
        version_id: e1T2AE
        url: https://semgrep.dev/playground/r/e1T2AE/yaml.kubernetes.security.env.flask-debugging-enabled.flask-debugging-enabled
        origin: community
  patterns:
  - pattern-inside: |
      env: [...]
  - pattern: |
      {name: FLASK_ENV, value: "development"}
  fix-regex:
    regex: development
    replacement: dev
- id: javascript.lang.security.audit.code-string-concat.code-string-concat
  message: Found data from an Express or Next web request flowing to `eval`. If this
    data is user-controllable this can lead to execution of arbitrary system commands
    in the context of your application process. Avoid `eval` whenever possible.
  metadata:
    interfile: true
    confidence: HIGH
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    references:
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval
    - https://nodejs.org/api/child_process.html#child_processexeccommand-options-callback
    - https://www.stackhawk.com/blog/nodejs-command-injection-examples-and-prevention/
    - https://ckarande.gitbooks.io/owasp-nodegoat-tutorial/content/tutorial/a1_-_server_side_js_injection.html
    category: security
    technology:
    - node.js
    - Express
    - Next.js
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.code-string-concat.code-string-concat
    shortlink: https://sg.run/96Yk
    semgrep.dev:
      rule:
        rule_id: DbUKEz
        version_id: e1TlrZ
        url: https://semgrep.dev/playground/r/e1TlrZ/javascript.lang.security.audit.code-string-concat.code-string-concat
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: function ... ($REQ, $RES) {...}
        - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
        - patterns:
          - pattern-either:
            - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
            - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT)
                {...})
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(get|post|put|head|delete|options)$
      - pattern-either:
        - pattern: $REQ.query
        - pattern: $REQ.body
        - pattern: $REQ.params
        - pattern: $REQ.cookies
        - pattern: $REQ.headers
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import { ...,$IMPORT,... } from 'next/router'
            ...
        - pattern-inside: |
            import $IMPORT from 'next/router';
            ...
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $ROUTER = $IMPORT()
              ...
          - pattern-either:
            - pattern-inside: |
                const { ...,$PROPS,... } = $ROUTER.query
                ...
            - pattern-inside: |
                var { ...,$PROPS,... } = $ROUTER.query
                ...
            - pattern-inside: |
                let { ...,$PROPS,... } = $ROUTER.query
                ...
          - focus-metavariable: $PROPS
        - patterns:
          - pattern-inside: |
              $ROUTER = $IMPORT()
              ...
          - pattern: "$ROUTER.query.$VALUE \n"
        - patterns:
          - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern: |
        eval(...)
- id: javascript.apollo.security.apollo-axios-ssrf.apollo-axios-ssrf
  message: User-controllable argument $DATAVAL to $METHOD passed to Axios via internal
    handler $INNERFUNC. This could be a server-side request forgery. A user could
    call a restricted API or leak internal headers to an unauthorized party. Validate
    your user arguments against an allowlist of known URLs, or consider refactoring
    so that user-controlled data is not necessary.
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - apollo
    - axios
    references:
    - https://www.cvedetails.com/cve/CVE-2020-28168/
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.apollo.security.apollo-axios-ssrf.apollo-axios-ssrf
    shortlink: https://sg.run/jkEZ
    semgrep.dev:
      rule:
        rule_id: AbUGBR
        version_id: GxTX7K
        url: https://semgrep.dev/playground/r/GxTX7K/javascript.apollo.security.apollo-axios-ssrf.apollo-axios-ssrf
        origin: community
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern: const $RESPONSE = await axios.request($INNERARG,...)
  - pattern-inside: |
      Query: {
        $METHOD(parent, args, context, info) {
          ...
          $DATA = args.$DATAVAL
          ...
          async function $INNERFUNC(...,$INNERARG,...){
            ...
          }
          ...
          return $INNERFUNC(...,$DATA,...)
          }
        }
- id: php.lang.security.injection.tainted-sql-string.tainted-sql-string
  languages:
  - php
  severity: ERROR
  message: User data flows into this manually-constructed SQL string. User data can
    be safely inserted into SQL strings using prepared statements or an object-relational
    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
    injection, which could let an attacker steal or manipulate data from the database.
    Instead, use prepared statements (`$mysqli->prepare("INSERT INTO test(id, label)
    VALUES (?, ?)");`) or a safe library.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    technology:
    - php
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/lZYG
    semgrep.dev:
      rule:
        rule_id: qNUXdL
        version_id: pZTqxD
        url: https://semgrep.dev/playground/r/pZTqxD/php.lang.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern-either:
    - pattern: mysqli_real_escape_string(...)
    - pattern: real_escape_string(...)
    - pattern: $MYSQLI->real_escape_string(...)
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
      - pattern: $_REQUEST
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern: |
          sprintf($SQLSTR, ...)
      - metavariable-regex:
          metavariable: $SQLSTR
          regex: .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
    - patterns:
      - pattern: |
          "...{$EXPR}..."
      - pattern-regex: |
          .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
    - patterns:
      - pattern: |
          "...$EXPR..."
      - pattern-regex: |
          .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
    - patterns:
      - pattern: |
          "...".$EXPR
      - pattern-regex: |
          .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
- id: php.lang.security.injection.tainted-url-host.tainted-url-host
  languages:
  - php
  severity: WARNING
  message: User data flows into the host portion of this manually-constructed URL.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data such as cookies or authorization information sent with this request.
    They could also probe internal servers or other resources that the server runnig
    this code can access. (This is called server-side request forgery, or SSRF.) Do
    not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode
    the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - php
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/php.lang.security.injection.tainted-url-host.tainted-url-host
    shortlink: https://sg.run/Y8no
    semgrep.dev:
      rule:
        rule_id: lBU8K1
        version_id: 2KTAw2
        url: https://semgrep.dev/playground/r/2KTAw2/php.lang.security.injection.tainted-url-host.tainted-url-host
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
      - pattern: $_REQUEST
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern: |
          sprintf($URLSTR, ...)
      - metavariable-pattern:
          metavariable: $URLSTR
          language: generic
          pattern: $SCHEME://%s
    - patterns:
      - pattern: |
          "...{$EXPR}..."
      - pattern-regex: |
          .*://\{.*
    - patterns:
      - pattern: |
          "...$EXPR..."
      - pattern-regex: |
          .*://\$.*
    - patterns:
      - pattern: |
          "...".$EXPR
      - pattern-regex: |
          .*://["'].*
- id: php.lang.security.md5-used-as-password.md5-used-as-password
  severity: WARNING
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as bcrypt. You can use `password_hash($PASSWORD,
    PASSWORD_BCRYPT, $OPTIONS);`.
  languages:
  - php
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://www.php.net/password_hash
    category: security
    technology:
    - md5
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.md5-used-as-password.md5-used-as-password
    shortlink: https://sg.run/66YL
    semgrep.dev:
      rule:
        rule_id: YGUD1O
        version_id: yeTQ5X
        url: https://semgrep.dev/playground/r/yeTQ5X/php.lang.security.md5-used-as-password.md5-used-as-password
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: md5(...)
      - pattern: hash('md5', ...)
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...)
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
- id: python.django.security.injection.tainted-url-host.tainted-url-host
  languages:
  - python
  message: User data flows into the host portion of this manually-constructed URL.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data such as cookies or authorization information sent with this request.
    They could also probe internal servers or other resources that the server runnig
    this code can access. (This is called server-side request forgery, or SSRF.) Do
    not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode
    the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    impact: MEDIUM
    likelihood: LOW
    confidence: LOW
    source: https://semgrep.dev/r/python.django.security.injection.tainted-url-host.tainted-url-host
    shortlink: https://sg.run/oYz6
    semgrep.dev:
      rule:
        rule_id: 6JU1l0
        version_id: RGTwXW
        url: https://semgrep.dev/playground/r/RGTwXW/python.django.security.injection.tainted-url-host.tainted-url-host
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '"$URLSTR" % ...'
        - metavariable-pattern:
            metavariable: $URLSTR
            language: generic
            patterns:
            - pattern-either:
              - pattern: $SCHEME://%s
              - pattern: $SCHEME://%r
      - patterns:
        - pattern: '"$URLSTR".format(...)'
        - metavariable-pattern:
            metavariable: $URLSTR
            language: generic
            pattern: $SCHEME:// { ... }
      - patterns:
        - pattern: '"$URLSTR" + ...'
        - metavariable-regex:
            metavariable: $URLSTR
            regex: .*://$
      - patterns:
        - pattern: f"$URLSTR{...}..."
        - metavariable-regex:
            metavariable: $URLSTR
            regex: .*://$
      - patterns:
        - pattern-inside: |
            $URL = "$URLSTR"
            ...
        - pattern: $URL += ...
        - metavariable-regex:
            metavariable: $URLSTR
            regex: .*://$
  pattern-sources:
  - patterns:
    - pattern: request.$ANYTHING
    - pattern-not: request.build_absolute_uri
  severity: WARNING
- id: java.spring.security.injection.tainted-sql-string.tainted-sql-string
  languages:
  - java
  severity: ERROR
  message: User data flows into this manually-constructed SQL string. User data can
    be safely inserted into SQL strings using prepared statements or an object-relational
    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
    injection, which could let an attacker steal or manipulate data from the database.
    Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
    category: security
    technology:
    - spring
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    source: https://semgrep.dev/r/java.spring.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/9rzz
    semgrep.dev:
      rule:
        rule_id: 10UdRR
        version_id: gET7XJ
        url: https://semgrep.dev/playground/r/gET7XJ/java.spring.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue)
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          "$SQLSTR" + ...
      - pattern: |
          "$SQLSTR".concat(...)
      - patterns:
        - pattern-inside: |
            StringBuilder $SB = new StringBuilder("$SQLSTR");
            ...
        - pattern: $SB.append(...)
      - patterns:
        - pattern-inside: |
            $VAR = "$SQLSTR";
            ...
        - pattern: $VAR += ...
      - pattern: String.format("$SQLSTR", ...)
      - patterns:
        - pattern-inside: |
            String $VAR = "$SQLSTR";
            ...
        - pattern: String.format($VAR, ...)
    - pattern-not-inside: System.out.println(...)
    - pattern-not-inside: $LOG.info(...)
    - pattern-not-inside: $LOG.warn(...)
    - pattern-not-inside: $LOG.warning(...)
    - pattern-not-inside: $LOG.debug(...)
    - pattern-not-inside: $LOG.debugging(...)
    - pattern-not-inside: $LOG.error(...)
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: (?i)(select|delete|insert|create|update|alter|drop)\b
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: java.jdo.javax.secrets.hardcoded-connection-password.hardcoded-connection-password
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    - https://db.apache.org/jdo/api30/apidocs/javax/jdo/PersistenceManagerFactory.html
    technology:
    - okhttp
    - java
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jdo.javax.secrets.hardcoded-connection-password.hardcoded-connection-password
    shortlink: https://sg.run/Ye5e
    semgrep.dev:
      rule:
        rule_id: bwUJgJ
        version_id: 0bT3Q5
        url: https://semgrep.dev/playground/r/0bT3Q5/java.jdo.javax.secrets.hardcoded-connection-password.hardcoded-connection-password
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          (javax.jdo.PersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (javax.jdo.PersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import javax.jdo.*;
          ...
      - pattern: |
          (PersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (PersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import javax.*;
          ...
      - pattern: |
          (jdo.PersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (jdo.PersistenceManagerFactory $JDO). ... .$SETPASS("");
    - patterns:
      - pattern-inside: |
          import javax.jdo.PersistenceManagerFactory;
          ...
      - pattern: |
          (PersistenceManagerFactory $JDO). ... .$SETPASS("...");
      - pattern-not: |
          (PersistenceManagerFactory $JDO). ... .$SETPASS("");
  - metavariable-regex:
      metavariable: $SETPASS
      regex: ^(setConnectionPassword)$
  - focus-metavariable: $SETPASS
- id: java.jedis.secrets.jedis-hardcoded-uri.jedis-hardcoded-uri
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jedis.secrets.jedis-hardcoded-uri.jedis-hardcoded-uri
    shortlink: https://sg.run/oWr9
    semgrep.dev:
      rule:
        rule_id: kxU9yv
        version_id: qkTw9b
        url: https://semgrep.dev/playground/r/qkTw9b/java.jedis.secrets.jedis-hardcoded-uri.jedis-hardcoded-uri
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (redis|rediss):\/\/(?!<.*>)([A-Za-z0-9_-]){0,31}:(?!<.*>)([^@]*)@.*
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: unix://\S.*&password=(?!<.*>)([^@]*).*
  pattern-sinks:
  - pattern: new Jedis(...)
- id: java.lang.security.net.http.base64-encoded-hardcoded-secret.base64-encoded-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.net.http.base64-encoded-hardcoded-secret.base64-encoded-hardcoded-secret
    shortlink: https://sg.run/xJ2y
    semgrep.dev:
      rule:
        rule_id: 5rU0Ak
        version_id: X0TKoz
        url: https://semgrep.dev/playground/r/X0TKoz/java.lang.security.net.http.base64-encoded-hardcoded-secret.base64-encoded-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-inside: |
      ...
      private $TY $FOO =
      Base64.getEncoder().encodeToString("...".getBytes(...));
      ...
  - pattern-either:
    - pattern: |
        $CONN.setRequestProperty("Authorization", "Basic " + $FOO);
    - pattern: |
        $CONN.setHeader("Authorization", "Basic " + $FOO);
  - focus-metavariable: $FOO
- id: java.okhttp.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - okhttp
    - java
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.okhttp.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
    shortlink: https://sg.run/4g3x
    semgrep.dev:
      rule:
        rule_id: ReUw7g
        version_id: xyTr9b
        url: https://semgrep.dev/playground/r/xyTr9b/java.okhttp.secrets.hardcoded-secret-in-request-header.hardcoded-secret-in-request-header
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$WHOLETOK"
    - metavariable-pattern:
        language: generic
        metavariable: $WHOLETOK
        patterns:
        - pattern-either:
          - patterns:
            - pattern: |
                Basic $T
            - metavariable-regex:
                metavariable: $T
                constant-propagation: true
                regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
          - patterns:
            - pattern: |
                Bearer $T
            - metavariable-regex:
                metavariable: $T
                constant-propagation: true
                regex: ^(eyJhbGciOi.*)
          - pattern: |
              Token $T
        - metavariable-analysis:
            metavariable: $T
            analyzer: entropy
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            new okhttp3.Request.$BUILDERFUNC(). ... .$HEADERFUNC("Authorization", $AUTH)
        - metavariable-regex:
            metavariable: $HEADERFUNC
            regex: ^(addHeader|header)$
      - pattern: |
          (okhttp3.Request $REQ). ... .$HEADERFUNC("Authorization", $AUTH)
    - focus-metavariable: $AUTH
  - patterns:
    - pattern-inside: |
        import okhttp3.*;
    - pattern-either:
      - patterns:
        - pattern: |
            new Request.$BUILDERFUNC(). ... .$HEADERFUNC("Authorization", $AUTH)
        - metavariable-regex:
            metavariable: $HEADERFUNC
            regex: ^(addHeader|header)$
      - pattern: |
          (Request $REQ). ... .$HEADERFUNC("Authorization", $AUTH)
    - focus-metavariable: $AUTH
  - patterns:
    - pattern-inside: |
        import okhttp3.Request.*;
    - patterns:
      - pattern: |
          new $BUILDERFUNC(). ... .$HEADERFUNC("Authorization", $AUTH)
      - metavariable-regex:
          metavariable: $HEADERFUNC
          regex: ^(addHeader|header)$
    - focus-metavariable: $AUTH
- id: java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite
  message: Detected cookie without the SameSite attribute.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - audit
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.3 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite
    shortlink: https://sg.run/XR5b
    semgrep.dev:
      rule:
        rule_id: WAUqW7
        version_id: O9T74K
        url: https://semgrep.dev/playground/r/O9T74K/java.servlets.security.audit.cookie-missing-samesite.cookie-missing-samesite
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-not-inside: |
      $RETURNTYPE $METHOD(..., HttpServletResponse $RESP, ...) {
        ...
        $RESP.setHeader("Set-Cookie", "=~/.*SameSite=.*/");
        ...
      }
  - pattern-either:
    - pattern: $RESP.addCookie(...);
    - pattern: $RESP.setHeader("Set-Cookie", ...);
  - pattern-not: $RESP.setHeader("Set-Cookie", null);
- id: java.servlets.security.httpservlet-path-traversal-deepsemgrep.httpservlet-path-traversal-deepsemgrep
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the file
    path which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)`
    to only retrieve the file name from the path.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://www.owasp.org/index.php/Path_Traversal
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.httpservlet-path-traversal-deepsemgrep.httpservlet-path-traversal-deepsemgrep
    shortlink: https://sg.run/O5Xk
    semgrep.dev:
      rule:
        rule_id: ZqUyo7
        version_id: e1TKE2
        url: https://semgrep.dev/playground/r/e1TKE2/java.servlets.security.httpservlet-path-traversal-deepsemgrep.httpservlet-path-traversal-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: new File(...)
      - pattern: new java.io.File(...)
      - pattern: new FileReader(...)
      - pattern: new java.io.FileReader(...)
      - pattern: new FileInputStream(...)
      - pattern: new java.io.FileInputStream(...)
      - pattern: (Paths $PATHS).get(...)
      - patterns:
        - pattern: |
            $CLASS.$FUNC(...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(getResourceAsStream|getResource)$
      - patterns:
        - pattern-either:
          - pattern: new FileOutputStream($FILE, ...)
          - pattern: new java.io.FileOutputStream($FILE, ...)
          - pattern: new StreamSource($FILE, ...)
          - pattern: new javax.xml.transform.StreamSource($FILE, ...)
          - pattern: FileUtils.openOutputStream($FILE, ...)
        - focus-metavariable: $FILE
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
- id: java.servlets.security.httpservlet-path-traversal.httpservlet-path-traversal
  message: 'The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the file
    path which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Java, you may also consider using a utility method such as `org.apache.commons.io.FilenameUtils.getName(...)`
    to only retrieve the file name from the path. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://www.owasp.org/index.php/Path_Traversal
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.httpservlet-path-traversal.httpservlet-path-traversal
    shortlink: https://sg.run/wLdP
    semgrep.dev:
      rule:
        rule_id: ReU0DY
        version_id: vdTQDw
        url: https://semgrep.dev/playground/r/vdTQDw/java.servlets.security.httpservlet-path-traversal.httpservlet-path-traversal
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (java.io.File $FILE) = ...
      - pattern: |
          (java.io.FileOutputStream $FOS) = ...
      - pattern: |
          new java.io.FileInputStream(...)
      - pattern: |
          new javax.xml.transform.stream.StreamSource(...)
      - pattern: |
          (java.nio.file.Paths $PATHS).get(...)
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
- id: java.servlets.security.no-direct-response-writer-deepsemgrep.no-direct-response-writer-deepsemgrep
  message: This rule is deprecated
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.no-direct-response-writer-deepsemgrep.no-direct-response-writer-deepsemgrep
    shortlink: https://sg.run/eR0L
    semgrep.dev:
      rule:
        rule_id: nJUwvz
        version_id: d6Tgno
        url: https://semgrep.dev/playground/r/d6Tgno/java.servlets.security.no-direct-response-writer-deepsemgrep.no-direct-response-writer-deepsemgrep
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.servlets.security.tainted-sql-from-http-request.tainted-sql-from-http-request
  message: This rule is deprecated
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://owasp.org/www-community/attacks/SQL_Injection
    technology:
    - sql
    - java
    - servlets
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-sql-from-http-request.tainted-sql-from-http-request
    shortlink: https://sg.run/nlJ2
    semgrep.dev:
      rule:
        rule_id: qNUR23
        version_id: 8KTlWk
        url: https://semgrep.dev/playground/r/8KTlWk/java.servlets.security.tainted-sql-from-http-request.tainted-sql-from-http-request
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution
  message: Spring user data flows into a script engine or another means of dynamic
    code evaluation. This is unsafe and could lead to code injection or arbitrary
    code execution as a result. Avoid inputting user data into code execution or use
    proper sandboxing if user code evaluation is necessary.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://0xn3va.gitbook.io/cheat-sheets/framework/spring/spel-injection
    - https://github.com/github/codeql/tree/main/java/ql/src/Security/CWE/CWE-094
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution
    shortlink: https://sg.run/OjZB
    semgrep.dev:
      rule:
        rule_id: 3qUgzv
        version_id: A8Tlxj
        url: https://semgrep.dev/playground/r/A8Tlxj/java.spring.security.spring-tainted-code-execution.spring-tainted-code-execution
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (ScriptEngine $ENGINE).eval($SCRIPT, ...)
      - pattern: |
          (ExpressionFactory $FACTORY).createMethodExpression($CONTEXT, $SCRIPT, ...)
      - pattern: |
          (ExpressionFactory $FACTORY).createValueExpression($CONTEXT, $SCRIPT, ...)
      - pattern: |
          (ExpressionParser $PARSER).parseExpression($SCRIPT, ...)
      - patterns:
        - pattern-either:
          - pattern: |
              (ExpressionParser $PARSER).parseExpression($SCRIPT, ...). ... .$FUNCS(...)
          - pattern: |
              (ExpressionFactory $FACTORY).createValueExpression($CONTEXT, $SCRIPT, ...). ... .$FUNCS(...)
        - metavariable-regex:
            metavariable: $FUNCS
            regex: (getValue|getType|getValueReference)
      - patterns:
        - pattern: |
            MVEL.$FUNCS($SCRIPT, ...)
        - metavariable-regex:
            metavariable: $FUNCS
            regex: (eval|evalToString|compileExpression|compileSetExpression)
      - pattern: |
          Velocity.evaluate($CONTEXT, $WRITER, $LOGTAG, $SCRIPT)
      - pattern: |
          (JexlEngine $JEXL).createExpression($SCRIPT, ...)
    - focus-metavariable: $SCRIPT
- id: java.spring.security.spring-tainted-ldap-injection.spring-tainted-ldap-injection
  message: Detected input from a spring user-inputted parameter going into an LDAP
    query. This could lead to LDAP injection if the input is not properly santized,
    which could result in attackers modifying objects in the LDAP tree structure.
    Ensure data passed to an LDAP query is not controllable or properly sanitize the
    user input with functions like createEqualityFilter.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/LDAP_Injection
    - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
    - https://cwe.mitre.org/data/definitions/90.html
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.spring-tainted-ldap-injection.spring-tainted-ldap-injection
    shortlink: https://sg.run/eg6b
    semgrep.dev:
      rule:
        rule_id: 4bUJwX
        version_id: BjTLoX
        url: https://semgrep.dev/playground/r/BjTLoX/java.spring.security.spring-tainted-ldap-injection.spring-tainted-ldap-injection
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-propagators:
  - pattern: (SearchRequest $SEARCH).setBase($VAR)
    from: $VAR
    to: $SEARCH
  - pattern: (SearchRequest $SEARCH).setFilter($VAR)
    from: $VAR
    to: $SEARCH
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.naming.directory.InitialDirContext $IDC).search($BASE, $FILTER, ...)
      - pattern: |
          (javax.naming.directory.DirContext $CTX).search($BASE, $FILTER, ...)
      - pattern: "(InitialDirContext $IDC).search($BASE, $FILTER, ...) \n"
      - pattern: |
          (DirContext $CTX).search($BASE, $FILTER, ...)
      - pattern: |
          (LDAPConnection $CONN).search($BASE, $SCOPE, $FILTER, ...)
      - pattern: |
          (LdapConnection $CONN).search($BASE, ...)
      - pattern: |
          (LdapTemplate $TEMP).search($BASE, $FILTER, ...)
    - focus-metavariable:
      - $FILTER
      - $BASE
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: Filter.createEqualityFilter(...)
      - pattern: Filter.createPresenceFilter(...)
      - pattern: new Rdn(...)
      - pattern: new RDN(...)
      - pattern: (Encoder $ENC).encodeForDN(...)
      - pattern: (Encoder $ENC).encodeForLDAP(...)
      - pattern: LdapNameBuilder.newInstance(...). ... .add(...)
      - pattern: org.apache.directory.ldap.client.api.search.FilterBuilder.equal(...)
- id: java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in Java, it is possible to adopt prepared statements by using
    the `java.sql.PreparedStatement` class with bind variables.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - audit
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.5 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps
    - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep
    shortlink: https://sg.run/w5kd
    semgrep.dev:
      rule:
        rule_id: v8U3yY
        version_id: JdTxEK
        url: https://semgrep.dev/playground/r/JdTxEK/java.lang.security.audit.formatted-sql-string-deepsemgrep.formatted-sql-string-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ)
      - pattern: |
          (ServletRequest $REQ)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
                ...
              }
          - pattern-inside: |
              $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
                ...
              }
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-not: $S.$SQLFUNC(<... "=~/.*TABLE *$/" ...>)
    - pattern-not: $S.$SQLFUNC(<... "=~/.*TABLE %s$/" ...>)
    - pattern-either:
      - pattern: (Statement $S).$SQLFUNC(...)
      - pattern: (Connection $C).createStatement(...).$SQLFUNC(...)
      - pattern: (EntityManager $EM).$SQLFUNC(...)
    - metavariable-regex:
        metavariable: $SQLFUNC
        regex: execute|executeQuery|createQuery|query
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in Java, it is possible to adopt prepared statements by using
    the `java.sql.PreparedStatement` class with bind variables.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep
    shortlink: https://sg.run/QR1q
    semgrep.dev:
      rule:
        rule_id: JDUZ8z
        version_id: DkTbgo
        url: https://semgrep.dev/playground/r/DkTbgo/java.spring.security.spring-sqli-deepsemgrep.spring-sqli-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: ^(RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)$
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - focus-metavariable: $A
        - pattern-inside: |
            new PreparedStatementCreatorFactory($A,...);
      - patterns:
        - focus-metavariable: $A
        - pattern-inside: |
            (JdbcTemplate $T).$M($A,...)
      - patterns:
        - pattern: (String $A)
        - pattern-inside: |
            (JdbcTemplate $T).batchUpdate(...)
      - patterns:
        - focus-metavariable: $A
        - pattern-inside: |
            NamedParameterBatchUpdateUtils.$M($A,...)
      - patterns:
        - focus-metavariable: $A
        - pattern-inside: |
            BatchUpdateUtils.$M($A,...)
  pattern-sanitizers:
  - patterns:
    - focus-metavariable: $A
    - pattern: |
        new $TYPE(...,$A,...)
    - pattern-not: new PreparedStatementCreatorFactory(...)
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: java.spring.security.spring-tainted-xmldecoder.spring-tainted-xmldecoder
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
    For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.spring-tainted-xmldecoder.spring-tainted-xmldecoder
    shortlink: https://sg.run/vogA
    semgrep.dev:
      rule:
        rule_id: PeUKXY
        version_id: 6xTo0z
        url: https://semgrep.dev/playground/r/6xTo0z/java.spring.security.spring-tainted-xmldecoder.spring-tainted-xmldecoder
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (XMLDecoder $XML) = new XMLDecoder($IN, ...);
          ...
          $VAR = $XML.readObject();
    - focus-metavariable: $IN
- id: javascript.express.express-sqlite-sqli.express-sqlite-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.sqlitetutorial.net/sqlite-nodejs/
    technology:
    - express
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.express-sqlite-sqli.express-sqlite-sqli
    shortlink: https://sg.run/76lG
    semgrep.dev:
      rule:
        rule_id: 6JUl86
        version_id: o5T1PK
        url: https://semgrep.dev/playground/r/o5T1PK/javascript.express.express-sqlite-sqli.express-sqlite-sqli
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{ $REQ }: Request,...) => {...}
      - pattern-inside: |
          (...,{ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $WRAPPER = require('$IMPORT')
            ...
        - pattern-inside: |
            $WRAPPER = require('$IMPORT'). ...
            ...
        - pattern-inside: |
            import { ...,$WRAPPER,... } from '$IMPORT'
            ...
        - pattern-inside: |
            import * as $WRAPPER from '$IMPORT'
            ...
        - pattern-inside: |
            import $WRAPPER from '$IMPORT'
            ...
      - metavariable-regex:
          metavariable: $IMPORT
          regex: ^(sqlite|sqlite\d)$
    - pattern-either:
      - pattern-inside: |
          $WRAPPER. ... .then(async ($BASE) => {
                ...
                $DB = $BASE;
                ...
            })
          ...
      - pattern-inside: |
          $DB = new $WRAPPER.Database(...);
          ...
    - pattern: |
        $DB.$FUNC($PATTERN, ...);
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(get|all|each)$
    - focus-metavariable: $PATTERN
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: escape(...)
      - pattern: String(...)
      - pattern: $VALUE. ... .toString()
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
      - pattern: $TYPE. ... .isValid(...)
      - pattern: $TYPE. ... .ObjectId(...)
      - pattern: $TYPE. ... .ObjectID(...)
      - pattern: ObjectID(...)
      - pattern: ObjectId(...)
      - pattern: new $TYPE. ... .isValid(...)
      - pattern: new $TYPE. ... .ObjectId(...)
      - pattern: new $TYPE. ... .ObjectID(...)
      - pattern: new ObjectId(...)
      - pattern: new ObjectID(...)
  - patterns:
    - pattern: $THIS. ... .$HASH(...)
    - metavariable-regex:
        metavariable: $HASH
        regex: (hash|md5|sha1|sha256)
- id: javascript.knex.node-knex-empty-password-connection-string.node-knex-empty-password-connection-string
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Knex
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.knex.node-knex-empty-password-connection-string.node-knex-empty-password-connection-string
    shortlink: https://sg.run/wvgd
    semgrep.dev:
      rule:
        rule_id: KxUQ6v
        version_id: jQTjpB
        url: https://semgrep.dev/playground/r/jQTjpB/javascript.knex.node-knex-empty-password-connection-string.node-knex-empty-password-connection-string
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          {...,connection: '$URL',...}
      - patterns:
        - pattern: return "$URL"
        - pattern-inside: |
            {...,connection: async () => {...} ,...}
    - metavariable-regex:
        metavariable: $URL
        regex: (.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          require('knex')($FOO);
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $SQL = require('knex')
              ...
          - pattern-inside: |
              import $SQL from 'knex'
              ...
          - pattern-inside: |
              import * as $SQL from 'knex'
              ...
          - pattern-inside: |
              import {...,$SQL,...} from 'knex'
              ...
        - pattern-inside: |
            $SQL($FOO)
    - focus-metavariable: $FOO
- id: javascript.knex.node-knex-empty-password.node-knex-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Knex
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.knex.node-knex-empty-password.node-knex-empty-password
    shortlink: https://sg.run/xvgy
    semgrep.dev:
      rule:
        rule_id: qNUeP5
        version_id: 1QTNnE
        url: https://semgrep.dev/playground/r/1QTNnE/javascript.knex.node-knex-empty-password.node-knex-empty-password
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          {...,connection: {...,password:'',...},...}
    - patterns:
      - pattern: |
          return {...,password:'',...}
      - pattern-inside: |
          {...,connection: async () => {...} ,...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          require('knex')($FOO);
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $SQL = require('knex')
              ...
          - pattern-inside: |
              import $SQL from 'knex'
              ...
          - pattern-inside: |
              import * as $SQL from 'knex'
              ...
          - pattern-inside: |
              import {...,$SQL,...} from 'knex'
              ...
        - pattern-inside: |
            $SQL($FOO)
    - focus-metavariable: $FOO
- id: javascript.knex.node-knex-hardcoded-secret-connection-string.node-knex-hardcoded-secret-connection-string
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Knex
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.knex.node-knex-hardcoded-secret-connection-string.node-knex-hardcoded-secret-connection-string
    shortlink: https://sg.run/O7Zk
    semgrep.dev:
      rule:
        rule_id: lBU2Ar
        version_id: 9lT7Lq
        url: https://semgrep.dev/playground/r/9lT7Lq/javascript.knex.node-knex-hardcoded-secret-connection-string.node-knex-hardcoded-secret-connection-string
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        {...,connection: '$URL',...}
    - metavariable-regex:
        metavariable: $URL
        regex: (.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          require('knex')($FOO);
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $SQL = require('knex')
              ...
          - pattern-inside: |
              import $SQL from 'knex'
              ...
          - pattern-inside: |
              import * as $SQL from 'knex'
              ...
          - pattern-inside: |
              import {...,$SQL,...} from 'knex'
              ...
        - pattern-inside: |
            $SQL($FOO)
    - focus-metavariable: $FOO
- id: javascript.lang.hardcoded.strings.detected-private-key.detected-private-key
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - rsa
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.lang.hardcoded.strings.detected-private-key.detected-private-key
    shortlink: https://sg.run/2dRY
    semgrep.dev:
      rule:
        rule_id: 6JUA6p
        version_id: kbTP99
        url: https://semgrep.dev/playground/r/kbTP99/javascript.lang.hardcoded.strings.detected-private-key.detected-private-key
        origin: pro_rules
  languages:
  - js
  - ts
  patterns:
  - pattern-either:
    - pattern-inside: |
        '$X'
  - focus-metavariable: $X
  - metavariable-pattern:
      metavariable: $X
      language: regex
      patterns:
      - pattern-regex: ^-----BEGIN (?i)([dr]sa|ec|openssh|encrypted)? PRIVATE KEY-----(.*)-----END
          RSA PRIVATE KEY-----$
      - metavariable-analysis:
          analyzer: entropy
          metavariable: $2
- id: javascript.mssql.node-mssql-hardcoded-secret.node-mssql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mssql
    - sql
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.mssql.node-mssql-hardcoded-secret.node-mssql-hardcoded-secret
    shortlink: https://sg.run/yRlR
    semgrep.dev:
      rule:
        rule_id: EwUYgY
        version_id: ZRTdJn
        url: https://semgrep.dev/playground/r/ZRTdJn/javascript.mssql.node-mssql-hardcoded-secret.node-mssql-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          {...,password:'...',...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., password: "...", ...}, ...}, ...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., token: "...", ...}, ...}, ...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., msiSecret: "...", ...}, ...}, ...}
      - pattern-inside: |
          {..., authentication: {..., options: {..., clientSecret: "...", ...}, ...}, ...}
    - pattern-not-inside: |
        {...,password:'',...}
    - pattern-not-inside: |
        {..., authentication: {..., options: {..., password: "", ...}, ...}, ...}
    - pattern-not-inside: |
        {..., authentication: {..., options: {..., token: "", ...}, ...}, ...}
    - pattern-not-inside: |
        {..., authentication: {..., options: {..., msiSecret: "", ...}, ...}, ...}
    - pattern-not-inside: |
        {..., authentication: {..., options: {..., clientSecret: "", ...}, ...}, ...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('mssql')
          ...
      - pattern-inside: |
          import $SQL from 'mssql'
          ...
      - pattern-inside: |
          import * as $SQL from 'mssql'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from 'mssql'
          ...
    - pattern-inside: |
        $SQL. ... .connect($FOO)
    - focus-metavariable: $FOO
- id: javascript.pg.node-pg-connection-string-hardcoded-secret.node-pg-connection-string-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.pg.node-pg-connection-string-hardcoded-secret.node-pg-connection-string-hardcoded-secret
    shortlink: https://sg.run/e96L
    semgrep.dev:
      rule:
        rule_id: YGUOKR
        version_id: ExTWbZ
        url: https://semgrep.dev/playground/r/ExTWbZ/javascript.pg.node-pg-connection-string-hardcoded-secret.node-pg-connection-string-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: (.*postgres|postgresql|tcp.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('pg-connection-string').parse
          ...
      - pattern-inside: |
          $SQL = require('pg-connection-string')
          ...
      - pattern-inside: |
          import $SQL from 'pg-connection-string'
          ...
      - pattern-inside: |
          import * as $SQL from 'pg-connection-string'
          ...
      - pattern-inside: |
          import { ..., $SQL,... } from 'pg-connection-string'
          ...
    - pattern-either:
      - pattern-inside: |
          $SQL($FOO)
      - pattern-inside: |
          $SQL.parse($FOO)
    - focus-metavariable: $FOO
- id: javascript.pg.node-pg-pool-hardcoded-secret.node-pg-pool-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.pg.node-pg-pool-hardcoded-secret.node-pg-pool-hardcoded-secret
    shortlink: https://sg.run/vvg0
    semgrep.dev:
      rule:
        rule_id: 6JUzwq
        version_id: LjTeJ8
        url: https://semgrep.dev/playground/r/LjTeJ8/javascript.pg.node-pg-pool-hardcoded-secret.node-pg-pool-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        {...,password:'...',...}
    - pattern-not-inside: |
        {...,password:'',...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('pg-pool')
          ...
      - pattern-inside: |
          import $SQL from 'pg-pool'
          ...
      - pattern-inside: |
          import * as $SQL from 'pg-pool'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from 'pg-pool'
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            new $SQL($FOO)
    - focus-metavariable: $FOO
- id: javascript.sequelize.node-sequelize-empty-password-argument.node-sequelize-empty-password-argument
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    - A02:2017 - Broken Authentication
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.sequelize.node-sequelize-empty-password-argument.node-sequelize-empty-password-argument
    shortlink: https://sg.run/dLY0
    semgrep.dev:
      rule:
        rule_id: oqURpr
        version_id: 8KTl0k
        url: https://semgrep.dev/playground/r/8KTl0k/javascript.sequelize.node-sequelize-empty-password-argument.node-sequelize-empty-password-argument
        origin: pro_rules
  languages:
  - js
  - ts
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SQL = require('$IMPORT')
        ...
    - pattern-inside: |
        import $SQL from '$IMPORT'
        ...
    - pattern-inside: |
        import * as $SQL from '$IMPORT'
        ...
    - pattern-inside: |
        import {...,$SQL,...} from '$IMPORT'
        ...
  - metavariable-regex:
      metavariable: $IMPORT
      regex: ^(sequelize)$
  - patterns:
    - pattern-inside: |
        new $SQL($DB, $USER, "", $OPTS)
    - pattern: |
        new $SQL($DB, $USER, $PWD, $OPTS)
    - focus-metavariable: $PWD
- id: javascript.sequelize.node-sequelize-empty-password-connection-string.node-sequelize-empty-password-connection-string
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    - A02:2017 - Broken Authentication
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.sequelize.node-sequelize-empty-password-connection-string.node-sequelize-empty-password-connection-string
    shortlink: https://sg.run/ZwG4
    semgrep.dev:
      rule:
        rule_id: zdUQ0Y
        version_id: gETXpX
        url: https://semgrep.dev/playground/r/gETXpX/javascript.sequelize.node-sequelize-empty-password-connection-string.node-sequelize-empty-password-connection-string
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('$IMPORT')
          ...
      - pattern-inside: |
          import $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(sequelize)$
    - patterns:
      - pattern-inside: |
          new $SQL($URL)
      - focus-metavariable: $URL
- id: javascript.sequelize.node-sequelize-empty-password.node-sequelize-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    - A02:2017 - Broken Authentication
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.sequelize.node-sequelize-empty-password.node-sequelize-empty-password
    shortlink: https://sg.run/nvyr
    semgrep.dev:
      rule:
        rule_id: pKUx4z
        version_id: QkTNLq
        url: https://semgrep.dev/playground/r/QkTNLq/javascript.sequelize.node-sequelize-empty-password.node-sequelize-empty-password
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          { ..., password: "", ... }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('$IMPORT')
          ...
      - pattern-inside: |
          import $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(sequelize)$
    - patterns:
      - pattern-inside: |
          new $SQL($PWD)
      - focus-metavariable: $PWD
- id: javascript.superagent.hardcoded-basic-token.hardcoded-basic-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - sql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.superagent.hardcoded-basic-token.hardcoded-basic-token
    shortlink: https://sg.run/rp3R
    semgrep.dev:
      rule:
        rule_id: 7KUYr5
        version_id: JdTR4J
        url: https://semgrep.dev/playground/r/JdTR4J/javascript.superagent.hardcoded-basic-token.hardcoded-basic-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BASIC'
    - metavariable-pattern:
        metavariable: $BASIC
        language: generic
        patterns:
        - pattern: Basic $TOKEN
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "$VALUE. ... .set('Authorization', $BEARER)           \n"
    - focus-metavariable: $BEARER
- id: javascript.superagent.hardcoded-bearer-token.hardcoded-bearer-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - sql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.superagent.hardcoded-bearer-token.hardcoded-bearer-token
    shortlink: https://sg.run/bJ1E
    semgrep.dev:
      rule:
        rule_id: L1UpXJ
        version_id: 5PTGx6
        url: https://semgrep.dev/playground/r/5PTGx6/javascript.superagent.hardcoded-bearer-token.hardcoded-bearer-token
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$BEARER'
    - metavariable-pattern:
        metavariable: $BEARER
        language: generic
        patterns:
        - pattern: $HEADER $TOKEN
        - metavariable-regex:
            metavariable: $HEADER
            regex: (Bearer|bearer|token|Token)
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (eyJhbGciOi.*)
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: "$VALUE. ... .set('Authorization', $BEARER)           \n"
    - focus-metavariable: $BEARER
- id: python.cassandra.python-cassandra-empty-password.python-cassandra-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - nosql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.cassandra.python-cassandra-empty-password.python-cassandra-empty-password
    shortlink: https://sg.run/w57P
    semgrep.dev:
      rule:
        rule_id: OrUZxK
        version_id: WrTne7
        url: https://semgrep.dev/playground/r/WrTne7/python.cassandra.python-cassandra-empty-password.python-cassandra-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: cassandra.auth.PlainTextAuthProvider(...,password="",...)
    - pattern: cassandra.auth.PlainTextAuthProvider($USER,"",...)
    - pattern: cassandra.auth.SaslAuthProvider(...,password="",...)
- id: python.couchbase.python-couchbase-empty-password.python-couchbase-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - couchbase
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.couchbase.python-couchbase-empty-password.python-couchbase-empty-password
    shortlink: https://sg.run/xG7g
    semgrep.dev:
      rule:
        rule_id: eqUAj2
        version_id: K3TLA3
        url: https://semgrep.dev/playground/r/K3TLA3/python.couchbase.python-couchbase-empty-password.python-couchbase-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: couchbase_core.cluster.PasswordAuthenticator($USER,"",...)
- id: python.couchbase.python-couchbase-hardcoded-secret.python-couchbase-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - couchbase
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.couchbase.python-couchbase-hardcoded-secret.python-couchbase-hardcoded-secret
    shortlink: https://sg.run/kKw2
    semgrep.dev:
      rule:
        rule_id: gxU5e8
        version_id: qkTwAe
        url: https://semgrep.dev/playground/r/qkTwAe/python.couchbase.python-couchbase-hardcoded-secret.python-couchbase-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: couchbase_core.cluster.PasswordAuthenticator($USER,"...",...)
  - pattern-not: couchbase_core.cluster.PasswordAuthenticator($USER,"",...)
- id: python.elasticsearch.python-elasticsearch-hardcoded-bearer-auth.python-elasticsearch-hardcoded-bearer-auth
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - elastic
    - elasticsearch
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.elasticsearch.python-elasticsearch-hardcoded-bearer-auth.python-elasticsearch-hardcoded-bearer-auth
    shortlink: https://sg.run/w5lP
    semgrep.dev:
      rule:
        rule_id: QrUQZl
        version_id: l4TD3N
        url: https://semgrep.dev/playground/r/l4TD3N/python.elasticsearch.python-elasticsearch-hardcoded-bearer-auth.python-elasticsearch-hardcoded-bearer-auth
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: elasticsearch.Elasticsearch(..., bearer_auth="...",...)
    - patterns:
      - pattern: $ES.options(..., bearer_auth="...",...)
      - pattern-inside: |
          $ES = elasticsearch.Elasticsearch(...)
          ...
  - pattern-not: $ES.$OPTS(..., bearer_auth="",...)
- id: python.elasticsearch.python-elasticsearch-hardcoded-secret-url.python-elasticsearch-hardcoded-secret-url
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - elastic
    - elasticsearch
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.elasticsearch.python-elasticsearch-hardcoded-secret-url.python-elasticsearch-hardcoded-secret-url
    shortlink: https://sg.run/xG9g
    semgrep.dev:
      rule:
        rule_id: 3qUxOz
        version_id: YDTbgz
        url: https://semgrep.dev/playground/r/YDTbgz/python.elasticsearch.python-elasticsearch-hardcoded-secret-url.python-elasticsearch-hardcoded-secret-url
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (http|https)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: elasticsearch.Elasticsearch($SINK,...)
      - pattern: elasticsearch.Elasticsearch([..., $SINK, ...], ...)
    - focus-metavariable: $SINK
- id: python.elasticsearch.python-elasticsearch-hardcoded-secret.python-elasticsearch-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - elastic
    - elasticsearch
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.elasticsearch.python-elasticsearch-hardcoded-secret.python-elasticsearch-hardcoded-secret
    shortlink: https://sg.run/O5bn
    semgrep.dev:
      rule:
        rule_id: 4bUYZL
        version_id: 6xTX4k
        url: https://semgrep.dev/playground/r/6xTX4k/python.elasticsearch.python-elasticsearch-hardcoded-secret.python-elasticsearch-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        ($X, "...")
    - pattern-not: |
        ($X, "")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: elasticsearch.Elasticsearch(..., $AUTH=$SINK,...)
      - patterns:
        - pattern: $ES.options(..., $AUTH=$SINK,...)
        - pattern-inside: |
            $ES = elasticsearch.Elasticsearch(...)
            ...
    - focus-metavariable: $SINK
    - metavariable-pattern:
        metavariable: $AUTH
        patterns:
        - pattern-either:
          - pattern: basic_auth
          - pattern: api_key
- id: python.lang.hardcoded.headers.hardcoded-github-token.hardcoded-github-token
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - python
    - secrets
    - headers
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.hardcoded.headers.hardcoded-github-token.hardcoded-github-token
    shortlink: https://sg.run/Dqrd
    semgrep.dev:
      rule:
        rule_id: lBUNEv
        version_id: X0TKGj
        url: https://semgrep.dev/playground/r/X0TKGj/python.lang.hardcoded.headers.hardcoded-github-token.hardcoded-github-token
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          '$GITHUB'
    - metavariable-pattern:
        metavariable: $GITHUB
        language: generic
        patterns:
        - pattern: $HEADER $TOKEN
        - metavariable-regex:
            metavariable: $HEADER
            regex: (Bearer|bearer|token|Token)
        - metavariable-regex:
            metavariable: $TOKEN
            regex: (gh[pousr]|github_pat)_[A-Za-z0-9_]{36,251}
        - metavariable-analysis:
            analyzer: entropy
            metavariable: $TOKEN
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          {..., 'Authorization': $SINK, ...}
      - pattern: |
          {..., 'authorization': $SINK, ...}
      - pattern: |
          $OBJ['Authorization'] = $SINK
      - pattern: |
          $OBJ['authorization'] = $SINK
    - focus-metavariable: $SINK
- id: python.ldap3.python-ldap3-empty-password.python-ldap3-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - ldap
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.ldap3.python-ldap3-empty-password.python-ldap3-empty-password
    shortlink: https://sg.run/O5qn
    semgrep.dev:
      rule:
        rule_id: v8U36w
        version_id: jQTjG8
        url: https://semgrep.dev/playground/r/jQTjG8/python.ldap3.python-ldap3-empty-password.python-ldap3-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: ldap3.Connection(..., password="",...)
- id: javascript.firebase.firebase-hardcoded-secret.firebase-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: INFO
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - firebase
    - sql
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.firebase.firebase-hardcoded-secret.firebase-hardcoded-secret
    shortlink: https://sg.run/kvjA
    semgrep.dev:
      rule:
        rule_id: 0oU9Yx
        version_id: K3TLyq
        url: https://semgrep.dev/playground/r/K3TLyq/javascript.firebase.firebase-hardcoded-secret.firebase-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        {...,apiKey:'...',...}
    - pattern-not-inside: |
        {...,apiKey:'',...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('$IMPORT')
          ...
      - pattern-inside: |
          import $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.?firebase\/app)
    - pattern-inside: |
        $SQL($FOO)
- id: javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    technology:
    - express
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep
    shortlink: https://sg.run/Wxn4
    semgrep.dev:
      rule:
        rule_id: j2Up4D
        version_id: A8Tdqw
        url: https://semgrep.dev/playground/r/A8Tdqw/javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{..., $REQ,... }: Request,...) => {...}
      - pattern-inside: |
          (...,{..., $REQ,... }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  - label: CONCAT
    requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: |
          `...${$X}...`
      - pattern: |
          $F + $X
    - pattern-not: |
        `${$X}...`
    - pattern-not: |
        "https://" + $X
    - pattern-not: |
        "http://" + $X
    - pattern-not: |
        "//" + $X
    - pattern-not: |
        `http://${$X}...`
    - pattern-not: |
        `https://${$X}...`
    - pattern-not: |
        `//${$X}...`
    - pattern-not: |
        $X + $F
    - focus-metavariable: $X
  pattern-sinks:
  - requires: TAINTED and not CONCAT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $REQUIRE = require('request')
          ...
      - pattern-inside: |
          import * as $REQUIRE from 'request'
          ...
      - pattern-inside: |
          import $REQUIRE from 'request'
          ...
    - pattern-either:
      - pattern: $REQUIRE.$METHOD($QUERY,...)
    - focus-metavariable: $QUERY
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|post|put|patch|del|head|delete)
- id: scala.play.security.tainted-slick-sqli.tainted-slick-sqli
  mode: taint
  metadata:
    references:
    - https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values
    - https://scala-slick.org/doc/3.2.0/sql-to-slick.html#non-optimal-sql-code
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - scala
    - slick
    - play
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.play.security.tainted-slick-sqli.tainted-slick-sqli
    shortlink: https://sg.run/k9K2
    semgrep.dev:
      rule:
        rule_id: GdUDWO
        version_id: A8TyYe
        url: https://semgrep.dev/playground/r/A8TyYe/scala.play.security.tainted-slick-sqli.tainted-slick-sqli
        origin: community
  message: Detected a tainted SQL statement. This could lead to SQL injection if variables
    in the SQL statement are not properly sanitized. Avoid using using user input
    for generating SQL strings.
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $REQ
        - pattern-either:
          - pattern-inside: "Action {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action(...) {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action.async {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action.async(...) {\n  $REQ: Request[$T] => \n    ...\n}\n"
      - patterns:
        - pattern: $PARAM
        - pattern-either:
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action(...) {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action.async {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action.async(...) {
                ...
              }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $MODEL.overrideSql(...)
      - pattern: sql"..."
    - pattern-inside: |
        import slick.$DEPS
        ...
  severity: ERROR
  languages:
  - scala
- id: python.mariadb.python-mariadb-empty-password.python-mariadb-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mariadb
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.mariadb.python-mariadb-empty-password.python-mariadb-empty-password
    shortlink: https://sg.run/eRdy
    semgrep.dev:
      rule:
        rule_id: d8Ubxo
        version_id: 9lT78r
        url: https://semgrep.dev/playground/r/9lT78r/python.mariadb.python-mariadb-empty-password.python-mariadb-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: mariadb.connect(..., password="",...)
    - pattern: mariadb.connect(..., passwd="",...)
- id: python.mariadb.python-mariadb-hardcoded-secret.python-mariadb-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mariadb
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.mariadb.python-mariadb-hardcoded-secret.python-mariadb-hardcoded-secret
    shortlink: https://sg.run/eRpy
    semgrep.dev:
      rule:
        rule_id: PeUnQ9
        version_id: yeTgYo
        url: https://semgrep.dev/playground/r/yeTgYo/python.mariadb.python-mariadb-hardcoded-secret.python-mariadb-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: mariadb.connect(..., password="...",...)
    - pattern: mariadb.connect(..., passwd="...",...)
  - pattern-not: mariadb.connect(..., password="",...)
  - pattern-not: mariadb.connect(..., passwd="",...)
- id: python.mysql.python-mysql-empty-password.python-mysql-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.mysql.python-mysql-empty-password.python-mysql-empty-password
    shortlink: https://sg.run/vJ7b
    semgrep.dev:
      rule:
        rule_id: ZqUyAn
        version_id: rxTvBQ
        url: https://semgrep.dev/playground/r/rxTvBQ/python.mysql.python-mysql-empty-password.python-mysql-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: mysql.connector.connect(..., password="",...)
    - pattern: mysql.connector.connect(..., passwd="",...)
- id: python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mysqlclient
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password
    shortlink: https://sg.run/dGvd
    semgrep.dev:
      rule:
        rule_id: nJUwLX
        version_id: NdTRv2
        url: https://semgrep.dev/playground/r/NdTRv2/python.mysqlclient.python-mysqlclient-empty-password.python-mysqlclient-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: MySQLdb.$CONNECT(..., passwd="",...)
    - pattern: MySQLdb.$CONNECT($X, $Y, "",...)
    - pattern: MySQLdb._mysql.$CONNECT(..., passwd="",...)
    - pattern: MySQLdb._mysql.$CONNECT($X, $Y, "",...)
- id: python.mysqlclient.python-mysqlclient-hardcoded-secret.python-mysqlclient-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mysqlclient
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.mysqlclient.python-mysqlclient-hardcoded-secret.python-mysqlclient-hardcoded-secret
    shortlink: https://sg.run/vJkb
    semgrep.dev:
      rule:
        rule_id: JDUZDb
        version_id: kbTPQP
        url: https://semgrep.dev/playground/r/kbTPQP/python.mysqlclient.python-mysqlclient-hardcoded-secret.python-mysqlclient-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: MySQLdb.$CONNECT(..., passwd="...",...)
    - pattern: MySQLdb.$CONNECT($X, $Y, "...",...)
    - pattern: MySQLdb._mysql.$CONNECT(..., passwd="...",...)
    - pattern: MySQLdb._mysql.$CONNECT($X, $Y, "...",...)
  - pattern-not: MySQLdb.$CONNECT(..., passwd="",...)
  - pattern-not: MySQLdb.$CONNECT($X, $Y, "",...)
  - pattern-not: MySQLdb._mysql.$CONNECT(..., passwd="",...)
  - pattern-not: MySQLdb._mysql.$CONNECT($X, $Y, "",...)
  - metavariable-regex:
      metavariable: $CONNECT
      regex: ([Cc]onnection|[Cc]onnect)
- id: python.neo4j.python-neo4j-empty-password.python-neo4j-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - neo4j
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.neo4j.python-neo4j-empty-password.python-neo4j-empty-password
    shortlink: https://sg.run/ZY9o
    semgrep.dev:
      rule:
        rule_id: EwUYxZ
        version_id: w8Tbqo
        url: https://semgrep.dev/playground/r/w8Tbqo/python.neo4j.python-neo4j-empty-password.python-neo4j-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: neo4j.basic_auth($USER,"",...)
    - pattern: neo4j.kerberos_auth("",...)
    - pattern: neo4j.bearer_auth("",...)
    - pattern: neo4j.custom_auth($USER,"",...)
- id: python.neo4j.python-neo4j-hardcoded-secret-auth.python-neo4j-hardcoded-secret-auth
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - neo4j
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.neo4j.python-neo4j-hardcoded-secret-auth.python-neo4j-hardcoded-secret-auth
    shortlink: https://sg.run/dGpd
    semgrep.dev:
      rule:
        rule_id: 5rUY9W
        version_id: xyTrl5
        url: https://semgrep.dev/playground/r/xyTrl5/python.neo4j.python-neo4j-hardcoded-secret-auth.python-neo4j-hardcoded-secret-auth
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: neo4j.basic_auth($USER,"...",...)
    - pattern: neo4j.kerberos_auth("...",...)
    - pattern: neo4j.bearer_auth("...",...)
    - pattern: neo4j.custom_auth($USER,"...",...)
  - pattern-not: neo4j.basic_auth($USER,"",...)
  - pattern-not: neo4j.kerberos_auth("",...)
  - pattern-not: neo4j.bearer_auth("",...)
  - pattern-not: neo4j.custom_auth($USER,"",...)
- id: python.neo4j.python-neo4j-hardcoded-secret.python-neo4j-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - neo4j
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.neo4j.python-neo4j-hardcoded-secret.python-neo4j-hardcoded-secret
    shortlink: https://sg.run/ZY7o
    semgrep.dev:
      rule:
        rule_id: GdUWP1
        version_id: O9T7AY
        url: https://semgrep.dev/playground/r/O9T7AY/python.neo4j.python-neo4j-hardcoded-secret.python-neo4j-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        ($X, "...")
    - pattern-not: |
        ($X, "")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: neo4j.AsyncGraphDatabase.driver(..., auth=$SINK,...)
      - pattern: neo4j.GraphDatabase.driver(..., auth=$SINK,...)
    - focus-metavariable: $SINK
- id: python.openai.openai-hardcoded-secret.openai-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - openai
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.openai.openai-hardcoded-secret.openai-hardcoded-secret
    shortlink: https://sg.run/OJxB
    semgrep.dev:
      rule:
        rule_id: d8UoAk
        version_id: e1TKYW
        url: https://semgrep.dev/playground/r/e1TKYW/python.openai.openai-hardcoded-secret.openai-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$X"
    - metavariable-pattern:
        metavariable: $X
        language: generic
        patterns:
        - pattern-regex: ^(sk-(?i)(?!example|fake|\*\*\*))
    - metavariable-analysis:
        analyzer: entropy
        metavariable: $X
  pattern-sinks:
  - patterns:
    - pattern: openai.api_key=$X
    - focus-metavariable: $X
- id: python.psycopg2.python-psycopg2-empty-password.python-psycopg2-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - psycopg2
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.psycopg2.python-psycopg2-empty-password.python-psycopg2-empty-password
    shortlink: https://sg.run/L4Wo
    semgrep.dev:
      rule:
        rule_id: gxU57X
        version_id: 8KTloq
        url: https://semgrep.dev/playground/r/8KTloq/python.psycopg2.python-psycopg2-empty-password.python-psycopg2-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: psycopg2.connect(..., password="",...)
- id: python.psycopg2.python-psycopg2-hardcoded-connection-string.python-psycopg2-hardcoded-connection-string
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - psycopg2
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.psycopg2.python-psycopg2-hardcoded-connection-string.python-psycopg2-hardcoded-connection-string
    shortlink: https://sg.run/WKlL
    semgrep.dev:
      rule:
        rule_id: PeUn8d
        version_id: gETX81
        url: https://semgrep.dev/playground/r/gETX81/python.psycopg2.python-psycopg2-hardcoded-connection-string.python-psycopg2-hardcoded-connection-string
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $STRING
    - metavariable-regex:
        metavariable: $STRING
        regex: .*password=["']?[^{}'"%\s]+.*
  pattern-sinks:
  - patterns:
    - pattern: psycopg2.connect($CONNECTION,...)
    - focus-metavariable: $CONNECTION
- id: python.pymongo.python-pymongo-empty-password.python-pymongo-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymongo
    - mongodb
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymongo.python-pymongo-empty-password.python-pymongo-empty-password
    shortlink: https://sg.run/84EE
    semgrep.dev:
      rule:
        rule_id: QrUQqq
        version_id: PkTGw0
        url: https://semgrep.dev/playground/r/PkTGw0/python.pymongo.python-pymongo-empty-password.python-pymongo-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: pymongo.MongoClient(...,password="",...)
- id: python.pymssql.python-pymssql-empty-password.python-pymssql-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymssql
    - mssql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymssql.python-pymssql-empty-password.python-pymssql-empty-password
    shortlink: https://sg.run/gBQZ
    semgrep.dev:
      rule:
        rule_id: 3qUxX1
        version_id: 5PTGlN
        url: https://semgrep.dev/playground/r/5PTGlN/python.pymssql.python-pymssql-empty-password.python-pymssql-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: pymssql.connect(..., password="",...)
    - pattern: pymssql._mssql.connect(..., password="",...)
- id: python.pymssql.python-pymssql-hardcoded-secret.python-pymssql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymssql
    - mssql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymssql.python-pymssql-hardcoded-secret.python-pymssql-hardcoded-secret
    shortlink: https://sg.run/84WE
    semgrep.dev:
      rule:
        rule_id: WAU6EK
        version_id: GxTXOP
        url: https://semgrep.dev/playground/r/GxTXOP/python.pymssql.python-pymssql-hardcoded-secret.python-pymssql-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: pymssql.connect(..., password="...",...)
    - pattern: pymssql._mssql.connect(..., password="...",...)
  - pattern-not: pymssql.connect(..., password="",...)
  - pattern-not: pymssql._mssql.connect(..., password="",...)
- id: python.pymysql.python-pymysql-empty-password.python-pymysql-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymysql
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymysql.python-pymysql-empty-password.python-pymysql-empty-password
    shortlink: https://sg.run/QRYQ
    semgrep.dev:
      rule:
        rule_id: 4bUYjO
        version_id: RGTxWk
        url: https://semgrep.dev/playground/r/RGTxWk/python.pymysql.python-pymysql-empty-password.python-pymysql-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: pymysql.connect(..., password="",...)
- id: python.redis.python-redis-empty-password.python-redis-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.redis.python-redis-empty-password.python-redis-empty-password
    shortlink: https://sg.run/31Ep
    semgrep.dev:
      rule:
        rule_id: PeUn3g
        version_id: BjTLjk
        url: https://semgrep.dev/playground/r/BjTLjk/python.redis.python-redis-empty-password.python-redis-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: redis.Redis(..., password="",...)
- id: python.redis.python-redis-hardcoded-secret.python-redis-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.redis.python-redis-hardcoded-secret.python-redis-hardcoded-secret
    shortlink: https://sg.run/gBjZ
    semgrep.dev:
      rule:
        rule_id: 0oU61X
        version_id: DkTyok
        url: https://semgrep.dev/playground/r/DkTyok/python.redis.python-redis-hardcoded-secret.python-redis-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: redis.Redis(..., password="...",...)
    - pattern: redis.ConnectionPool(..., password="...",...)
  - pattern-not: redis.Redis(..., password="",...)
  - pattern-not: redis.ConnectionPool(..., password="",...)
- id: ruby.excon.ruby-excon-hardcoded-uri-secret.ruby-excon-hardcoded-uri-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - excon
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.excon.ruby-excon-hardcoded-uri-secret.ruby-excon-hardcoded-uri-secret
    shortlink: https://sg.run/5zl6
    semgrep.dev:
      rule:
        rule_id: NbUEKv
        version_id: yeTgbo
        url: https://semgrep.dev/playground/r/yeTgbo/ruby.excon.ruby-excon-hardcoded-uri-secret.ruby-excon-hardcoded-uri-secret
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$STRING"
    - metavariable-regex:
        metavariable: $STRING
        regex: ([A-Za-z0-9_\-\+]*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
  pattern-sinks:
  - patterns:
    - pattern: |
        Excon.new($SINK,...)
    - focus-metavariable: $SINK
- id: typescript.react.react-create-element-dangerouslysetinnerhtml-url.react-create-element-dangerouslysetinnerhtml-url
  message: Detected the use of dangerouslySetInnerHTML where input comes from the
    request URL. This can introduce a Cross-Site-Scripting (XSS) vulnerability if
    this comes from user-provided input. If you have to use dangerouslySetInnerHTML,
    consider using a sanitization library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1
    technology:
    - react
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.react.react-create-element-dangerouslysetinnerhtml-url.react-create-element-dangerouslysetinnerhtml-url
    shortlink: https://sg.run/Y3De
    semgrep.dev:
      rule:
        rule_id: JDUz54
        version_id: A8Tl1X
        url: https://semgrep.dev/playground/r/A8Tl1X/typescript.react.react-create-element-dangerouslysetinnerhtml-url.react-create-element-dangerouslysetinnerhtml-url
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: new URLSearchParams(useLocation().search).get('...')
      - pattern: new URL(location.href).searchParams.get('...')
      - pattern: new URL($WINDOW. ... .location.href).searchParams.get('...')
      - pattern: new URLSearchParams(location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams(location.hash.slice(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.slice(1)).get("...")
      - pattern: location.hash.split("...")[1]
      - pattern: $WINDOW. ... .location.hash.split("...")[1]
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URLSearchParams(useLocation().search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(window.location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.slice(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.slice(1))
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URL(location.href)
          ...
      - pattern-inside: |
          $VALUE = new URL($WINDOW. ... .location.href)
          ...
    - pattern: $VALUE.searchParams.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          [...,$VALUE,...] = useSearchParams()
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern: |
        [$QUERY,...] = useQueryParams(...)
    - focus-metavariable: $QUERY
  - patterns:
    - pattern: |
        $QUERY = useQueryParams(...)
    - focus-metavariable: $QUERY
    - pattern: $QUERY.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          var { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          const { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          let { ...,$VALUE,... } = useLocation()
          ...
    - pattern-inside: |
        $ASSIGN = new URLSearchParams($VALUE)
        ...
    - pattern: $ASSIGN.get('...')
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REACT.createElement("...", {...,dangerouslySetInnerHTML:{__html: $PROPS},...},...);
      - pattern-inside: |
          $REACT. ... .createElement("...",{...,dangerouslySetInnerHTML: {__html: $PROPS},...},...);
    - focus-metavariable: $PROPS
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: kotlin.spring.jdbctemplate-sqli.jdbctemplate-sqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Kotlin, it is possible to adopt prepared statements using
    the `connection.PreparedStatement` class with parameterized queries. For more
    information, see: [Prepared statements in Kotlin](https://developer.android.com/reference/kotlin/java/sql/PreparedStatement).'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - jdbc
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.jdbctemplate-sqli.jdbctemplate-sqli
    shortlink: https://sg.run/bALE
    semgrep.dev:
      rule:
        rule_id: DbUJwL
        version_id: JdTjzD
        url: https://semgrep.dev/playground/r/JdTjzD/kotlin.spring.jdbctemplate-sqli.jdbctemplate-sqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          ($DB: JdbcTemplate).$METHOD($SQL,...)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $DB = JdbcTemplate(...)
              ...
          - pattern-inside: |
              class $CL(...) {
                  ...
                  val $DB = JdbcTemplate(...)
                  ...
              }
        - pattern: $DB.$METHOD($SQL, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(batchUpdate|execute|query|queryForList|queryForMap|queryForObject|queryForRowSet|queryForStream|update)$
    - focus-metavariable: $SQL
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.spring.scripting-host-eval.scripting-host-eval
  message: 'The application might dynamically evaluate untrusted input, which can
    lead to a code injection vulnerability. An attacker can execute arbitrary code,
    potentially gaining complete control of the system. To prevent this vulnerability,
    avoid executing code containing user input. If this is unavoidable, validate and
    sanitize the input, and use safe alternatives for evaluating user input. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    cwe2020-top25: true
    cwe2022-top25: true
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.scripting-host-eval.scripting-host-eval
    shortlink: https://sg.run/k612
    semgrep.dev:
      rule:
        rule_id: 0oUBGk
        version_id: A8T2gq
        url: https://semgrep.dev/playground/r/A8T2gq/kotlin.spring.scripting-host-eval.scripting-host-eval
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: BasicJvmScriptingHost(...).eval($SCRIPT,...)
      - pattern: BasicJvmScriptingHost(...).compileAndEval($SCRIPT,...)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $H = BasicJvmScriptingHost(...)
              ...
          - pattern-inside: |
              class $CL(...) {
                ...
                val $H = BasicJvmScriptingHost(...)
                ...
              }
        - pattern-either:
          - pattern: $H.eval($SCRIPT,...)
          - pattern: $H.compileAndEval($SCRIPT,...)
    - focus-metavariable: $SCRIPT
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: go.lang.security.filepath-clean-misuse.filepath-clean-misuse
  message: '`Clean` is not intended to sanitize against path traversal attacks. This
    function is for finding the shortest path name equivalent to the given input.
    Using `Clean` to sanitize file reads may expose this application to path traversal
    attacks, where an attacker could access arbitrary files on the server. To fix
    this easily, write this: `filepath.FromSlash(path.Clean("/"+strings.Trim(req.URL.Path,
    "/")))` However, a better solution is using the `SecureJoin` function in the package
    `filepath-securejoin`. See https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme.'
  severity: ERROR
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQUEST : *http.Request).$ANYTHING
      - pattern: |
          ($REQUEST : http.Request).$ANYTHING
    - metavariable-regex:
        metavariable: $ANYTHING
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: filepath.Clean($...INNER)
      - pattern: path.Clean($...INNER)
  pattern-sanitizers:
  - pattern-either:
    - pattern: |
        "/" + ...
  fix: filepath.FromSlash(filepath.Clean("/"+strings.Trim($...INNER, "/")))
  metadata:
    references:
    - https://pkg.go.dev/path#Clean
    - http://technosophos.com/2016/03/31/go-quickly-cleaning-filepaths.html
    - https://labs.detectify.com/2021/12/15/zero-day-path-traversal-grafana/
    - https://dzx.cz/2021/04/02/go_path_traversal/
    - https://pkg.go.dev/github.com/cyphar/filepath-securejoin#section-readme
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - go
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.filepath-clean-misuse.filepath-clean-misuse
    shortlink: https://sg.run/ZKzw
    semgrep.dev:
      rule:
        rule_id: qNUQJe
        version_id: 5PTGb4
        url: https://semgrep.dev/playground/r/5PTGb4/go.lang.security.filepath-clean-misuse.filepath-clean-misuse
        origin: community
- id: java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
  message: Detected a request with potential user-input going into a OutputStream
    or Writer object. This bypasses any view or template environments, including HTML
    escaping, which may expose this application to cross-site scripting (XSS) vulnerabilities.
    Consider using a view technology such as JavaServer Faces (JSFs) which automatically
    escapes HTML views.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServerFaces.html
    subcategory:
    - vuln
    technology:
    - java
    - servlets
    interfile: true
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
    shortlink: https://sg.run/KlRL
    semgrep.dev:
      rule:
        rule_id: j2Uv7B
        version_id: WrTn0E
        url: https://semgrep.dev/playground/r/WrTn0E/java.lang.security.audit.xss.no-direct-response-writer.no-direct-response-writer
        origin: community
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletResponse $RESPONSE).getWriter(...).$WRITE(...)
      - pattern: |
          (HttpServletResponse $RESPONSE).getOutputStream(...).$WRITE(...)
      - pattern: |
          (java.io.PrintWriter $WRITER).$WRITE(...)
      - pattern: |
          (PrintWriter $WRITER).$WRITE(...)
      - pattern: |
          (javax.servlet.ServletOutputStream $WRITER).$WRITE(...)
      - pattern: |
          (ServletOutputStream $WRITER).$WRITE(...)
      - pattern: |
          (java.io.OutputStream $WRITER).$WRITE(...)
      - pattern: |
          (OutputStream $WRITER).$WRITE(...)
  pattern-sanitizers:
  - pattern-either:
    - pattern: Encode.forHtml(...)
    - pattern: (PolicyFactory $POLICY).sanitize(...)
    - pattern: (AntiSamy $AS).scan(...)
    - pattern: JSoup.clean(...)
- id: java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          ObjectMapper $OM = new ObjectMapper(...);
          ...
      - pattern-inside: |
          $OM.enableDefaultTyping();
          ...
      - pattern: $OM.readValue($JSON, ...);
    - patterns:
      - pattern-inside: |
          class $CLASS {
            ...
            @JsonTypeInfo(use = Id.CLASS,...)
            $TYPE $VAR;
            ...
          }
      - metavariable-regex:
          metavariable: $TYPE
          regex: (Object|Serializable|Comparable)
      - pattern: $OM.readValue($JSON, $CLASS.class);
    - patterns:
      - pattern-inside: |
          class $CLASS {
            ...
            ObjectMapper $OM;
            ...
            $INITMETHODTYPE $INITMETHOD(...) {
              ...
              $OM = new ObjectMapper();
              ...
              $OM.enableDefaultTyping();
              ...
            }
            ...
          }
      - pattern-inside: "$METHODTYPE $METHOD(...) {\n  ...  \n}\n"
      - pattern: $OM.readValue($JSON, ...);
  message: When using Jackson to marshall/unmarshall JSON to Java objects, enabling
    default typing is dangerous and can lead to RCE. If an attacker can control `$JSON`
    it might be possible to provide a malicious JSON which can be used to exploit
    unsecure deserialization. In order to prevent this issue, avoid to enable default
    typing (globally or by using "Per-class" annotations) and avoid using `Object`
    and other dangerous types for member variable declaration which creating classes
    for Jackson based deserialization.
  languages:
  - java
  severity: WARNING
  metadata:
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    confidence: MEDIUM
    likelihood: LOW
    impact: HIGH
    owasp:
    - A8:2017 Insecure Deserialization
    - A8:2021 Software and Data Integrity Failures
    references:
    - https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038
    - https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062
    - https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/
    technology:
    - jackson
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization
    shortlink: https://sg.run/GDop
    semgrep.dev:
      rule:
        rule_id: QrUD20
        version_id: 2KT21B
        url: https://semgrep.dev/playground/r/2KT21B/java.lang.security.jackson-unsafe-deserialization.jackson-unsafe-deserialization
        origin: community
- id: java.jedis.secrets.jedis-auth-hardcoded-password.jedis-auth-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jedis.secrets.jedis-auth-hardcoded-password.jedis-auth-hardcoded-secret
    shortlink: https://sg.run/6pZo
    semgrep.dev:
      rule:
        rule_id: NbUEpv
        version_id: DkTyQE
        url: https://semgrep.dev/playground/r/DkTyQE/java.jedis.secrets.jedis-auth-hardcoded-password.jedis-auth-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  options:
    symbolic_propagation: true
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          import redis.*;
          ...
      - pattern-either:
        - pattern: |
            (clients.jedis.Jedis $JEDIS).auth("$PASS")
        - pattern: |
            (clients.jedis.Jedis $JEDIS).auth($USER, "$PASS")
        - pattern: |
            (clients.jedis.resps.AccessControlUser $JEDIS).auth($USER, "$PASS")
    - patterns:
      - pattern-inside: |
          import redis.clients.*;
          ...
      - pattern-either:
        - pattern: |
            (jedis.Jedis $JEDIS).auth("$PASS")
        - pattern: |
            (jedis.Jedis $JEDIS).auth($USER, "$PASS")
        - pattern: |
            (jedis.resps.AccessControlUser $JEDIS).auth($USER, "$PASS")
    - patterns:
      - pattern-inside: |
          import redis.clients.jedis.*;
          ...
      - pattern-either:
        - pattern: |
            (Jedis $JEDIS).auth("$PASS")
        - pattern: |
            (Jedis $JEDIS).auth($USER, "$PASS")
        - pattern: |
            (resps.AccessControlUser $JEDIS).auth($USER, "$PASS")
    - patterns:
      - pattern-either:
        - pattern: |
            (redis.clients.jedis.Jedis $JEDIS).auth("$PASS")
        - pattern: |
            (redis.clients.jedis.Jedis $JEDIS).auth($USER, "$PASS")
        - pattern: |
            (redis.clients.jedis.resps.AccessControlUser $JEDIS).auth($USER, "$PASS")
  - pattern: |
      "$PASS"
  - pattern-not: |
      ""
- id: java.jedis.secrets.jedis-jedisclientconfig-hardcoded-password.jedis-jedisclientconfig-hardcoded-password
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jedis.secrets.jedis-jedisclientconfig-hardcoded-password.jedis-jedisclientconfig-hardcoded-password
    shortlink: https://sg.run/zXgG
    semgrep.dev:
      rule:
        rule_id: wdUvBd
        version_id: WrTnb0
        url: https://semgrep.dev/playground/r/WrTnb0/java.jedis.secrets.jedis-jedisclientconfig-hardcoded-password.jedis-jedisclientconfig-hardcoded-password
        origin: pro_rules
  languages:
  - java
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern: |
          redis.clients.jedis.DefaultJedisClientConfig.builder(). ... .password("...")
      - pattern: |
          (redis.clients.jedis.DefaultJedisClientConfig.Builder $JEDIS). ... .password("...")
      - pattern: |
          redis.clients.jedis.DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          new redis.clients.jedis.DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          (redis.clients.jedis.JedisClientConfig $JEDIS).updatePassword("...")
      - pattern: |
          (redis.clients.jedis.DefaultJedisClientConfig $JEDIS).updatePassword("...")
    - pattern-not: |
        redis.clients.jedis.DefaultJedisClientConfig.builder(). ... .password("")
    - pattern-not: |
        (redis.clients.jedis.DefaultJedisClientConfig.Builder $JEDIS). ... .password("")
    - pattern-not: |
        redis.clients.jedis.DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        new redis.clients.jedis.DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        (redis.clients.jedis.JedisClientConfig $JEDIS).updatePassword("")
    - pattern-not: |
        (redis.clients.jedis.DefaultJedisClientConfig $JEDIS).updatePassword("")
  - patterns:
    - pattern-inside: |
        import redis.clients.jedis.*;
        ...
    - pattern-either:
      - pattern: |
          DefaultJedisClientConfig.builder(). ... .password("...")
      - pattern: |
          (DefaultJedisClientConfig.Builder $JEDIS). ... .password("...")
      - pattern: |
          DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          new DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          (JedisClientConfig $JEDIS).updatePassword("...")
      - pattern: |
          (DefaultJedisClientConfig $JEDIS).updatePassword("...")
    - pattern-not: |
        DefaultJedisClientConfig.builder(). ... .password("")
    - pattern-not: |
        (DefaultJedisClientConfig.Builder $JEDIS). ... .password("")
    - pattern-not: |
        DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        new DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        (JedisClientConfig $JEDIS).updatePassword("")
    - pattern-not: |
        (DefaultJedisClientConfig $JEDIS).updatePassword("")
  - patterns:
    - pattern-inside: |
        import redis.clients.*;
        ...
    - pattern-either:
      - pattern: |
          jedis.DefaultJedisClientConfig.builder(). ... .password("...")
      - pattern: |
          (jedis.DefaultJedisClientConfig.Builder $JEDIS). ... .password("...")
      - pattern: |
          jedis.DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          new jedis.DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          (jedis.JedisClientConfig $JEDIS).updatePassword("...")
      - pattern: |
          (jedis.DefaultJedisClientConfig $JEDIS).updatePassword("...")
    - pattern-not: |
        jedis.DefaultJedisClientConfig.builder(). ... .password("")
    - pattern-not: |
        (jedis.DefaultJedisClientConfig.Builder $JEDIS). ... .password("")
    - pattern-not: |
        jedis.DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        new jedis.DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        (jedis.JedisClientConfig $JEDIS).updatePassword("")
    - pattern-not: |
        (jedis.DefaultJedisClientConfig $JEDIS).updatePassword("")
  - patterns:
    - pattern-inside: |
        import redis.*;
        ...
    - pattern-either:
      - pattern: |
          clients.jedis.DefaultJedisClientConfig.builder(). ... .password("...")
      - pattern: |
          (clients.jedis.DefaultJedisClientConfig.Builder $JEDIS). ... .password("...")
      - pattern: |
          clients.jedis.DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          new clients.jedis.DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "...", ...)
      - pattern: |
          (clients.jedis.JedisClientConfig $JEDIS).updatePassword("...")
      - pattern: |
          (clients.jedis.DefaultJedisClientConfig $JEDIS).updatePassword("...")
    - pattern-not: |
        clients.jedis.DefaultJedisClientConfig.builder(). ... .password("")
    - pattern-not: |
        (clients.jedis.DefaultJedisClientConfig.Builder $JEDIS). ... .password("")
    - pattern-not: |
        clients.jedis.DefaultJedisClientConfig.create($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        new clients.jedis.DefaultJedisClientConfig($CONNECTIONTIMEOUTMILLIS, $SOTIMEOUTMILLIS, $BLOCKINGSOCKETTIMEOUTMILLIS, $USER, "", ...)
    - pattern-not: |
        (clients.jedis.JedisClientConfig $JEDIS).updatePassword("")
    - pattern-not: |
        (clients.jedis.DefaultJedisClientConfig $JEDIS).updatePassword("")
- id: java.jedis.secrets.jedissentinelpool-constructor-hardcoded-secret.jedissentinelpool-constructor-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - jedis
    - redis
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jedis.secrets.jedissentinelpool-constructor-hardcoded-secret.jedissentinelpool-constructor-hardcoded-secret
    shortlink: https://sg.run/XxJK
    semgrep.dev:
      rule:
        rule_id: eqUw2l
        version_id: qkTwNw
        url: https://semgrep.dev/playground/r/qkTwNw/java.jedis.secrets.jedissentinelpool-constructor-hardcoded-secret.jedissentinelpool-constructor-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  options:
    symbolic_propagation: true
  pattern-either:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "...")
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
    - patterns:
      - pattern-either:
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "...")
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
        - pattern: |
            new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
      - pattern-not: |
          new redis.clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
  - patterns:
    - pattern-inside: |
        import redis.clients.jedis.*;
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "...")
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
      - patterns:
        - pattern-either:
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "...")
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
          - pattern: |
              new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
        - pattern-not: |
            new JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
  - patterns:
    - pattern-inside: |
        import redis.clients.*;
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "...")
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
      - patterns:
        - pattern-either:
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "...")
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
          - pattern: |
              new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
        - pattern-not: |
            new jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
  - patterns:
    - pattern-inside: |
        import redis.*;
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "...")
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (JedisPoolConfig $POOLCONFIG), "")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
      - patterns:
        - pattern-either:
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "...", (String $SENTINELCLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...")
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "...", (int $DATABASE), (String $CLIENTNAME))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "...")
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...")
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "...", (String $SENTINELPASSWORD))
          - pattern: |
              new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "...")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (int $INFINITESOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), (String $SENTINELPASSWORD), (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $CONNECTIONTIMEOUT), (int $SOTIMEOUT), (String $USER), (String $PASSWORD), (int $DATABASE), (String $CLIENTNAME), (int $SENTINELCONNECTIONTIMEOUT), (int $SENTINELSOTIMEOUT), (String $SENTINELUSER), "", (String $SENTINELCLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), (int $TIMEOUT), (String $USER), "", (int $DATABASE), (String $CLIENTNAME))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (GenericObjectPoolConfig $POOLCONFIG), "")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "")
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), "", (String $SENTINELPASSWORD))
        - pattern-not: |
            new clients.jedis.JedisSentinelPool((String $MASTERNAME), (Set<String> $SENTINELS), (String $PASSWORD), "")
- id: ruby.aws-sdk-core.ruby-aws-sdk-hardcoded-secret.ruby-aws-sdk-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - aws
    - aws-sdk
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.aws-sdk-core.ruby-aws-sdk-hardcoded-secret.ruby-aws-sdk-hardcoded-secret
    shortlink: https://sg.run/Kzn7
    semgrep.dev:
      rule:
        rule_id: 9AULGX
        version_id: QkTNKB
        url: https://semgrep.dev/playground/r/QkTNKB/ruby.aws-sdk-core.ruby-aws-sdk-hardcoded-secret.ruby-aws-sdk-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "aws-sdk-core"
      ...
  - pattern-either:
    - pattern: |
        Aws::Credentials.new($X, "...", ...)
- id: ruby.cassandra.ruby-cassandra-empty-password.ruby-cassandra-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.cassandra.ruby-cassandra-empty-password.ruby-cassandra-empty-password
    shortlink: https://sg.run/4oqg
    semgrep.dev:
      rule:
        rule_id: yyUz4d
        version_id: 3ZTw9g
        url: https://semgrep.dev/playground/r/3ZTw9g/ruby.cassandra.ruby-cassandra-empty-password.ruby-cassandra-empty-password
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "cassandra"
      ...
  - pattern: |
      Cassandra.cluster(..., password: "", ...)
- id: ruby.cassandra.ruby-cassandra-hardcoded-secret.ruby-cassandra-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - cassandra
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.cassandra.ruby-cassandra-hardcoded-secret.ruby-cassandra-hardcoded-secret
    shortlink: https://sg.run/PxnN
    semgrep.dev:
      rule:
        rule_id: r6UXpb
        version_id: 44TqvK
        url: https://semgrep.dev/playground/r/44TqvK/ruby.cassandra.ruby-cassandra-hardcoded-secret.ruby-cassandra-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "cassandra"
      ...
  - pattern-either:
    - pattern: |
        Cassandra.cluster(..., password: "...", ...)
  - pattern-not: |
      Cassandra.cluster(..., password: "", ...)
- id: ruby.excon.ruby-excon-hardcoded-secret.ruby-excon-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - excon
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.excon.ruby-excon-hardcoded-secret.ruby-excon-hardcoded-secret
    shortlink: https://sg.run/Jono
    semgrep.dev:
      rule:
        rule_id: bwUJ7J
        version_id: PkTGAw
        url: https://semgrep.dev/playground/r/PkTGAw/ruby.excon.ruby-excon-hardcoded-secret.ruby-excon-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "excon"
      ...
  - pattern-either:
    - pattern: |
        Excon.new(..., :password => "...", ...)
    - pattern: |
        Excon.new(..., :password => Excon::Utils.escape_uri("..."), ...)
- id: ruby.faraday.ruby-faraday-hardcoded-secret.ruby-faraday-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - faraday
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.faraday.ruby-faraday-hardcoded-secret.ruby-faraday-hardcoded-secret
    shortlink: https://sg.run/G38B
    semgrep.dev:
      rule:
        rule_id: kxU9Bv
        version_id: JdTR7A
        url: https://semgrep.dev/playground/r/JdTR7A/ruby.faraday.ruby-faraday-hardcoded-secret.ruby-faraday-hardcoded-secret
        origin: pro_rules
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require "faraday"
      ...
  - pattern-either:
    - pattern: |
        $X.request :authorization, :basic, $USER, "..."
    - pattern: |
        $X.request :basic_auth, $USER, "..."
    - pattern: |
        $X.request :token_auth, "...", ...
    - pattern: |
        $X.request :authorization, $BEARER, "..."
- id: ruby.faraday.ruby-faraday-hardcoded-uri-secret.ruby-faraday-hardcoded-uri-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - faraday
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/ruby.faraday.ruby-faraday-hardcoded-uri-secret.ruby-faraday-hardcoded-uri-secret
    shortlink: https://sg.run/RxnE
    semgrep.dev:
      rule:
        rule_id: wdUvPd
        version_id: 5PTGn2
        url: https://semgrep.dev/playground/r/5PTGn2/ruby.faraday.ruby-faraday-hardcoded-uri-secret.ruby-faraday-hardcoded-uri-secret
        origin: pro_rules
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$STRING"
    - metavariable-regex:
        metavariable: $STRING
        regex: ([A-Za-z0-9_\-\+]*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>)([^@]*)@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        require "faraday"
        ...
    - pattern-either:
      - pattern: |
          Faraday.new($SINK,...)
      - pattern: |
          Faraday.new(..., url: $SINK,...)
- id: c.lang.security.function-use-after-free.function-use-after-free
  patterns:
  - pattern-either:
    - pattern: $FUNC(..., <... $VAR ...>, ...)
    - pattern: $FUNC(..., <... $VAR->$ACCESSOR ...>, ...)
    - pattern: $FUNC(..., <... (*$VAR).$ACCESSOR ...>, ...)
    - pattern: $FUNC(..., <... $VAR[$NUM] ...>, ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: (?!^free$)
  - pattern-inside: free($VAR); ...
  - pattern-not-inside: $VAR = NULL; ...
  - pattern-not-inside: free($VAR); ... $VAR = malloc(...); ...
  message: Variable '$VAR' was passed to a function after being freed. This can lead
    to undefined behavior.
  metadata:
    cwe:
    - 'CWE-416: Use After Free'
    references:
    - https://cwe.mitre.org/data/definitions/416.html
    - https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/
    category: security
    technology:
    - c
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.function-use-after-free.function-use-after-free
    shortlink: https://sg.run/eWyZ
    semgrep.dev:
      rule:
        rule_id: WAU9Dz
        version_id: RGTLOb
        url: https://semgrep.dev/playground/r/RGTLOb/c.lang.security.function-use-after-free.function-use-after-free
        origin: community
  languages:
  - c
  severity: WARNING
- id: csharp.dotnet.security.audit.mass-assignment.mass-assignment
  message: Mass assignment or Autobinding vulnerability in code allows an attacker
    to execute over-posting attacks, which could create a new parameter in the binding
    request and manipulate the underlying object in the application.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://cwe.mitre.org/data/definitions/915.html
    - https://github.com/OWASP/API-Security/blob/master/2019/en/src/0xa6-mass-assignment.md
    subcategory:
    - vuln
    technology:
    - .net
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.audit.mass-assignment.mass-assignment
    shortlink: https://sg.run/7B3e
    semgrep.dev:
      rule:
        rule_id: x8Up5B
        version_id: WrT58w
        url: https://semgrep.dev/playground/r/WrT58w/csharp.dotnet.security.audit.mass-assignment.mass-assignment
        origin: community
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          public IActionResult $METHOD(..., $TYPE $ARG, ...){
            ...
          }
      - pattern: |
          public ActionResult $METHOD(..., $TYPE $ARG, ...){
            ...
          }
    - pattern-inside: |
        using Microsoft.AspNetCore.Mvc;
        ...
    - pattern-not: |
        public IActionResult $METHOD(..., [Bind(...)] $TYPE $ARG, ...){
          ...
        }
    - pattern-not: |
        public ActionResult $METHOD(..., [Bind(...)] $TYPE $ARG, ...){
          ...
        }
    - focus-metavariable: $ARG
  pattern-sinks:
  - pattern: View(...)
- id: javascript.lang.security.audit.sqli.node-mssql-sqli.node-mssql-sqli
  message: 'Detected string concatenation with a non-literal variable in a `mssql`
    JS SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can use parameterized statements like
    so: `$REQ.input(''USER_ID'', mssql.Int, id);`'
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - mssql
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://www.npmjs.com/package/mssql
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    source: https://semgrep.dev/r/javascript.lang.security.audit.sqli.node-mssql-sqli.node-mssql-sqli
    shortlink: https://sg.run/lxlB
    semgrep.dev:
      rule:
        rule_id: kxU8Pd
        version_id: JdT83K
        url: https://semgrep.dev/playground/r/JdT83K/javascript.lang.security.audit.sqli.node-mssql-sqli.node-mssql-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        function ... (...,$FUNC,...) {
          ...
        }
    - focus-metavariable: $FUNC
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('mssql');
          ...
      - pattern-inside: |
          import 'mssql';
          ...
    - pattern-inside: |
        $REQ = $POOL.request(...)
        ...
    - pattern: |
        $REQ.query($QUERY,...)
    - focus-metavariable: $QUERY
- id: yaml.github-actions.security.run-shell-injection.run-shell-injection
  languages:
  - yaml
  message: 'Using variable interpolation `${{...}}` with `github` context data in
    a `run:` step could allow an attacker to inject their own code into the runner.
    This would allow them to steal secrets and code. `github` context data can have
    arbitrary user input and should be treated as untrusted. Instead, use an intermediate
    environment variable with `env:` to store the data and use the environment variable
    in the `run:` script. Be sure to use double-quotes the environment variable, like
    this: "$ENVVAR".'
  metadata:
    category: security
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections
    - https://securitylab.github.com/research/github-actions-untrusted-input/
    technology:
    - github-actions
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.github-actions.security.run-shell-injection.run-shell-injection
    shortlink: https://sg.run/pkzk
    semgrep.dev:
      rule:
        rule_id: v8UjQj
        version_id: K3TPZA
        url: https://semgrep.dev/playground/r/K3TPZA/yaml.github-actions.security.run-shell-injection.run-shell-injection
        origin: community
  patterns:
  - pattern-inside: 'steps: [...]'
  - pattern-inside: |
      - run: ...
        ...
  - pattern: 'run: $SHELL'
  - metavariable-pattern:
      language: generic
      metavariable: $SHELL
      patterns:
      - pattern-either:
        - pattern: ${{ github.event.issue.title }}
        - pattern: ${{ github.event.issue.body }}
        - pattern: ${{ github.event.pull_request.title }}
        - pattern: ${{ github.event.pull_request.body }}
        - pattern: ${{ github.event.comment.body }}
        - pattern: ${{ github.event.review.body }}
        - pattern: ${{ github.event.review_comment.body }}
        - pattern: ${{ github.event.pages. ... .page_name}}
        - pattern: ${{ github.event.head_commit.message }}
        - pattern: ${{ github.event.head_commit.author.email }}
        - pattern: ${{ github.event.head_commit.author.name }}
        - pattern: ${{ github.event.commits ... .author.email }}
        - pattern: ${{ github.event.commits ... .author.name }}
        - pattern: ${{ github.event.pull_request.head.ref }}
        - pattern: ${{ github.event.pull_request.head.label }}
        - pattern: ${{ github.event.pull_request.head.repo.default_branch }}
        - pattern: ${{ github.head_ref }}
        - pattern: ${{ github.event.inputs ... }}
  severity: ERROR
- id: go.net.path-traversal.net-http-path-traversal-taint-mux.net-http-path-traversal-taint-mux
  message: Untrusted input might be used to build a path, which can lead to a path
    traversal vulnerability. An attacker can manipulate the path which the application
    uses to access files. If the application does not validate user input and sanitize
    file paths, sensitive files can be accessed, such as configuration files or user
    data, potentially creating or overwriting files. To prevent this vulnerability,
    validate and sanitize any input that is used to create references to file paths.
    Also, enforce strict file access controls. For example, choose privileges allowing
    public-facing applications to access only the required files. In Go, it is possible
    to sanitize user input and mitigate path traversal by using the `SecureJoin` function
    in `filepath-securejoin`.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://pkg.go.dev/net/http#ServeMux.Handler
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - go
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.path-traversal.net-http-path-traversal-taint-mux.net-http-path-traversal-taint-mux
    shortlink: https://sg.run/jYjP
    semgrep.dev:
      rule:
        rule_id: ReU7Al
        version_id: zyT2bP
        url: https://semgrep.dev/playground/r/zyT2bP/go.net.path-traversal.net-http-path-traversal-taint-mux.net-http-path-traversal-taint-mux
        origin: pro_rules
  languages:
  - go
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          ($REQ : http.Request).$FIELD
      - pattern: |
          ($REQ : *http.Request).$FIELD
    - pattern-not-inside: $REQ.URL.EscapedPath()
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - requires: USER_INPUT
    label: MUX
    patterns:
    - pattern-inside: |
        $MUX = http.NewServeMux()
        ...
    - pattern-inside: |
        $MUX.HandleFunc(...)
  pattern-sinks:
  - requires: MUX
    patterns:
    - pattern-not-inside: |
        if r.Method != http.MethodConnect{
          ...
        }
    - pattern-not-inside: |
        if r.Method == http.MethodConnect{
          ...
        }
        ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            import "net/http"
            ...
        - pattern: |
            http.FileSystem.$FUNC($F, $INPUT)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open)$
        - focus-metavariable: $INPUT
      - patterns:
        - pattern-inside: |
            import "os"
            ...
        - pattern: |
            os.$FUNC($INPUT, ...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
        - focus-metavariable: $INPUT
      - patterns:
        - pattern-inside: |
            import "io/fs"
            ...
        - pattern: |
            fs.$FUNC($FS, $INPUT, ...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Glob|ReadFile|WalkDir)$
        - focus-metavariable: $INPUT
      - patterns:
        - pattern-inside: |
            import "io/ioutil"
            ...
        - pattern: |
            ioutil.$FUNC($INPUT)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(ReadFile)$
        - focus-metavariable: $INPUT
      - patterns:
        - pattern-inside: |
            import "archive/zip"
            ...
        - pattern-either:
          - patterns:
            - pattern-either:
              - patterns:
                - pattern-inside: |
                    $W := zip.NewWriter(...)
                    ...
                - pattern: $W.$FUNC($INPUT)
              - pattern: |
                  ($W : *zip.Writer).$FUNC($INPUT)
            - metavariable-regex:
                metavariable: $FUNC
                regex: ^(Create)$
          - patterns:
            - pattern-either:
              - patterns:
                - pattern-inside: |
                    $R, ... := zip.NewReader(...)
                    ...
                - pattern: $R.$FUNC($INPUT)
              - pattern: |
                  ($R : *zip.Reader).$FUNC($INPUT)
            - metavariable-regex:
                metavariable: $FUNC
                regex: ^(Open)$
        - focus-metavariable: $INPUT
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "path"
          ...
      - pattern-inside: |
          import "path/filepath"
          ...
    - pattern-either:
      - pattern: |
          $P.Join("/", ..., $INPUT, ...)
      - patterns:
        - pattern: $P.$SANFUNC($INPUT)
        - metavariable-regex:
            metavariable: $SANFUNC
            regex: ^(Abs|Base|Clean|Dir|Ext)$
    - metavariable-regex:
        metavariable: $P
        regex: ^(path|filepath)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: |
        fs.ValidPath(...)
- id: javascript.browser.xss.xss
  message: Detected the use of a Document/Location property that enters a dangerous
    web API. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this
    comes from user-provided input. If you have to use a dangerous web API, consider
    using a sanitization library such as DOMPurify to sanitize the HTML before it
    is assigned.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.browser.xss.xss
    shortlink: https://sg.run/5zlA
    semgrep.dev:
      rule:
        rule_id: 6JUklx
        version_id: GxTeqN
        url: https://semgrep.dev/playground/r/GxTeqN/javascript.browser.xss.xss
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - label: TAINTED
    patterns:
    - pattern-either:
      - pattern: $THIS. ... .location.hash.slice(1)
      - pattern: location.hash.slice(1)
      - pattern: |
          $THIS. ... .location.hash.split("#")[1]
      - pattern: |
          location.hash.split("#")[1]
      - pattern: |
          $THIS. ... .location.search.split("=")[1]
      - pattern: |
          location.search.split("=")[1]
      - pattern: |
          $THIS. ... .location.href.split("=")[1]
      - pattern: |
          location.href.split("=")[1]
  pattern-sinks:
  - requires: TAINTED
    patterns:
    - pattern-either:
      - pattern: $ELEMENT. ... .innerHTML = $X
      - pattern: $ELEMENT. ... .outerHTML = $X
      - pattern: document.write($X)
      - pattern: $THIS. ... .document.write($X)
      - pattern: document.writeln($X)
      - pattern: $THIS. ... .document.writeln($X)
      - pattern: $THIS. ... .insertAdjacentHTML(...,$X)
    - focus-metavariable: $X
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: java.servlets.security.xxe.tainted-validator-xxe-servlet.tainted-validator-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the Validator parser with `parser.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)`. Alternatively, the following configuration also provides protection against
    XXE attacks. parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""). For more
    information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-validator-xxe-servlet.tainted-validator-xxe-servlet
    shortlink: https://sg.run/wzgY
    semgrep.dev:
      rule:
        rule_id: gxUpoD
        version_id: l4T0No
        url: https://semgrep.dev/playground/r/l4T0No/java.servlets.security.xxe.tainted-validator-xxe-servlet.tainted-validator-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: VALIDATOR
    patterns:
    - pattern-either:
      - pattern: (Validator $PARSER)
  - label: FSP
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
      - pattern: $PARSER.setFeature("=~/.*secure-processing.*/", true);
    - focus-metavariable: $PARSER
  - label: DTD
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and VALIDATOR) and not (FSP or DTD)
    patterns:
    - pattern: (Validator $PARSER).validate(...)
- id: java.servlets.security.xxe.tainted-xmlreader-xxe-servlet.tainted-xmlreader-xxe-servlet
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring the XMLReader parser with `parser.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,"")`, configuring
    the both of `parser.setFeature("http://xml.org/sax/features/external-general-entities",
    false)` and `parser.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.xxe.tainted-xmlreader-xxe-servlet.tainted-xmlreader-xxe-servlet
    shortlink: https://sg.run/xpgz
    semgrep.dev:
      rule:
        rule_id: QrULjo
        version_id: YDT784
        url: https://semgrep.dev/playground/r/YDT784/java.servlets.security.xxe.tainted-xmlreader-xxe-servlet.tainted-xmlreader-xxe-servlet
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  - label: XMLREADER
    patterns:
    - pattern: (XMLReader $PARSER)
  - label: DTD
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern-either:
      - pattern: $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
      - pattern: $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
    - focus-metavariable: $PARSER
  - label: DISALLOW_DOCTYPE
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern: $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
        true);
    - focus-metavariable: $PARSER
  - label: GEN_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
        false);
    - focus-metavariable: $PARSER
  - label: PARAM_ENT_DISABLED
    by-side-effect: true
    patterns:
    - pattern-not-inside: |
        if (...) {
          ...
        } else {
          ...
        }
    - pattern: $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
        false);
    - focus-metavariable: $PARSER
  pattern-sinks:
  - requires: (USER_INPUT and XMLREADER) and not (DTD or DISALLOW_DOCTYPE or (GEN_ENT_DISABLED
      and PARAM_ENT_DISABLED))
    patterns:
    - pattern: (XMLReader $PARSER).parse(...)
- id: scala.play.security.webservice-ssrf.webservice-ssrf
  patterns:
  - pattern: $WS.url($URL)
  - pattern-either:
    - pattern-inside: |
        class $CLASS (..., $WS: WSClient, ...) {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $WS: WSClient, ...) = {
          ...
        }
    - pattern-inside: |
        $WS = AhcWSClient(...)
        ...
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = $A {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = {
          ...
        }
  message: A parameter being passed directly into `WSClient` most likely lead to SSRF.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data sent with this request. They could also probe internal servers
    or other resources that the server runnig this code can access. Do not allow arbitrary
    hosts. Instead, create an allowlist for approved hosts hardcode the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://www.playframework.com/documentation/2.8.x/ScalaWS
    category: security
    technology:
    - scala
    - play
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.play.security.webservice-ssrf.webservice-ssrf
    shortlink: https://sg.run/reRR
    semgrep.dev:
      rule:
        rule_id: PeUxEE
        version_id: WrTkxE
        url: https://semgrep.dev/playground/r/WrTkxE/scala.play.security.webservice-ssrf.webservice-ssrf
        origin: community
  languages:
  - scala
  severity: WARNING
- id: terraform.aws.security.aws-lambda-permission-unrestricted-source-arn.aws-lambda-permission-unrestricted-source-arn
  patterns:
  - pattern: |
      resource "aws_lambda_permission" $ANYTHING {
        ...
        principal = "$PRINCIPAL"
        ...
      }
  - pattern-not: |
      resource "aws_lambda_permission" $ANYTHING {
        ...
        source_arn = ...
        ...
      }
  - metavariable-regex:
      metavariable: $PRINCIPAL
      regex: .*[.]amazonaws[.]com$
  message: The AWS Lambda permission has an AWS service principal but does not specify
    a source ARN. If you grant permission to a service principal without specifying
    the source, other accounts could potentially configure resources in their account
    to invoke your Lambda function. Set the source_arn value to the ARN of the AWS
    resource that invokes the function, eg. an S3 bucket, CloudWatch Events Rule,
    API Gateway, or SNS topic.
  languages:
  - hcl
  severity: ERROR
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    references:
    - https://cwe.mitre.org/data/definitions/732.html
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_permission
    - https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-lambda-permission-unrestricted-source-arn.aws-lambda-permission-unrestricted-source-arn
    shortlink: https://sg.run/kOP7
    semgrep.dev:
      rule:
        rule_id: OrU9Ox
        version_id: 1QTL4Y
        url: https://semgrep.dev/playground/r/1QTL4Y/terraform.aws.security.aws-lambda-permission-unrestricted-source-arn.aws-lambda-permission-unrestricted-source-arn
        origin: community
- id: terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active
  patterns:
  - pattern: |
      resource "aws_lambda_function" $ANYTHING {
        ...
      }
  - pattern-not: |
      resource "aws_lambda_function" $ANYTHING {
        ...
        tracing_config {
          ...
          mode = "Active"
          ...
        }
        ...
      }
  message: The AWS Lambda function does not have active X-Ray tracing enabled. X-Ray
    tracing enables end-to-end debugging and analysis of all function activity. This
    makes it easier to trace the flow of logs and identify bottlenecks, slow downs
    and timeouts.
  languages:
  - hcl
  severity: INFO
  metadata:
    category: security
    technology:
    - aws
    - terraform
    owasp:
    - A09:2021 Security Logging and Monitoring Failures
    cwe:
    - 'CWE-778: Insufficient Logging'
    references:
    - https://cwe.mitre.org/data/definitions/778.html
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#mode
    - https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active
    shortlink: https://sg.run/wO2Y
    semgrep.dev:
      rule:
        rule_id: eqUl1O
        version_id: 9lT0A5
        url: https://semgrep.dev/playground/r/9lT0A5/terraform.aws.security.aws-lambda-x-ray-tracing-not-active.aws-lambda-x-ray-tracing-not-active
        origin: community
- id: yaml.github-actions.security.github-script-injection.github-script-injection
  languages:
  - yaml
  message: 'Using variable interpolation `${{...}}` with `github` context data in
    a `actions/github-script`''s `script:` step could allow an attacker to inject
    their own code into the runner. This would allow them to steal secrets and code.
    `github` context data can have arbitrary user input and should be treated as untrusted.
    Instead, use an intermediate environment variable with `env:` to store the data
    and use the environment variable in the `run:` script. Be sure to use double-quotes
    the environment variable, like this: "$ENVVAR".'
  metadata:
    category: security
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections
    - https://securitylab.github.com/research/github-actions-untrusted-input/
    - https://github.com/actions/github-script
    technology:
    - github-actions
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.github-actions.security.github-script-injection.github-script-injection
    shortlink: https://sg.run/g1G0
    semgrep.dev:
      rule:
        rule_id: OrUQvK
        version_id: WrTkDk
        url: https://semgrep.dev/playground/r/WrTkDk/yaml.github-actions.security.github-script-injection.github-script-injection
        origin: community
  patterns:
  - pattern-inside: 'steps: [...]'
  - pattern-inside: |
      uses: $ACTION
      ...
  - pattern-inside: |
      with:
        ...
        script: ...
        ...
  - pattern: 'script: $SHELL'
  - metavariable-regex:
      metavariable: $ACTION
      regex: actions/github-script@.*
  - metavariable-pattern:
      language: generic
      metavariable: $SHELL
      patterns:
      - pattern-either:
        - pattern: ${{ github.event.issue.title }}
        - pattern: ${{ github.event.issue.body }}
        - pattern: ${{ github.event.pull_request.title }}
        - pattern: ${{ github.event.pull_request.body }}
        - pattern: ${{ github.event.comment.body }}
        - pattern: ${{ github.event.review.body }}
        - pattern: ${{ github.event.review_comment.body }}
        - pattern: ${{ github.event.pages. ... .page_name}}
        - pattern: ${{ github.event.head_commit.message }}
        - pattern: ${{ github.event.head_commit.author.email }}
        - pattern: ${{ github.event.head_commit.author.name }}
        - pattern: ${{ github.event.commits ... .author.email }}
        - pattern: ${{ github.event.commits ... .author.name }}
        - pattern: ${{ github.event.pull_request.head.ref }}
        - pattern: ${{ github.event.pull_request.head.label }}
        - pattern: ${{ github.event.pull_request.head.repo.default_branch }}
        - pattern: ${{ github.head_ref }}
        - pattern: ${{ github.event.inputs ... }}
  severity: ERROR
- id: java.lang.security.audit.md5-used-as-password.md5-used-as-password
  languages:
  - java
  severity: WARNING
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as PBKDF2 or bcrypt. You can use
    `javax.crypto.SecretKeyFactory` with `SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1")`
    or, if using Spring, `org.springframework.security.crypto.bcrypt`.
  metadata:
    category: security
    technology:
    - java
    - md5
    references:
    - https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SecretKeyFactory
    - https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.html
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.md5-used-as-password.md5-used-as-password
    shortlink: https://sg.run/JxEQ
    semgrep.dev:
      rule:
        rule_id: JDULAW
        version_id: A8Tno0
        url: https://semgrep.dev/playground/r/A8Tno0/java.lang.security.audit.md5-used-as-password.md5-used-as-password
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $TYPE $MD = MessageDigest.getInstance("MD5");
        ...
    - pattern: $MD.digest(...);
  pattern-sinks:
  - patterns:
    - pattern: $MODEL.$METHOD(...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: (?i)(.*password.*)
- id: javascript.lang.security.audit.md5-used-as-password.md5-used-as-password
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as bcrypt. You can use the `bcrypt`
    node.js package.
  metadata:
    category: security
    technology:
    - crypto
    - md5
    references:
    - https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://www.npmjs.com/package/bcrypt
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.md5-used-as-password.md5-used-as-password
    shortlink: https://sg.run/GOEn
    semgrep.dev:
      rule:
        rule_id: GdUr5G
        version_id: jQT92n
        url: https://semgrep.dev/playground/r/jQT92n/javascript.lang.security.audit.md5-used-as-password.md5-used-as-password
        origin: community
  languages:
  - javascript
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: $CRYPTO.createHash("md5")
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...);
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
- id: python.django.security.injection.tainted-sql-string.tainted-sql-string
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using the Django object-relational mappers (ORM)
    instead of raw SQL queries.
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    category: security
    technology:
    - django
    subcategory:
    - audit
    impact: LOW
    likelihood: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/PbZp
    semgrep.dev:
      rule:
        rule_id: lBU8Ad
        version_id: GxTWGb
        url: https://semgrep.dev/playground/r/GxTWGb/python.django.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  severity: ERROR
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: request.$ANYTHING
    - pattern-not: request.build_absolute_uri
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          "$SQLSTR" + ...
      - pattern: |
          "$SQLSTR" % ...
      - pattern: |
          "$SQLSTR".format(...)
      - pattern: |
          f"$SQLSTR{...}..."
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*
- id: python.flask.security.injection.tainted-sql-string.tainted-sql-string
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as SQLAlchemy which will protect your queries.
  metadata:
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column
    category: security
    technology:
    - sqlalchemy
    - flask
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/JxZj
    semgrep.dev:
      rule:
        rule_id: YGUDKQ
        version_id: w8T03J
        url: https://semgrep.dev/playground/r/w8T03J/python.flask.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  severity: ERROR
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: flask.request.$ANYTHING
      - patterns:
        - pattern-inside: |
            @$APP.route(...)
            def $FUNC(..., $ROUTEVAR, ...):
              ...
        - pattern: $ROUTEVAR
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          "$SQLSTR" + ...
      - pattern: |
          "$SQLSTR" % ...
      - pattern: |
          "$SQLSTR".format(...)
      - pattern: |
          f"$SQLSTR{...}..."
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*
- id: python.lang.security.audit.md5-used-as-password.md5-used-as-password
  severity: WARNING
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as scrypt. You can use `hashlib.scrypt`.
  languages:
  - python
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://docs.python.org/3/library/hashlib.html#hashlib.scrypt
    category: security
    technology:
    - pycryptodome
    - hashlib
    - md5
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.md5-used-as-password.md5-used-as-password
    shortlink: https://sg.run/5DwD
    semgrep.dev:
      rule:
        rule_id: 6JU1w1
        version_id: JdTZgr
        url: https://semgrep.dev/playground/r/JdTZgr/python.lang.security.audit.md5-used-as-password.md5-used-as-password
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: hashlib.md5
      - pattern: hashlib.new(..., name="MD5", ...)
      - pattern: Cryptodome.Hash.MD5
      - pattern: Crypto.Hash.MD5
      - pattern: cryptography.hazmat.primitives.hashes.MD5
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...)
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
- id: kotlin.lang.security.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DEFAULT_HTTP_CLIENT
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
    category: security
    technology:
    - kotlin
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/kotlin.lang.security.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
    shortlink: https://sg.run/RXEK
    semgrep.dev:
      rule:
        rule_id: ReU3Yb
        version_id: DkT3vn
        url: https://semgrep.dev/playground/r/DkT3vn/kotlin.lang.security.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
        origin: community
  message: DefaultHttpClient is deprecated. Further, it does not support connections
    using TLS1.2, which makes using DefaultHttpClient a security hazard. Use SystemDefaultHttpClient
    instead, which supports TLS1.2.
  severity: WARNING
  languages:
  - kt
  pattern: DefaultHttpClient(...)
  fix-regex:
    regex: DefaultHttpClient
    replacement: SystemDefaultHttpClient
- id: kotlin.lang.security.ecb-cipher.ecb-cipher
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#ECB_MODE
    category: security
    technology:
    - kotlin
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/kotlin.lang.security.ecb-cipher.ecb-cipher
    shortlink: https://sg.run/DzLj
    semgrep.dev:
      rule:
        rule_id: DbU1Zd
        version_id: WrTkj3
        url: https://semgrep.dev/playground/r/WrTkj3/kotlin.lang.security.ecb-cipher.ecb-cipher
        origin: community
  message: Cipher in ECB mode is detected. ECB mode produces the same output for the
    same input each time which allows an attacker to intercept and replay the data.
    Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
  severity: WARNING
  languages:
  - kt
  patterns:
  - pattern-either:
    - pattern: |
        val $VAR : Cipher = $CIPHER.getInstance($MODE)
    - pattern: |
        var $VAR : Cipher = $CIPHER.getInstance($MODE)
    - pattern: |
        val $VAR = $CIPHER.getInstance($MODE)
    - pattern: |
        var $VAR = $CIPHER.getInstance($MODE)
  - metavariable-regex:
      metavariable: $MODE
      regex: .*ECB.*
- id: kotlin.lang.security.no-null-cipher.no-null-cipher
  pattern: NullCipher(...)
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - kotlin
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/kotlin.lang.security.no-null-cipher.no-null-cipher
    shortlink: https://sg.run/0ywb
    semgrep.dev:
      rule:
        rule_id: 0oU2Yy
        version_id: K3TPQo
        url: https://semgrep.dev/playground/r/K3TPQo/kotlin.lang.security.no-null-cipher.no-null-cipher
        origin: community
  message: 'NullCipher was detected. This will not encrypt anything; the cipher text
    will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING").
    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for
    more information.'
  severity: WARNING
  languages:
  - kt
  - scala
- id: kotlin.lang.security.unencrypted-socket.unencrypted-socket
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - kotlin
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/kotlin.lang.security.unencrypted-socket.unencrypted-socket
    shortlink: https://sg.run/KXZd
    semgrep.dev:
      rule:
        rule_id: KxU76z
        version_id: qkT9ev
        url: https://semgrep.dev/playground/r/qkT9ev/kotlin.lang.security.unencrypted-socket.unencrypted-socket
        origin: community
  message: This socket is not encrypted. The traffic could be read by an attacker
    intercepting the network traffic. Use an SSLSocket created by 'SSLSocketFactory'
    or 'SSLServerSocketFactory' instead
  severity: WARNING
  languages:
  - kt
  pattern-either:
  - pattern: ServerSocket(...)
  - pattern: Socket(...)
- id: kotlin.lang.security.use-of-md5.use-of-md5
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  languages:
  - kt
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
    category: security
    technology:
    - kotlin
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/kotlin.lang.security.use-of-md5.use-of-md5
    shortlink: https://sg.run/4eQx
    semgrep.dev:
      rule:
        rule_id: qNUXPj
        version_id: l4Te2o
        url: https://semgrep.dev/playground/r/l4Te2o/kotlin.lang.security.use-of-md5.use-of-md5
        origin: community
  pattern-either:
  - pattern: |
      $VAR = $MD.getInstance("MD5")
  - pattern: |
      $DU.getMd5Digest().digest(...)
- id: ruby.lang.security.md5-used-as-password.md5-used-as-password
  languages:
  - ruby
  severity: WARNING
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Instead, use a suitable password hashing function such as bcrypt. You can use
    the `bcrypt` gem.
  metadata:
    category: security
    technology:
    - md5
    references:
    - https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.md5-used-as-password.md5-used-as-password
    shortlink: https://sg.run/GOZy
    semgrep.dev:
      rule:
        rule_id: oqU4p2
        version_id: ZRTBBG
        url: https://semgrep.dev/playground/r/ZRTBBG/ruby.lang.security.md5-used-as-password.md5-used-as-password
        origin: community
  mode: taint
  pattern-sources:
  - pattern: Digest::MD5
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...);
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
- id: ruby.rails.security.injection.tainted-url-host.tainted-url-host
  languages:
  - ruby
  severity: WARNING
  message: User data flows into the host portion of this manually-constructed URL.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data such as cookies or authorization information sent with this request.
    They could also probe internal servers or other resources that the server runnig
    this code can access. (This is called server-side request forgery, or SSRF.) Do
    not allow arbitrary hosts. Use the `ssrf_filter` gem and guard the url construction
    with `SsrfFilter(...)`, or create an allowlist for approved hosts.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - rails
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/arkadiyt/ssrf_filter
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.injection.tainted-url-host.tainted-url-host
    shortlink: https://sg.run/RX3g
    semgrep.dev:
      rule:
        rule_id: zdUY0W
        version_id: qkT9rq
        url: https://semgrep.dev/playground/r/qkT9rq/ruby.rails.security.injection.tainted-url-host.tainted-url-host
        origin: community
  mode: taint
  pattern-sanitizers:
  - pattern: SsrfFilter
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: params
      - pattern: request
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $URLSTR
        - pattern-regex: \w+:\/\/#{.*}
      - patterns:
        - pattern-either:
          - pattern: Kernel::sprintf("$URLSTR", ...)
          - pattern: |
              "$URLSTR" + $EXPR
          - pattern: |
              "$URLSTR" % $EXPR
        - metavariable-pattern:
            metavariable: $URLSTR
            language: generic
            pattern: $SCHEME:// ...
- id: kotlin.lang.security.gcm-detection.gcm-detection
  metadata:
    category: security
    cwe:
    - 'CWE-323: Reusing a Nonce, Key Pair in Encryption'
    references:
    - https://cwe.mitre.org/data/definitions/323.html
    technology:
    - kotlin
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp:
    - A02:2021 - Cryptographic Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/kotlin.lang.security.gcm-detection.gcm-detection
    shortlink: https://sg.run/WpPA
    semgrep.dev:
      rule:
        rule_id: WAUyAW
        version_id: 44TW7P
        url: https://semgrep.dev/playground/r/44TW7P/kotlin.lang.security.gcm-detection.gcm-detection
        origin: community
  languages:
  - kt
  message: GCM detected, please check that IV/nonce is not reused, an Initialization
    Vector (IV) is a nonce used to randomize the encryption, so that even if multiple
    messages with identical plaintext are encrypted, the generated corresponding ciphertexts
    are different.Unlike the Key, the IV usually does not need to be secret, rather
    it is important that it is random and unique. Certain encryption schemes the IV
    is exchanged in public as part of the ciphertext. Reusing same Initialization
    Vector with the same Key to encrypt multiple plaintext blocks allows an attacker
    to compare the ciphertexts and then, with some assumptions on the content of the
    messages, to gain important information about the data being encrypted.
  patterns:
  - pattern-either:
    - pattern: $METHOD.getInstance("AES/GCM/NoPadding",...)
    - pattern: GCMParameterSpec(...)
  severity: INFO
- id: go.lang.security.audit.md5-used-as-password.md5-used-as-password
  languages:
  - go
  severity: WARNING
  message: It looks like MD5 is used as a password hash. MD5 is not considered a secure
    password hash because it can be cracked by an attacker in a short amount of time.
    Use a suitable password hashing function such as bcrypt. You can use the `golang.org/x/crypto/bcrypt`
    package.
  metadata:
    category: security
    technology:
    - md5
    references:
    - https://tools.ietf.org/id/draft-lvelvindron-tls-md5-sha1-deprecate-01.html
    - https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords
    - https://github.com/returntocorp/semgrep-rules/issues/1609
    - https://pkg.go.dev/golang.org/x/crypto/bcrypt
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.md5-used-as-password.md5-used-as-password
    shortlink: https://sg.run/4eOE
    semgrep.dev:
      rule:
        rule_id: 4bU1Wj
        version_id: JdTR8y
        url: https://semgrep.dev/playground/r/JdTR8y/go.lang.security.audit.md5-used-as-password.md5-used-as-password
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: md5.New
      - pattern: md5.Sum
  pattern-sinks:
  - patterns:
    - pattern: $FUNCTION(...)
    - metavariable-regex:
        metavariable: $FUNCTION
        regex: (?i)(.*password.*)
- id: javascript.express.security.injection.raw-html-format.raw-html-format
  message: User data flows into the host portion of this manually-constructed HTML.
    This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from
    user-provided input. Consider using a sanitization library such as DOMPurify to
    sanitize the HTML within.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.injection.raw-html-format.raw-html-format
    shortlink: https://sg.run/5DO3
    semgrep.dev:
      rule:
        rule_id: 5rUL0X
        version_id: qkTw3R
        url: https://semgrep.dev/playground/r/qkTw3R/javascript.express.security.injection.raw-html-format.raw-html-format
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - label: EXPRESS
    patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - label: EXPRESSTS
    patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  - label: CLEAN
    by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $A($SOURCE)
      - pattern: $SANITIZE. ... .$A($SOURCE)
      - pattern: $A. ... .$SANITIZE($SOURCE)
    - focus-metavariable: $SOURCE
    - metavariable-regex:
        metavariable: $A
        regex: (?i)(.*valid|.*sanitiz)
  pattern-sinks:
  - requires: (EXPRESS and not CLEAN) or (EXPRESSTS and not CLEAN)
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$HTMLSTR" + $EXPR'
          - pattern: '"$HTMLSTR".concat(...)'
          - pattern: util.format($HTMLSTR, ...)
        - metavariable-pattern:
            metavariable: $HTMLSTR
            language: generic
            pattern: <$TAG ...
      - patterns:
        - pattern: |
            `...`
        - pattern-regex: |
            .*<\w+.*
- id: go.lang.security.injection.tainted-sql-string.tainted-sql-string
  languages:
  - go
  message: User data flows into this manually-constructed SQL string. User data can
    be safely inserted into SQL strings using prepared statements or an object-relational
    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
    injection, which could let an attacker steal or manipulate data from the database.
    Instead, use prepared statements (`db.Query("SELECT * FROM t WHERE id = ?", id)`)
    or a safe library.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/doc/database/sql-injection
    - https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/
    category: security
    technology:
    - go
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.injection.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/PbEq
    semgrep.dev:
      rule:
        rule_id: PeUoqy
        version_id: ZRTAd6
        url: https://semgrep.dev/playground/r/ZRTAd6/go.lang.security.injection.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  severity: ERROR
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQUEST : *http.Request).$ANYTHING
      - pattern: |
          ($REQUEST : http.Request).$ANYTHING
    - metavariable-regex:
        metavariable: $ANYTHING
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              "$SQLSTR" + ...
          - patterns:
            - pattern-inside: |
                $VAR = "$SQLSTR";
                ...
            - pattern: $VAR += ...
          - patterns:
            - pattern-inside: |
                var $SB strings.Builder
                ...
            - pattern-inside: |
                $SB.WriteString("$SQLSTR")
                ...
                $SB.String(...)
            - pattern: |
                $SB.WriteString(...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(select|delete|insert|create|update|alter|drop).*
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$SQLSTR", ...)
          - pattern: fmt.Sprintf("$SQLSTR", ...)
          - pattern: fmt.Printf("$SQLSTR", ...)
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*%(v|s|q).*
  pattern-sanitizers:
  - pattern-either:
    - pattern: strconv.Atoi(...)
    - patterns:
      - pattern-either:
        - pattern: $X != $Y
        - pattern: $X == $Y
- id: java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    We do not recommend deserializing untrusted data with the `ObjectInputStream`.
    If you must, you can try overriding the `ObjectInputStream#resolveClass()` method
    or using a safe replacement for the generic `readObject()` method.'
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    technology:
    - java
    - serialization
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets
    shortlink: https://sg.run/ZJjw
    semgrep.dev:
      rule:
        rule_id: wdUgly
        version_id: e1TORz
        url: https://semgrep.dev/playground/r/e1TORz/java.servlets.security.objectinputstream-deserialization-servlets.objectinputstream-deserialization-servlets
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: ^(getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          new ObjectInputStream($IN)
      - pattern: |
          new java.io.ObjectInputStream($IN)
    - focus-metavariable: $IN
- id: java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks through parameter entities by configuring $FACTORY with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities
    shortlink: https://sg.run/oLqR
    semgrep.dev:
      rule:
        rule_id: ReU0Dk
        version_id: 5PTzYL
        url: https://semgrep.dev/playground/r/5PTzYL/java.lang.security.xxe.xmlreader-xxe-parameter-entities.xmlreader-xxe-parameter-entities
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = $S.$CREATE(...);
  - metavariable-pattern:
      metavariable: $S
      patterns:
      - pattern-either:
        - pattern: javax.xml.parsers.SAXParserFactory.newInstance().newSAXParser()
        - pattern: $FACTORY.newSAXParser()
        - pattern: (SAXParser $X)
        - pattern: org.xml.sax.helpers.XMLReaderFactory
  - metavariable-pattern:
      metavariable: $CREATE
      patterns:
      - pattern-either:
        - pattern: getXMLReader
        - pattern: createXMLReader
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
- id: java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$PARSER.setFeature("http://xml.org/sax/features/external-general-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe
    shortlink: https://sg.run/zLdW
    semgrep.dev:
      rule:
        rule_id: AbUg9X
        version_id: GxTRWz
        url: https://semgrep.dev/playground/r/GxTRWz/java.lang.security.xxe.xmlreader-xxe.xmlreader-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = $S.$CREATE(...);
  - metavariable-pattern:
      metavariable: $S
      patterns:
      - pattern-either:
        - pattern: javax.xml.parsers.SAXParserFactory.newInstance().newSAXParser()
        - pattern: $FACTORY.newSAXParser()
        - pattern: (SAXParser $X)
        - pattern: org.xml.sax.helpers.XMLReaderFactory
  - metavariable-pattern:
      metavariable: $CREATE
      patterns:
      - pattern-either:
        - pattern: getXMLReader
        - pattern: createXMLReader
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      $PARSER = $S.$CREATE(...);
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false);
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      if ( ... ) {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false);
  - pattern-not-inside: |
      if ( ... ) { ... }
      else {
        ...
        $PARSER = $S.$CREATE(...);
        ...
      }
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-general-entities", false);
- id: java.servlets.security.tainted-xml-decoder-deepsemgrep.tainted-xml-decoder-deepsemgrep
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
    For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XML_DECODER
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-xml-decoder-deepsemgrep.tainted-xml-decoder-deepsemgrep
    shortlink: https://sg.run/847Q
    semgrep.dev:
      rule:
        rule_id: 4bUYrl
        version_id: RGTlwK
        url: https://semgrep.dev/playground/r/RGTlwK/java.servlets.security.tainted-xml-decoder-deepsemgrep.tainted-xml-decoder-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern: |
        (XMLDecoder $XML) = new XMLDecoder($IN, ...);
        ...
        $VAR = $XML.readObject();
    - focus-metavariable: $IN
- id: java.servlets.security.tainted-xml-decoder.tainted-xml-decoder
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
    For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XML_DECODER
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.tainted-xml-decoder.tainted-xml-decoder
    shortlink: https://sg.run/7vKW
    semgrep.dev:
      rule:
        rule_id: YGUZp0
        version_id: A8T2nN
        url: https://semgrep.dev/playground/r/A8T2nN/java.servlets.security.tainted-xml-decoder.tainted-xml-decoder
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
    - pattern-not: "$REQ.getUserPrincipal() \n"
    - pattern-not: "$REQ.getSession(...) \n"
    - pattern-not: "$REQ.getAuthType(...) \n"
    - pattern-not: "$REQ.getMethod(...) \n"
    - pattern-not: "$REQ.getLocales(...) \n"
    - pattern-not: "$REQ.getLocale(...) \n"
    - pattern-not: "$REQ.isUserinRole(...) \n"
    - pattern-not: "$REQ.isRequestdSessionIdValid(...) \n"
    - pattern-not: "$REQ.isRequestedSessionIdFromUrl(...) \n"
    - pattern-not: "$REQ.getIntHeader(...) \n"
    - pattern-not: "$REQ.getDateHeader(...) \n"
    - pattern-not: "$REQ.authenticate(...) \n"
    - pattern-not: "$REQ.isUserInRole(...) \n"
    - pattern-not: |
        $REQ.getAttribute(...)
    - pattern-not: |
        $REQ.getAttributeNames(...)
    - pattern-not: |
        $REQ.getAuthType(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          new XMLDecoder(...)
- id: java.servlets.security.servletresponse-writer-xss-deepsemgrep.servletresponse-writer-xss-deepsemgrep
  message: 'Cross-site scripting detected in HttpServletResponse writer with variable
    ''$VAR''. User input was detected going directly from the HttpServletRequest into
    output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml:
    ''Encode.forHtml($VAR)''.'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Fstored
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fdata_handling~2Fxss~2Freflected
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.servletresponse-writer-xss-deepsemgrep.servletresponse-writer-xss-deepsemgrep
    shortlink: https://sg.run/vJN0
    semgrep.dev:
      rule:
        rule_id: EwUYz4
        version_id: 44TPp2
        url: https://semgrep.dev/playground/r/44TPp2/java.servlets.security.servletresponse-writer-xss-deepsemgrep.servletresponse-writer-xss-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (PrintWriter $WRITER).write($STR, ...);
      - pattern: |
          $RESP.getWriter().write($STR, ...);
    - focus-metavariable: $STR
  pattern-sanitizers:
  - pattern-either:
    - pattern: Encode.forHtml(...)
    - pattern: (PolicyFactory $POLICY).sanitize(...)
    - pattern: (AntiSamy $AS).scan(...)
    - pattern: JSoup.clean(...)
- id: java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false
  message: A cookie was detected without setting the 'secure' flag. The 'secure' flag
    for cookies prevents the client from transmitting the cookie over insecure channels
    such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - audit
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.1 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/www-community/controls/SecureCookieAttribute
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false
    shortlink: https://sg.run/1D0v
    semgrep.dev:
      rule:
        rule_id: KxUKv3
        version_id: d6TgRv
        url: https://semgrep.dev/playground/r/d6TgRv/java.servlets.security.audit.cookie-secure-flag-false.cookie-secure-flag-false
        origin: pro_rules
  languages:
  - java
  fix: |
    $COOKIE.setSecure(true);
  pattern: |
    $COOKIE.setSecure(false);
- id: java.servlets.security.audit.url-rewriting.url-rewriting
  message: URL rewriting has significant security risks. Since session ID appears
    in the URL, it may be easily seen by third parties.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    cwe2021-top25: true
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/
    - https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html
    - https://portal.securecodewarrior.com/#/learning-resources/application_security_weaknesses~2Fweb~2Fauth~2Fsession~2Fexposedtokens
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URL_REWRITING
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.audit.url-rewriting.url-rewriting
    shortlink: https://sg.run/bPwE
    semgrep.dev:
      rule:
        rule_id: JDUzN4
        version_id: ExTWke
        url: https://semgrep.dev/playground/r/ExTWke/java.servlets.security.audit.url-rewriting.url-rewriting
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - pattern: (HttpServletResponse $RES)
  pattern-sinks:
  - pattern-either:
    - pattern: |
        $RES.encodeURL(...);
    - pattern: |
        $RES.encodeUrl(...);
    - pattern: |
        $RES.encodeRedirectURL(...);
    - pattern: |
        $RES.encodeRedirectUrl(...);
- id: java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep
  message: When data from an untrusted source is put into a logger and not neutralized
    correctly, an attacker could forge log entries or include malicious content.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://cwe.mitre.org/data/definitions/117.html
    - https://cwe.mitre.org/data/definitions/93.html
    - https://owasp.org/www-community/attacks/Log_Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep
    shortlink: https://sg.run/xGwy
    semgrep.dev:
      rule:
        rule_id: d8UbJq
        version_id: LjTeYB
        url: https://semgrep.dev/playground/r/LjTeYB/java.servlets.security.crlf-injection-logs-deepsemgrep.crlf-injection-logs-deepsemgrep
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            (Logger $LOG).$LEVEL(...);
        - metavariable-regex:
            metavariable: $LEVEL
            regex: (debug|error|fatal|info|log|warn|trace|severe|warning|info|config|fine|finer|finest|all)
      - pattern: |
          $LOG.log(...);
- id: java.servlets.security.crlf-injection-logs.crlf-injection-logs
  message: When data from an untrusted source is put into a logger and not neutralized
    correctly, an attacker could forge log entries or include malicious content.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://cwe.mitre.org/data/definitions/117.html
    - https://cwe.mitre.org/data/definitions/93.html
    - https://owasp.org/www-community/attacks/Log_Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.crlf-injection-logs.crlf-injection-logs
    shortlink: https://sg.run/k0x2
    semgrep.dev:
      rule:
        rule_id: GdUkvO
        version_id: 8KTl2B
        url: https://semgrep.dev/playground/r/8KTl2B/java.servlets.security.crlf-injection-logs.crlf-injection-logs
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
        - metavariable-regex:
            metavariable: $GETFUNC
            regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - pattern: |
      (Logger $LOG).$LEVEL(...);
  - pattern: |
      $LOG.log(...);
- id: python.django.deserialization.tainted-marshal-django.tainted-marshal-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `marshal` module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. For deserializing data from untrusted sources we recommend using YAML
    or JSON libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.audit.marshal-usage
    technology:
    - python
    - django
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-marshal-django.tainted-marshal-django
    shortlink: https://sg.run/k39X
    semgrep.dev:
      rule:
        rule_id: gxUvy1
        version_id: l4T0QG
        url: https://semgrep.dev/playground/r/l4T0QG/python.django.deserialization.tainted-marshal-django.tainted-marshal-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: marshal.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
- id: python.django.deserialization.tainted-numpy-pickle-django.tainted-numpy-pickle-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `numpy.load()` function allows `pickle` for object deserialization. This behaviour
    is turned off by default in version 1.16.3. Do not turn this on with `allow_pickle=True`
    when loading data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://numpy.org/doc/stable/reference/generated/numpy.load.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related_oss_rules:
    - trailofbits.python.pickles-in-numpy.pickles-in-numpy
    technology:
    - python
    - pickle
    - numpy
    - django
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-numpy-pickle-django.tainted-numpy-pickle-django
    shortlink: https://sg.run/wQXx
    semgrep.dev:
      rule:
        rule_id: QrURk6
        version_id: YDT7q9
        url: https://semgrep.dev/playground/r/YDT7q9/python.django.deserialization.tainted-numpy-pickle-django.tainted-numpy-pickle-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: numpy.load($SINK, ..., allow_pickle=True, ...)
- id: python.django.deserialization.tainted-pandas-hdf-django.tainted-pandas-hdf-django
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_hdf()` function uses `pickle` when the `fixed` format is used
    during serializing. This function should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_hdf.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - django
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-pandas-hdf-django.tainted-pandas-hdf-django
    shortlink: https://sg.run/xQXe
    semgrep.dev:
      rule:
        rule_id: 3qU53E
        version_id: 6xTobg
        url: https://semgrep.dev/playground/r/6xTobg/python.django.deserialization.tainted-pandas-hdf-django.tainted-pandas-hdf-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_hdf($SINK, ...)
- id: python.django.deserialization.tainted-pandas-pickle-django.tainted-pandas-pickle-django
  message: Insecure deserialization (called pickling in python) is when user-controllable
    data is deserialized by an application. This potentially enables an attacker to
    manipulate serialized objects in order to pass harmful data into the application
    code and may result in arbitrary code execution, OS command injection or DoS.
    Many deserialization-based attacks are completed before deserialization is finished.
    This means that the deserialization process itself can initiate an attack, even
    if the app's own functionality does not directly interact with the malicious object.
    The `pandas.read_pickle()` function uses `pickle` for object deserialization and
    should not be used with untrusted data.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - django
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.django.deserialization.tainted-pandas-pickle-django.tainted-pandas-pickle-django
    shortlink: https://sg.run/Opge
    semgrep.dev:
      rule:
        rule_id: 4bUKQ1
        version_id: o5TwX1
        url: https://semgrep.dev/playground/r/o5TwX1/python.django.deserialization.tainted-pandas-pickle-django.tainted-pandas-pickle-django
        origin: pro_rules
  languages:
  - python
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-either:
        - pattern-inside: |
            @rest_framework.decorators.api_view(...)
            def $FUNC(..., $REQ, ...):
              ...
        - patterns:
          - pattern-either:
            - pattern-inside: |
                class $VIEW(..., rest_framework.views.APIView, ...):
                  ...
            - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,\n...):\n
                \ ...                              \n"
          - pattern-inside: |
              def $METHOD(self, $REQ, ...):
                ...
          - metavariable-regex:
              metavariable: $METHOD
              regex: (get|post|put|patch|delete|head)
      - pattern-either:
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.render($REQ, ...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.shortcuts.redirect(...)
        - pattern-inside: |
            def $VIEW($REQ, ...):
              ...
              return django.http.HttpResponseRedirect(...)
        - pattern-inside: |
            $REQ = django.http.HttpRequest()
            ...
    - pattern-either:
      - patterns:
        - pattern: $REQ.$FUNCTION(...)
        - metavariable-regex:
            metavariable: $FUNCTION
            regex: ^(get_signed_cookie|read|readline|readlines|__iter__)$
      - patterns:
        - pattern-either:
          - pattern: $REQ.$PROPERTY
          - pattern: $REQ.$PROPERTY[...]
          - pattern: $REQ.$PROPERTY.get(...)
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: ^(body|content_type|data|DATA|query_params|QUERY_PARAMS|GET|POST|COOKIES|FILES|headers|stream)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.render($REQ, ...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.shortcuts.redirect(...)
      - pattern-inside: |
          def $VIEW($REQ, ..., $PARAM, ...):
            ...
            return django.http.HttpResponseRedirect(...)
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_pickle($SINK, ...)
- id: python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The C implementations of the `pickle` module, called `cPickle` or `_pickle`, are
    considered insecure.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://dill.readthedocs.io/en/latest/index.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - flask
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask
    shortlink: https://sg.run/3lBg
    semgrep.dev:
      rule:
        rule_id: qNUAQe
        version_id: kbTbdj
        url: https://semgrep.dev/playground/r/kbTbdj/python.flask.deserialization.tainted-pickle-flask.tainted-pickle-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-either:
            - patterns:
              - pattern: flask.request.$FUNCTION(...)
              - metavariable-regex:
                  metavariable: $FUNCTION
                  regex: ^(from_values|get_data|get_json)$
            - patterns:
              - pattern-either:
                - pattern: flask.request.$PROPERTY
                - pattern: flask.request.$PROPERTY[...]
                - pattern: flask.request.$PROPERTY.get(...)
              - metavariable-regex:
                  metavariable: $PROPERTY
                  regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
        - patterns:
          - pattern: |
              @$APP.route(...)
              def $FUNC(..., $PARAM, ...):
                ...
          - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: $PICKLE.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $PICKLE
            regex: ^(pickle|_pickle|cPickle)$
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
      - patterns:
        - pattern: $PACKAGE.Unpickler($SINK, ...)
        - metavariable-regex:
            metavariable: $PACKAGE
            regex: ^(pickle|_pickle|cPickle)$
- id: python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    PyYAML''s `yaml` module is as powerful as `pickle` and so may call any Python
    function. It is recommended to secure your application by using `yaml.SafeLoader`
    or `yaml.CSafeLoader`.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
    technology:
    - python
    - flask
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask
    shortlink: https://sg.run/4YDg
    semgrep.dev:
      rule:
        rule_id: lBU3yN
        version_id: w8TL9J
        url: https://semgrep.dev/playground/r/w8TL9J/python.flask.deserialization.tainted-pyyaml-flask.tainted-pyyaml-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - pattern: |
        yaml.$FUNC($SINK, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.SafeLoader, ...)
    - pattern-not: |
        yaml.$FUNC($SINK, ..., Loader=yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(scan|parse|compose|compose_all|load|load_all|unsafe_load)$
  - patterns:
    - pattern: yaml.$LOADER($SINK)
    - metavariable-regex:
        metavariable: $LOADER
        regex: ^(Loader|BaseLoader|CLoader|CBaseLoader)$
- id: python.flask.deserialization.tainted-ruamel-flask.tainted-ruamel-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Starting from `ruamel.yaml` version 0.15.0 The default loader (`typ=''rt''`) is
    a direct derivative of the safe loader. Before this version, use the optional
    argument `Loader` with value `SafeLoader` or `CSafeLoader`, or use the `safe_load`
    function.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://cwe.mitre.org/data/definitions/502.html
    related_oss_rules:
    - python.lang.security.deserialization.avoid-unsafe-ruamel
    technology:
    - python
    - flask
    - yaml
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-ruamel-flask.tainted-ruamel-flask
    shortlink: https://sg.run/P2YN
    semgrep.dev:
      rule:
        rule_id: PeU7xE
        version_id: xyT5KW
        url: https://semgrep.dev/playground/r/xyT5KW/python.flask.deserialization.tainted-ruamel-flask.tainted-ruamel-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - label: USER_INPUT
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  - label: TYP_UNSAFE
    pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  pattern-sinks:
  - requires: USER_INPUT
    patterns:
    - pattern: ruamel.yaml.$FUNC($SINK)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.SafeLoader, ...)
    - pattern-not: ruamel.yaml.$FUNC($SINK, ..., Loader=ruamel.yaml.CSafeLoader, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(load|load_all|round_trip_load)$
  - requires: USER_INPUT and TYP_UNSAFE
    patterns:
    - pattern: $YAML.load($SINK)
- id: python.flask.deserialization.tainted-shelve-flask.tainted-shelve-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `shelve` module uses `pickle` and should not be used with data from untrusted
    sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://docs.python.org/3/library/shelve.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    related_oss_rules:
    - python.aws-lambda.security.tainted-pickle-deserialization
    - python.lang.security.deserialization.avoid-shelve
    technology:
    - python
    - flask
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-shelve-flask.tainted-shelve-flask
    shortlink: https://sg.run/Jlgo
    semgrep.dev:
      rule:
        rule_id: JDUOl4
        version_id: O9TbND
        url: https://semgrep.dev/playground/r/O9TbND/python.flask.deserialization.tainted-shelve-flask.tainted-shelve-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - pattern-either:
    - pattern: shelve.open($SINK, ...)
    - pattern: shelve.DbfilenameShelf($SINK, ...)
- id: python.flask.deserialization.tainted-torch-pickle-flask.tainted-torch-pickle-flask
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    A number of functions and packages in the `torch` module rely on the `pickle`
    module and should not be used to unpackage data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    - https://pytorch.org/docs/stable/generated/torch.load.html
    - https://pytorch.org/docs/stable/_modules/torch/distributed/distributed_c10d.html#broadcast_object_list:~:text=.BytesIO()-,_pickler,-(f)
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - torch
    - flask
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.flask.deserialization.tainted-torch-pickle-flask.tainted-torch-pickle-flask
    shortlink: https://sg.run/56L6
    semgrep.dev:
      rule:
        rule_id: 5rUKyK
        version_id: e1TO0z
        url: https://semgrep.dev/playground/r/e1TO0z/python.flask.deserialization.tainted-torch-pickle-flask.tainted-torch-pickle-flask
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: flask.request.$FUNCTION(...)
            - metavariable-regex:
                metavariable: $FUNCTION
                regex: ^(from_values|get_data|get_json)$
          - patterns:
            - pattern-either:
              - pattern: flask.request.$PROPERTY
              - pattern: flask.request.$PROPERTY[...]
              - pattern: flask.request.$PROPERTY.get(...)
            - metavariable-regex:
                metavariable: $PROPERTY
                regex: ^(args|cookies|data|files|form|full_path|headers|input_stream|json|path|stream|values|view_args)$
      - patterns:
        - pattern: |
            @$APP.route(...)
            def $FUNC(..., $PARAM, ...):
              ...
        - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: torch.load($SINK, ...)
      - pattern: torch.package.PackageImporter($SINK, ...)
      - pattern: torch.distributed.broadcast_object_list($SINK,...)
      - pattern: torch.distributed.all_gather_object($OUT, $SINK,...)
      - pattern: torch.distributed.gather_object($SINK,...)
      - pattern: torch.distributed.scatter_object_list($OUT, $SINK, ...)
- id: python.lang.deserialization.tainted-json.tainted-json
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    Even for a data-only serialization format such as JSON, a malicious string may
    cause the decoder to consume considerable CPU and memory resources. Limiting the
    size of data to be parsed is recommended.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/json.html
    - https://docs.python.org/3/library/pickle.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    technology:
    - python
    - http
    - json
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-json.tainted-json
    shortlink: https://sg.run/G0gB
    semgrep.dev:
      rule:
        rule_id: GdUbDO
        version_id: vdTRY4
        url: https://semgrep.dev/playground/r/vdTRY4/python.lang.deserialization.tainted-json.tainted-json
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: json.load($SINK, ...)
      - pattern: json.loads($SINK, ...)
      - patterns:
        - pattern-either:
          - pattern: $DEC.decode($SINK)
          - pattern: $DEC.raw_decode($SINK)
        - pattern-inside: |
            $DEC = json.JSONDecoder()
            ...
- id: python.lang.deserialization.tainted-jsonpickle.tainted-jsonpickle
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `jsonpickle` module can execute arbitrary Python code. Do not load `jsonpickles`
    from untrusted sources. For deserializing data from untrusted sources we recommend
    using YAML or JSON libraries with built-in protections, such as json, PyYAML,
    or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.deserialization
    technology:
    - python
    - json
    - jsonpickle
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-jsonpickle.tainted-jsonpickle
    shortlink: https://sg.run/RjgE
    semgrep.dev:
      rule:
        rule_id: ReUNKY
        version_id: d6TWrK
        url: https://semgrep.dev/playground/r/d6TWrK/python.lang.deserialization.tainted-jsonpickle.tainted-jsonpickle
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: jsonpickle.unpickler.decode($SINK, ...)
      - pattern: jsonpickle.unpickler.loadclass($SINK, ...)
      - pattern: jsonpickle.unpickler.loadrepr($SINK)
      - pattern: jsonpickle.util.b64decode($SINK)
      - pattern: jsonpickle.util.b85decode($SINK)
      - patterns:
        - pattern-either:
          - pattern: $B.decode($SINK)
          - pattern: $B.loads($SINK)
        - pattern-inside: |
            $B = jsonpickle.backend.JSONBackend()
            ...
- id: python.lang.deserialization.tainted-marshal.tainted-marshal
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `marshal` module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. For deserializing data from untrusted sources we recommend using YAML
    or JSON libraries with built-in protections, such as json, PyYAML, or ruamel.yaml.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related-oss-rules:
    - python.lang.security.audit.marshal-usage
    technology:
    - python
    - http.server
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-marshal.tainted-marshal
    shortlink: https://sg.run/AG5g
    semgrep.dev:
      rule:
        rule_id: AbUv3Z
        version_id: ZRTZQe
        url: https://semgrep.dev/playground/r/ZRTZQe/python.lang.deserialization.tainted-marshal.tainted-marshal
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - patterns:
        - pattern: marshal.$METHOD($SINK, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(load|loads)$
- id: python.lang.deserialization.tainted-numpy-pickle.tainted-numpy-pickle
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `numpy.load()` function allows `pickle` for object deserialization. This behaviour
    is turned off by default in version 1.16.3. Do not turn this on with `allow_pickle=True`
    when loading data from untrusted sources.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://numpy.org/doc/stable/reference/generated/numpy.load.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://docs.python.org/3/library/marshal.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    related_oss_rules:
    - trailofbits.python.pickles-in-numpy.pickles-in-numpy
    technology:
    - python
    - pickle
    - numpy
    - http.server
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-numpy-pickle.tainted-numpy-pickle
    shortlink: https://sg.run/BRGb
    semgrep.dev:
      rule:
        rule_id: BYU4eg
        version_id: nWTRxp
        url: https://semgrep.dev/playground/r/nWTRxp/python.lang.deserialization.tainted-numpy-pickle.tainted-numpy-pickle
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.StreamRequestHandler, ...):
            ...
      - pattern-inside: |
          class $SERVER(..., http.server.DatagramRequestHandler, ...):
            ...
    - pattern-either:
      - pattern: self.$PROPERTY
      - pattern: self.$PROPERTY.get(...)
      - pattern: self.$PROPERTY[...]
    - metavariable-regex:
        metavariable: $PROPERTY
        regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: numpy.load($SINK, ..., allow_pickle=True, ...)
- id: python.lang.deserialization.tainted-pandas-hdf.tainted-pandas-hdf
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_hdf()` function uses `pickle` when the `fixed` format is used
    during serializing. This function should not be used with untrusted data.'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_hdf.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - http.server
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-pandas-hdf.tainted-pandas-hdf
    shortlink: https://sg.run/D3A2
    semgrep.dev:
      rule:
        rule_id: DbUBGg
        version_id: ExTwjN
        url: https://semgrep.dev/playground/r/ExTwjN/python.lang.deserialization.tainted-pandas-hdf.tainted-pandas-hdf
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.StreamRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.DatagramRequestHandler, ...):
              ...
      - pattern-either:
        - pattern: self.$PROPERTY
        - pattern: self.$PROPERTY.get(...)
        - pattern: self.$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_hdf($SINK, ...)
- id: python.lang.deserialization.tainted-pandas-pickle.tainted-pandas-pickle
  message: 'The application may convert user-controlled data into an object, which
    can lead to an insecure deserialization vulnerability. An attacker can create
    a malicious serialized object, pass it to the application, and take advantage
    of the deserialization process to perform Denial-of-service (DoS), Remote code
    execution (RCE), or bypass access control measures. To prevent this vulnerability,
    leverage data formats such as JSON or XML as safer alternatives. If you need to
    deserialize user input in a specific format, consider digitally signing the data
    before serialization to prevent tampering. For more information, see: [Deserialization
    prevention](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)
    The `pandas.read_pickle()` function uses `pickle` for object deserialization. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://portswigger.net/web-security/deserialization
    - https://pandas.pydata.org/docs/reference/api/pandas.read_pickle.html
    - https://docs.python.org/3/library/pickle.html
    - https://redfoxsec.com/blog/insecure-deserialization-in-python/
    - https://knowledge-base.secureflag.com/vulnerabilities/unsafe_deserialization/unsafe_deserialization_python.html
    - https://davidhamann.de/2020/04/05/exploiting-python-pickle/
    - https://www.exploit-db.com/exploits/49585
    technology:
    - python
    - http.server
    - pandas
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.lang.deserialization.tainted-pandas-pickle.tainted-pandas-pickle
    shortlink: https://sg.run/W5jy
    semgrep.dev:
      rule:
        rule_id: WAUed9
        version_id: 7ZTygn
        url: https://semgrep.dev/playground/r/7ZTygn/python.lang.deserialization.tainted-pandas-pickle.tainted-pandas-pickle
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.StreamRequestHandler, ...):
              ...
        - pattern-inside: |
            class $SERVER(..., http.server.DatagramRequestHandler, ...):
              ...
      - pattern-either:
        - pattern: self.$PROPERTY
        - pattern: self.$PROPERTY.get(...)
        - pattern: self.$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: ^(command|headers|rfile|wfile|responses|requestline|path)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: pandas.read_pickle($SINK, ...)
- id: python.peewee.python-peewee-mysql-empty-password.python-peewee-mysql-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - peewee
    - orm
    - sql
    - mysql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.peewee.python-peewee-mysql-empty-password.python-peewee-mysql-empty-password
    shortlink: https://sg.run/nYg2
    semgrep.dev:
      rule:
        rule_id: 7KUY3k
        version_id: d6TgOD
        url: https://semgrep.dev/playground/r/d6TgOD/python.peewee.python-peewee-mysql-empty-password.python-peewee-mysql-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: $DB(..., password="",...)
    - pattern: $DB(..., passwd="",...)
    - patterns:
      - pattern-inside: |
          $X = $DB(...)
          ...
      - pattern-either:
        - pattern: $X.init(..., password="", ...)
        - pattern: $X.init(..., passwd="", ...)
  - metavariable-pattern:
      metavariable: $DB
      patterns:
      - pattern-either:
        - pattern: MySQLDatabase
        - pattern: peewee.MySQLDatabase
        - pattern: MySQLConnectorDatabase
        - pattern: playhouse.mysql_ext.MySQLConnectorDatabase
        - pattern: MariaDBConnectorDatabase
        - pattern: playhouse.mysql_ext.MariaDBConnectorDatabase
        - pattern: PooledMySQLDatabase
        - pattern: playhouse.pool.PooledMySQLDatabase
- id: python.peewee.python-peewee-mysql-hardcoded-secret.python-peewee-mysql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - peewee
    - orm
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.peewee.python-peewee-mysql-hardcoded-secret.python-peewee-mysql-hardcoded-secret
    shortlink: https://sg.run/Elpe
    semgrep.dev:
      rule:
        rule_id: AbUnJo
        version_id: ZRTdkE
        url: https://semgrep.dev/playground/r/ZRTdkE/python.peewee.python-peewee-mysql-hardcoded-secret.python-peewee-mysql-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: $DB(..., password="...",...)
    - pattern: $DB(..., passwd="...",...)
    - patterns:
      - pattern-inside: |
          $X = $DB(...)
          ...
      - pattern-either:
        - pattern: $X.init(..., password="...", ...)
        - pattern: $X.init(..., passwd="...", ...)
  - pattern-not: $DB(..., password="",...)
  - pattern-not: $DB(..., passwd="",...)
  - pattern-not: $X.init(..., password="", ...)
  - pattern-not: $X.init(..., passwd="", ...)
  - metavariable-pattern:
      metavariable: $DB
      patterns:
      - pattern-either:
        - pattern: MySQLDatabase
        - pattern: peewee.MySQLDatabase
        - pattern: MySQLConnectorDatabase
        - pattern: playhouse.mysql_ext.MySQLConnectorDatabase
        - pattern: MariaDBConnectorDatabase
        - pattern: playhouse.mysql_ext.MariaDBConnectorDatabase
        - pattern: PooledMySQLDatabase
        - pattern: playhouse.pool.PooledMySQLDatabase
- id: python.peewee.python-peewee-pg-hardcoded-secret.python-peewee-pg-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - peewee
    - orm
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.peewee.python-peewee-pg-hardcoded-secret.python-peewee-pg-hardcoded-secret
    shortlink: https://sg.run/7LDW
    semgrep.dev:
      rule:
        rule_id: BYUG10
        version_id: ExTW58
        url: https://semgrep.dev/playground/r/ExTW58/python.peewee.python-peewee-pg-hardcoded-secret.python-peewee-pg-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: $DB(..., password="...",...)
    - patterns:
      - pattern-inside: |
          $X = $DB(...)
          ...
      - pattern: $X.init(..., password="...", ...)
  - pattern-not: $DB(...,password="",...)
  - pattern-not: $X.init(..., password="", ...)
  - metavariable-pattern:
      metavariable: $DB
      patterns:
      - pattern-either:
        - pattern: PostgresqlDatabase
        - pattern: peewee.PostgresqlDatabase
        - pattern: PostgresqlExtDatabase
        - pattern: playhouse.postgres_ext.PostgresqlExtDatabase
        - pattern: PooledPostgresqlDatabase
        - pattern: playhouse.pool.PooledPostgresqlDatabase
        - pattern: CockroachDatabase
        - pattern: playhouse.cockroachdb.CockroachDatabase
        - pattern: PooledCockroachDatabase
        - pattern: playhouse.cockroachdb.PooledCockroachDatabase
- id: python.pg8000.python-pg8000-empty-password.python-pg8000-empty-password
  message: The application creates a database connection with an empty password. This
    can lead to unauthorized access by either an internal or external malicious actor.
    To prevent this vulnerability, enforce authentication when connecting to a database
    by using environment variables to securely provide credentials or retrieving them
    from a secure vault or HSM (Hardware Security Module).
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - postgres
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pg8000.python-pg8000-empty-password.python-pg8000-empty-password
    shortlink: https://sg.run/7LEW
    semgrep.dev:
      rule:
        rule_id: 8GULrk
        version_id: 7ZTR6g
        url: https://semgrep.dev/playground/r/7ZTR6g/python.pg8000.python-pg8000-empty-password.python-pg8000-empty-password
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: pg8000.dbapi.connect(..., password="",...)
    - pattern: pg8000.native.Connection(..., password="",...)
- id: python.pg8000.python-pg8000-hardcoded-secret.python-pg8000-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - postgres
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pg8000.python-pg8000-hardcoded-secret.python-pg8000-hardcoded-secret
    shortlink: https://sg.run/L4Yo
    semgrep.dev:
      rule:
        rule_id: DbUeNy
        version_id: LjTed7
        url: https://semgrep.dev/playground/r/LjTed7/python.pg8000.python-pg8000-hardcoded-secret.python-pg8000-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: pg8000.dbapi.connect(..., password="...",...)
    - pattern: pg8000.native.Connection(..., password="...",...)
  - pattern-not: pg8000.dbapi.connect(..., password="",...)
  - pattern-not: pg8000.native.Connection(..., password="",...)
- id: typescript.nextjs.react-nextjs-router-href.react-nextjs-router-href
  message: Detected the use of `$EL` HREF where input comes from either a function
    argument or prop value. This can introduce a Cross-Site-Scripting (XSS) vulnerability
    if this comes from user-provided input due to the JavaScript URI. It is recommended
    to validate URLs before leveraging them with your codebase, a secure utility example
    is provided in the references.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
    technology:
    - react
    - browser
    - nextjs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-href.react-nextjs-router-href
    shortlink: https://sg.run/0Bbv
    semgrep.dev:
      rule:
        rule_id: QrUG82
        version_id: DkTbdd
        url: https://semgrep.dev/playground/r/DkTbdd/typescript.nextjs.react-nextjs-router-href.react-nextjs-router-href
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$IMPORT,... } from 'next/router'
          ...
      - pattern-inside: |
          import $IMPORT from 'next/router';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern-either:
          - pattern-inside: |
              var { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              const { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              let { ...,$PROPS,... } = $ROUTER.query
              ...
        - focus-metavariable: $PROPS
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern: "$ROUTER.query.$VALUE \n"
      - patterns:
        - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern-not-inside: |
        <Link href={{...}}>...</Link>
    - pattern-either:
      - pattern-inside: |
          <$EL ... href={$PROP}></$EL>
      - pattern-inside: |
          <$EL ... href={`${$PROP}...`}></$EL>
    - focus-metavariable: $PROP
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            $FOO + $VALUE
        - pattern-not: |
            "..." + $VALUE
        - pattern-not: |
            `...${...}...`
        metavariable: $PROP
  - patterns:
    - pattern-not-inside: |
        <Link href={{...}}>...</Link>
    - pattern-either:
      - pattern-inside: |
          <$EL ... href={$PROP}></$EL>
      - pattern-inside: |
          <$EL ... href={`${$PROP}...`}></$EL>
    - pattern: $SINK + $ANYTHING
    - focus-metavariable: $SINK
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..." + $SOURCE
        - pattern-not: |
            `...${...}...`
        metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern: parseInt(...)
  - patterns:
    - pattern-either:
      - pattern: |
          $A ? $VAL1 : $VAL2
      - pattern: |
          $A ? $VAL2 : $VAL1
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..."
        - pattern-not: |
            "..." + $V
        - pattern-not: |
            `...${...}...`
        metavariable: $VAL1
    - focus-metavariable: $VAL1
  - patterns:
    - pattern: |
        `...`
    - pattern-not: |
        `${$VALUE}...`
  - patterns:
    - pattern: |
        "..." + $VALUE
  - patterns:
    - pattern-inside: "if (<... $SOURCE.startsWith(\"$REGEX\") ...>) { \n    ... \n
        }\n"
- id: php.laravel.security.laravel-cookie-not-encrypted.laravel-cookie-not-encrypted
  message: 'Cookie encryption middleware is disabled. It is important to encrypt cookies
    if you use it for handling sessions or storing sensitive data. In order to fix:
    add `\$APP\Http\Middleware\EncryptCookies` to middleware group in your `$APP\Http\Kernel`
    class.'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://laravel.com/docs/9.x/responses#cookies-and-encryption
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#cookie-security-and-session-management
    technology:
    - php
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-cookie-not-encrypted.laravel-cookie-not-encrypted
    shortlink: https://sg.run/Yo6D
    semgrep.dev:
      rule:
        rule_id: lBU1El
        version_id: l4TKyW
        url: https://semgrep.dev/playground/r/l4TKyW/php.laravel.security.laravel-cookie-not-encrypted.laravel-cookie-not-encrypted
        origin: pro_rules
  languages:
  - php
  paths:
    include:
    - '*Kernel.php'
  patterns:
  - pattern: |
      [..., 'web' => $GROUPS, ...]
  - pattern-not: |
      [
        ...,
        'web' => [
          ...,
          \$APP\Http\Middleware\EncryptCookies::class,
          ...
        ],
        ...
      ]
  - pattern-not: |
      [
        ...,
        'web' => [
          ...,
          EncryptCookies::class,
          ...
        ],
        ...
      ]
  - focus-metavariable: $GROUPS
  - pattern-inside: |
      $middlewareGroups = $X
- id: php.laravel.security.laravel-csrf-not-verified.laravel-csrf-not-verified
  message: 'CSRF token verification middleware is disabled. It is important to use
    CSRF tokens to verify user requests and avoid Cross Site Request Forgery attacks.
    In order to fix: add `\$APP\Http\Middleware\VerifyCsrfToken` to middleware group
    in your `$APP\Http\Kernel` class.'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://laravel.com/docs/9.x/csrf#preventing-csrf-requests
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#cross-site-request-forgery-csrf
    technology:
    - php
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-csrf-not-verified.laravel-csrf-not-verified
    shortlink: https://sg.run/6vKW
    semgrep.dev:
      rule:
        rule_id: YGU4L6
        version_id: jQTjOk
        url: https://semgrep.dev/playground/r/jQTjOk/php.laravel.security.laravel-csrf-not-verified.laravel-csrf-not-verified
        origin: pro_rules
  languages:
  - php
  paths:
    include:
    - '*Kernel.php'
  patterns:
  - pattern: |
      [..., 'web' => $GROUPS, ...]
  - pattern-not: |
      [
        ...,
        'web' => [
          ...,
          \$APP\Http\Middleware\VerifyCsrfToken::class,
          ...
        ],
        ...
      ]
  - pattern-not: |
      [
        ...,
        'web' => [
          ...,
          VerifyCsrfToken::class,
          ...
        ],
        ...
      ]
  - focus-metavariable: $GROUPS
  - pattern-inside: |
      $middlewareGroups = $X
- id: yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout
  languages:
  - yaml
  message: This GitHub Actions workflow file uses `workflow_run` and checks out code
    from the incoming pull request. When using `workflow_run`, the Action runs in
    the context of the target repository, which includes access to all repository
    secrets. Normally, this is safe because the Action only runs code from the target
    repository, not the incoming PR. However, by checking out the incoming PR code,
    you're now using the incoming code for the rest of the action. You may be inadvertently
    executing arbitrary code from the incoming PR with access to repository secrets,
    which would let an attacker steal repository secrets. This normally happens by
    running build scripts (e.g., `npm build` and `make`) or dependency installation
    scripts (e.g., `python setup.py install`). Audit your workflow file to make sure
    no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    for additional mitigations.
  metadata:
    category: security
    owasp: A01:2017 - Injection
    cwe: 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    subcategory:
    - vuln
    references:
    - https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    - https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md
    - https://www.legitsecurity.com/blog/github-privilege-escalation-vulnerability
    technology:
    - github-actions
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout
    shortlink: https://sg.run/A0p6
    semgrep.dev:
      rule:
        rule_id: 4bU8E4
        version_id: O9T2ZZ
        url: https://semgrep.dev/playground/r/O9T2ZZ/yaml.github-actions.security.workflow-run-target-code-checkout.workflow-run-target-code-checkout
        origin: community
  patterns:
  - pattern-inside: |
      on:
        ...
        workflow_run: ...
        ...
      ...
  - pattern-inside: |
      jobs:
        ...
        $JOBNAME:
          ...
          steps:
            ...
  - pattern: |
      ...
      uses: "$ACTION"
      with:
        ...
        ref: $EXPR
  - metavariable-regex:
      metavariable: $ACTION
      regex: actions/checkout@.*
  - metavariable-pattern:
      language: generic
      metavariable: $EXPR
      patterns:
      - pattern: ${{ github.event.workflow_run ... }}
  severity: WARNING
- id: javascript.express.security.express-insecure-template-usage.express-insecure-template-usage
  message: User data from `$REQ` is being compiled into the template, which can lead
    to a Server Side Template Injection (SSTI) vulnerability.
  metadata:
    interfile: true
    category: security
    cwe:
    - 'CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine'
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html
    technology:
    - javascript
    - typescript
    - express
    - pug
    - jade
    - dot
    - ejs
    - nunjucks
    - lodash
    - handlbars
    - mustache
    - hogan.js
    - eta
    - squirrelly
    source_rule_url:
    - https://github.com/github/codeql/blob/2ba2642c7ab29b9eedef33bcc2b8cd1d203d0c10/javascript/ql/test/query-tests/Security/CWE-094/CodeInjection/template-sinks.js
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-insecure-template-usage.express-insecure-template-usage
    shortlink: https://sg.run/b49v
    semgrep.dev:
      rule:
        rule_id: EwUr9k
        version_id: 1QTB5R
        url: https://semgrep.dev/playground/r/1QTB5R/javascript.express.security.express-insecure-template-usage.express-insecure-template-usage
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-propagators:
  - pattern: $MODEL.$FIND($E).then((...,$S,...)=>{...})
    from: $E
    to: $S
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('pug')
            ...
        - pattern-inside: |
            import * as $PUG from 'pug'
            ...
        - pattern-inside: |
            $PUG = require('jade')
            ...
        - pattern-inside: |
            import * as $PUG from 'jade'
            ...
      - pattern-either:
        - pattern: $PUG.compile(...)
        - pattern: $PUG.compileClient(...)
        - pattern: $PUG.compileClientWithDependenciesTracked(...)
        - pattern: $PUG.render(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('dot')
            ...
        - pattern-inside: |
            import * as $PUG from 'dot'
            ...
      - pattern-either:
        - pattern: $PUG.template(...)
        - pattern: $PUG.compile(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('ejs')
            ...
        - pattern-inside: |
            import * as $PUG from 'ejs'
            ...
      - pattern-either:
        - pattern: $PUG.render(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('nunjucks')
            ...
        - pattern-inside: |
            import * as $PUG from 'nunjucks'
            ...
      - pattern-either:
        - pattern: $PUG.renderString(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('lodash')
            ...
        - pattern-inside: |
            import * as $PUG from 'lodash'
            ...
      - pattern-either:
        - pattern: $PUG.template(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('mustache')
            ...
        - pattern-inside: |
            import * as $PUG from 'mustache'
            ...
        - pattern-inside: |
            $PUG = require('eta')
            ...
        - pattern-inside: |
            import * as $PUG from 'eta'
            ...
        - pattern-inside: |
            $PUG = require('squirrelly')
            ...
        - pattern-inside: |
            import * as $PUG from 'squirrelly'
            ...
      - pattern-either:
        - pattern: $PUG.render(...)
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $PUG = require('hogan.js')
            ...
        - pattern-inside: |
            import * as $PUG from 'hogan.js'
            ...
        - pattern-inside: |
            $PUG = require('handlebars')
            ...
        - pattern-inside: |
            import * as $PUG from 'handlebars'
            ...
      - pattern-either:
        - pattern: $PUG.compile(...)
- id: java.spring.security.injection.tainted-url-host.tainted-url-host
  languages:
  - java
  severity: ERROR
  message: User data flows into the host portion of this manually-constructed URL.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data such as cookies or authorization information sent with this request.
    They could also probe internal servers or other resources that the server runnig
    this code can access. (This is called server-side request forgery, or SSRF.) Do
    not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode
    the correct host, or ensure that the user data can only affect the path or parameters.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - java
    - spring
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.injection.tainted-url-host.tainted-url-host
    shortlink: https://sg.run/vkYn
    semgrep.dev:
      rule:
        rule_id: oqUZo8
        version_id: K3TxLY
        url: https://semgrep.dev/playground/r/K3TxLY/java.spring.security.injection.tainted-url-host.tainted-url-host
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - pattern-either:
    - pattern: new URL($ONEARG)
    - patterns:
      - pattern-either:
        - pattern: |
            "$URLSTR" + ...
        - pattern: |
            "$URLSTR".concat(...)
        - patterns:
          - pattern-inside: |
              StringBuilder $SB = new StringBuilder("$URLSTR");
              ...
          - pattern: $SB.append(...)
        - patterns:
          - pattern-inside: |
              $VAR = "$URLSTR";
              ...
          - pattern: $VAR += ...
        - patterns:
          - pattern: String.format("$URLSTR", ...)
          - pattern-not: String.format("$URLSTR", "...", ...)
        - patterns:
          - pattern-inside: |
              String $VAR = "$URLSTR";
              ...
          - pattern: String.format($VAR, ...)
      - metavariable-regex:
          metavariable: $URLSTR
          regex: http(s?)://%(v|s|q).*
- id: java.spring.security.injection.tainted-file-path.tainted-file-path
  languages:
  - java
  severity: ERROR
  message: Detected user input controlling a file path. An attacker could control
    the location of this file, to include going backwards in the directory with '../'.
    To address this, ensure that user-controlled variables in file paths are sanitized.
    You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...)
    to only retrieve the file name from the path.
  metadata:
    cwe:
    - 'CWE-23: Relative Path Traversal'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    category: security
    technology:
    - java
    - spring
    subcategory:
    - vuln
    impact: HIGH
    likelihood: MEDIUM
    confidence: HIGH
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.injection.tainted-file-path.tainted-file-path
    shortlink: https://sg.run/x9o0
    semgrep.dev:
      rule:
        rule_id: lBUxok
        version_id: RGTj46
        url: https://semgrep.dev/playground/r/RGTj46/java.spring.security.injection.tainted-file-path.tainted-file-path
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: new File(...)
      - pattern: new java.io.File(...)
      - pattern: new FileReader(...)
      - pattern: new java.io.FileReader(...)
      - pattern: new FileInputStream(...)
      - pattern: new java.io.FileInputStream(...)
      - pattern: (Paths $PATHS).get(...)
      - patterns:
        - pattern: |
            $CLASS.$FUNC(...)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(getResourceAsStream|getResource)$
      - patterns:
        - pattern-either:
          - pattern: new ClassPathResource($FILE, ...)
          - pattern: ResourceUtils.getFile($FILE, ...)
          - pattern: new FileOutputStream($FILE, ...)
          - pattern: new java.io.FileOutputStream($FILE, ...)
          - pattern: new StreamSource($FILE, ...)
          - pattern: new javax.xml.transform.StreamSource($FILE, ...)
          - pattern: FileUtils.openOutputStream($FILE, ...)
        - focus-metavariable: $FILE
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
- id: ruby.aws-lambda.security.tainted-deserialization.tainted-deserialization
  mode: taint
  languages:
  - ruby
  message: Deserialization of a string tainted by `event` object found. Objects in
    Ruby can be serialized into strings, then later loaded from strings. However,
    uses of `load` can cause remote code execution. Loading user input with MARSHAL,
    YAML or CSV can potentially be dangerous. If you need to deserialize untrusted
    data, you should use JSON as it is only capable of returning 'primitive' types
    such as strings, arrays, hashes, numbers and nil.
  metadata:
    references:
    - https://ruby-doc.org/core-3.1.2/doc/security_rdoc.html
    - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb
    category: security
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    technology:
    - ruby
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.aws-lambda.security.tainted-deserialization.tainted-deserialization
    shortlink: https://sg.run/dplX
    semgrep.dev:
      rule:
        rule_id: zdUlNJ
        version_id: DkT3e4
        url: https://semgrep.dev/playground/r/DkT3e4/ruby.aws-lambda.security.tainted-deserialization.tainted-deserialization
        origin: community
  pattern-sinks:
  - patterns:
    - pattern: $SINK
    - pattern-either:
      - pattern-inside: |
          YAML.load($SINK,...)
      - pattern-inside: |
          CSV.load($SINK,...)
      - pattern-inside: |
          Marshal.load($SINK,...)
      - pattern-inside: |
          Marshal.restore($SINK,...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context)
          ...
        end
  severity: WARNING
- id: java.spring.security.injection.tainted-html-string.tainted-html-string
  languages:
  - java
  severity: ERROR
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. To be sure this is safe, check that the HTML
    is rendered safely. You can use the OWASP ESAPI encoder if you must render user
    data.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - java
    - spring
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.injection.tainted-html-string.tainted-html-string
    shortlink: https://sg.run/ObdR
    semgrep.dev:
      rule:
        rule_id: YGUvkL
        version_id: 8KTrlz
        url: https://semgrep.dev/playground/r/8KTrlz/java.spring.security.injection.tainted-html-string.tainted-html-string
        origin: community
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam)
    - focus-metavariable: $SOURCE
  - label: CONCAT
    by-side-effect: true
    requires: INPUT
    patterns:
    - pattern-either:
      - pattern: |
          "$HTMLSTR" + ...
      - pattern: |
          "$HTMLSTR".concat(...)
      - patterns:
        - pattern-inside: |
            StringBuilder $SB = new StringBuilder("$HTMLSTR");
            ...
        - pattern: $SB.append(...)
      - patterns:
        - pattern-inside: |
            $VAR = "$HTMLSTR";
            ...
        - pattern: $VAR += ...
      - pattern: String.format("$HTMLSTR", ...)
      - patterns:
        - pattern-inside: |
            String $VAR = "$HTMLSTR";
            ...
        - pattern: String.format($VAR, ...)
    - metavariable-regex:
        metavariable: $HTMLSTR
        regex: ^<\w+
  pattern-propagators:
  - pattern: (StringBuilder $SB).append($...TAINTED)
    from: $...TAINTED
    to: $SB
  - pattern: $VAR += $...TAINTED
    from: $...TAINTED
    to: $VAR
  pattern-sinks:
  - requires: CONCAT
    patterns:
    - pattern-either:
      - pattern: new ResponseEntity<>($PAYLOAD, ...)
      - pattern: new ResponseEntity<$ERROR>($PAYLOAD, ...)
      - pattern: ResponseEntity. ... .body($PAYLOAD)
      - patterns:
        - pattern: |
            ResponseEntity.$RESPFUNC($PAYLOAD). ...
        - metavariable-regex:
            metavariable: $RESPFUNC
            regex: ^(ok|of)$
    - focus-metavariable: $PAYLOAD
  pattern-sanitizers:
  - pattern-either:
    - pattern: Encode.forHtml(...)
    - pattern: (PolicyFactory $POLICY).sanitize(...)
    - pattern: (AntiSamy $AS).scan(...)
    - pattern: JSoup.clean(...)
- id: java.spring.security.injection.tainted-system-command.tainted-system-command
  languages:
  - java
  severity: ERROR
  mode: taint
  pattern-propagators:
  - pattern: (StringBuilder $STRB).append($INPUT)
    from: $INPUT
    to: $STRB
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
    label: INPUT
  - patterns:
    - pattern-either:
      - pattern: $X + $SOURCE
      - pattern: $SOURCE + $Y
      - pattern: (StringBuilder $STRB).append($SOURCE)
      - pattern: String.format("...", ..., $SOURCE, ...)
      - pattern: String.join("...", ..., $SOURCE, ...)
      - pattern: (String $STR).concat($SOURCE)
      - pattern: $SOURCE.concat(...)
      - pattern: $X += $SOURCE
      - pattern: $SOURCE += $X
    label: CONCAT
    requires: INPUT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (Process $P) = new Process(...);
      - pattern: |
          (ProcessBuilder $PB).command(...);
      - patterns:
        - pattern-either:
          - pattern: |
              (Runtime $R).$EXEC(...);
          - pattern: |
              Runtime.getRuntime(...).$EXEC(...);
        - metavariable-regex:
            metavariable: $EXEC
            regex: (exec|loadLibrary|load)
      - patterns:
        - pattern: |
            (ProcessBuilder $PB).command(...).$ADD(...);
        - metavariable-regex:
            metavariable: $ADD
            regex: (add|addAll)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $BUILDER = new ProcessBuilder(...);
                ...
            - pattern: $BUILDER.start(...)
          - pattern: |
              new ProcessBuilder(...). ... .start(...);
    requires: CONCAT
  message: 'Detected user input entering a method which executes a system command.
    This could result in a command injection vulnerability, which allows an attacker
    to inject an arbitrary system command onto the server. The attacker could download
    malware onto or steal data from the server. Instead, use ProcessBuilder, separating
    the command into individual arguments, like this: `new ProcessBuilder("ls", "-al",
    targetDirectory)`. Further, make sure you hardcode or allowlist the actual command
    so that attackers can''t run arbitrary commands.'
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - java
    - spring
    confidence: HIGH
    references:
    - https://www.stackhawk.com/blog/command-injection-java/
    - https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
    - https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.injection.tainted-system-command.tainted-system-command
    shortlink: https://sg.run/epY0
    semgrep.dev:
      rule:
        rule_id: 6JUxGN
        version_id: QkTqNk
        url: https://semgrep.dev/playground/r/QkTqNk/java.spring.security.injection.tainted-system-command.tainted-system-command
        origin: community
- id: generic.secrets.security.detected-aws-account-id.detected-aws-account-id
  patterns:
  - pattern-either:
    - pattern: |
        $ACCOUNT_ID = $SECRET
    - pattern: |
        $ACCOUNT_ID : $SECRET
    - pattern: |
        $ACCOUNT_ID => $SECRET
    - pattern: |
        $ACCOUNT_ID = "$SECRET"
    - pattern: |
        $ACCOUNT_ID : "$SECRET"
    - pattern: |
        $ACCOUNT_ID => "$SECRET"
    - pattern: |
        "$ACCOUNT_ID" = "$SECRET"
    - pattern: |
        "$ACCOUNT_ID" : "$SECRET"
    - pattern: |
        "$ACCOUNT_ID" => "$SECRET"
  - metavariable-analysis:
      metavariable: $SECRET
      analyzer: entropy
  - metavariable-regex:
      metavariable: $SECRET
      regex: ^((?!(12345|0000).*)[0-9]{12})$
  - metavariable-regex:
      metavariable: $ACCOUNT_ID
      regex: (AWS|aws|Aws)?_?(ACCOUNT|account|Account)_?(ID|id|Id)?("|')?
  languages:
  - generic
  message: AWS Account ID detected. This is a sensitive credential and should not
    be hardcoded here. Instead, read the value from an environment variable or keep
    the value in a separate, private file.
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - aws
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-aws-account-id.detected-aws-account-id
    shortlink: https://sg.run/Ro22
    semgrep.dev:
      rule:
        rule_id: zdUkdd
        version_id: gETK27
        url: https://semgrep.dev/playground/r/gETK27/generic.secrets.security.detected-aws-account-id.detected-aws-account-id
        origin: community
- id: generic.ci.security.bash-reverse-shell.bash_reverse_shell
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - ci
    confidence: HIGH
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.ci.security.bash-reverse-shell.bash_reverse_shell
    shortlink: https://sg.run/4l9l
    semgrep.dev:
      rule:
        rule_id: gxUJrJ
        version_id: DkT3lr
        url: https://semgrep.dev/playground/r/DkT3lr/generic.ci.security.bash-reverse-shell.bash_reverse_shell
        origin: community
  message: Semgrep found a bash reverse shell
  severity: ERROR
  languages:
  - generic
  pattern-either:
  - pattern: |
      sh -i >& /dev/udp/.../... 0>&1
  - pattern: |
      <...>/dev/tcp/.../...; sh <&... >&... 2>&
  - pattern: |
      <...>/dev/tcp/.../...; cat <&... | while read line; do $line 2>&... >&...;done
  - pattern: |
      sh -i ...<...> /dev/tcp/.../... ...<&... 1>&... 2>&
- id: generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key
  pattern-regex: da2-[a-z0-9]{26}
  languages:
  - regex
  message: AWS AppSync GraphQL Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - appsync
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key
    shortlink: https://sg.run/AvJ6
    semgrep.dev:
      rule:
        rule_id: pKUOoZ
        version_id: 9lTEpq
        url: https://semgrep.dev/playground/r/9lTEpq/generic.secrets.security.detected-aws-appsync-graphql-key.detected-aws-appsync-graphql-key
        origin: community
- id: generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key
  patterns:
  - pattern-regex: (("|'|`)?((?i)aws)_?\w*((?i)secret)_?\w*("|'|`)?\s{0,50}(:|=>|=)\s{0,50}("|'|`)?[A-Za-z0-9/+=]{40}("|'|`)?)
  - pattern-not-regex: (?i)example|sample|test|fake
  languages:
  - regex
  message: AWS Secret Access Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - aws
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key
    shortlink: https://sg.run/Bk39
    semgrep.dev:
      rule:
        rule_id: 2ZUbe8
        version_id: yeTQoe
        url: https://semgrep.dev/playground/r/yeTQoe/generic.secrets.security.detected-aws-secret-access-key.detected-aws-secret-access-key
        origin: community
- id: generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token
  pattern-either:
  - pattern-regex: EAACEdEose0cBA[0-9A-Za-z]+
  - pattern-regex: EAAAACZAVC6ygB[0-9A-Za-z]+
  - pattern-regex: EAAAAZAw4[0-9A-Za-z]+
  languages:
  - regex
  message: Facebook Access Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - facebook
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token
    shortlink: https://sg.run/0QYJ
    semgrep.dev:
      rule:
        rule_id: 10UKBL
        version_id: w8T4Yq
        url: https://semgrep.dev/playground/r/w8T4Yq/generic.secrets.security.detected-facebook-access-token.detected-facebook-access-token
        origin: community
- id: generic.secrets.security.detected-generic-secret.detected-generic-secret
  pattern-regex: '[sS][eE][cC][rR][eE][tT][:= \t]*[''|\"]?[0-9a-zA-Z]{32,45}[''|\"]?'
  languages:
  - regex
  message: Generic Secret detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-generic-secret.detected-generic-secret
    shortlink: https://sg.run/l2o5
    semgrep.dev:
      rule:
        rule_id: r6Urqe
        version_id: e1TEB2
        url: https://semgrep.dev/playground/r/e1TEB2/generic.secrets.security.detected-generic-secret.detected-generic-secret
        origin: community
- id: yaml.github-actions.security.pull-request-target-code-checkout.pull-request-target-code-checkout
  languages:
  - yaml
  message: This GitHub Actions workflow file uses `pull_request_target` and checks
    out code from the incoming pull request. When using `pull_request_target`, the
    Action runs in the context of the target repository, which includes access to
    all repository secrets. Normally, this is safe because the Action only runs code
    from the target repository, not the incoming PR. However, by checking out the
    incoming PR code, you're now using the incoming code for the rest of the action.
    You may be inadvertently executing arbitrary code from the incoming PR with access
    to repository secrets, which would let an attacker steal repository secrets. This
    normally happens by running build scripts (e.g., `npm build` and `make`) or dependency
    installation scripts (e.g., `python setup.py install`). Audit your workflow file
    to make sure no code from the incoming PR is executed. Please see https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    for additional mitigations.
  metadata:
    category: security
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
    references:
    - https://securitylab.github.com/research/github-actions-preventing-pwn-requests/
    - https://github.com/justinsteven/advisories/blob/master/2021_github_actions_checkspelling_token_leak_via_advice_symlink.md
    technology:
    - github-actions
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.github-actions.security.pull-request-target-code-checkout.pull-request-target-code-checkout
    shortlink: https://sg.run/jkdn
    semgrep.dev:
      rule:
        rule_id: d8Ulkd
        version_id: 0bTQDZ
        url: https://semgrep.dev/playground/r/0bTQDZ/yaml.github-actions.security.pull-request-target-code-checkout.pull-request-target-code-checkout
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        on:
          ...
          pull_request_target: ...
          ...
        ...
    - pattern-inside: |
        on: [..., pull_request_target, ...]
        ...
    - pattern-inside: |
        on: pull_request_target
        ...
  - pattern-inside: |
      jobs:
        ...
        $JOBNAME:
          ...
          steps:
            ...
  - pattern: |
      ...
      uses: "$ACTION"
      with:
        ...
        ref: $EXPR
  - metavariable-regex:
      metavariable: $ACTION
      regex: actions/checkout@.*
  - metavariable-pattern:
      language: generic
      metavariable: $EXPR
      patterns:
      - pattern: ${{ github.event.pull_request ... }}
  severity: WARNING
- id: javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
  message: 'Possibility of prototype polluting function detected. By adding or modifying
    attributes of an object prototype, it is possible to create attributes that exist
    on every object, or replace critical attributes with malicious ones. This can
    be problematic if the software depends on existence or non-existence of certain
    attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty,
    toString or valueOf). Possible mitigations might be: freezing the object prototype,
    using an object without prototypes (via Object.create(null) ), blocking modifications
    of attributes that resolve to object prototype, using Map instead of object.'
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    category: security
    references:
    - https://github.com/HoLyVieR/prototype-pollution-nsec18/blob/master/paper/JavaScript_prototype_pollution_attack_in_NodeJS.pdf
    technology:
    - typescript
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
    shortlink: https://sg.run/w1DB
    semgrep.dev:
      rule:
        rule_id: QrUpbJ
        version_id: bZT4d6
        url: https://semgrep.dev/playground/r/bZT4d6/javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $SMTH = $SMTH[$A]
    - pattern: |
        $SMTH = $SMTH[$A] = ...
    - pattern: |
        $SMTH = $SMTH[$A] && $Z
    - pattern: |
        $SMTH = $SMTH[$A] || $Z
  - pattern-either:
    - pattern-inside: |
        for(...) {
          ...
        }
    - pattern-inside: |
        while(...) {
          ...
        }
    - pattern-inside: |
        $X.forEach(function $NAME(...) {
          ...
        })
  - pattern-not-inside: |
      for(var $A = $S; ...; ...) {...}
  - pattern-not-inside: |
      for($A = $S; ...; ...) {...}
  - pattern-not-inside: |
      $X.forEach(function $NAME($OBJ, $A,...) {...})
  - metavariable-pattern:
      patterns:
      - pattern-not: '"..."'
      - pattern-not: |
          `...${...}...`
      - pattern-not: |
          ($A: float)
      metavariable: $A
- id: terraform.aws.security.insecure-load-balancer-tls-version.insecure-load-balancer-tls-version
  patterns:
  - pattern-either:
    - patterns:
      - pattern: ssl_policy = $ANYTHING
      - pattern-not-inside: ssl_policy = "ELBSecurityPolicy-FS-1-2-Res-2020-10"
      - pattern-not-inside: ssl_policy = "ELBSecurityPolicy-FS-1-2-Res-2019-08"
      - pattern-not-inside: ssl_policy = "ELBSecurityPolicy-FS-1-2-2019-08"
    - patterns:
      - pattern: protocol = "HTTP"
      - pattern-not-inside: |
          resource $ANYTHING $NAME {
            ...
            default_action {
              ...
              redirect {
                ...
                protocol = "HTTPS"
                ...
              }
              ...
            }
            ...
          }
  - pattern-inside: |
      resource $RESOURCE $X {
        ...
      }
  - metavariable-pattern:
      metavariable: $RESOURCE
      patterns:
      - pattern-either:
        - pattern: |
            "aws_lb_listener"
        - pattern: |
            "aws_alb_listener"
  message: Detected an AWS load balancer with an insecure TLS version. TLS versions
    less than 1.2 are considered insecure because they can be broken. To fix this,
    set your `ssl_policy` to `"ELBSecurityPolicy-FS-1-2-Res-2019-08"`, or include
    a default action to redirect to HTTPS.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    references:
    - https://www.ietf.org/rfc/rfc5246.txt
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.insecure-load-balancer-tls-version.insecure-load-balancer-tls-version
    shortlink: https://sg.run/187G
    semgrep.dev:
      rule:
        rule_id: 2ZUP9K
        version_id: 7ZT8yD
        url: https://semgrep.dev/playground/r/7ZT8yD/terraform.aws.security.insecure-load-balancer-tls-version.insecure-load-balancer-tls-version
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: yaml.github-actions.security.curl-eval.curl-eval
  languages:
  - yaml
  message: Data is being eval'd from a `curl` command. An attacker with control of
    the server in the `curl` command could inject malicious code into the `eval`,
    resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If
    you must do this, consider checking the SHA sum of the content returned by the
    server to verify its integrity.
  metadata:
    category: security
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections
    technology:
    - github-actions
    - bash
    - curl
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.github-actions.security.curl-eval.curl-eval
    shortlink: https://sg.run/9r7r
    semgrep.dev:
      rule:
        rule_id: X5Udrd
        version_id: DkT3ge
        url: https://semgrep.dev/playground/r/DkT3ge/yaml.github-actions.security.curl-eval.curl-eval
        origin: community
  patterns:
  - pattern-inside: 'steps: [...]'
  - pattern-inside: |
      - run: ...
        ...
  - pattern: 'run: $SHELL'
  - metavariable-pattern:
      language: bash
      metavariable: $SHELL
      patterns:
      - pattern: |
          $DATA=<... curl ...>
          ...
          eval <... $DATA ...>
  severity: ERROR
- id: generic.secrets.security.detected-artifactory-token.detected-artifactory-token
  patterns:
  - pattern-regex: |
      \bAKC[a-zA-Z0-9]{10,}
  - pattern-not-regex: |
      sha(128|256|512).*
  - pattern-not-regex: (?s)---BEGIN.*---\Z
  languages:
  - regex
  message: Artifactory token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/artifactory.py
    category: security
    technology:
    - secrets
    - artifactory
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-artifactory-token.detected-artifactory-token
    shortlink: https://sg.run/5Q2l
    semgrep.dev:
      rule:
        rule_id: 6JUj3l
        version_id: 3ZTwyk
        url: https://semgrep.dev/playground/r/3ZTwyk/generic.secrets.security.detected-artifactory-token.detected-artifactory-token
        origin: community
- id: generic.secrets.security.detected-generic-api-key.detected-generic-api-key
  pattern-regex: '[aA][pP][iI]_?[kK][eE][yY][=_:\s-]+[''|"]?[0-9a-zA-Z]{32,45}[''|"]?'
  languages:
  - regex
  message: Generic API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    confidence: LOW
    references:
    - https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-generic-api-key.detected-generic-api-key
    shortlink: https://sg.run/qxj8
    semgrep.dev:
      rule:
        rule_id: yyUn8p
        version_id: O9T41K
        url: https://semgrep.dev/playground/r/O9T41K/generic.secrets.security.detected-generic-api-key.detected-generic-api-key
        origin: community
- id: generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token
  pattern-regex: ya29\.[0-9A-Za-z\-_]+
  languages:
  - regex
  message: Google OAuth Access Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - google
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token
    shortlink: https://sg.run/ox2n
    semgrep.dev:
      rule:
        rule_id: kxUkpo
        version_id: ExTdZZ
        url: https://semgrep.dev/playground/r/ExTdZZ/generic.secrets.security.detected-google-oauth-access-token.detected-google-oauth-access-token
        origin: community
- id: generic.secrets.security.detected-hockeyapp.detected-hockeyapp
  pattern-regex: (?i)hockey.{0,50}(\\\"|'|`)?[0-9a-f]{32}(\\\"|'|`)?
  languages:
  - regex
  message: HockeyApp detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - hockeyapp
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-hockeyapp.detected-hockeyapp
    shortlink: https://sg.run/2xoY
    semgrep.dev:
      rule:
        rule_id: OrU3zo
        version_id: 8KTWDk
        url: https://semgrep.dev/playground/r/8KTWDk/generic.secrets.security.detected-hockeyapp.detected-hockeyapp
        origin: community
- id: go.lang.security.audit.sqli.pgx-sqli.pgx-sqli
  languages:
  - go
  message: 'Detected string concatenation with a non-literal variable in a pgx Go
    SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries instead. You can use parameterized queries like so: (`SELECT $1 FROM table`,
    `data1)'
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://github.com/jackc/pgx
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    category: security
    technology:
    - pgx
    confidence: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.sqli.pgx-sqli.pgx-sqli
    shortlink: https://sg.run/okKN
    semgrep.dev:
      rule:
        rule_id: oqUz92
        version_id: 8KTwq9
        url: https://semgrep.dev/playground/r/8KTwq9/go.lang.security.audit.sqli.pgx-sqli.pgx-sqli
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $DB.$METHOD(..., $X + $Y, ...)
    - pattern: $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
  - pattern-either:
    - pattern-inside: |
        $DB, ... = pgx.Connect(...)
        ...
    - pattern-inside: |
        $DB, ... = pgx.NewConnPool(...)
        ...
    - pattern-inside: |
        $DB, ... = pgx.ConnectConfig(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *pgx.Conn, ...) {
          ...
        }
  - pattern-not: $DB.$METHOD(..., "..." + "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|ExecEx|Query|QueryEx|QueryRow|QueryRowEx)$
  severity: ERROR
- id: go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url
  message: Found a formatted template string passed to 'template.URL()'. 'template.URL()'
    does not escape contents, and this could result in XSS (cross-site scripting)
    and therefore confidential data being stolen. Sanitize data coming into this function
    or make sure that no user-controlled input is coming into the function.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/html/template/#URL
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url
    shortlink: https://sg.run/vzE4
    semgrep.dev:
      rule:
        rule_id: 4bUkDW
        version_id: d6Tde3
        url: https://semgrep.dev/playground/r/d6Tde3/go.lang.security.audit.net.unescaped-data-in-url.unescaped-data-in-url
        origin: community
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: template.URL($T + $X, ...)
  - pattern: template.URL(fmt.$P("...", ...), ...)
  - pattern: |
      $T = "..."
      ...
      $T = $FXN(..., $T, ...)
      ...
      template.URL($T, ...)
  - pattern: |
      $T = fmt.$P("...", ...)
      ...
      template.URL($T, ...)
  - pattern: |
      $T, $ERR = fmt.$P("...", ...)
      ...
      template.URL($T, ...)
  - pattern: |
      $T = $X + $Y
      ...
      template.URL($T, ...)
  - pattern: |-
      $T = "..."
      ...
      $OTHER, $ERR = fmt.$P(..., $T, ...)
      ...
      template.URL($OTHER, ...)
- id: go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js
  message: Found a formatted template string passed to 'template.JS()'. 'template.JS()'
    does not escape contents. Be absolutely sure there is no user-controlled data
    in this template.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/html/template/#JS
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js
    shortlink: https://sg.run/eLNl
    semgrep.dev:
      rule:
        rule_id: 3qUP8K
        version_id: A8TyoX
        url: https://semgrep.dev/playground/r/A8TyoX/go.lang.security.audit.net.unescaped-data-in-js.unescaped-data-in-js
        origin: community
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: template.JS($T + $X, ...)
  - pattern: template.JS(fmt.$P("...", ...), ...)
  - pattern: |
      $T = "..."
      ...
      $T = $FXN(..., $T, ...)
      ...
      template.JS($T, ...)
  - pattern: |
      $T = fmt.$P("...", ...)
      ...
      template.JS($T, ...)
  - pattern: |
      $T, $ERR = fmt.$P("...", ...)
      ...
      template.JS($T, ...)
  - pattern: |
      $T = $X + $Y
      ...
      template.JS($T, ...)
  - pattern: |
      $T = "..."
      ...
      $OTHER, $ERR = fmt.$P(..., $T, ...)
      ...
      template.JS($OTHER, ...)
- id: go.lang.security.audit.reflect-makefunc.reflect-makefunc
  message: '''reflect.MakeFunc'' detected. This will sidestep protections that are
    normally afforded by Go''s type system. Audit this call and be sure that user
    input cannot be used to affect the code generated by MakeFunc; otherwise, you
    will have a serious security vulnerability.'
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
    category: security
    technology:
    - go
    confidence: LOW
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.reflect-makefunc.reflect-makefunc
    shortlink: https://sg.run/KlPd
    semgrep.dev:
      rule:
        rule_id: 10UKGb
        version_id: 0bTQPg
        url: https://semgrep.dev/playground/r/0bTQPg/go.lang.security.audit.reflect-makefunc.reflect-makefunc
        origin: community
  severity: ERROR
  pattern: reflect.MakeFunc(...)
  languages:
  - go
- id: go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter
  message: Detected 'Fprintf' or similar writing to 'http.ResponseWriter'. This bypasses
    HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use
    the 'html/template' package to render data to users.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter
    shortlink: https://sg.run/7oqR
    semgrep.dev:
      rule:
        rule_id: ReUgyJ
        version_id: 2KTAJo
        url: https://semgrep.dev/playground/r/2KTAJo/go.lang.security.audit.xss.no-fprintf-to-responsewriter.no-fprintf-to-responsewriter
        origin: community
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern-not: fmt.$PRINTF($WRITER, "...")
  - pattern: fmt.$PRINTF($WRITER, ...)
  languages:
  - go
- id: go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag
  message: Detected template variable interpolation in an HTML tag. This is potentially
    vulnerable to cross-site scripting (XSS) attacks because a malicious actor has
    control over HTML but without the need to use escaped characters. Use explicit
    tags instead.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/golang/go/issues/19669
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    category: security
    technology:
    - generic
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag
    shortlink: https://sg.run/LwJJ
    semgrep.dev:
      rule:
        rule_id: AbUzBB
        version_id: X0To6j
        url: https://semgrep.dev/playground/r/X0To6j/go.lang.security.audit.xss.no-interpolation-in-tag.no-interpolation-in-tag
        origin: community
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*.html'
    - '*.thtml'
    - '*.gohtml'
    - '*.tmpl'
    - '*.tpl'
  pattern: <{{ ... }} ... >
- id: go.lang.security.audit.xss.no-io-writestring-to-responsewriter.no-io-writestring-to-responsewriter
  message: Detected 'io.WriteString()' writing directly to 'http.ResponseWriter'.
    This bypasses HTML escaping that prevents cross-site scripting vulnerabilities.
    Instead, use the 'html/template' package to render data to users.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    - https://golang.org/pkg/io/#WriteString
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-io-writestring-to-responsewriter.no-io-writestring-to-responsewriter
    shortlink: https://sg.run/gLwn
    semgrep.dev:
      rule:
        rule_id: DbUpEr
        version_id: 1QT0qB
        url: https://semgrep.dev/playground/r/1QT0qB/go.lang.security.audit.xss.no-io-writestring-to-responsewriter.no-io-writestring-to-responsewriter
        origin: community
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern-not: io.WriteString($WRITER, "...")
  - pattern: io.WriteString($WRITER, $STRING)
  languages:
  - go
- id: go.lang.security.audit.xss.no-printf-in-responsewriter.no-printf-in-responsewriter
  message: Detected 'printf' or similar in 'http.ResponseWriter.write()'. This bypasses
    HTML escaping that prevents cross-site scripting vulnerabilities. Instead, use
    the 'html/template' package to render data to users.
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://blogtitle.github.io/robn-go-security-pearls-cross-site-scripting-xss/
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.no-printf-in-responsewriter.no-printf-in-responsewriter
    shortlink: https://sg.run/Q5BP
    semgrep.dev:
      rule:
        rule_id: WAUoLp
        version_id: 9lTEPr
        url: https://semgrep.dev/playground/r/9lTEPr/go.lang.security.audit.xss.no-printf-in-responsewriter.no-printf-in-responsewriter
        origin: community
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        func $HANDLER(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
    - pattern-inside: |
        func(..., $WRITER http.ResponseWriter, ...) {
          ...
        }
  - pattern: |
      $WRITER.Write(<... fmt.$PRINTF(...) ...>, ...)
  languages:
  - go
- id: go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type
  message: Semgrep could not determine that the argument to 'template.HTML()' is a
    constant. 'template.HTML()' and similar does not escape contents. Be absolutely
    sure there is no user-controlled data in this template. If user data can reach
    this template, you may have a XSS vulnerability. Instead, do not use this function
    and use 'template.Execute()'.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/html/template/#HTML
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/vulnerability/xss/xss.go#L33
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type
    shortlink: https://sg.run/3xDb
    semgrep.dev:
      rule:
        rule_id: 0oU5n3
        version_id: yeTQ7o
        url: https://semgrep.dev/playground/r/yeTQ7o/go.lang.security.audit.xss.template-html-does-not-escape.unsafe-template-type
        origin: community
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-not: template.$ANY("..." + "...")
  - pattern-not: template.$ANY("...")
  - pattern-either:
    - pattern: template.HTML(...)
    - pattern: template.CSS(...)
    - pattern: template.HTMLAttr(...)
    - pattern: template.JS(...)
    - pattern: template.JSStr(...)
    - pattern: template.Srcset(...)
    - pattern: template.URL(...)
- id: problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification
  message: Checks for disabling of TLS/SSL certificate verification. This should only
    be used for debugging purposes because it leads to vulnerability to MTM attacks.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://stackoverflow.com/questions/12122159/how-to-do-a-https-request-with-bad-certificate
    subcategory:
    - vuln
    technology:
    - go
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification
    shortlink: https://sg.run/4xj5
    semgrep.dev:
      rule:
        rule_id: DbUpjg
        version_id: e1T2Gr
        url: https://semgrep.dev/playground/r/e1T2Gr/problem-based-packs.insecure-transport.go-stdlib.bypass-tls-verification.bypass-tls-verification
        origin: community
  languages:
  - go
  pattern-either:
  - pattern: |
      tls.Config{..., InsecureSkipVerify: true, ...}
  - pattern: |
      $CONFIG = &tls.Config{...}
      ...
      $CONFIG.InsecureSkipVerify = true
- id: problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions
  message: Detects creations of tls configuration objects with an insecure MinVersion
    of TLS. These protocols are deprecated due to POODLE, man in the middle attacks,
    and other vulnerabilities.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle
    subcategory:
    - vuln
    technology:
    - go
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions
    shortlink: https://sg.run/PJqz
    semgrep.dev:
      rule:
        rule_id: WAUow9
        version_id: vdTABO
        url: https://semgrep.dev/playground/r/vdTABO/problem-based-packs.insecure-transport.go-stdlib.disallow-old-tls-versions.disallow-old-tls-versions
        origin: community
  languages:
  - go
  patterns:
  - pattern-either:
    - pattern: |
        tls.Config{..., MinVersion: $TLS.$VERSION, ...}
    - pattern: |
        $CONFIG = &tls.Config{...}
        ...
        $CONFIG.MinVersion = $TLS.$VERSION
  - metavariable-regex:
      metavariable: $VERSION
      regex: (VersionTLS10|VersionTLS11|VersionSSL30)
- id: problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request
  message: Checks for outgoing connections to ftp servers with the ftp package. FTP
    does not encrypt traffic, possibly leading to PII being sent plaintext over the
    network. Instead, connect via the SFTP protocol.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://godoc.org/github.com/jlaffaye/ftp#Dial
    - https://github.com/jlaffaye/ftp
    subcategory:
    - vuln
    technology:
    - ftp
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request
    shortlink: https://sg.run/J9Ay
    semgrep.dev:
      rule:
        rule_id: 0oU5XN
        version_id: d6T5p6
        url: https://semgrep.dev/playground/r/d6T5p6/problem-based-packs.insecure-transport.go-stdlib.ftp-request.ftp-request
        origin: community
  languages:
  - go
  fix-regex:
    regex: '[fF][tT][pP]://'
    replacement: sftp://
    count: 1
  pattern-either:
  - pattern: |
      ftp.Dial("=~/^[fF][tT][pP]://.*/", ...)
  - pattern: |
      ftp.DialTimeout("=~/^[fF][tT][pP]://.*/", ...)
  - pattern: |
      ftp.Connect("=~/^[fF][tT][pP]://.*/")
  - pattern: |
      $URL = "=~/^[fF][tT][pP]://.*/"
      ...
      ftp.Dial($URL, ...)
  - pattern: |
      $URL = "=~/^[fF][tT][pP]://.*/"
      ...
      ftp.DialTimeout($URL, ...)
  - pattern: |
      $URL = "=~/^[fF][tT][pP]://.*/"
      ...
      ftp.Connect($URL)
- id: problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request
  message: Checks for requests to http (unencrypted) sites using gorequest, a popular
    HTTP client library. This is dangerous because it could result in plaintext PII
    being passed around the network.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://github.com/parnurzeal/gorequest
    subcategory:
    - vuln
    technology:
    - gorequest
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request
    shortlink: https://sg.run/5Q10
    semgrep.dev:
      rule:
        rule_id: KxUbXx
        version_id: ZRTvX3
        url: https://semgrep.dev/playground/r/ZRTvX3/problem-based-packs.insecure-transport.go-stdlib.gorequest-http-request.gorequest-http-request
        origin: community
  languages:
  - go
  pattern-either:
  - patterns:
    - pattern-inside: |
        $REQ = gorequest.New()
        ...
        $RES = ...
    - pattern: |
        $REQ.$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Patch)
  - patterns:
    - pattern: gorequest.New().$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Patch)
- id: problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request
  message: Checks for requests to http (unencrypted) sites using grequests, a popular
    HTTP client library. This is dangerous because it could result in plaintext PII
    being passed around the network.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://godoc.org/github.com/levigross/grequests#DoRegularRequest
    - https://github.com/levigross/grequests
    subcategory:
    - vuln
    technology:
    - grequests
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request
    shortlink: https://sg.run/Ge5q
    semgrep.dev:
      rule:
        rule_id: qNUjy3
        version_id: nWT10P
        url: https://semgrep.dev/playground/r/nWT10P/problem-based-packs.insecure-transport.go-stdlib.grequests-http-request.grequests-http-request
        origin: community
  languages:
  - go
  patterns:
  - pattern-either:
    - pattern: |
        grequests.$FUNC(...,"=~/[hH][tT][tT][pP]://.*/", ...)
    - pattern: |
        $FUNC(...,"=~/[hH][tT][tT][pP]://.*/", ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: (Get|Head|Post|Put|Delete|Patch|Options|Req|DoRegularRequest)
- id: problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request
  message: Checks for requests to http (unencrypted) sites using gorequest, a popular
    HTTP client library. This is dangerous because it could result in plaintext PII
    being passed around the network.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://godoc.org/github.com/dghubble/sling#Sling.Add
    - https://github.com/dghubble/sling
    subcategory:
    - vuln
    technology:
    - sling
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request
    shortlink: https://sg.run/BkZA
    semgrep.dev:
      rule:
        rule_id: 6JUjoX
        version_id: LjTolG
        url: https://semgrep.dev/playground/r/LjTolG/problem-based-packs.insecure-transport.go-stdlib.sling-http-request.sling-http-request
        origin: community
  languages:
  - go
  pattern-either:
  - patterns:
    - pattern-inside: |
        $REQ = sling.New()
        ...
        $RES = ...
    - pattern: |
        $REQ.$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
  - patterns:
    - pattern: sling.New().$FUNC("=~/[hH][tT][tT][pP]://.*/")
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
  - patterns:
    - pattern-inside: |
        $REQ = sling.New()
        ...
        $URL = "=~/[hH][tT][tT][pP]://.*/"
        ...
        $RES = ...
    - pattern: |
        $REQ.$FUNC($URL)
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
  - patterns:
    - pattern-inside: |
        $URL = "=~/[hH][tT][tT][pP]://.*/"
        ...
        $RES = ...
    - pattern: |
        sling.New().$FUNC($URL)
    - metavariable-regex:
        metavariable: $FUNC
        regex: (Get|Post|Delete|Head|Put|Options|Patch|Base|Connect)
- id: problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request
  message: Checks for attempts to connect to an insecure telnet server using the package
    telnet. This is bad because it can lead to man in the middle attacks.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://godoc.org/github.com/reiver/go-telnet
    subcategory:
    - vuln
    technology:
    - go-telnet
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request
    shortlink: https://sg.run/Do4P
    semgrep.dev:
      rule:
        rule_id: oqUewD
        version_id: 8KT7B3
        url: https://semgrep.dev/playground/r/8KT7B3/problem-based-packs.insecure-transport.go-stdlib.telnet-request.telnet-request
        origin: community
  languages:
  - go
  pattern: |
    telnet.DialToAndCall(...)
- id: problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
  message: Checks for redefinitions of functions that check TLS/SSL certificate verification.
    This can lead to vulnerabilities, as simple errors in the code can result in lack
    of proper certificate validation. This should only be used for debugging purposes
    because it leads to vulnerability to MTM attacks.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://stackoverflow.com/questions/4072585/disabling-ssl-certificate-validation-in-spring-resttemplate
    - https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1
    subcategory:
    - vuln
    technology:
    - spring
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
    shortlink: https://sg.run/W822
    semgrep.dev:
      rule:
        rule_id: zdUkZZ
        version_id: gETonE
        url: https://semgrep.dev/playground/r/gETonE/problem-based-packs.insecure-transport.java-spring.bypass-tls-verification.bypass-tls-verification
        origin: community
  languages:
  - java
  pattern-either:
  - pattern: |
      new HostnameVerifier() {
        ...
        public boolean verify(String hostname, SSLSession session) {
          ...
        }
        ...
      };
  - pattern: |
      public RestTemplate restTemplate() throws KeyStoreException, NoSuchAlgorithmException, KeyManagementException {
        ...
        TrustStrategy $FUNCNAME = (X509Certificate[] chain, String authType) -> ...;
        ...
      }
  - pattern: |
      TrustStrategy $FUNCNAME= new TrustStrategy() {
        ...
        public boolean isTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {
          ...
        }
        ...
      };
- id: problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
  message: Detects direct creations of SSLConnectionSocketFactories that don't disallow
    SSL v2, SSL v3, and TLS v1. SSLSocketFactory can be used to validate the identity
    of the HTTPS server against a list of trusted certificates. These protocols are
    deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
    shortlink: https://sg.run/l25E
    semgrep.dev:
      rule:
        rule_id: j2Uv2K
        version_id: PkTXOE
        url: https://semgrep.dev/playground/r/PkTXOE/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions1.disallow-old-tls-versions1
        origin: community
  languages:
  - java
  patterns:
  - pattern: |
      new SSLConnectionSocketFactory(...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.2", "TLSv1.3"}, ...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.3", "TLSv1.2"}, ...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.3"}, ...);
  - pattern-not: |
      new SSLConnectionSocketFactory(..., new String[] {"TLSv1.2"}, ...);
- id: problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
  message: Checks for cases where java applications are allowing unsafe renegotiation.
    This leaves the application vulnerable to a man-in-the-middle attack where chosen
    plain text is injected as prefix to a TLS connection.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://www.oracle.com/java/technologies/javase/tlsreadme.html
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
    shortlink: https://sg.run/jR5N
    semgrep.dev:
      rule:
        rule_id: wdUJw8
        version_id: WrTAj9
        url: https://semgrep.dev/playground/r/WrTAj9/problem-based-packs.insecure-transport.java-stdlib.tls-renegotiation.tls-renegotiation
        origin: community
  languages:
  - java
  pattern: |
    java.lang.System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", true);
- id: problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
  message: Checks for requests sent via Unirest to http:// URLS. This is dangerous
    because the server is attempting to connect to a website that does not encrypt
    traffic with TLS. Instead, send requests only to https:// URLS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://kong.github.io/unirest-java/#requests
    subcategory:
    - vuln
    technology:
    - unirest
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
    shortlink: https://sg.run/1Z1G
    semgrep.dev:
      rule:
        rule_id: x8Uno2
        version_id: 0bTY9N
        url: https://semgrep.dev/playground/r/0bTY9N/problem-based-packs.insecure-transport.java-stdlib.unirest-http-request.unirest-http-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: |
      Unirest.get("=~/[hH][tT][tT][pP]://.*/")
  - pattern: |
      Unirest.post("=~/[hH][tT][tT][pP]://.*/")
- id: php.lang.security.preg-replace-eval.preg-replace-eval
  patterns:
  - pattern: a()
  - pattern: b()
  message: This rule has been deprecated, see https://github.com/returntocorp/semgrep-rules/issues/2506.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    references:
    - https://www.php.net/manual/en/function.preg-replace.php
    - https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php
    category: security
    deprecated: true
    technology:
    - php
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.preg-replace-eval.preg-replace-eval
    shortlink: https://sg.run/0Qzw
    semgrep.dev:
      rule:
        rule_id: AbUz2Z
        version_id: BjTnA2
        url: https://semgrep.dev/playground/r/BjTnA2/php.lang.security.preg-replace-eval.preg-replace-eval
        origin: community
  languages:
  - php
  severity: ERROR
- id: problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
  message: Detects setting client protocols to insecure versions of TLS and SSL. These
    protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://stackoverflow.com/questions/26504653/is-it-possible-to-disable-sslv3-for-all-java-applications
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
    shortlink: https://sg.run/Yvjy
    semgrep.dev:
      rule:
        rule_id: 10UKvx
        version_id: WrTBA3
        url: https://semgrep.dev/playground/r/WrTBA3/problem-based-packs.insecure-transport.java-stdlib.disallow-old-tls-versions2.disallow-old-tls-versions2
        origin: community
  languages:
  - java
  patterns:
  - pattern: $VALUE. ... .setProperty("jdk.tls.client.protocols", "$PATTERNS");
  - metavariable-pattern:
      metavariable: $PATTERNS
      language: generic
      patterns:
      - pattern-either:
        - pattern: TLS1
        - pattern-regex: ^(.*TLSv1|.*SSLv.*)$
        - pattern-regex: ^(.*TLSv1,.*)
- id: problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request
  message: Checks for requests sent via http.NewRequest to http:// URLS. This is dangerous
    because the server is attempting to connect to a website that does not encrypt
    traffic with TLS. Instead, send requests only to https:// URLS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://golang.org/pkg/net/http/#NewRequest
    subcategory:
    - vuln
    technology:
    - go
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request
    shortlink: https://sg.run/RoYq
    semgrep.dev:
      rule:
        rule_id: lBU90n
        version_id: K3TW54
        url: https://semgrep.dev/playground/r/K3TW54/problem-based-packs.insecure-transport.go-stdlib.http-customized-request.http-customized-request
        origin: community
  languages:
  - go
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern: |
    http.NewRequest(..., "=~/[hH][tT][tT][pP]://.*/", ...)
- id: problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests
  message: Checks for requests to http (unencrypted) sites using some of ruby's most
    popular REST/HTTP libraries, including httparty and restclient.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://github.com/rest-client/rest-client
    - https://github.com/jnunemaker/httparty/tree/master/docs
    subcategory:
    - vuln
    technology:
    - httparty
    - rest-client
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests
    shortlink: https://sg.run/OPQL
    semgrep.dev:
      rule:
        rule_id: L1UyKG
        version_id: qkT8Wb
        url: https://semgrep.dev/playground/r/qkT8Wb/problem-based-packs.insecure-transport.ruby-stdlib.http-client-requests.http-client-requests
        origin: community
  languages:
  - ruby
  pattern-either:
  - pattern: |
      HTTParty.$PARTYVERB("=~/[hH][tT][tT][pP]://.*/", ...)
  - pattern: |
      $STRING = "=~/[hH][tT][tT][pP]://.*/"
      ...
      HTTParty.$PARTYVERB($STRING, ...)
  - pattern: |
      RestClient.$RESTVERB "=~/[hH][tT][tT][pP]://.*/", ...
  - pattern: |
      RestClient::Request.execute(..., url: "=~/[hH][tT][tT][pP]://.*/", ...)
- id: problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request
  message: Checks for creation of telnet servers or attempts to connect through telnet.
    This is insecure as the telnet protocol supports no encryption, and data passes
    through unencrypted.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.ruby-lang.org/en/2.2.0/Net/Telnet.html
    - https://www.rubydoc.info/gems/net-ssh-telnet2/0.1.0/Net/SSH/Telnet
    subcategory:
    - vuln
    technology:
    - ruby
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request
    shortlink: https://sg.run/dKQE
    semgrep.dev:
      rule:
        rule_id: QrUzo2
        version_id: YDT9AA
        url: https://semgrep.dev/playground/r/YDT9AA/problem-based-packs.insecure-transport.ruby-stdlib.net-telnet-request.net-telnet-request
        origin: community
  languages:
  - ruby
  pattern-either:
  - pattern: |
      Net::Telnet::new(...)
  - pattern: |
      Net::SSH::Telnet.new(...)
- id: terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume
  languages:
  - hcl
  message: An EBS volume is configured without encryption enabled.
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "aws_ebs_volume" "..." {... encrypted=true ...}
  - pattern-inside: |
      resource "aws_ebs_volume" "..." {...}
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume
    shortlink: https://sg.run/GWdB
    semgrep.dev:
      rule:
        rule_id: WAUZW5
        version_id: 7ZT87G
        url: https://semgrep.dev/playground/r/7ZT87G/terraform.lang.security.ebs-unencrypted-volume.unencrypted-ebs-volume
        origin: community
- id: terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled
  patterns:
  - pattern: |
      resource
  - pattern-inside: |
      resource "aws_eks_cluster" "..." {...}
  - pattern-not-inside: |
      resource "aws_eks_cluster" "..."{
        ...
        vpc_config{
          ...
          endpoint_public_access = false
          ...
        }
        ...
      }
  languages:
  - hcl
  message: The vpc_config resource inside the eks cluster has not explicitly disabled
    public endpoint access
  severity: WARNING
  metadata:
    category: security
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled
    shortlink: https://sg.run/Albg
    semgrep.dev:
      rule:
        rule_id: KxU4v6
        version_id: QkT9yx
        url: https://semgrep.dev/playground/r/QkT9yx/terraform.lang.security.eks-public-endpoint-enabled.eks-public-endpoint-enabled
        origin: community
- id: python.flask.security.open-redirect.open-redirect
  patterns:
  - pattern-inside: |
      @$APP.route(...)
      def $X(...):
        ...
  - pattern-not-inside: |
      @$APP.route(...)
      def $X(...):
        ...
        if <... werkzeug.urls.url_parse($V) ...>:
          ...
  - pattern-either:
    - pattern: flask.redirect(<... flask.request.$W.get(...) ...>, ...)
    - pattern: flask.redirect(<... flask.request.$W[...] ...>, ...)
    - pattern: flask.redirect(<... flask.request.$W(...) ...>, ...)
    - pattern: flask.redirect(<... flask.request.$W ...>, ...)
    - pattern: |
        $V = flask.request.$W.get(...)
        ...
        flask.redirect(<... $V ...>, ...)
    - pattern: |
        $V = flask.request.$W[...]
        ...
        flask.redirect(<... $V ...>, ...)
    - pattern: |
        $V = flask.request.$W(...)
        ...
        flask.redirect(<... $V ...>, ...)
    - pattern: |
        $V = flask.request.$W
        ...
        flask.redirect(<... $V ...>, ...)
  - pattern-not: flask.redirect(flask.request.path)
  - pattern-not: flask.redirect(flask.request.path + ...)
  - pattern-not: flask.redirect(f"{flask.request.path}...")
  message: Data from request is passed to redirect(). This is an open redirect and
    could be exploited. Consider using 'url_for()' to generate links to known locations.
    If you must use a URL to unknown pages, consider using 'urlparse()' or similar
    and checking if the 'netloc' property is the same as your site's host name. See
    the references for more information.
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://flask-login.readthedocs.io/en/latest/#login-example
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1
    - https://docs.python.org/3/library/urllib.parse.html#url-parsing
    category: security
    technology:
    - flask
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect
    shortlink: https://sg.run/kXe2
    semgrep.dev:
      rule:
        rule_id: ZqU5LR
        version_id: 5PTBYY
        url: https://semgrep.dev/playground/r/5PTBYY/python.flask.security.open-redirect.open-redirect
        origin: community
  languages:
  - python
  severity: ERROR
- id: ruby.jwt.security.audit.jwt-exposed-data.ruby-jwt-exposed-data
  message: The object is passed strictly to jsonwebtoken.sign(...) Make sure that
    sensitive information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.jwt.security.audit.jwt-exposed-data.ruby-jwt-exposed-data
    shortlink: https://sg.run/B4Nb
    semgrep.dev:
      rule:
        rule_id: qNUoYd
        version_id: K3TPOZ
        url: https://semgrep.dev/playground/r/K3TPOZ/ruby.jwt.security.audit.jwt-exposed-data.ruby-jwt-exposed-data
        origin: community
  languages:
  - ruby
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern-inside: |
      def $FUNC(...,$INPUT,...)
        ...
      end
  - pattern: |
      JWT.encode($INPUT,...)
- id: ruby.jwt.security.jwt-exposed-credentials.ruby-jwt-exposed-credentials
  languages:
  - ruby
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    references:
    - https://cwe.mitre.org/data/definitions/522.html
    category: security
    technology:
    - jwt
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.jwt.security.jwt-exposed-credentials.ruby-jwt-exposed-credentials
    shortlink: https://sg.run/58Y6
    semgrep.dev:
      rule:
        rule_id: DbUWdB
        version_id: qkT9KG
        url: https://semgrep.dev/playground/r/qkT9KG/ruby.jwt.security.jwt-exposed-credentials.ruby-jwt-exposed-credentials
        origin: community
  message: Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern: |
      $PAYLOAD = {...,password:...,...}
      ...
      JWT.encode($PAYLOAD,...)
  severity: ERROR
- id: ruby.jwt.security.jwt-hardcode.ruby-jwt-hardcoded-secret
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables)'
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.jwt.security.jwt-hardcode.ruby-jwt-hardcoded-secret
    shortlink: https://sg.run/GW2B
    semgrep.dev:
      rule:
        rule_id: WAUZz5
        version_id: l4TeNk
        url: https://semgrep.dev/playground/r/l4TeNk/ruby.jwt.security.jwt-hardcode.ruby-jwt-hardcoded-secret
        origin: community
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern-either:
    - pattern: |
        JWT.encode($PAYLOAD,"...",...)
    - pattern: |
        JWT.decode($PAYLOAD,"...",...)
    - pattern: |
        JWT.encode($PAYLOAD,nil,...)
    - pattern: |
        JWT.decode($PAYLOAD,nil,...)
    - pattern: |
        $SECRET = "..."
        ...
        JWT.encode($PAYLOAD,$SECRET,...)
    - pattern: |
        $SECRET = "..."
        ...
        JWT.decode($PAYLOAD,$SECRET,...)
  languages:
  - ruby
  severity: ERROR
- id: ruby.jwt.security.jwt-none-alg.ruby-jwt-none-alg
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.jwt.security.jwt-none-alg.ruby-jwt-none-alg
    shortlink: https://sg.run/R8kE
    semgrep.dev:
      rule:
        rule_id: 0oUExR
        version_id: YDTz8L
        url: https://semgrep.dev/playground/r/YDTz8L/ruby.jwt.security.jwt-none-alg.ruby-jwt-none-alg
        origin: community
  languages:
  - ruby
  severity: ERROR
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern: |
      JWT.encode($PAYLOAD, $SECRET, 'none', ...)
- id: ruby.lang.security.model-attr-accessible.model-attr-accessible
  message: 'Checks for dangerous permitted attributes that can lead to mass assignment
    vulnerabilities. Query parameters allowed using permit and attr_accessible are
    checked for allowance of dangerous attributes admin, banned, role, and account_id.
    Also checks for usages of params.permit!, which allows everything. Fix: don''t
    allow admin, banned, role, and account_id using permit or attr_accessible.'
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attr_accessible.rb
    category: security
    technology:
    - ruby
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.model-attr-accessible.model-attr-accessible
    shortlink: https://sg.run/jNrZ
    semgrep.dev:
      rule:
        rule_id: bwUOAG
        version_id: ExTdd1
        url: https://semgrep.dev/playground/r/ExTdd1/ruby.lang.security.model-attr-accessible.model-attr-accessible
        origin: community
  languages:
  - ruby
  severity: ERROR
  pattern-either:
  - pattern: |
      ....permit(..., :admin, ...)
  - pattern: |
      ....permit(..., :role, ...)
  - pattern: |
      ....permit(..., :banned, ...)
  - pattern: |
      ....permit(..., :account_id, ...)
  - pattern: |
      attr_accessible ..., :admin, ...
  - pattern: |
      attr_accessible ..., :role, ...
  - pattern: |
      attr_accessible ..., :banned, ...
  - pattern: |
      attr_accessible ..., :account_id, ...
  - pattern: |
      params.permit!
- id: ruby.lang.security.nested-attributes-bypass.nested-attributes-bypass
  message: 'Checks for nested attributes vulnerability (CVE-2015-7577). Setting allow_destroy:
    false in accepts_nested_attributes_for can lead to attackers setting attributes
    to invalid values and clearing all attributes. This affects versions 3.1.0 and
    newer, with fixed versions 5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1. To fix,
    upgrade to a newer version or use the initializer specified in the google groups.'
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://groups.google.com/g/rubyonrails-security/c/cawsWcQ6c8g/m/tegZtYdbFQAJ
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_nested_attributes_bypass.rb
    category: security
    technology:
    - ruby
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.nested-attributes-bypass.nested-attributes-bypass
    shortlink: https://sg.run/yzy8
    semgrep.dev:
      rule:
        rule_id: wdU891
        version_id: 8KTWWy
        url: https://semgrep.dev/playground/r/8KTWWy/ruby.lang.security.nested-attributes-bypass.nested-attributes-bypass
        origin: community
  languages:
  - ruby
  severity: WARNING
  pattern: 'accepts_nested_attributes_for ..., allow_destroy: false, ...'
- id: ruby.rails.security.audit.xss.templates.unquoted-attribute.unquoted-attribute
  message: 'Detected a unquoted template variable as an attribute. If unquoted, a
    malicious actor could inject custom JavaScript handlers. To fix this, add quotes
    around the template expression, like this: "<%= expr %>".'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#unquoted-attributes
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    category: security
    technology:
    - rails
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.unquoted-attribute.unquoted-attribute
    shortlink: https://sg.run/PpeN
    semgrep.dev:
      rule:
        rule_id: AbUW9y
        version_id: w8T4vp
        url: https://semgrep.dev/playground/r/w8T4vp/ruby.rails.security.audit.xss.templates.unquoted-attribute.unquoted-attribute
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <$TAG ...>
  - pattern-not-inside: ="..."
  - pattern-not-inside: ="<%= ... %>"
  - pattern-not-inside: ='...'
  - pattern-not-inside: ='<%= ... %>'
  - pattern: <%= ... %>
  fix-regex:
    regex: <%=(.*?)%>
    replacement: '"<%=\1%>"'
- id: ruby.rails.security.audit.xss.templates.var-in-href.var-in-href
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/<%= link =>''.
    You may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.var-in-href.var-in-href
    shortlink: https://sg.run/J3Do
    semgrep.dev:
      rule:
        rule_id: BYUBXo
        version_id: xyT91R
        url: https://semgrep.dev/playground/r/xyT91R/ruby.rails.security.audit.xss.templates.var-in-href.var-in-href
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  pattern-either:
  - pattern: <a ... href = "<%= ... %>" ... >
  - pattern: <a ... href = '<%= ... %>' ... >
- id: ruby.lang.security.no-send.bad-send
  message: Checks for unsafe use of Object#send, try, __send__, and public_send. These
    only account for unsafe use of a method, not target. This can lead to arbitrary
    calling of exit, along with arbitrary code execution. Please be sure to sanitize
    input in order to avoid this.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send.rb
    - https://the.igreque.info/posts/2016/01-object-send-considered-harmful-en.html
    category: security
    technology:
    - ruby
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.no-send.bad-send
    shortlink: https://sg.run/Nrbx
    semgrep.dev:
      rule:
        rule_id: eqUv0L
        version_id: K3TBzv
        url: https://semgrep.dev/playground/r/K3TBzv/ruby.lang.security.no-send.bad-send
        origin: community
  languages:
  - ruby
  severity: ERROR
  pattern-either:
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.send($PARAM.$FUNC)
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.try($PARAM.$FUNC)
  - pattern: |
      $PARAM = params[...]
      ...
      $RES = $MOD.__send__($PARAM.$FUNC)
  - pattern: |-
      $PARAM = params[...]
      ...
      $RES = $MOD.public_send($PARAM.$FUNC)
- id: terraform.lang.security.elastic-search-encryption-at-rest.elastic-search-encryption-at-rest
  patterns:
  - pattern: |
      resource
  - pattern-not-inside: |
      resource "aws_elasticsearch_domain" "..."{
        ...
        encrypt_at_rest{
          ...
          enabled = true
          ...
        }
        ...
      }
  - pattern-inside: |
      resource "aws_elasticsearch_domain" "..." {...}
  languages:
  - hcl
  message: Encryption at rest is not enabled for the elastic search domain resource
  severity: WARNING
  metadata:
    category: security
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.elastic-search-encryption-at-rest.elastic-search-encryption-at-rest
    shortlink: https://sg.run/B4Yb
    semgrep.dev:
      rule:
        rule_id: qNUo2d
        version_id: 3ZT8J0
        url: https://semgrep.dev/playground/r/3ZT8J0/terraform.lang.security.elastic-search-encryption-at-rest.elastic-search-encryption-at-rest
        origin: community
- id: terraform.lang.security.iam.no-iam-admin-privileges.no-iam-admin-privileges
  pattern-either:
  - patterns:
    - pattern-inside: |
        resource $TYPE "..." {
          ...
          policy = jsonencode({
            ...
            Statement = [
              ...
            ]
            ...
          })
          ...
        }
    - pattern-not-inside: |
        resource $TYPE "..." {
          ...
          policy = jsonencode({
            ...
            Statement = [
              ...,
              {... Effect = "Deny" ...},
              ...
            ]
            ...
          })
          ...
        }
    - patterns:
      - pattern: |
          {..., Action = "*", ...}
      - pattern: |
          {..., Resource = "*", ...}
    - metavariable-pattern:
        metavariable: $TYPE
        pattern-either:
        - pattern: |
            "aws_iam_role_policy"
        - pattern: |
            "aws_iam_policy"
        - pattern: |
            "aws_iam_user_policy"
        - pattern: |
            "aws_iam_group_policy"
  - patterns:
    - pattern-inside: |
        data aws_iam_policy_document "..." {
          ...
          statement {
            ...
          }
          ...
        }
    - pattern-not-inside: |
        data aws_iam_policy_document "..." {
          ...
          statement {
            ...
            effect = "Deny"
            ...
          }
          ...
        }
    - patterns:
      - pattern: |
          {..., resources = ["*"], ...}
      - pattern: |
          {..., actions = ["*"], ...}
  message: IAM policies that allow full "*-*" admin privileges violates the principle
    of least privilege. This allows an attacker to take full control over all AWS
    account resources. Instead, give each user more fine-grained control with only
    the privileges they need. $TYPE
  metadata:
    references:
    - https://github.com/bridgecrewio/checkov/blob/master/checkov/terraform/checks/data/aws/AdminPolicyDocument.py
    category: security
    cwe:
    - 'CWE-269: Improper Privilege Management'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-admin-privileges.no-iam-admin-privileges
    shortlink: https://sg.run/oY0N
    semgrep.dev:
      rule:
        rule_id: NbUNDX
        version_id: 44TD3P
        url: https://semgrep.dev/playground/r/44TD3P/terraform.lang.security.iam.no-iam-admin-privileges.no-iam-admin-privileges
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.iam.no-iam-creds-exposure.no-iam-creds-exposure
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...
              ]
              ...
            })
            ...
          }
      - pattern: |
          Action = $ACTION
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
            }
            ...
          }
      - pattern: |
          actions = [..., $ACTION, ...]
  - metavariable-pattern:
      metavariable: $ACTION
      pattern-either:
      - pattern: |
          "chime:CreateApiKey"
      - pattern: |
          "codepipeline:PollForJobs"
      - pattern: |
          "cognito-identity:GetOpenIdToken"
      - pattern: |
          "cognito-identity:GetOpenIdTokenForDeveloperEdentity"
      - pattern: |
          "cognito-identity:GetCredentialsForIdentity"
      - pattern: |
          "connect:GetFederationToken"
      - pattern: |
          "connect:GetFederationTokens"
      - pattern: |
          "ec2:GetPasswordData"
      - pattern: |
          "ecr:GetAuthorizationToken"
      - pattern: |
          "gamelift:RequestUploadCredentials"
      - pattern: |
          "iam:CreateAccessKey"
      - pattern: |
          "iam:CreateLoginProfile"
      - pattern: |
          "iam:CreateServiceSpecificCredential"
      - pattern: |
          "iam:ResetServiceSpecificCredential"
      - pattern: |
          "iam:UpdateAccessKey"
      - pattern: |
          "lightsail:GetInstanceAccessDetails"
      - pattern: |
          "lightsail:GetRelationalDatabaseMasterUserPassword"
      - pattern: |
          "rds-db:Connect"
      - pattern: |
          "redshift:GetClusterCredentials"
      - pattern: |
          "sso:GetRoleCredentials"
      - pattern: |
          "mediapackage:RotateChannelCredentials"
      - pattern: |
          "mediapackage:RotateIngestEndpointCredentials"
      - pattern: |
          "sts:AssumeRole"
      - pattern: |
          "sts:AssumeRoleWithSaml"
      - pattern: |
          "sts:AssumeRoleWithWebIdentity"
      - pattern: |
          "sts:GetFederationToken"
      - pattern: |
          "sts:GetSessionToken"
      - pattern: |
          "ec2:*"
      - pattern: |
          "codepipeline:*"
      - pattern: |
          "rds-db:*"
      - pattern: |
          "connect:*"
      - pattern: |
          "iam:*"
      - pattern: |
          "ecr:*"
      - pattern: |
          "sts:*"
      - pattern: |
          "chime:*"
      - pattern: |
          "mediapackage:*"
      - pattern: |
          "redshift:*"
      - pattern: |
          "gamelift:*"
      - pattern: |
          "cognito-identity:*"
      - pattern: |
          "lightsail:*"
      - pattern: |
          "sso:*"
  message: Ensure IAM policies don't allow credentials exposure. Credentials exposure
    actions return credentials as part of the API response, and can possibly lead
    to leaking important credentials. Instead, use another action that doesn't return
    sensitive data as part of the API response.
  metadata:
    references:
    - https://cloudsplaining.readthedocs.io/en/latest/glossary/credentials-exposure/
    - https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMCredentialsExposure.py
    category: security
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-creds-exposure.no-iam-creds-exposure
    shortlink: https://sg.run/zxY1
    semgrep.dev:
      rule:
        rule_id: kxUwK2
        version_id: PkT8LG
        url: https://semgrep.dev/playground/r/PkT8LG/terraform.lang.security.iam.no-iam-creds-exposure.no-iam-creds-exposure
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code
  pattern-either:
  - patterns:
    - pattern: password = "..."
    - pattern-inside: |
        resource "aws_db_instance" "..." {
          ...
        }
  - patterns:
    - pattern: master_password = "..."
    - pattern-inside: |
        resource "aws_rds_cluster" "..." {
          ...
        }
  languages:
  - hcl
  severity: WARNING
  message: RDS instance or cluster with hardcoded credentials in source code. It is
    recommended to pass the credentials at runtime, or generate random credentials
    using the random_password resource.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#master_password
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#master_password
    - https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    category: security
    technology:
    - terraform
    - aws
    - secrets
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code
    shortlink: https://sg.run/x4qA
    semgrep.dev:
      rule:
        rule_id: OrUl6W
        version_id: DkTE88
        url: https://semgrep.dev/playground/r/DkTE88/terraform.lang.security.rds-insecure-password-storage-in-source-code.rds-insecure-password-storage-in-source-code
        origin: community
- id: terraform.lang.security.rds-public-access.rds-public-access
  patterns:
  - pattern: publicly_accessible = true
  - pattern-inside: |
      resource "aws_db_instance" "..." {
        ...
      }
  languages:
  - hcl
  severity: WARNING
  message: RDS instance accessible from the Internet detected.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#publicly_accessible
    - https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Hiding
    cwe:
    - 'CWE-284: Improper Access Control'
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.rds-public-access.rds-public-access
    shortlink: https://sg.run/Oye2
    semgrep.dev:
      rule:
        rule_id: eqUrzK
        version_id: WrTLxr
        url: https://semgrep.dev/playground/r/WrTLxr/terraform.lang.security.rds-public-access.rds-public-access
        origin: community
- id: terraform.lang.security.s3-unencrypted-bucket.s3-unencrypted-bucket
  patterns:
  - pattern: a
  - pattern: b
  languages:
  - hcl
  severity: INFO
  message: This rule has been deprecated, as all s3 buckets are encrypted by default
    with no way to disable it. See https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_server_side_encryption_configuration
    for more info.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#server_side_encryption_configuration
    - https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    deprecated: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.s3-unencrypted-bucket.s3-unencrypted-bucket
    shortlink: https://sg.run/Jezw
    semgrep.dev:
      rule:
        rule_id: 3qU62L
        version_id: WrT0pL
        url: https://semgrep.dev/playground/r/WrT0pL/terraform.lang.security.s3-unencrypted-bucket.s3-unencrypted-bucket
        origin: community
- id: yaml.github-actions.security.allowed-unsecure-commands.allowed-unsecure-commands
  languages:
  - yaml
  severity: WARNING
  message: The environment variable `ACTIONS_ALLOW_UNSECURE_COMMANDS` grants this
    workflow permissions to use the `set-env` and `add-path` commands. There is a
    vulnerability in these commands that could result in environment variables being
    modified by an attacker. Depending on the use of the environment variable, this
    could enable an attacker to, at worst, modify the system path to run a different
    command than intended, resulting in arbitrary code execution. This could result
    in stolen code or secrets. Don't use `ACTIONS_ALLOW_UNSECURE_COMMANDS`. Instead,
    use Environment Files. See https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files
    for more information.
  metadata:
    cwe:
    - 'CWE-749: Exposed Dangerous Method or Function'
    owasp: A06:2017 - Security Misconfiguration
    references:
    - https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/
    - https://github.com/actions/toolkit/security/advisories/GHSA-mfwh-5m23-j46w
    - https://github.com/actions/toolkit/blob/main/docs/commands.md#environment-files
    category: security
    technology:
    - github-actions
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.github-actions.security.allowed-unsecure-commands.allowed-unsecure-commands
    shortlink: https://sg.run/qq78
    semgrep.dev:
      rule:
        rule_id: EwUQ9x
        version_id: xyTD3Q
        url: https://semgrep.dev/playground/r/xyTD3Q/yaml.github-actions.security.allowed-unsecure-commands.allowed-unsecure-commands
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: '{env: ...}'
      - pattern: 'ACTIONS_ALLOW_UNSECURE_COMMANDS: true'
- id: json.aws.security.public-s3-bucket.public-s3-bucket
  languages:
  - json
  message: Detected public S3 bucket. This policy allows anyone to have some kind
    of access to the bucket. The exact level of access and types of actions allowed
    will depend on the configuration of bucket policy and ACLs. Please review the
    bucket configuration to make sure they are set with intended values.
  metadata:
    category: security
    cwe:
    - 'CWE-264: CWE CATEGORY: Permissions, Privileges, and Access Controls'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-block-public-access.html
    technology:
    - aws
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    source: https://semgrep.dev/r/json.aws.security.public-s3-bucket.public-s3-bucket
    shortlink: https://sg.run/lxv5
    semgrep.dev:
      rule:
        rule_id: 7KUpLy
        version_id: QkTl8x
        url: https://semgrep.dev/playground/r/QkTl8x/json.aws.security.public-s3-bucket.public-s3-bucket
        origin: community
  patterns:
  - pattern-inside: |
      $BUCKETNAME: {
        "Type": "AWS::S3::Bucket",
        "Properties": {
        ...,
        },
        ...,
      }
  - pattern-either:
    - pattern: |
        "PublicAccessBlockConfiguration": {
             ...,
             "RestrictPublicBuckets": false,
             ...,
           },
    - pattern: |
        "PublicAccessBlockConfiguration": {
             ...,
             "IgnorePublicAcls": false,
             ...,
           },
    - pattern: |
        "PublicAccessBlockConfiguration": {
             ...,
             "BlockPublicAcls": false,
             ...,
           },
    - pattern: |
        "PublicAccessBlockConfiguration": {
             ...,
             "BlockPublicPolicy": false,
             ...,
           },
  severity: WARNING
- id: php.lang.security.injection.tainted-filename.tainted-filename
  severity: WARNING
  message: File name based on user input risks server-side request forgery.
  metadata:
    technology:
    - php
    category: security
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.injection.tainted-filename.tainted-filename
    shortlink: https://sg.run/Ayqp
    semgrep.dev:
      rule:
        rule_id: 5rUpro
        version_id: o5TWR8
        url: https://semgrep.dev/playground/r/o5TWR8/php.lang.security.injection.tainted-filename.tainted-filename
        origin: community
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
      - pattern: $_REQUEST
      - pattern: $_SERVER
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: basename($PATH, ...)
      - pattern-inside: linkinfo($PATH, ...)
      - pattern-inside: readlink($PATH, ...)
      - pattern-inside: realpath($PATH, ...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: opcache_compile_file($FILENAME, ...)
      - pattern-inside: opcache_invalidate($FILENAME, ...)
      - pattern-inside: opcache_is_script_cached($FILENAME, ...)
      - pattern-inside: runkit7_import($FILENAME, ...)
      - pattern-inside: readline_read_history($FILENAME, ...)
      - pattern-inside: readline_write_history($FILENAME, ...)
      - pattern-inside: rar_open($FILENAME, ...)
      - pattern-inside: zip_open($FILENAME, ...)
      - pattern-inside: gzfile($FILENAME, ...)
      - pattern-inside: gzopen($FILENAME, ...)
      - pattern-inside: readgzfile($FILENAME, ...)
      - pattern-inside: hash_file($ALGO, $FILENAME, ...)
      - pattern-inside: hash_update_file($CONTEXT, $FILENAME, ...)
      - pattern-inside: pg_trace($FILENAME, ...)
      - pattern-inside: dio_open($FILENAME, ...)
      - pattern-inside: finfo_file($FINFO, $FILENAME, ...)
      - pattern-inside: mime_content_type($FILENAME, ...)
      - pattern-inside: chgrp($FILENAME, ...)
      - pattern-inside: chmod($FILENAME, ...)
      - pattern-inside: chown($FILENAME, ...)
      - pattern-inside: clearstatcache($CLEAR_REALPATH_CACHE, $FILENAME, ...)
      - pattern-inside: file_exists($FILENAME, ...)
      - pattern-inside: file_get_contents($FILENAME, ...)
      - pattern-inside: file_put_contents($FILENAME, ...)
      - pattern-inside: file($FILENAME, ...)
      - pattern-inside: fileatime($FILENAME, ...)
      - pattern-inside: filectime($FILENAME, ...)
      - pattern-inside: filegroup($FILENAME, ...)
      - pattern-inside: fileinode($FILENAME, ...)
      - pattern-inside: filemtime($FILENAME, ...)
      - pattern-inside: fileowner($FILENAME, ...)
      - pattern-inside: fileperms($FILENAME, ...)
      - pattern-inside: filesize($FILENAME, ...)
      - pattern-inside: filetype($FILENAME, ...)
      - pattern-inside: fnmatch($PATTERN, $FILENAME, ...)
      - pattern-inside: fopen($FILENAME, ...)
      - pattern-inside: is_dir($FILENAME, ...)
      - pattern-inside: is_executable($FILENAME, ...)
      - pattern-inside: is_file($FILENAME, ...)
      - pattern-inside: is_link($FILENAME, ...)
      - pattern-inside: is_readable($FILENAME, ...)
      - pattern-inside: is_uploaded_file($FILENAME, ...)
      - pattern-inside: is_writable($FILENAME, ...)
      - pattern-inside: lchgrp($FILENAME, ...)
      - pattern-inside: lchown($FILENAME, ...)
      - pattern-inside: lstat($FILENAME, ...)
      - pattern-inside: parse_ini_file($FILENAME, ...)
      - pattern-inside: readfile($FILENAME, ...)
      - pattern-inside: stat($FILENAME, ...)
      - pattern-inside: touch($FILENAME, ...)
      - pattern-inside: unlink($FILENAME, ...)
      - pattern-inside: xattr_get($FILENAME, ...)
      - pattern-inside: xattr_list($FILENAME, ...)
      - pattern-inside: xattr_remove($FILENAME, ...)
      - pattern-inside: xattr_set($FILENAME, ...)
      - pattern-inside: xattr_supported($FILENAME, ...)
      - pattern-inside: enchant_broker_request_pwl_dict($BROKER, $FILENAME, ...)
      - pattern-inside: pspell_config_personal($CONFIG, $FILENAME, ...)
      - pattern-inside: pspell_config_repl($CONFIG, $FILENAME, ...)
      - pattern-inside: pspell_new_personal($FILENAME, ...)
      - pattern-inside: exif_imagetype($FILENAME, ...)
      - pattern-inside: getimagesize($FILENAME, ...)
      - pattern-inside: image2wbmp($IMAGE, $FILENAME, ...)
      - pattern-inside: imagecreatefromavif($FILENAME, ...)
      - pattern-inside: imagecreatefrombmp($FILENAME, ...)
      - pattern-inside: imagecreatefromgd2($FILENAME, ...)
      - pattern-inside: imagecreatefromgd2part($FILENAME, ...)
      - pattern-inside: imagecreatefromgd($FILENAME, ...)
      - pattern-inside: imagecreatefromgif($FILENAME, ...)
      - pattern-inside: imagecreatefromjpeg($FILENAME, ...)
      - pattern-inside: imagecreatefrompng($FILENAME, ...)
      - pattern-inside: imagecreatefromtga($FILENAME, ...)
      - pattern-inside: imagecreatefromwbmp($FILENAME, ...)
      - pattern-inside: imagecreatefromwebp($FILENAME, ...)
      - pattern-inside: imagecreatefromxbm($FILENAME, ...)
      - pattern-inside: imagecreatefromxpm($FILENAME, ...)
      - pattern-inside: imageloadfont($FILENAME, ...)
      - pattern-inside: imagexbm($IMAGE, $FILENAME, ...)
      - pattern-inside: iptcembed($IPTC_DATA, $FILENAME, ...)
      - pattern-inside: mailparse_msg_extract_part_file($MIMEMAIL, $FILENAME, ...)
      - pattern-inside: mailparse_msg_extract_whole_part_file($MIMEMAIL, $FILENAME,
          ...)
      - pattern-inside: mailparse_msg_parse_file($FILENAME, ...)
      - pattern-inside: fdf_add_template($FDF_DOCUMENT, $NEWPAGE, $FILENAME, ...)
      - pattern-inside: fdf_get_ap($FDF_DOCUMENT, $FIELD, $FACE, $FILENAME, ...)
      - pattern-inside: fdf_open($FILENAME, ...)
      - pattern-inside: fdf_save($FDF_DOCUMENT, $FILENAME, ...)
      - pattern-inside: fdf_set_ap($FDF_DOCUMENT, $FIELD_NAME, $FACE, $FILENAME, ...)
      - pattern-inside: ps_add_launchlink($PSDOC, $LLX, $LLY, $URX, $URY, $FILENAME,
          ...)
      - pattern-inside: ps_add_pdflink($PSDOC, $LLX, $LLY, $URX, $URY, $FILENAME,
          ...)
      - pattern-inside: ps_open_file($PSDOC, $FILENAME, ...)
      - pattern-inside: ps_open_image_file($PSDOC, $TYPE, $FILENAME, ...)
      - pattern-inside: posix_access($FILENAME, ...)
      - pattern-inside: posix_mkfifo($FILENAME, ...)
      - pattern-inside: posix_mknod($FILENAME, ...)
      - pattern-inside: ftok($FILENAME, ...)
      - pattern-inside: fann_cascadetrain_on_file($ANN, $FILENAME, ...)
      - pattern-inside: fann_read_train_from_file($FILENAME, ...)
      - pattern-inside: fann_train_on_file($ANN, $FILENAME, ...)
      - pattern-inside: highlight_file($FILENAME, ...)
      - pattern-inside: php_strip_whitespace($FILENAME, ...)
      - pattern-inside: stream_resolve_include_path($FILENAME, ...)
      - pattern-inside: swoole_async_read($FILENAME, ...)
      - pattern-inside: swoole_async_readfile($FILENAME, ...)
      - pattern-inside: swoole_async_write($FILENAME, ...)
      - pattern-inside: swoole_async_writefile($FILENAME, ...)
      - pattern-inside: swoole_load_module($FILENAME, ...)
      - pattern-inside: tidy_parse_file($FILENAME, ...)
      - pattern-inside: tidy_repair_file($FILENAME, ...)
      - pattern-inside: get_meta_tags($FILENAME, ...)
      - pattern-inside: yaml_emit_file($FILENAME, ...)
      - pattern-inside: yaml_parse_file($FILENAME, ...)
      - pattern-inside: curl_file_create($FILENAME, ...)
      - pattern-inside: ftp_chmod($FTP, $PERMISSIONS, $FILENAME, ...)
      - pattern-inside: ftp_delete($FTP, $FILENAME, ...)
      - pattern-inside: ftp_mdtm($FTP, $FILENAME, ...)
      - pattern-inside: ftp_size($FTP, $FILENAME, ...)
      - pattern-inside: rrd_create($FILENAME, ...)
      - pattern-inside: rrd_fetch($FILENAME, ...)
      - pattern-inside: rrd_graph($FILENAME, ...)
      - pattern-inside: rrd_info($FILENAME, ...)
      - pattern-inside: rrd_last($FILENAME, ...)
      - pattern-inside: rrd_lastupdate($FILENAME, ...)
      - pattern-inside: rrd_tune($FILENAME, ...)
      - pattern-inside: rrd_update($FILENAME, ...)
      - pattern-inside: snmp_read_mib($FILENAME, ...)
      - pattern-inside: ssh2_sftp_chmod($SFTP, $FILENAME, ...)
      - pattern-inside: ssh2_sftp_realpath($SFTP, $FILENAME, ...)
      - pattern-inside: ssh2_sftp_unlink($SFTP, $FILENAME, ...)
      - pattern-inside: apache_lookup_uri($FILENAME, ...)
      - pattern-inside: md5_file($FILENAME, ...)
      - pattern-inside: sha1_file($FILENAME, ...)
      - pattern-inside: simplexml_load_file($FILENAME, ...)
    - pattern: $FILENAME
- id: ruby.rails.security.audit.rails-skip-forgery-protection.rails-skip-forgery-protection
  pattern: skip_forgery_protection
  message: This call turns off CSRF protection allowing CSRF attacks against the application
  languages:
  - ruby
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    category: security
    technology:
    - rails
    references:
    - https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection/ClassMethods.html#method-i-skip_forgery_protection
    owasp:
    - A01:2021 - Broken Access Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-skip-forgery-protection.rails-skip-forgery-protection
    shortlink: https://sg.run/PgwY
    semgrep.dev:
      rule:
        rule_id: QrUnEk
        version_id: qkT99q
        url: https://semgrep.dev/playground/r/qkT99q/ruby.rails.security.audit.rails-skip-forgery-protection.rails-skip-forgery-protection
        origin: community
- id: javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
    shortlink: https://sg.run/we7d
    semgrep.dev:
      rule:
        rule_id: 7KUQ3g
        version_id: jQTe00
        url: https://semgrep.dev/playground/r/jQTe00/javascript.lang.security.audit.vm-injection.vm-runinthiscontext-code-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
  message: this rule has been deprecated.
  severity: INFO
  languages:
  - javascript
  - typescript
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - javascript
    references:
    - https://nodejs.org/dist/latest-v16.x/docs/api/vm.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
    shortlink: https://sg.run/x17y
    semgrep.dev:
      rule:
        rule_id: L1Uyg7
        version_id: 1QTWwR
        url: https://semgrep.dev/playground/r/1QTWwR/javascript.lang.security.audit.vm-injection.vm-compilefunction-code-injection
        origin: community
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
  message: Detected an element with disabled HTML escaping. If external data can reach
    this, this is a cross-site scripting (XSS) vulnerability. Ensure no external data
    can reach here, or remove 'escape=false' from this element.
  metadata:
    owasp: A07:2017 - Cross-Site Scripting (XSS)
    cwe:
    - 'CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences'
    references:
    - https://stackoverflow.com/a/7442668
    category: security
    technology:
    - jsf
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
    shortlink: https://sg.run/qxne
    semgrep.dev:
      rule:
        rule_id: 10UKqE
        version_id: K3T63x
        url: https://semgrep.dev/playground/r/K3T63x/java.lang.security.audit.xss.jsf.autoescape-disabled.autoescape-disabled
        origin: community
  pattern-regex: .*escape.*?=.*?false.*
  paths:
    include:
    - '*.html'
    - '*.xhtml'
  languages:
  - regex
  severity: WARNING
- id: java.lang.security.audit.xml-decoder.xml-decoder
  message: XMLDecoder should not be used to parse untrusted data. Deserializing user
    input can lead to arbitrary code execution. Use an alternative and explicitly
    disable external entities. See https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    for alternatives and vulnerability prevention.
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XML_DECODER
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xml-decoder.xml-decoder
    shortlink: https://sg.run/PJjq
    semgrep.dev:
      rule:
        rule_id: qNUj3y
        version_id: gEToDQ
        url: https://semgrep.dev/playground/r/gEToDQ/java.lang.security.audit.xml-decoder.xml-decoder
        origin: community
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: |
      $X $METHOD(...) {
        ...
        new XMLDecoder(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        new XMLDecoder("...");
        ...
      }
  - pattern-not: |-
      $X $METHOD(...) {
        ...
        String $STR = "...";
        ...
        new XMLDecoder($STR);
        ...
      }
- id: java.lang.security.audit.permissive-cors.permissive-cors
  message: https://find-sec-bugs.github.io/bugs.htm#PERMISSIVE_CORS Permissive CORS
    policy will allow a malicious application to communicate with the victim application
    in an inappropriate way, leading to spoofing, data theft, relay and other attacks.
  metadata:
    cwe:
    - 'CWE-183: Permissive List of Allowed Inputs'
    asvs:
      section: 'V14: Configuration Verification Requirements'
      control_id: 14.4.8 Permissive CORS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x22-V14-Config.md#v144-http-security-headers-requirements
      version: '4'
    category: security
    technology:
    - java
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.permissive-cors.permissive-cors
    shortlink: https://sg.run/8y77
    semgrep.dev:
      rule:
        rule_id: BYUN66
        version_id: o5TOgY
        url: https://semgrep.dev/playground/r/o5TOgY/java.lang.security.audit.permissive-cors.permissive-cors
        origin: community
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      HttpServletResponse $RES = ...;
      ...
      $RES.addHeader("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
  - pattern: |
      HttpServletResponse $RES = ...;
      ...
      $RES.setHeader("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
  - pattern: |
      ServerHttpResponse $RES = ...;
      ...
      $RES.getHeaders().add("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
  - pattern: |
      HttpHeaders $HEADERS = ...;
      ...
      $HEADERS.set("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
  - pattern: |
      ServerWebExchange $SWE = ...;
      ...
      $SWE.getResponse().getHeaders().add("Access-Control-Allow-Origin", "*");
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.addHeader("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.setHeader("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
        ...
      }
  - pattern: |
      $X $METHOD(...,ServerHttpResponse $RES,...) {
        ...
        $RES.getHeaders().add("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
        ...
      }
  - pattern: |
      $X $METHOD(...,ServerWebExchange $SWE,...) {
        ...
        $SWE.getResponse().getHeaders().add("=~/access-control-allow-origin/i", "=~/^\*|null$/i");
        ...
      }
  - pattern: ResponseEntity.$RES().header("=~/access-control-allow-origin/i", "=~/^\*|null$/i")
  - pattern: ServerResponse.$RES().header("=~/access-control-allow-origin/i", "=~/^\*|null$/i")
- id: java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
  message: When data from an untrusted source is put into a logger and not neutralized
    correctly, an attacker could forge log entries or include malicious content.
  metadata:
    cwe:
    - 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
    shortlink: https://sg.run/wek0
    semgrep.dev:
      rule:
        rule_id: 8GUjwW
        version_id: 9lTnx0
        url: https://semgrep.dev/playground/r/9lTnx0/java.lang.security.audit.crlf-injection-logs.crlf-injection-logs
        origin: community
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          class $CLASS {
            ...
            Logger $LOG = ...;
            ...
          }
      - pattern-either:
        - pattern-inside: |
            $X $METHOD(...,HttpServletRequest $REQ,...) {
              ...
            }
        - pattern-inside: |
            $X $METHOD(...,ServletRequest $REQ,...) {
              ...
            }
        - pattern-inside: |
            $X $METHOD(...) {
              ...
              HttpServletRequest $REQ = ...;
              ...
            }
        - pattern-inside: |
            $X $METHOD(...) {
              ...
              ServletRequest $REQ = ...;
              ...
            }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          Logger $LOG = ...;
          ...
          HttpServletRequest $REQ = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          Logger $LOG = ...;
          ...
          ServletRequest $REQ = ...;
          ...
        }
  - pattern-either:
    - pattern: |
        String $VAL = $REQ.getParameter(...);
        ...
        $LOG.$LEVEL(<... $VAL ...>);
    - pattern: |
        String $VAL = $REQ.getParameter(...);
        ...
        $LOG.log($LEVEL,<... $VAL ...>);
    - pattern: |
        $LOG.$LEVEL(<... $REQ.getParameter(...) ...>);
    - pattern: |
        $LOG.log($LEVEL,<... $REQ.getParameter(...) ...>);
- id: java.lang.security.audit.crypto.use-of-sha1.use-of-sha1
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Instead, use PBKDF2 for password hashing or SHA256 or SHA512 for other hash function
    applications.
  languages:
  - java
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-328: Use of Weak Hash'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1
    shortlink: https://sg.run/bXNp
    semgrep.dev:
      rule:
        rule_id: qNUWNn
        version_id: 7ZTY4e
        url: https://semgrep.dev/playground/r/7ZTY4e/java.lang.security.audit.crypto.use-of-sha1.use-of-sha1
        origin: community
  pattern-either:
  - pattern: |
      java.security.MessageDigest.getInstance("SHA1", ...);
  - pattern: |
      $DU.getSha1Digest().digest(...)
- id: java.lang.security.audit.crypto.weak-random.weak-random
  message: Detected use of the functions `Math.random()` or `java.util.Random()`.
    These are both not cryptographically strong random number generators (RNGs). If
    you are using these RNGs to create passwords or secret tokens, use `java.security.SecureRandom`
    instead.
  languages:
  - java
  severity: WARNING
  metadata:
    owasp:
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-330: Use of Insufficiently Random Values'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.weak-random.weak-random
    shortlink: https://sg.run/NwBp
    semgrep.dev:
      rule:
        rule_id: lBUW5D
        version_id: LjTp8r
        url: https://semgrep.dev/playground/r/LjTp8r/java.lang.security.audit.crypto.weak-random.weak-random
        origin: community
  pattern-either:
  - pattern: |
      new java.util.Random(...).$FUNC(...)
  - pattern: |
      java.lang.Math.random(...)
- id: java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
  patterns:
  - pattern-either:
    - pattern: |
        $SHELL.parse(...)
    - pattern: |
        $SHELL.evaluate(...)
    - pattern: |
        $SHELL.parseClass(...)
  - pattern-either:
    - pattern-inside: |
        groovy.lang.GroovyShell $SHELL = ...;
        ...
    - pattern-inside: |
        groovy.lang.GroovyClassLoader $SHELL = ...;
        ...
  - pattern-not: |
      $SHELL.parse("...",...)
  - pattern-not: |
      $SHELL.evaluate("...",...)
  - pattern-not: |
      $SHELL.parseClass("...",...)
  message: A expression is built with a dynamic value. The source of the value(s)
    should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#GROOVY_SHELL
    category: security
    technology:
    - groovy
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
    shortlink: https://sg.run/58LK
    semgrep.dev:
      rule:
        rule_id: ReUPKp
        version_id: gET5QJ
        url: https://semgrep.dev/playground/r/gET5QJ/java.lang.security.audit.dangerous-groovy-shell.dangerous-groovy-shell
        origin: community
  languages:
  - java
  severity: WARNING
- id: java.lang.security.audit.el-injection.el-injection
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#EL_INJECTION
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.el-injection.el-injection
    shortlink: https://sg.run/x1wp
    semgrep.dev:
      rule:
        rule_id: gxU1Np
        version_id: QkTQek
        url: https://semgrep.dev/playground/r/QkTQek/java.lang.security.audit.el-injection.el-injection
        origin: community
  message: An expression is built with a dynamic value. The source of the value(s)
    should be verified to avoid that unfiltered values fall into this risky code evaluation.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF;
          ...
          $X $METHOD(...) {
            ...
            $EF.createValueExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF = ...;
          ...
          $X $METHOD(...) {
            ...
            $EF.createValueExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ExpressionFactory $EF = ...;
          ...
          $EF.createValueExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ExpressionFactory $EF,...) {
          ...
          $EF.createValueExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF;
          ...
          $X $METHOD(...) {
            ...
            $EF.createMethodExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        class $CLASS {
          ...
          ExpressionFactory $EF = ...;
          ...
          $X $METHOD(...) {
            ...
            $EF.createMethodExpression($CTX,$INPUT,...);
            ...
          }
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ExpressionFactory $EF = ...;
          ...
          $EF.createMethodExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ExpressionFactory $EF,...) {
          ...
          $EF.createMethodExpression($CTX,$INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(String $INPUT, ...) {
          ...
          $OBJECT.buildConstraintViolationWithTemplate($INPUT, ...);
          ...
        }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $EF.createValueExpression($CTX,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $EF.createValueExpression($CTX,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $EF.createMethodExpression($CTX,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $EF.createMethodExpression($CTX,$S,...);
        ...
      }
- id: java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
  metadata:
    cwe:
    - 'CWE-297: Improper Validation of Certificate with Host Mismatch'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_SMTP_SSL
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
    shortlink: https://sg.run/vzN4
    semgrep.dev:
      rule:
        rule_id: 4bUkrW
        version_id: PkTnP1
        url: https://semgrep.dev/playground/r/PkTnP1/java.lang.security.audit.insecure-smtp-connection.insecure-smtp-connection
        origin: community
  message: Insecure SMTP connection detected. This connection will trust any SSL certificate.
    Enable certificate verification by setting 'email.setSSLCheckServerIdentity(true)'.
  severity: WARNING
  patterns:
  - pattern-not-inside: |
      $EMAIL.setSSLCheckServerIdentity(true);
      ...
  - pattern-inside: |
      $EMAIL = new SimpleEmail(...);
      ...
  - pattern: $EMAIL.send(...);
  languages:
  - java
- id: java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_SPRING_JDBC
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.5 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    category: security
    technology:
    - jdbc
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
    shortlink: https://sg.run/dKWY
    semgrep.dev:
      rule:
        rule_id: PeUZNX
        version_id: 5PTYgo
        url: https://semgrep.dev/playground/r/5PTYgo/java.lang.security.audit.jdbc-sql-formatted-string.jdbc-sql-formatted-string
        origin: community
  message: 'Possible JDBC injection detected. Use the parameterized query feature
    available in queryForObject instead of concatenating or formatting strings: ''jdbc.queryForObject("select
    * from table where name = ?", Integer.class, parameterName);'''
  patterns:
  - pattern-inside: |
      $JDBC = new JdbcTemplate(...);
      ...
  - pattern-either:
    - pattern: $JDBC.queryForObject($STR + $VAR, ...);
    - pattern: $JDBC.queryForObject(String.format(...), ...);
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.queryForObject($Q, ...);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.queryForObject($Q, ...);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.queryForObject($Q, ...);
    - pattern: $JDBC.queryForList($STR + $VAR);
    - pattern: $JDBC.queryForList(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.queryForList($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.queryForList($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.queryForList($Q, ...);
    - pattern: $JDBC.update($STR + $VAR);
    - pattern: $JDBC.update(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.update($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.update($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.update($Q, ...);
    - pattern: $JDBC.execute($STR + $VAR);
    - pattern: $JDBC.execute(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.execute($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.execute($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.execute($Q, ...);
    - pattern: $JDBC.insert($STR + $VAR);
    - pattern: $JDBC.insert(String.format(...));
    - pattern: |
        String $Q = $STR + $VAR;
        ...
        $JDBC.insert($Q);
    - pattern: |
        String $Q = String.format(...);
        ...
        $JDBC.insert($Q);
    - pattern: |
        StringBuilder $Q = new StringBuilder(...);
        ...
        $Q.append($STR + $VAR);
        ...
        $JDBC.insert($Q, ...);
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.7 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf
    - https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - java
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
    shortlink: https://sg.run/ZvOn
    semgrep.dev:
      rule:
        rule_id: JDUy8B
        version_id: GxTWdq
        url: https://semgrep.dev/playground/r/GxTWdq/java.lang.security.audit.ldap-entry-poisoning.ldap-entry-poisoning
        origin: community
  message: An object-returning LDAP search will allow attackers to control the LDAP
    response. This could lead to Remote Code Execution.
  severity: WARNING
  pattern-either:
  - pattern: |
      new SearchControls($S, $CL, $TL, $AT, true, $DEREF)
  - pattern: |
      SearchControls $VAR = new SearchControls();
      ...
      $VAR.setReturningObjFlag(true);
  languages:
  - java
- id: java.lang.security.audit.ldap-injection.ldap-injection
  message: Detected non-constant data passed into an LDAP query. If this data can
    be controlled by an external user, this is an LDAP injection. Ensure data passed
    to an LDAP query is not controllable; or properly sanitize the data.
  metadata:
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_INJECTION
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.7 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.ldap-injection.ldap-injection
    shortlink: https://sg.run/nd2O
    semgrep.dev:
      rule:
        rule_id: 5rUObQ
        version_id: RGTw4E
        url: https://semgrep.dev/playground/r/RGTw4E/java.lang.security.audit.ldap-injection.ldap-injection
        origin: community
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          InitialDirContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          DirContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          InitialLdapContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          LdapContext $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          LdapCtx $CTX = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          EventDirContext $CTX = ...;
          ...
        }
  - pattern: |
      $X $METHOD(...) {
        ...
        $CTX.search($Y,$INPUT,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $CTX.search($Y,"...",...);
        ...
      }
- id: java.lang.security.audit.object-deserialization.object-deserialization
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION
    references:
    - https://www.owasp.org/index.php/Deserialization_of_untrusted_data
    - https://www.oracle.com/java/technologies/javase/seccodeguide.html#8
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.object-deserialization.object-deserialization
    shortlink: https://sg.run/Ek0A
    semgrep.dev:
      rule:
        rule_id: GdU7py
        version_id: BjTG3v
        url: https://semgrep.dev/playground/r/BjTG3v/java.lang.security.audit.object-deserialization.object-deserialization
        origin: community
  message: Found object deserialization using ObjectInputStream. Deserializing entire
    Java objects is dangerous because malicious actors can create Java object streams
    with unintended consequences. Ensure that the objects being deserialized are not
    user-controlled. If this must be done, consider using HMACs to sign the data stream
    to make sure it is not tampered with, or consider only transmitting object fields
    and populating a new object.
  severity: WARNING
  languages:
  - java
  pattern: new ObjectInputStream(...);
- id: java.lang.security.audit.ognl-injection.ognl-injection
  message: A expression is built with a dynamic value. The source of the value(s)
    should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OGNL_INJECTION
    category: security
    technology:
    - ognl
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.ognl-injection.ognl-injection
    shortlink: https://sg.run/7o7R
    semgrep.dev:
      rule:
        rule_id: ReUgjJ
        version_id: DkTerv
        url: https://semgrep.dev/playground/r/DkTerv/java.lang.security.audit.ognl-injection.ognl-injection
        origin: community
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlReflectionProvider $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ReflectionProvider $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.translateVariablesCollection($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.shallBeIncluded($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParseUtil $P,...) {
          ...
          $P.commaDelimitedStringToSet($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,TextParser $P,...) {
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlTextParser $P,...) {
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.callMethod($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlUtil $P,...) {
          ...
          $P.compile($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,VelocityStrutsUtil $P,...) {
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.isTrue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.getText($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,StrutsUtil $P,...) {
          ...
          $P.makeSelectList($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,OgnlTool $P,...) {
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...,ValueStack $P,...) {
          ...
          $P.setParameter($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlReflectionProvider $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getGetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getSetMethod($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getField($T, $INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ReflectionProvider $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.translateVariablesCollection($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.shallBeIncluded($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParseUtil $P = ...;
          ...
          $P.commaDelimitedStringToSet($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          TextParser $P = ...;
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlTextParser $P = ...;
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.setProperties($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.setProperty($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.getValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.callMethod($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlUtil $P = ...;
          ...
          $P.compile($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          VelocityStrutsUtil $P = ...;
          ...
          $P.evaluate($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.isTrue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.getText($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.translateVariables($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          StrutsUtil $P = ...;
          ...
          $P.makeSelectList($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          OgnlTool $P = ...;
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.findString($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.findValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.setValue($INPUT,...);
          ...
        }
    - pattern: |
        $X $METHOD(...) {
          ...
          ValueStack $P = ...;
          ...
          $P.setParameter($INPUT,...);
          ...
        }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getGetMethod($T,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getSetMethod($T,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getField($T,"...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setProperties("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setProperty("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getValue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setValue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.translateVariables("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.translateVariablesCollection("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.shallBeIncluded("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.commaDelimitedStringToSet("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.evaluate("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.callMethod("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.compile("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.isTrue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.findString("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.findValue("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.getText("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.makeSelectList("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $P.setParameter("...",...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getGetMethod($T,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getSetMethod($T,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getField($T,$S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setProperties($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setProperty($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getValue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setValue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.translateVariables($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.translateVariablesCollection($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.shallBeIncluded($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.commaDelimitedStringToSet($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.evaluate($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.callMethod($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.compile($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.isTrue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.findString($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.findValue($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.getText($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.makeSelectList($S,...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $P.setParameter($S,...);
        ...
      }
- id: java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            String $SQL = $X + $Y;
            ...
        - pattern-inside: |
            String $SQL = String.format(...);
            ...
        - pattern-inside: |
            $VAL $FUNC(...,String $SQL,...) {
              ...
            }
      - pattern-not-inside: |
          String $SQL = "..." + "...";
          ...
      - pattern: $S.$METHOD($SQL,...)
    - pattern: |
        $S.$METHOD(String.format(...),...);
    - pattern: |
        $S.$METHOD($X + $Y,...);
  - pattern-either:
    - pattern-inside: |
        java.sql.Statement $S = ...;
        ...
    - pattern-inside: |
        $TYPE $FUNC(...,java.sql.Statement $S,...) {
          ...
        }
  - pattern-not: |
      $S.$METHOD("..." + "...",...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(executeQuery|execute|executeUpdate|executeLargeUpdate|addBatch|nativeSQL)$
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - jdbc
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli
    shortlink: https://sg.run/AvkL
    semgrep.dev:
      rule:
        rule_id: oqUe8K
        version_id: l4TNnq
        url: https://semgrep.dev/playground/r/l4TNnq/java.lang.security.audit.sqli.jdbc-sqli.jdbc-sqli
        origin: community
- id: java.lang.security.audit.sqli.jdo-sqli.jdo-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $TYPE $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $Q.$METHOD($SQL,...)
      - pattern: |
          $Q.$METHOD(String.format(...),...);
      - pattern: |
          $Q.$METHOD($X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          javax.jdo.Query $Q = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,javax.jdo.Query $Q,...) {
            ...
          }
    - pattern-not: |
        $Q.$METHOD("..." + "...",...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(setFilter|setGrouping)$
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $PM.newQuery(...,$SQL,...)
      - pattern: |
          $PM.newQuery(...,String.format(...),...);
      - pattern: |
          $PM.newQuery(...,$X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          javax.jdo.PersistenceManager $PM = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,javax.jdo.PersistenceManager $PM,...) {
            ...
          }
    - pattern-not: |
        $PM.newQuery(...,"..." + "...",...);
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - java
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.jdo-sqli.jdo-sqli
    shortlink: https://sg.run/Bkwx
    semgrep.dev:
      rule:
        rule_id: zdUk7l
        version_id: YDT89j
        url: https://semgrep.dev/playground/r/YDT89j/java.lang.security.audit.sqli.jdo-sqli.jdo-sqli
        origin: community
- id: java.lang.security.audit.sqli.jpa-sqli.jpa-sqli
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            String $SQL = $X + $Y;
            ...
        - pattern-inside: |
            String $SQL = String.format(...);
            ...
        - pattern-inside: |
            $TYPE $FUNC(...,String $SQL,...) {
              ...
            }
      - pattern-not-inside: |
          String $SQL = "..." + "...";
          ...
      - pattern: $EM.$METHOD($SQL,...)
    - pattern: |
        $EM.$METHOD(String.format(...),...);
    - pattern: |
        $EM.$METHOD($X + $Y,...);
  - pattern-either:
    - pattern-inside: |
        EntityManager $EM = ...;
        ...
    - pattern-inside: |
        $TYPE $FUNC(...,EntityManager $EM,...) {
          ...
        }
  - pattern-not: |
      $EM.$METHOD("..." + "...",...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(createQuery|createNativeQuery)$
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - jpa
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.jpa-sqli.jpa-sqli
    shortlink: https://sg.run/DoOd
    semgrep.dev:
      rule:
        rule_id: pKUO7y
        version_id: JdTZ9Y
        url: https://semgrep.dev/playground/r/JdTZ9Y/java.lang.security.audit.sqli.jpa-sqli.jpa-sqli
        origin: community
- id: java.lang.security.audit.sqli.vertx-sqli.vertx-sqli
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            String $SQL = $X + $Y;
            ...
        - pattern-inside: |
            String $SQL = String.format(...);
            ...
        - pattern-inside: |
            $TYPE $FUNC(...,String $SQL,...) {
              ...
            }
      - pattern-not-inside: |
          String $SQL = "..." + "...";
          ...
      - pattern: $SC.$METHOD($SQL,...)
    - pattern: |
        $SC.$METHOD(String.format(...),...);
    - pattern: |
        $SC.$METHOD($X + $Y,...);
  - pattern-either:
    - pattern-inside: |
        SqlClient $SC = ...;
        ...
    - pattern-inside: |
        SqlConnection $SC = ...;
        ...
    - pattern-inside: |
        $TYPE $FUNC(...,SqlClient $SC,...) {
          ...
        }
    - pattern-inside: |
        $TYPE $FUNC(...,SqlConnection $SC,...) {
          ...
        }
  - pattern-not: |
      $SC.$METHOD("..." + "...",...);
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(query|preparedQuery|prepare)$
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - vertx
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.vertx-sqli.vertx-sqli
    shortlink: https://sg.run/0QKB
    semgrep.dev:
      rule:
        rule_id: X5U86z
        version_id: RGTw47
        url: https://semgrep.dev/playground/r/RGTw47/java.lang.security.audit.sqli.vertx-sqli.vertx-sqli
        origin: community
- id: java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request
  message: Detected input from a HTTPServletRequest going into an LDAP query. This
    could lead to LDAP injection if the input is not properly sanitized, which could
    result in attackers modifying objects in the LDAP tree structure. Ensure data
    passed to an LDAP query is not controllable or properly sanitize the data.
  metadata:
    cwe:
    - 'CWE-90: Improper Neutralization of Special Elements used in an LDAP Query (''LDAP
      Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://sensei.securecodewarrior.com/recipes/scw%3Ajava%3ALDAP-injection
    category: security
    technology:
    - java
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request
    shortlink: https://sg.run/gRg0
    semgrep.dev:
      rule:
        rule_id: pKUXAv
        version_id: BjTG3R
        url: https://semgrep.dev/playground/r/BjTG3R/java.lang.security.audit.tainted-ldapi-from-http-request.tainted-ldapi-from-http-request
        origin: community
  severity: WARNING
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: (HttpServletRequest $REQ)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (javax.naming.directory.InitialDirContext $IDC).search(...)
      - pattern: |
          (javax.naming.directory.DirContext $CTX).search(...)
    - pattern-not: |
        (javax.naming.directory.InitialDirContext $IDC).search($Y, "...", ...)
    - pattern-not: |
        (javax.naming.directory.DirContext $CTX).search($Y, "...", ...)
- id: java.lang.security.audit.unsafe-reflection.unsafe-reflection
  patterns:
  - pattern: |
      Class.forName($CLASS,...)
  - pattern-not: |
      Class.forName("...",...)
  - pattern-not-inside: |
      $CLASS = "...";
      ...
  message: If an attacker can supply values that the application then uses to determine
    which class to instantiate or which method to invoke, the potential exists for
    the attacker to create control flow paths through the application that were not
    intended by the application developers. This attack vector may allow the attacker
    to bypass authentication or access control checks or otherwise cause the application
    to behave in an unexpected manner.
  metadata:
    cwe:
    - 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
      Reflection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.unsafe-reflection.unsafe-reflection
    shortlink: https://sg.run/R8X8
    semgrep.dev:
      rule:
        rule_id: DbUW1W
        version_id: 0bT6Pb
        url: https://semgrep.dev/playground/r/0bT6Pb/java.lang.security.audit.unsafe-reflection.unsafe-reflection
        origin: community
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
  message: Application redirects to a destination URL specified by a user-supplied
    parameter that is not validated. This could direct users to malicious locations.
    Consider using an allowlist to validate URLs.
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.1.5 Open Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation-requirements
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    impact: LOW
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
    shortlink: https://sg.run/Q51P
    semgrep.dev:
      rule:
        rule_id: WAUo0p
        version_id: K3TOWL
        url: https://semgrep.dev/playground/r/K3TOWL/java.lang.security.audit.unvalidated-redirect.unvalidated-redirect
        origin: community
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,String $URL,...) {
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...,HttpServletResponse $RES,...) {
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.sendRedirect($URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        $RES.sendRedirect($REQ.getParameter(...));
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        $RES.sendRedirect($REQ.getParameter(...));
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,String $URL,...) {
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...,HttpServletResponse $RES,...) {
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        String $URL = $REQ.getParameter(...);
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.addHeader("Location",$URL);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletRequest $REQ,...,HttpServletResponse $RES,...) {
        ...
        $RES.addHeader("Location",$REQ.getParameter(...));
        ...
      }
  - pattern: |-
      $X $METHOD(...,HttpServletResponse $RES,...,HttpServletRequest $REQ,...) {
        ...
        $RES.addHeader("Location",$REQ.getParameter(...));
        ...
      }
- id: java.lang.security.audit.url-rewriting.url-rewriting
  message: URL rewriting has significant security risks. Since session ID appears
    in the URL, it may be easily seen by third parties.
  metadata:
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#URL_REWRITING
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.url-rewriting.url-rewriting
    shortlink: https://sg.run/3x7b
    semgrep.dev:
      rule:
        rule_id: 0oU5j3
        version_id: qkTK87
        url: https://semgrep.dev/playground/r/qkTK87/java.lang.security.audit.url-rewriting.url-rewriting
        origin: community
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeURL(...);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeUrl(...);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeRedirectURL(...);
        ...
      }
  - pattern: |
      $X $METHOD(...,HttpServletResponse $RES,...) {
        ...
        $RES.encodeRedirectUrl(...);
        ...
      }
  - pattern: |
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeURL(...);
        ...
      }
  - pattern: |
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeUrl(...);
        ...
      }
  - pattern: |
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeRedirectURL(...);
        ...
      }
  - pattern: |-
      $X $METHOD(...) {
        ...
        HttpServletResponse $RES = ...;
        ...
        $RES.encodeRedirectUrl(...);
        ...
      }
- id: java.lang.security.audit.weak-ssl-context.weak-ssl-context
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source_rule_url: https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT
    references:
    - https://tools.ietf.org/html/rfc7568
    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html
    category: security
    technology:
    - java
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.weak-ssl-context.weak-ssl-context
    shortlink: https://sg.run/4x7E
    semgrep.dev:
      rule:
        rule_id: KxUb1k
        version_id: l4TNn0
        url: https://semgrep.dev/playground/r/l4TNn0/java.lang.security.audit.weak-ssl-context.weak-ssl-context
        origin: community
  message: An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL
    versions are considered weak encryption and are deprecated. Use SSLContext.getInstance("TLSv1.2")
    for the best security.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not: SSLContext.getInstance("TLSv1.3")
  - pattern-not: SSLContext.getInstance("TLSv1.2")
  - pattern: SSLContext.getInstance("...")
  fix-regex:
    regex: (.*?)\.getInstance\(.*?\)
    replacement: \1.getInstance("TLSv1.2")
- id: java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_REQUEST_WRAPPER
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
    shortlink: https://sg.run/J96Q
    semgrep.dev:
      rule:
        rule_id: lBU9Gj
        version_id: X0TJNW
        url: https://semgrep.dev/playground/r/X0TJNW/java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure
        origin: community
  message: It looks like you're using an implementation of XSSRequestWrapper from
    dzone. (https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html)
    The XSS filtering in this code is not secure and can be bypassed by malicious
    actors. It is recommended to use a stack that automatically escapes in your view
    or templates instead of filtering yourself.
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      class XSSRequestWrapper extends HttpServletRequestWrapper {
        ...
      }
  - pattern: |-
      $P = $X.compile("</script>", $X.CASE_INSENSITIVE);
      $V = $P.matcher(...).replaceAll("");
- id: java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
  message: Detected file permissions that are overly permissive (read, write, and
    execute). It is generally a bad practices to set overly permissive file permission
    such as read+write+exec for all users. If the file affected is a configuration,
    a binary, a script or sensitive data, it can lead to privilege escalation or information
    leakage. Instead, follow the principle of least privilege and give users only
    the  permissions they need.
  severity: WARNING
  languages:
  - java
  metadata:
    cwe:
    - 'CWE-276: Incorrect Default Permissions'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#OVERLY_PERMISSIVE_FILE_PERMISSION
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
    shortlink: https://sg.run/LwzJ
    semgrep.dev:
      rule:
        rule_id: AbUzwB
        version_id: jQTpDQ
        url: https://semgrep.dev/playground/r/jQTpDQ/java.lang.security.audit.overly-permissive-file-permission.overly-permissive-file-permission
        origin: community
  pattern-either:
  - pattern: java.nio.file.Files.setPosixFilePermissions($FILE, java.nio.file.attribute.PosixFilePermissions.fromString("=~/(^......r..$)|(^.......w.$)|(^........x$)/"));
  - pattern: |
      $TYPE $P = java.nio.file.attribute.PosixFilePermissions.fromString("=~/(^......r..$)|(^.......w.$)|(^........x$)/");
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - pattern: |
      $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_READ);
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - pattern: |
      $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_WRITE);
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
  - pattern: |-
      $P.add(java.nio.file.attribute.PosixFilePermission.OTHERS_EXECUTE);
      ...
      java.nio.file.Files.setPosixFilePermissions($FILE, $P);
- id: dockerfile.security.missing-user.missing-user
  patterns:
  - pattern: |
      CMD $...VARS
  - pattern-not-inside: |
      USER $USER
      ...
  fix: |
    USER non-root
    CMD $...VARS
  message: By not specifying a USER, a program in the container may run as 'root'.
    This is a security hazard. If an attacker can control a process running as root,
    they may have control over the container. Ensure that the last USER in a Dockerfile
    is a USER other than 'root'.
  severity: ERROR
  languages:
  - dockerfile
  metadata:
    cwe:
    - 'CWE-269: Improper Privilege Management'
    category: security
    technology:
    - dockerfile
    confidence: MEDIUM
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/dockerfile.security.missing-user.missing-user
    shortlink: https://sg.run/Gbvn
    semgrep.dev:
      rule:
        rule_id: AbUN06
        version_id: 3ZTq68
        url: https://semgrep.dev/playground/r/3ZTq68/dockerfile.security.missing-user.missing-user
        origin: community
- id: dockerfile.security.last-user-is-root.last-user-is-root
  patterns:
  - pattern-inside: |
      USER $F
      ...
      USER $X
  - pattern-not-inside: |
      ...
      USER $X
      ...
      USER $F
  - focus-metavariable: $X
  - metavariable-regex:
      metavariable: $X
      regex: ^(root)$
  - metavariable-regex:
      metavariable: $F
      regex: (.*(?!root))
  message: The last user in the container is 'root'. This is a security hazard because
    if an attacker gains control of the container they will have root access. Switch
    back to another user after running commands as 'root'.
  severity: ERROR
  languages:
  - dockerfile
  metadata:
    cwe:
    - 'CWE-269: Improper Privilege Management'
    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3002
    references:
    - https://github.com/hadolint/hadolint/wiki/DL3002
    category: security
    technology:
    - dockerfile
    confidence: MEDIUM
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/dockerfile.security.last-user-is-root.last-user-is-root
    shortlink: https://sg.run/5Z43
    semgrep.dev:
      rule:
        rule_id: ReU2n5
        version_id: 8KTDkl
        url: https://semgrep.dev/playground/r/8KTDkl/dockerfile.security.last-user-is-root.last-user-is-root
        origin: community
- id: java.aws-lambda.security.tainted-sqli.tainted-sqli
  message: Detected SQL statement that is tainted by `$EVENT` object. This could lead
    to SQL injection if variables in the SQL statement are not properly sanitized.
    Use parameterized SQL queries or properly sanitize user input instead.
  languages:
  - java
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $EVENT
    - pattern-either:
      - pattern: |
          $HANDLERTYPE $HANDLER($TYPE $EVENT, com.amazonaws.services.lambda.runtime.Context $CONTEXT) {
            ...
          }
      - pattern: |
          $HANDLERTYPE $HANDLER(InputStream $EVENT, OutputStream $OUT, com.amazonaws.services.lambda.runtime.Context $CONTEXT) {
            ...
          }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "(java.sql.CallableStatement $STMT) = ...; \n"
      - pattern: |
          (java.sql.Statement $STMT) = ...;
      - pattern: |
          (java.sql.PreparedStatement $STMT) = ...;
      - pattern: |
          $VAR = $CONN.prepareStatement(...)
      - pattern: |
          $PATH.queryForObject(...);
      - pattern: |
          (java.util.Map<String, Object> $STMT) = $PATH.queryForMap(...);
      - pattern: |
          (org.springframework.jdbc.support.rowset.SqlRowSet $STMT) = ...;
      - patterns:
        - pattern-inside: |
            (String $SQL) = "$SQLSTR" + ...;
            ...
        - pattern: $PATH.$SQLCMD(..., $SQL, ...);
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(^SELECT.* | ^INSERT.* | ^UPDATE.*)
        - metavariable-regex:
            metavariable: $SQLCMD
            regex: (execute|query|executeUpdate)
  metadata:
    category: security
    technology:
    - sql
    - java
    - aws-lambda
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.aws-lambda.security.tainted-sqli.tainted-sqli
    shortlink: https://sg.run/7942
    semgrep.dev:
      rule:
        rule_id: 6JUDWk
        version_id: WrTLno
        url: https://semgrep.dev/playground/r/WrTLno/java.aws-lambda.security.tainted-sqli.tainted-sqli
        origin: community
- id: java.lang.security.audit.formatted-sql-string.formatted-sql-string
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.5 Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps
    - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.formatted-sql-string.formatted-sql-string
    shortlink: https://sg.run/OPXp
    semgrep.dev:
      rule:
        rule_id: QrUzxR
        version_id: ExTxW2
        url: https://semgrep.dev/playground/r/ExTxW2/java.lang.security.audit.formatted-sql-string.formatted-sql-string
        origin: community
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ)
      - patterns:
        - pattern-inside: |
            $ANNOT $FUNC (..., $INPUT, ...) {
              ...
            }
        - pattern: (String $INPUT)
    - focus-metavariable: $INPUT
    label: INPUT
  - patterns:
    - pattern-either:
      - pattern: $X + $INPUT
      - pattern: $X += $INPUT
      - pattern: $STRB.append($INPUT)
      - pattern: String.format(..., $INPUT, ...)
      - pattern: String.join(..., $INPUT, ...)
      - pattern: (String $STR).concat($INPUT)
      - pattern: $INPUT.concat(...)
      - pattern: new $STRB(..., $INPUT, ...)
    label: CONCAT
    requires: INPUT
  pattern-propagators:
  - pattern: (StringBuffer $S).append($X)
    from: $X
    to: $S
  - pattern: (StringBuilder $S).append($X)
    from: $X
    to: $S
  pattern-sinks:
  - patterns:
    - pattern-not: $S.$SQLFUNC(<... "=~/.*TABLE *$/" ...>)
    - pattern-not: $S.$SQLFUNC(<... "=~/.*TABLE %s$/" ...>)
    - pattern-either:
      - pattern: (Statement $S).$SQLFUNC(...)
      - pattern: (PreparedStatement $P).$SQLFUNC(...)
      - pattern: (Connection $C).createStatement(...).$SQLFUNC(...)
      - pattern: (Connection $C).prepareStatement(...).$SQLFUNC(...)
      - pattern: (EntityManager $EM).$SQLFUNC(...)
    - metavariable-regex:
        metavariable: $SQLFUNC
        regex: execute|executeQuery|createQuery|query|addBatch|nativeSQL|create|prepare
    requires: CONCAT
  pattern-sanitizers:
  - patterns:
    - pattern: (CriteriaBuilder $CB).$ANY(...)
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
  severity: ERROR
  languages:
  - java
- id: java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request
  message: Detected input from a HTTPServletRequest going into a SQL sink or statement.
    This could lead to SQL injection if variables in the SQL statement are not properly
    sanitized. Use parameterized SQL queries or properly sanitize user input instead.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    - https://owasp.org/www-community/attacks/SQL_Injection
    subcategory:
    - vuln
    technology:
    - sql
    - java
    - servlets
    - spring
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request
    shortlink: https://sg.run/Lg56
    semgrep.dev:
      rule:
        rule_id: oqUBJG
        version_id: 7ZT3Re
        url: https://semgrep.dev/playground/r/7ZT3Re/java.lang.security.audit.sqli.tainted-sql-from-http-request.tainted-sql-from-http-request
        origin: community
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ).$REQFUNC(...)
      - pattern: "(ServletRequest $REQ).$REQFUNC(...) \n"
    - metavariable-regex:
        metavariable: $REQFUNC
        regex: (getInputStream|getParameter|getParameterMap|getParameterValues|getReader|getCookies|getHeader|getHeaderNames|getHeaders|getPart|getParts|getQueryString)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: "(java.sql.CallableStatement $STMT) = ...; \n"
      - pattern: |
          (java.sql.Statement $STMT) = ...;
          ...
          $OUTPUT = $STMT.$FUNC(...);
      - pattern: |
          (java.sql.PreparedStatement $STMT) = ...;
      - pattern: |
          $VAR = $CONN.prepareStatement(...)
      - pattern: |
          $PATH.queryForObject(...);
      - pattern: |
          (java.util.Map<String, Object> $STMT) = $PATH.queryForMap(...);
      - pattern: |
          (org.springframework.jdbc.support.rowset.SqlRowSet $STMT) = ...;
      - patterns:
        - pattern-inside: |
            (String $SQL) = "$SQLSTR" + ...;
            ...
        - pattern: $PATH.$SQLCMD(..., $SQL, ...);
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(^SELECT.* | ^INSERT.* | ^UPDATE.*)
        - metavariable-regex:
            metavariable: $SQLCMD
            regex: (execute|query|executeUpdate)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: java.lang.security.do-privileged-use.do-privileged-use
  severity: WARNING
  languages:
  - java
  metadata:
    cwe:
    - 'CWE-269: Improper Privilege Management'
    references:
    - https://docs.oracle.com/javase/8/docs/technotes/guides/security/doprivileged.html
    - https://wiki.sei.cmu.edu/confluence/display/java/Privilege+Escalation
    - http://phrack.org/papers/escaping_the_java_sandbox.html
    category: security
    technology:
    - java
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.do-privileged-use.do-privileged-use
    shortlink: https://sg.run/6n76
    semgrep.dev:
      rule:
        rule_id: bwUw28
        version_id: rxT8zk
        url: https://semgrep.dev/playground/r/rxT8zk/java.lang.security.do-privileged-use.do-privileged-use
        origin: community
  message: Marking code as privileged enables a piece of trusted code to temporarily
    enable access to more resources than are available directly to the code that called
    it. Be very careful in your use of the privileged construct, and always remember
    to make the privileged code section as small as possible.
  patterns:
  - pattern-inside: |
      import java.security.*;
      ...
  - pattern-either:
    - pattern: AccessController.doPrivileged(...);
    - pattern: class $ACTION implements PrivilegedAction<Void> { ... }
- id: java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
  message: 'Cross-site scripting detected in HttpServletResponse writer with variable
    ''$VAR''. User input was detected going directly from the HttpServletRequest into
    output. Ensure your data is properly encoded using org.owasp.encoder.Encode.forHtml:
    ''Encode.forHtml($VAR)''.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#XSS_SERVLET
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
    shortlink: https://sg.run/pxjN
    semgrep.dev:
      rule:
        rule_id: wdUJOk
        version_id: kbTZl6
        url: https://semgrep.dev/playground/r/kbTZl6/java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss
        origin: community
  severity: ERROR
  patterns:
  - pattern-inside: $TYPE $FUNC(..., HttpServletResponse $RESP, ...) { ... }
  - pattern-inside: $VAR = $REQ.getParameter(...); ...
  - pattern-either:
    - pattern: $RESP.getWriter(...).write(..., $VAR, ...);
    - pattern: |
        $WRITER = $RESP.getWriter(...);
        ...
        $WRITER.write(..., $VAR, ...);
  languages:
  - java
- id: javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
  message: this rule has been deprecated.
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - jose
    - jwt
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
    shortlink: https://sg.run/GeKy
    semgrep.dev:
      rule:
        rule_id: PeUZG0
        version_id: JdTZxd
        url: https://semgrep.dev/playground/r/JdTZxd/javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://www.blackhat.com/docs/us-15/materials/us-15-Wang-FileCry-The-New-Age-Of-XXE-java-wp.pdf
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
    shortlink: https://sg.run/2x75
    semgrep.dev:
      rule:
        rule_id: x8Unkq
        version_id: JdTYjW
        url: https://semgrep.dev/playground/r/JdTYjW/java.lang.security.xmlinputfactory-external-entities-enabled.xmlinputfactory-external-entities-enabled
        origin: community
  message: XML external entities are enabled for this XMLInputFactory. This is vulnerable
    to XML external entity attacks. Disable external entities by setting "javax.xml.stream.isSupportingExternalEntities"
    to false.
  pattern: $XMLFACTORY.setProperty("javax.xml.stream.isSupportingExternalEntities",
    true);
  languages:
  - java
- id: javascript.jose.security.jwt-none-alg.jwt-none-alg
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jose
    - jwt
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg
    shortlink: https://sg.run/AvRL
    semgrep.dev:
      rule:
        rule_id: 5rUOGN
        version_id: GxTWe2
        url: https://semgrep.dev/playground/r/GxTWe2/javascript.jose.security.jwt-none-alg.jwt-none-alg
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  pattern-either:
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      var $T = JWT.verify($P, JWK.None,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      $T = JWT.verify($P, JWK.None,...);
  - pattern: |
      var $JOSE = require("jose");
      ...
      var { JWK, JWT } = $JOSE;
      ...
      JWT.verify($P, JWK.None,...);
- id: javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
  message: The object is passed strictly to jsonwebtoken.sign(...) Make sure that
    sensitive information is not exposed through JWT token payload.
  metadata:
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
    shortlink: https://sg.run/5Qkj
    semgrep.dev:
      rule:
        rule_id: qNUjwe
        version_id: WrT6wO
        url: https://semgrep.dev/playground/r/WrT6wO/javascript.jsonwebtoken.security.audit.jwt-exposed-data.jwt-exposed-data
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $JWT = require('jsonwebtoken');
      ...
  - pattern-either:
    - pattern-inside: function (...,$INPUT,...) {...}
    - pattern-inside: function $F(...,$INPUT,...) {...}
  - pattern: $JWT.sign($INPUT,...)
- id: javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override
  message: Detected use of express.csrf() middleware before express.methodOverride().
    This can allow GET requests (which are not checked by csrf) to turn into POST
    requests later.
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-no-csrf-before-method-override.js
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/master/docs/bypass-connect-csrf-protection-by-abusing.md
    category: security
    technology:
    - javascript
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override
    shortlink: https://sg.run/oxoX
    semgrep.dev:
      rule:
        rule_id: r6UrvQ
        version_id: qkTDwX
        url: https://semgrep.dev/playground/r/qkTDwX/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern: |
    express.csrf();
    ...
    express.methodOverride();
- id: javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert
  message: Detected usage of noassert in Buffer API, which allows the offset the be
    beyond the end of the buffer. This could result in writing or reading beyond the
    end of the buffer.
  metadata:
    cwe:
    - 'CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer'
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-buffer-noassert.js
    category: security
    technology:
    - javascript
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    references:
    - https://cwe.mitre.org/data/definitions/119.html
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert
    shortlink: https://sg.run/qxpO
    semgrep.dev:
      rule:
        rule_id: j2Uvj8
        version_id: nWTwRj
        url: https://semgrep.dev/playground/r/nWTwRj/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern: $OBJ.$API(..., true)
  - metavariable-regex:
      metavariable: $API
      regex: (read|write)(U?Int8|(U?Int(16|32)|Float|Double)(LE|BE))
- id: javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
  message: Markup escaping disabled. This can be used with some template engines to
    escape disabling of HTML entities, which can lead to XSS attacks.
  metadata:
    cwe:
    - 'CWE-116: Improper Encoding or Escaping of Output'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-disable-mustache-escape.js
    category: security
    technology:
    - mustache
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
    shortlink: https://sg.run/Yvwd
    semgrep.dev:
      rule:
        rule_id: 9AU17r
        version_id: 7ZTYy8
        url: https://semgrep.dev/playground/r/7ZTYy8/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern: $OBJ.escapeMarkup = false
- id: javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
  message: Detected use of dynamic execution of JavaScript which may come from user-input,
    which can lead to Cross-Site-Scripting (XSS). Where possible avoid including user-input
    in functions which dynamically execute user-input.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-eval-with-expression.js
    references:
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!
    category: security
    technology:
    - javascript
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
    shortlink: https://sg.run/6nwK
    semgrep.dev:
      rule:
        rule_id: yyUngo
        version_id: LjTp3v
        url: https://semgrep.dev/playground/r/LjTp3v/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $PROP = new URLSearchParams($WINDOW. ... .location.search).get('...')
            ...
      - pattern-inside: |
          $PROP = new URLSearchParams(location.search).get('...')
            ...
      - pattern-inside: |
          $PROP = new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get('...')
            ...
      - pattern-inside: |
          $PROP = new URLSearchParams(location.hash.substring(1)).get('...')
            ...
    - focus-metavariable: $PROP
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $PROPS = new URLSearchParams($WINDOW. ... .location.search)
            ...
      - pattern-inside: |
          $PROPS = new URLSearchParams(location.search)
            ...
      - pattern-inside: |
          $PROPS = new
          URLSearchParams($WINDOW. ... .location.hash.substring(1))
            ...
      - pattern-inside: |
          $PROPS = new URLSearchParams(location.hash.substring(1))
          ...
    - pattern: $PROPS.get('...')
    - focus-metavariable: $PROPS
  - patterns:
    - pattern-either:
      - pattern: location.href
      - pattern: location.hash
      - pattern: location.search
      - pattern: $WINDOW. ... .location.href
      - pattern: $WINDOW. ... .location.hash
      - pattern: $WINDOW. ... .location.search
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: eval(<... $SINK ...>)
      - pattern: window.eval(<... $SINK ...>)
      - pattern: new Function(<... $SINK ...>)
      - pattern: new Function(<... $SINK ...>)(...)
      - pattern: setTimeout(<... $SINK ...>,...)
      - pattern: setInterval(<... $SINK ...>,...)
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: location.href = $FUNC(...)
      - pattern: location.hash = $FUNC(...)
      - pattern: location.search = $FUNC(...)
      - pattern: $WINDOW. ... .location.href = $FUNC(...)
      - pattern: $WINDOW. ... .location.hash = $FUNC(...)
      - pattern: $WINDOW. ... .location.search = $FUNC(...)
- id: javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - playwright
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
    shortlink: https://sg.run/ndgr
    semgrep.dev:
      rule:
        rule_id: PeUZ30
        version_id: DkTe56
        url: https://semgrep.dev/playground/r/DkTe56/javascript.playwright.security.audit.playwright-evaluate-arg-injection.playwright-evaluate-arg-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC (...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
- id: javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
  message: Remote debugging protocol does not perform any authentication, so exposing
    it too widely can be a security risk.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - playwright
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
    shortlink: https://sg.run/7oEQ
    semgrep.dev:
      rule:
        rule_id: 5rUO1N
        version_id: 0bT6d7
        url: https://semgrep.dev/playground/r/0bT6d7/javascript.playwright.security.audit.playwright-exposed-chrome-devtools.playwright-exposed-chrome-devtools
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-either:
    - pattern-regex: --remote-debugging-address
    - pattern-regex: --remote-debugging-port
    - pattern-regex: --remote-debugging-socket-name
    - pattern-regex: --remote-debugging-targets
- id: javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
  message: If unverified user data can reach the `setContent` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - playwright
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
    shortlink: https://sg.run/8yEQ
    semgrep.dev:
      rule:
        rule_id: ReUgLk
        version_id: qkTKZo
        url: https://semgrep.dev/playground/r/qkTKZo/javascript.playwright.security.audit.playwright-setcontent-injection.playwright-setcontent-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-not-inside: |
      require('playwright');
      ...
      var $INPUT = "...";
      ...
      $PAGE.setContent($INPUT,...)
  - pattern: $PAGE.setContent($INPUT,...)
  - pattern-not: $PAGE.setContent("...",...)
- id: javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - puppeteer
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
    shortlink: https://sg.run/gLQ5
    semgrep.dev:
      rule:
        rule_id: AbUzdX
        version_id: l4TNjz
        url: https://semgrep.dev/playground/r/l4TNjz/javascript.puppeteer.security.audit.puppeteer-evaluate-arg-injection.puppeteer-evaluate-arg-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('puppeteer');
      ...
  - pattern-either:
    - pattern-inside: function $FUNC (...,$INPUT,...) {...}
    - pattern-inside: function (...,$INPUT,...) {...}
  - pattern-either:
    - pattern: $PAGE.evaluate($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateHandle($CODE,...,<... $INPUT ...>,...)
    - pattern: $PAGE.evaluateOnNewDocument($CODE,...,<... $INPUT ...>,...)
- id: javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
  message: Remote debugging protocol does not perform any authentication, so exposing
    it too widely can be a security risk.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - puppeteer
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
    shortlink: https://sg.run/3xEW
    semgrep.dev:
      rule:
        rule_id: DbUpbk
        version_id: JdTZW6
        url: https://semgrep.dev/playground/r/JdTZW6/javascript.puppeteer.security.audit.puppeteer-exposed-chrome-devtools.puppeteer-exposed-chrome-devtools
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('puppeteer');
      ...
  - pattern-either:
    - pattern-regex: --remote-debugging-address
    - pattern-regex: --remote-debugging-port
    - pattern-regex: --remote-debugging-socket-name
    - pattern-regex: --remote-debugging-targets
- id: javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
  message: If unverified user data can reach the `goto` method it can result in Server-Side
    Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - puppeteer
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
    shortlink: https://sg.run/4xE9
    semgrep.dev:
      rule:
        rule_id: WAUoK7
        version_id: 5PTYwy
        url: https://semgrep.dev/playground/r/5PTYwy/javascript.puppeteer.security.audit.puppeteer-goto-injection.puppeteer-goto-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('puppeteer');
      ...
  - pattern-not-inside: |
      require('puppeteer');
      ...
      var $INPUT = "...";
      ...
      $PAGE.goto($INPUT,...)
  - pattern: $PAGE.goto($INPUT,...)
  - pattern-not: $PAGE.goto("...",...)
- id: javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
  message: '`serialize-javascript` used with `unsafe` parameter, this could be vulnerable
    to XSS.'
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic
      XSS)'
    category: security
    technology:
    - serialize-javascript
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
    shortlink: https://sg.run/Ro6N
    semgrep.dev:
      rule:
        rule_id: YGURez
        version_id: qkTKZJ
        url: https://semgrep.dev/playground/r/qkTKZJ/javascript.serialize-javascript.security.audit.unsafe-serialize-javascript.unsafe-serialize-javascript
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $S = require('serialize-javascript');
      ...
  - pattern-not-inside: escape(...)
  - pattern-not-inside: encodeURI(...)
  - pattern: |
      $S(..., {unsafe: true});
- id: javascript.aws-lambda.security.detect-child-process.detect-child-process
  message: Allowing spawning arbitrary programs or running shell processes with arbitrary
    arguments may end up in a command injection vulnerability. Try to avoid non-literal
    values for the command string. If it is not possible, then do not let running
    arbitrary commands, use a white list for inputs.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - javascript
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.detect-child-process.detect-child-process
    shortlink: https://sg.run/Ggoq
    semgrep.dev:
      rule:
        rule_id: r6UDNQ
        version_id: 0bTjPj
        url: https://semgrep.dev/playground/r/0bTjPj/javascript.aws-lambda.security.detect-child-process.detect-child-process
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: exec($CMD,...)
      - pattern: execSync($CMD,...)
      - pattern: spawn($CMD,...)
      - pattern: spawnSync($CMD,...)
      - pattern: $CP.exec($CMD,...)
      - pattern: $CP.execSync($CMD,...)
      - pattern: $CP.spawn($CMD,...)
      - pattern: $CP.spawnSync($CMD,...)
    - pattern-either:
      - pattern-inside: |
          require('child_process')
          ...
      - pattern-inside: |
          import 'child_process'
          ...
- id: javascript.aws-lambda.security.knex-sqli.knex-sqli
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `knex.raw(''SELECT $1 from
    table'', [userinput])`'
  metadata:
    references:
    - https://knexjs.org/#Builder-fromRaw
    - https://knexjs.org/#Builder-whereRaw
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - knex
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.knex-sqli.knex-sqli
    shortlink: https://sg.run/RgWq
    semgrep.dev:
      rule:
        rule_id: bwUBlj
        version_id: qkT38n
        url: https://semgrep.dev/playground/r/qkT38n/javascript.aws-lambda.security.knex-sqli.knex-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $KNEX.fromRaw($QUERY, ...)
      - pattern: $KNEX.whereRaw($QUERY, ...)
      - pattern: $KNEX.raw($QUERY, ...)
    - pattern-either:
      - pattern-inside: |
          require('knex')
          ...
      - pattern-inside: |
          import 'knex'
          ...
- id: javascript.aws-lambda.security.mysql-sqli.mysql-sqli
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `connection.query(''SELECT
    $1 from table'', [userinput])`'
  metadata:
    references:
    - https://www.npmjs.com/package/mysql2
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - mysql
    - mysql2
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.mysql-sqli.mysql-sqli
    shortlink: https://sg.run/A502
    semgrep.dev:
      rule:
        rule_id: NbUBJ2
        version_id: l4TGnD
        url: https://semgrep.dev/playground/r/l4TGnD/javascript.aws-lambda.security.mysql-sqli.mysql-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $POOL.query($QUERY, ...)
      - pattern: $POOL.execute($QUERY, ...)
    - pattern-either:
      - pattern-inside: |
          require('mysql')
          ...
      - pattern-inside: |
          require('mysql2')
          ...
      - pattern-inside: |
          require('mysql2/promise')
          ...
      - pattern-inside: |
          import 'mysql'
          ...
      - pattern-inside: |
          import 'mysql2'
          ...
      - pattern-inside: |
          import 'mysql2/promise'
          ...
- id: javascript.aws-lambda.security.pg-sqli.pg-sqli
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `connection.query(''SELECT
    $1 from table'', [userinput])`'
  metadata:
    references:
    - https://node-postgres.com/features/queries
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - postgres
    - pg
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.pg-sqli.pg-sqli
    shortlink: https://sg.run/BGKA
    semgrep.dev:
      rule:
        rule_id: kxU25P
        version_id: YDTd9e
        url: https://semgrep.dev/playground/r/YDTd9e/javascript.aws-lambda.security.pg-sqli.pg-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $DB.query($QUERY, ...)
    - pattern-either:
      - pattern-inside: |
          require('pg')
          ...
      - pattern-inside: |
          import 'pg'
          ...
- id: javascript.aws-lambda.security.sequelize-sqli.sequelize-sqli
  message: 'Detected SQL statement that is tainted by `$EVENT` object. This could
    lead to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `sequelize.query(''SELECT
    * FROM projects WHERE status = ?'', { replacements: [''active''], type: QueryTypes.SELECT
    });`'
  metadata:
    references:
    - https://sequelize.org/master/manual/raw-queries.html
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - sequelize
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.sequelize-sqli.sequelize-sqli
    shortlink: https://sg.run/DAlP
    semgrep.dev:
      rule:
        rule_id: wdUA5o
        version_id: 6xTNPo
        url: https://semgrep.dev/playground/r/6xTNPo/javascript.aws-lambda.security.sequelize-sqli.sequelize-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $DB.query($QUERY, ...)
    - pattern-either:
      - pattern-inside: |
          require('sequelize')
          ...
      - pattern-inside: |
          import 'sequelize'
          ...
- id: javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    interfile: true
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jose
    - jwt
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
    shortlink: https://sg.run/Ro1g
    semgrep.dev:
      rule:
        rule_id: JDUyRl
        version_id: jQT7AJ
        url: https://semgrep.dev/playground/r/jQT7AJ/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $JOSE = require("jose");
      ...
  - pattern-either:
    - pattern-inside: |
        var {JWT} = $JOSE;
        ...
    - pattern-inside: |
        var {JWK, JWT} = $JOSE;
        ...
    - pattern-inside: |
        const {JWT} = $JOSE;
        ...
    - pattern-inside: |
        const {JWK, JWT} = $JOSE;
        ...
    - pattern-inside: |
        let {JWT} = $JOSE;
        ...
    - pattern-inside: |
        let {JWK, JWT} = $JOSE;
        ...
  - pattern-either:
    - pattern: |
        JWT.verify($P, "...", ...);
    - pattern: |
        JWT.sign($P, "...", ...);
    - pattern: "JWT.verify($P, JWK.asKey(\"...\"), ...);     \n"
    - pattern: |
        $JWT.sign($P, JWK.asKey("..."), ...);
  options:
    symbolic_propagation: true
- id: javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
  message: RegExp() called with a `$ARG` function argument, this might allow an attacker
    to cause a Regular Expression Denial-of-Service (ReDoS) within your application
    as RegExP blocks the main thread. For this reason, it is recommended to use hardcoded
    regexes instead. If your regex is run on user-controlled input, consider performing
    input validation or use a regex checking/sanitization library such as https://www.npmjs.com/package/recheck
    to verify that the regex does not appear vulnerable to ReDoS.
  metadata:
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    references:
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js
    category: security
    technology:
    - javascript
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
    shortlink: https://sg.run/gr65
    semgrep.dev:
      rule:
        rule_id: zdU1gD
        version_id: K3TkwJ
        url: https://semgrep.dev/playground/r/K3TkwJ/javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        function ... (...,$ARG,...) {...}
    - focus-metavariable: $ARG
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: new RegExp($ARG, ...)
      - pattern: RegExp($ARG, ...)
    - pattern-not: RegExp("...", ...)
    - pattern-not: new RegExp("...", ...)
    - pattern-not: RegExp(/.../, ...)
    - pattern-not: new RegExp(/.../, ...)
- id: javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
  message: Make sure that unverified user data can not reach `vm2`.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - vm2
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
    shortlink: https://sg.run/DoPG
    semgrep.dev:
      rule:
        rule_id: zdUk2g
        version_id: 6xT0YA
        url: https://semgrep.dev/playground/r/6xT0YA/javascript.vm2.security.audit.vm2-code-injection.vm2-code-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('vm2');
      ...
  - pattern-not-inside: |
      $CODE = "...";
      ...
  - pattern-not-inside: |
      require('vm2');
      ...
      $CODE = new VMScript(...);
      ...
  - pattern-either:
    - pattern: |
        $VM = new VM(...);
        ...
        $VM.run($CODE,...);
    - pattern: |
        new VM(...).run($CODE,...);
    - pattern: |
        $VM = new NodeVM(...);
        ...
        $VM.run($CODE,...);
    - pattern: |
        new NodeVM(...).run($CODE,...);
    - pattern: |
        new VMScript($CODE,...);
  - pattern-not: |
      $VM = new VM(...);
      ...
      $VM.run("...",...);
  - pattern-not: |
      $VM = new NodeVM(...);
      ...
      $VM.run("...",...);
  - pattern-not: |
      (new VM(...)).run("...",...);
  - pattern-not: |
      (new NodeVM(...)).run("...",...);
  - pattern-not: new VMScript("...",...);
- id: javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
  message: Make sure that unverified user data can not reach `vm2`.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - vm2
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
    shortlink: https://sg.run/W8XE
    semgrep.dev:
      rule:
        rule_id: pKUO3v
        version_id: o5T5NP
        url: https://semgrep.dev/playground/r/o5T5NP/javascript.vm2.security.audit.vm2-context-injection.vm2-context-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $VM = require('vm2');
      ...
  - pattern-either:
    - pattern: |
        function (...,$INPUT,...) {
          ...
          new VM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          new VM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new VM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new VM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          new NodeVM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function (...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          new NodeVM({sandbox: <... $INPUT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... {$NAME:$INPUT} ...>;
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          new NodeVM({sandbox: <... $CONTEXT ...>},...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $OPTS = {sandbox: <... $INPUT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = <... $INPUT ...>;
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |
        function $F(...,$INPUT,...) {
          ...
          $CONTEXT = {$NAME: <... $INPUT ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
    - pattern: |-
        function $F(...,$INPUT,...) {
          ...
          $VAR = <... $INPUT ...>;
          ...
          $CONTEXT = {$NAME: <... $VAR ...>};
          ...
          $OPTS = {sandbox: <... $CONTEXT ...>};
          ...
          new NodeVM($OPTS,...);
          ...
        }
- id: javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
  message: If unverified user data can reach the XML Parser it can result in XML External
    or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    category: security
    technology:
    - xml2json
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
    shortlink: https://sg.run/l27o
    semgrep.dev:
      rule:
        rule_id: 10UKpB
        version_id: X0TJ90
        url: https://semgrep.dev/playground/r/X0TJ90/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern: |
      var $XML = require('xml2json');
      ...
      $XML.toJson(...);
  - pattern-not: |
      var $XML = require('xml2json');
      ...
      $XML.toJson("...",...);
  - pattern-not: |-
      var $XML = require('xml2json');
      ...
      var $S = "...";
      ...
      $XML.toJson($S,...);
- id: python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator
  message: 'Found a formatted string in BashOperator: $CMD. This could be vulnerable
    to injection. Be extra sure your variables are not controllable by external sources.'
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - airflow
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator
    shortlink: https://sg.run/ndBY
    semgrep.dev:
      rule:
        rule_id: 4bUkOY
        version_id: jQT9x4
        url: https://semgrep.dev/playground/r/jQT9x4/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command="..." + $CONCAT, ...)
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command="...".format(...), ...)
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command=f"...", ...)
  - pattern: |
      airflow.operators.bash_operator.BashOperator(..., bash_command="..." % $PARAMS, ...)
  - pattern: |
      $CMD = "..." % $PARAMS
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = $STR.format(...)
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = f"..."
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = "..." + $CONCAT
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
  - pattern: |
      $CMD = "..."
      ...
      $CMD += $CONCAT
      ...
      airflow.operators.bash_operator.BashOperator(..., bash_command=$CMD, ...)
- id: python.aws-lambda.security.tainted-code-exec.tainted-code-exec
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: eval($CODE, ...)
      - pattern: exec($CODE, ...)
  message: Detected the use of `exec/eval`.This can be dangerous if used to evaluate
    dynamic content. If this content can be input from outside the program, this may
    be a code injection vulnerability. Ensure evaluated content is not definable by
    external sources.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
    category: security
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.aws-lambda.security.tainted-code-exec.tainted-code-exec
    shortlink: https://sg.run/Ng7y
    semgrep.dev:
      rule:
        rule_id: GdUDJP
        version_id: d6TbZB
        url: https://semgrep.dev/playground/r/d6TbZB/python.aws-lambda.security.tainted-code-exec.tainted-code-exec
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.aws-lambda.security.tainted-html-response.tainted-html-response
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - pattern: $BODY
    - pattern-inside: |
        {..., "headers": {..., "Content-Type": "text/html", ...}, "body": $BODY, ... }
  message: Detected user input flowing into an HTML response. You may be accidentally
    bypassing secure methods of rendering HTML by manually constructing HTML and this
    could create a cross-site scripting vulnerability, which could let attackers steal
    sensitive user data.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - aws-lambda
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.tainted-html-response.tainted-html-response
    shortlink: https://sg.run/k9vP
    semgrep.dev:
      rule:
        rule_id: ReUKrk
        version_id: ZRTyrw
        url: https://semgrep.dev/playground/r/ZRTyrw/python.aws-lambda.security.tainted-html-response.tainted-html-response
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.ARC4(...)
  message: Detected ARC4 cipher algorithm which is considered insecure. The algorithm
    is considered weak and has been deprecated. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://tools.ietf.org/html/rfc5469
    category: security
    technology:
    - cryptography
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4
    shortlink: https://sg.run/xoZL
    semgrep.dev:
      rule:
        rule_id: KxU8gK
        version_id: 8KTLp4
        url: https://semgrep.dev/playground/r/8KTLp4/python.cryptography.security.insecure-cipher-algorithms-arc4.insecure-cipher-algorithm-arc4
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.Blowfish(...)
  message: Detected Blowfish cipher algorithm which is considered insecure. The algorithm
    is considered weak and has been deprecated. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://tools.ietf.org/html/rfc5469
    category: security
    technology:
    - cryptography
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish
    shortlink: https://sg.run/OdzL
    semgrep.dev:
      rule:
        rule_id: qNULvO
        version_id: gET5wA
        url: https://semgrep.dev/playground/r/gET5wA/python.cryptography.security.insecure-cipher-algorithms-blowfish.insecure-cipher-algorithm-blowfish
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5
  pattern: cryptography.hazmat.primitives.hashes.MD5(...)
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B303
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - cryptography
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5
    shortlink: https://sg.run/eY88
    semgrep.dev:
      rule:
        rule_id: lBUopp
        version_id: 44TYn2
        url: https://semgrep.dev/playground/r/44TYn2/python.cryptography.security.insecure-hash-algorithms-md5.insecure-hash-algorithm-md5
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.django.security.audit.templates.debug-template-tag.debug-template-tag
  languages:
  - generic
  severity: WARNING
  message: Detected a debug template tag in a Django template. This dumps debugging
    information to the page when debug mode is enabled. Showing debug information
    to users is dangerous because it may reveal information about your environment
    that malicious actors can use to gain access to the system. Remove the debug tag.
  pattern: '{% debug %}'
  metadata:
    owasp: A06:2017 - Security Misconfiguration
    cwe:
    - 'CWE-489: Active Debug Code'
    references:
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#debug
    - https://stackoverflow.com/questions/2213977/django-debug-display-all-variables-of-a-page
    category: security
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.templates.debug-template-tag.debug-template-tag
    shortlink: https://sg.run/dK3E
    semgrep.dev:
      rule:
        rule_id: QrUzb2
        version_id: K3T6O2
        url: https://semgrep.dev/playground/r/K3T6O2/python.django.security.audit.templates.debug-template-tag.debug-template-tag
        origin: community
- id: python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.dsa.generate_private_key($SIZE,
        ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: Detected an insufficient key size for DSA. NIST recommends a key size of
    2048 or higher.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    category: security
    technology:
    - cryptography
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size
    shortlink: https://sg.run/5Qb0
    semgrep.dev:
      rule:
        rule_id: KxUb0x
        version_id: JdTZd6
        url: https://semgrep.dev/playground/r/JdTZd6/python.cryptography.security.insufficient-dsa-key-size.insufficient-dsa-key-size
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  patterns:
  - pattern-either:
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key(...,
        key_size=$SIZE, ...)
    - pattern: cryptography.hazmat.primitives.asymmetric.rsa.generate_private_key($EXP,
        $SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: Detected an insufficient key size for RSA. NIST recommends a key size of
    2048 or higher.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    category: security
    technology:
    - cryptography
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size
    shortlink: https://sg.run/RoQq
    semgrep.dev:
      rule:
        rule_id: lBU9jn
        version_id: GxTWQo
        url: https://semgrep.dev/playground/r/GxTWQo/python.cryptography.security.insufficient-rsa-key-size.insufficient-rsa-key-size
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config
  patterns:
  - pattern-not-inside: |
      REST_FRAMEWORK = {
        ...,
        "DEFAULT_THROTTLE_RATES": ...
      }
  - pattern-inside: |
      REST_FRAMEWORK = ...
  - pattern: REST_FRAMEWORK
  message: Django REST framework configuration is missing default rate- limiting options.
    This could inadvertently allow resource starvation or Denial of Service (DoS)
    attacks. Add 'DEFAULT_THROTTLE_CLASSES' and 'DEFAULT_THROTTLE_RATES' to add rate-limiting
    to your application.
  metadata:
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    cwe:
    - 'CWE-400: Uncontrolled Resource Consumption'
    references:
    - https://www.django-rest-framework.org/api-guide/throttling/#setting-the-throttling-policy
    category: security
    technology:
    - django
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config
    shortlink: https://sg.run/vzBY
    semgrep.dev:
      rule:
        rule_id: gxU1wE
        version_id: qkTKkJ
        url: https://semgrep.dev/playground/r/qkTKkJ/python.django.security.audit.django-rest-framework.missing-throttle-config.missing-throttle-config
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe
  message: Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django
    not to apply escaping on the value returned by this filter (although the input
    is escaped). Used improperly, 'is_safe' could expose your application to cross-site
    scripting (XSS) vulnerabilities. Ensure this filter does not 1) add HTML characters,
    2) remove characters, or 3) use external data in any way. Consider instead removing
    'is_safe' and explicitly marking safe content with 'mark_safe()'.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/topics/security/#cross-site-scripting-xss-protection
    - https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping
    - https://stackoverflow.com/questions/7665512/why-use-is-safe
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe
    shortlink: https://sg.run/7o12
    semgrep.dev:
      rule:
        rule_id: JDUyd4
        version_id: 1QTX9r
        url: https://semgrep.dev/playground/r/1QTX9r/python.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe
        origin: community
  languages:
  - python
  severity: WARNING
  pattern: |-
    @register.filter(..., is_safe=True, ...)
    def $FILTER(...):
      ...
- id: python.django.security.audit.xss.html-magic-method.html-magic-method
  message: The `__html__` method indicates to the Django template engine that the
    value is 'safe' for rendering. This means that normal HTML escaping will not be
    applied to the return value. This exposes your application to cross-site scripting
    (XSS) vulnerabilities. If you need to render raw HTML, consider instead using
    `mark_safe()` which more clearly marks the intent to render raw HTML than a class
    with a magic method.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#conditional_escape
    - https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.html-magic-method.html-magic-method
    shortlink: https://sg.run/8y9N
    semgrep.dev:
      rule:
        rule_id: GdU7QO
        version_id: rxT8ZW
        url: https://semgrep.dev/playground/r/rxT8ZW/python.django.security.audit.xss.html-magic-method.html-magic-method
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      class $CLASS(...):
        ...
  - pattern: |
      def __html__(...):
        ...
- id: python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape
  languages:
  - generic
  severity: INFO
  message: Translated strings will not be escaped when rendered in a template. This
    leads to a vulnerability where translators could include malicious script tags
    in their translations. Consider using `force_escape` to explicitly escape a translated
    text.
  patterns:
  - pattern-either:
    - pattern: |
        {% blocktranslate...%}
    - pattern: |
        {% blocktrans...%}
  - pattern-not-inside: |
      {%...filter...force_escape...%}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {%...endfilter...%}
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates
    - https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape
    shortlink: https://sg.run/3xpK
    semgrep.dev:
      rule:
        rule_id: BYUNwg
        version_id: kbTZql
        url: https://semgrep.dev/playground/r/kbTZql/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape
        origin: community
- id: python.django.security.audit.xss.template-href-var.template-href-var
  message: Detected a template variable used in an anchor tag with the 'href' attribute.
    This allows a malicious actor to input the 'javascript:' URI and is subject to
    cross- site scripting (XSS) attacks. Use the 'url' template tag to safely generate
    a URL. You may also consider setting the Content Security Policy (CSP) header.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#url
    - https://content-security-policy.com/
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.template-href-var.template-href-var
    shortlink: https://sg.run/4x25
    semgrep.dev:
      rule:
        rule_id: DbUpDg
        version_id: w8T0Zb
        url: https://semgrep.dev/playground/r/w8T0Zb/python.django.security.audit.xss.template-href-var.template-href-var
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <a ...>
  - pattern-either:
    - pattern: href = '{{...}}'
    - pattern: href = "{{...}}"
    - pattern: href = {{...}}
- id: python.django.security.injection.code.user-eval-format-string.user-eval-format-string
  message: Found user data in a call to 'eval'. This is extremely dangerous because
    it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection
    for more information.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.code.user-eval-format-string.user-eval-format-string
    shortlink: https://sg.run/4x2z
    semgrep.dev:
      rule:
        rule_id: BYUNw9
        version_id: nWTwBe
        url: https://semgrep.dev/playground/r/nWTwBe/python.django.security.injection.code.user-eval-format-string.user-eval-format-string
        origin: community
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: eval(..., $STR % request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR % $V
        ...
        eval(..., $S, ...)
    - pattern: eval(..., "..." % request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR % $V
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR % request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR % $V
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR.format(..., request.$W.get(...), ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR.format(..., request.$W(...), ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        eval(..., $S, ...)
    - pattern: eval(..., $STR.format(..., request.$W[...], ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR.format(..., $V, ...)
        ...
        eval(..., $S, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = f"...{$V}..."
        ...
        eval(..., $S, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = f"...{$V}..."
        ...
        eval(..., $S, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = f"...{$V}..."
        ...
        eval(..., $S, ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.email.xss-html-email-body.xss-html-email-body
  message: Found request data in an EmailMessage that is set to use HTML. This is
    dangerous because HTML emails are susceptible to XSS. An attacker could inject
    data into this HTML email, causing XSS.
  metadata:
    cwe:
    - 'CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream
      Component (''Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://www.damonkohler.com/2008/12/email-injection.html
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body
    shortlink: https://sg.run/RoBe
    semgrep.dev:
      rule:
        rule_id: qNUj02
        version_id: 3ZTxoB
        url: https://semgrep.dev/playground/r/3ZTxoB/python.django.security.injection.email.xss-html-email-body.xss-html-email-body
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
        $EMAIL.content_subtype = "html"
        ...
  - pattern-either:
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W.get(...), ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W(...), ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W[...], ...)
    - pattern: django.core.mail.EmailMessage($SUBJ, request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, $B.$C(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $B.$C(..., $DATA, ...)
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.EmailMessage($SUBJ, f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.EmailMessage($SUBJ, $INTERM, ...)
    - pattern: $A = django.core.mail.EmailMessage($SUBJ, request.$W, ...)
    - pattern: return django.core.mail.EmailMessage($SUBJ, request.$W, ...)
- id: python.django.security.injection.mass-assignment.mass-assignment
  languages:
  - python
  severity: WARNING
  message: Mass assignment detected. This can result in assignment to model fields
    that are unintended and can be exploited by an attacker. Instead of using '**request.$W',
    assign each field you want to edit individually to prevent mass assignment. You
    can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html.
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    owaspapi: 'API6: Mass Assignment'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html
    category: security
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.mass-assignment.mass-assignment
    shortlink: https://sg.run/Ro0q
    semgrep.dev:
      rule:
        rule_id: lBU97n
        version_id: PkTnpo
        url: https://semgrep.dev/playground/r/PkTnpo/python.django.security.injection.mass-assignment.mass-assignment
        origin: community
  pattern-either:
  - pattern: $MODEL.objects.create(**request.$W)
  - pattern: |
      $OBJ.update(**request.$W)
      ...
      $OBJ.save()
- id: python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests
  message: Data from request object is passed to a new server-side request. This could
    lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes
    and hosts are validated against an allowlist, do not forward the response to the
    user, and ensure proper authentication and transport-layer security in the proxied
    request. See https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    to learn more about SSRF vulnerabilities.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests
    shortlink: https://sg.run/YvY4
    semgrep.dev:
      rule:
        rule_id: j2UvEw
        version_id: JdTZJ2
        url: https://semgrep.dev/playground/r/JdTZJ2/python.django.security.injection.ssrf.ssrf-injection-requests.ssrf-injection-requests
        origin: community
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: requests.$METHOD(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W.get(...), ...)
    - pattern: requests.$METHOD(..., f"...{request.$W.get(...)}...", ...)
    - pattern: requests.$METHOD(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W.get(...), ...)
    - pattern: return requests.$METHOD(..., request.$W.get(...), ...)
    - pattern: requests.$METHOD(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W(...), ...)
    - pattern: requests.$METHOD(..., f"...{request.$W(...)}...", ...)
    - pattern: requests.$METHOD(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W(...), ...)
    - pattern: return requests.$METHOD(..., request.$W(...), ...)
    - pattern: requests.$METHOD(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W[...], ...)
    - pattern: requests.$METHOD(..., f"...{request.$W[...]}...", ...)
    - pattern: requests.$METHOD(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W[...], ...)
    - pattern: return requests.$METHOD(..., request.$W[...], ...)
    - pattern: requests.$METHOD(..., $S.format(..., request.$W, ...), ...)
    - pattern: requests.$METHOD(..., $S % request.$W, ...)
    - pattern: requests.$METHOD(..., f"...{request.$W}...", ...)
    - pattern: requests.$METHOD(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        requests.$METHOD(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        requests.$METHOD(..., $INTERM, ...)
    - pattern: $A = requests.$METHOD(..., request.$W, ...)
    - pattern: return requests.$METHOD(..., request.$W, ...)
- id: python.flask.security.injection.user-eval.eval-injection
  languages:
  - python
  severity: ERROR
  message: Detected user data flowing into eval. This is code injection and should
    be avoided.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
    category: security
    technology:
    - flask
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection
    shortlink: https://sg.run/5QpX
    semgrep.dev:
      rule:
        rule_id: 0oU54W
        version_id: O9TZyD
        url: https://semgrep.dev/playground/r/O9TZyD/python.flask.security.injection.user-eval.eval-injection
        origin: community
  pattern-either:
  - patterns:
    - pattern: eval(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            eval(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            eval(..., <... $INTERM ...>, ...)
  - pattern: eval(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: eval(..., <... flask.request.$W[...] ...>, ...)
  - pattern: eval(..., <... flask.request.$W(...) ...>, ...)
  - pattern: eval(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W.get(...) ...>
        ...
        eval(..., <... $INTERM ...>, ...)
    - pattern: eval(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W[...] ...>
        ...
        eval(..., <... $INTERM ...>, ...)
    - pattern: eval(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W(...) ...>
        ...
        eval(..., <... $INTERM ...>, ...)
    - pattern: eval(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W ...>
        ...
        eval(..., <... $INTERM ...>, ...)
    - pattern: eval(...)
- id: python.flask.security.injection.user-exec.exec-injection
  languages:
  - python
  severity: ERROR
  message: Detected user data flowing into exec. This is code injection and should
    be avoided.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/exec_really_is_dangerous.html
    category: security
    technology:
    - flask
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection
    shortlink: https://sg.run/Ge42
    semgrep.dev:
      rule:
        rule_id: KxUbl2
        version_id: e1TAxz
        url: https://semgrep.dev/playground/r/e1TAxz/python.flask.security.injection.user-exec.exec-injection
        origin: community
  pattern-either:
  - patterns:
    - pattern: exec(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            exec(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            exec(..., <... $INTERM ...>, ...)
  - pattern: exec(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: exec(..., <... flask.request.$W[...] ...>, ...)
  - pattern: exec(..., <... flask.request.$W(...) ...>, ...)
  - pattern: exec(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W.get(...) ...>
        ...
        exec(..., <... $INTERM ...>, ...)
    - pattern: exec(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W[...] ...>
        ...
        exec(..., <... $INTERM ...>, ...)
    - pattern: exec(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W(...) ...>
        ...
        exec(..., <... $INTERM ...>, ...)
    - pattern: exec(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W ...>
        ...
        exec(..., <... $INTERM ...>, ...)
    - pattern: exec(...)
- id: python.flask.security.unescaped-template-extension.unescaped-template-extension
  message: Flask does not automatically escape Jinja templates unless they have .html,
    .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm,
    .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    for more information.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    source-rule-url: https://pypi.org/project/flake8-flask/
    references:
    - https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    - https://blog.r2c.dev/2020/bento-check-unescaped-template-extensions-in-flask/
    - https://bento.dev/checks/flask/unescaped-file-extension/
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension
    shortlink: https://sg.run/x1Rg
    semgrep.dev:
      rule:
        rule_id: EwU293
        version_id: nWTw7p
        url: https://semgrep.dev/playground/r/nWTw7p/python.flask.security.unescaped-template-extension.unescaped-template-extension
        origin: community
  patterns:
  - pattern-not: flask.render_template("=~/.+\.html$/", ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/", ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/", ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.html$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.xml$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.htm$/", ...)
  - pattern-not: flask.render_template($X + "=~/\.xhtml$/", ...)
  - pattern-not: flask.render_template("=~/.+\.html$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/" % $X, ...)
  - pattern-not: flask.render_template("=~/.+\.html$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.xml$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.htm$/".format(...), ...)
  - pattern-not: flask.render_template("=~/.+\.xhtml$/".format(...), ...)
  - pattern-not: flask.render_template($TEMPLATE)
  - pattern-either:
    - pattern: flask.render_template("...", ...)
    - pattern: flask.render_template($X + "...", ...)
    - pattern: flask.render_template("..." % $Y, ...)
    - pattern: flask.render_template("...".format(...), ...)
  languages:
  - python
  severity: WARNING
- id: python.flask.security.unsanitized-input.response-contains-unsanitized-input
  message: Flask response reflects unsanitized user input. This could lead to a cross-site
    scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which
    an attacker causes arbitrary code to be executed in the user's browser. To prevent,
    please sanitize the user input, e.g. by rendering the response in a Jinja2 template
    (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/).
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.0.x/security/
    - https://owasp.org/www-community/attacks/xss/
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.unsanitized-input.response-contains-unsanitized-input
    shortlink: https://sg.run/OPGn
    semgrep.dev:
      rule:
        rule_id: 7KUQLl
        version_id: ExTYnN
        url: https://semgrep.dev/playground/r/ExTYnN/python.flask.security.unsanitized-input.response-contains-unsanitized-input
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response("...".format($X))
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response(f"...{$X}...")
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response(f"...{$X}")
  - pattern: |
      $X = flask.request.args.get(...)
      ...
      flask.make_response(f"{$X}...")
- id: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2
  message: Detected direct use of jinja2. If not done properly, this may bypass HTML
    escaping which opens up the application to cross-site scripting (XSS) vulnerabilities.
    Prefer using the Flask method 'render_template()' and templates with a '.html'
    extension in order to prevent XSS.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://jinja.palletsprojects.com/en/2.11.x/api/#basics
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2
    shortlink: https://sg.run/RoKe
    semgrep.dev:
      rule:
        rule_id: qNUjN2
        version_id: 7ZTYOn
        url: https://semgrep.dev/playground/r/7ZTYOn/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: jinja2.Environment(...)
  - pattern: jinja2.Template.render(...)
  - patterns:
    - pattern-inside: |
        $TEMPLATE = $ENV.get_template(...)
        ...
    - pattern: $TEMPLATE.render(...)
  - patterns:
    - pattern-inside: |
        $TEMPLATE = jinja2.Template(...)
        ...
    - pattern: $TEMPLATE.render(...)
- id: python.django.security.audit.secure-cookies.django-secure-set-cookie
  patterns:
  - pattern-either:
    - pattern-inside: |
        import django.http.HttpResponse
        ...
    - pattern-inside: |
        import django.shortcuts.render
        ...
  - pattern-not-inside: |
      LANGUAGE_QUERY_PARAMETER = 'language'
      ...
      def set_language(request):
          ...
      # Exclude vendored contrib/messages/storage/cookie.py
  - pattern-not-inside: |
      class CookieStorage(django.contrib.messages.storage.base.BaseStorage):
          ...
      # Exclude cookies handled by vendored middleware
  - pattern-not: response.set_cookie(django.conf.settings.SESSION_COOKIE_NAME, ...)
  - pattern-not: response.set_cookie(django.conf.settings.CSRF_COOKIE_NAME, ...)
  - pattern-not: response.set_cookie(django.conf.settings.LANGUAGE_COOKIE_NAME, ...)
  - pattern-not: response.set_cookie(rest_framework_jwt.settings.api_settings.JWT_AUTH_COOKIE,
      ...)
  - pattern-not: response.set_cookie(..., secure=$A, httponly=$B, samesite=$C, ...)
  - pattern-not: response.set_cookie(..., **$A)
  - pattern: response.set_cookie(...)
  message: Django cookies should be handled securely by setting secure=True, httponly=True,
    and samesite='Lax' in response.set_cookie(...). If your situation calls for different
    settings, explicitly disable the setting. If you want to send the cookie over
    http, set secure=False. If you want to let client-side JavaScript read the cookie,
    set httponly=False. If you want to attach cookies to requests for external sites,
    set samesite=None.
  metadata:
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4 Missing Cookie Attributes
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    references:
    - https://docs.djangoproject.com/en/3.0/ref/request-response/#django.http.HttpResponse.set_cookie
    - https://blog.r2c.dev/2020/bento-check-keeping-cookies-safe-in-flask/
    - https://bento.dev/checks/flask/secure-set-cookie/
    category: security
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie
    shortlink: https://sg.run/x1WL
    semgrep.dev:
      rule:
        rule_id: 7KUQ2E
        version_id: BjTOxE
        url: https://semgrep.dev/playground/r/BjTOxE/python.django.security.audit.secure-cookies.django-secure-set-cookie
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: asyncio.create_subprocess_exec($PROG, $CMD, ...)
      - pattern: asyncio.create_subprocess_exec($PROG, [$CMD, ...], ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, $CMD, ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, [$CMD, ...], ...)
      - pattern: asyncio.create_subprocess_exec($PROG, "=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...)
      - pattern: asyncio.create_subprocess_exec($PROG, ["=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...], ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, "=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...)
      - pattern: asyncio.subprocess.create_subprocess_exec($PROG, ["=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...], ...)
  message: Detected 'create_subprocess_exec' function with argument tainted by `event`
    object. If this data can be controlled by a malicious actor, it may be an instance
    of command injection. Audit the use of this call to ensure it is not controllable
    by an external resource. You may consider using 'shlex.escape()'.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec
    - https://docs.python.org/3/library/shlex.html
    category: security
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec
    shortlink: https://sg.run/oyv0
    semgrep.dev:
      rule:
        rule_id: EwUrX8
        version_id: w8TOxj
        url: https://semgrep.dev/playground/r/w8TOxj/python.aws-lambda.security.dangerous-asyncio-create-exec.dangerous-asyncio-create-exec
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: $LOOP.subprocess_exec($PROTOCOL, $CMD, ...)
      - pattern: $LOOP.subprocess_exec($PROTOCOL, [$CMD, ...], ...)
      - pattern: $LOOP.subprocess_exec($PROTOCOL, "=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...)
      - pattern: $LOOP.subprocess_exec($PROTOCOL, ["=~/(sh|bash|ksh|csh|tcsh|zsh)/",
          "-c", $CMD, ...], ...)
  message: Detected subprocess function '$LOOP.subprocess_exec' with argument tainted
    by `event` object. If this data can be controlled by a malicious actor, it may
    be an instance of command injection. Audit the use of this call to ensure it is
    not controllable by an external resource. You may consider using 'shlex.escape()'.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec
    - https://docs.python.org/3/library/shlex.html
    category: security
    technology:
    - python
    - aws-lambda
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec
    shortlink: https://sg.run/z14d
    semgrep.dev:
      rule:
        rule_id: 7KUxXg
        version_id: xyTkeG
        url: https://semgrep.dev/playground/r/xyTkeG/python.aws-lambda.security.dangerous-asyncio-exec.dangerous-asyncio-exec
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.aws-lambda.security.mysql-sqli.mysql-sqli
  languages:
  - python
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `cursor.execute(''SELECT
    * FROM projects WHERE status = %s'', (''active''))`'
  mode: taint
  metadata:
    references:
    - https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-execute.html
    - https://dev.mysql.com/doc/connector-python/en/connector-python-api-mysqlcursor-executemany.html
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - mysql
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.mysql-sqli.mysql-sqli
    shortlink: https://sg.run/1RjG
    semgrep.dev:
      rule:
        rule_id: 3qU3eE
        version_id: nWTv42
        url: https://semgrep.dev/playground/r/nWTv42/python.aws-lambda.security.mysql-sqli.mysql-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $CURSOR.execute($QUERY,...)
      - pattern: $CURSOR.executemany($QUERY,...)
    - pattern-either:
      - pattern-inside: |
          import mysql
          ...
      - pattern-inside: |
          import mysql.cursors
          ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  severity: WARNING
- id: python.aws-lambda.security.psycopg-sqli.psycopg-sqli
  languages:
  - python
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `cursor.execute(''SELECT
    * FROM projects WHERE status = %s'', ''active'')`'
  mode: taint
  metadata:
    references:
    - https://www.psycopg.org/docs/cursor.html#cursor.execute
    - https://www.psycopg.org/docs/cursor.html#cursor.executemany
    - https://www.psycopg.org/docs/cursor.html#cursor.mogrify
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - psycopg
    - psycopg2
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.psycopg-sqli.psycopg-sqli
    shortlink: https://sg.run/9L8r
    semgrep.dev:
      rule:
        rule_id: 4bUQG1
        version_id: ExTzDo
        url: https://semgrep.dev/playground/r/ExTzDo/python.aws-lambda.security.psycopg-sqli.psycopg-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: $CURSOR.execute($QUERY,...)
      - pattern: $CURSOR.executemany($QUERY,...)
      - pattern: $CURSOR.mogrify($QUERY,...)
    - pattern-inside: |
        import psycopg2
        ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  severity: WARNING
- id: python.aws-lambda.security.pymssql-sqli.pymssql-sqli
  languages:
  - python
  message: 'Detected SQL statement that is tainted by `event` object. This could lead
    to SQL injection if the variable is user-controlled and not properly sanitized.
    In order to prevent SQL injection, use parameterized queries or prepared statements
    instead. You can use parameterized statements like so: `cursor.execute(''SELECT
    * FROM projects WHERE status = %s'', ''active'')`'
  mode: taint
  metadata:
    references:
    - https://pypi.org/project/pymssql/
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    - pymssql
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.pymssql-sqli.pymssql-sqli
    shortlink: https://sg.run/yXvP
    semgrep.dev:
      rule:
        rule_id: PeUxO0
        version_id: 7ZTk9K
        url: https://semgrep.dev/playground/r/7ZTk9K/python.aws-lambda.security.pymssql-sqli.pymssql-sqli
        origin: community
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern: $CURSOR.execute($QUERY,...)
    - pattern-inside: |
        import pymssql
        ...
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  severity: WARNING
- id: python.django.security.nan-injection.nan-injection
  message: Found user input going directly into typecast for bool(), float(), or complex().
    This allows an attacker to inject Python's not-a-number (NaN) into the typecast.
    This results in undefind behavior, particularly when doing comparisons. Either
    cast to a different type, or add a guard checking for all capitalizations of the
    string 'nan'.
  languages:
  - python
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        def $FUNC(request, ...):
          ...
    - pattern-either:
      - pattern: request.$PROPERTY.get(...)
      - pattern: request.$PROPERTY[...]
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: float(...)
      - pattern: bool(...)
      - pattern: complex(...)
    - pattern-not-inside: |
        if $COND:
          ...
        ...
  pattern-sanitizers:
  - pattern: $ANYTHING(...)
    not_conflicting: true
  metadata:
    references:
    - https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868
    - https://blog.bitdiscovery.com/2021/12/python-nan-injection/
    category: security
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    technology:
    - django
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.nan-injection.nan-injection
    shortlink: https://sg.run/Og7L
    semgrep.dev:
      rule:
        rule_id: DbUGvk
        version_id: jQT7QB
        url: https://semgrep.dev/playground/r/jQT7QB/python.django.security.nan-injection.nan-injection
        origin: community
- id: python.flask.security.injection.nan-injection.nan-injection
  message: Found user input going directly into typecast for bool(), float(), or complex().
    This allows an attacker to inject Python's not-a-number (NaN) into the typecast.
    This results in undefind behavior, particularly when doing comparisons. Either
    cast to a different type, or add a guard checking for all capitalizations of the
    string 'nan'.
  languages:
  - python
  severity: ERROR
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: flask.request.$SOMETHING.get(...)
    - pattern: flask.request.$SOMETHING[...]
    - patterns:
      - pattern-inside: |
          @$APP.route(...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
      - pattern: $ROUTEVAR
  pattern-sinks:
  - pattern-either:
    - pattern: float(...)
    - pattern: bool(...)
    - pattern: complex(...)
  pattern-sanitizers:
  - not_conflicting: true
    pattern: $ANYTHING(...)
  metadata:
    references:
    - https://discuss.python.org/t/nan-breaks-min-max-and-sorting-functions-a-solution/2868
    - https://blog.bitdiscovery.com/2021/12/python-nan-injection/
    category: security
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    technology:
    - flask
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.nan-injection.nan-injection
    shortlink: https://sg.run/e598
    semgrep.dev:
      rule:
        rule_id: WAUdj7
        version_id: 1QTq5E
        url: https://semgrep.dev/playground/r/1QTq5E/python.flask.security.injection.nan-injection.nan-injection
        origin: community
- id: python.django.security.injection.open-redirect.open-redirect
  message: Data from request ($DATA) is passed to redirect(). This is an open redirect
    and could be exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url().
    See https://cwe.mitre.org/data/definitions/601.html for more information.
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://www.djm.org.uk/posts/djangos-little-protections-word-redirect-dangers/
    - https://github.com/django/django/blob/d1b7bd030b1db111e1a3505b1fc029ab964382cc/django/utils/http.py#L231
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.open-redirect.open-redirect
    shortlink: https://sg.run/Ave2
    semgrep.dev:
      rule:
        rule_id: PeUZgr
        version_id: l4TDGZ
        url: https://semgrep.dev/playground/r/l4TDGZ/python.django.security.injection.open-redirect.open-redirect
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-not-inside: |
      def $FUNC(...):
        ...
        django.utils.http.is_safe_url(...)
        ...
  - pattern-not-inside: |
      def $FUNC(...):
        ...
        if <... django.utils.http.is_safe_url(...) ...>:
          ...
  - pattern-not-inside: |
      def $FUNC(...):
        ...
        django.utils.http.url_has_allowed_host_and_scheme(...)
        ...
  - pattern-not-inside: |
      def $FUNC(...):
        ...
        if <... django.utils.http.url_has_allowed_host_and_scheme(...) ...>:
          ...
  - pattern-either:
    - pattern: django.shortcuts.redirect(..., request.$W.get(...), ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W.get(...), ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W.get(...)}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W.get(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W.get(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: return django.shortcuts.redirect(..., request.$W.get(...), ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W.get(...), ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.shortcuts.redirect(..., request.$W(...), ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W(...), ...),
        ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W(...), ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W(...), ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W(...)}...", ...)
    - pattern: return django.shortcuts.redirect(..., request.$W(...), ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W(...), ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W(...)}...", ...)
    - pattern: django.shortcuts.redirect(..., request.$W[...], ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W[...], ...),
        ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W[...], ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W[...], ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W[...], ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W[...]}...", ...)
    - pattern: return django.shortcuts.redirect(..., request.$W[...], ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W[...], ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W[...]}...", ...)
    - pattern: django.shortcuts.redirect(..., request.$W, ...)
    - pattern: django.shortcuts.redirect(..., $S.format(..., request.$W, ...), ...)
    - pattern: django.shortcuts.redirect(..., $S % request.$W, ...)
    - pattern: django.shortcuts.redirect(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.shortcuts.redirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.shortcuts.redirect(..., $INTERM, ...)
    - pattern: $A = django.shortcuts.redirect(..., request.$W, ...)
    - pattern: $A = django.shortcuts.redirect(..., $S.format(..., request.$W, ...),
        ...)
    - pattern: $A = django.shortcuts.redirect(..., $S % request.$W, ...)
    - pattern: $A = django.shortcuts.redirect(..., f"...{request.$W}...", ...)
    - pattern: return django.shortcuts.redirect(..., request.$W, ...)
    - pattern: return django.shortcuts.redirect(..., $S.format(..., request.$W, ...),
        ...)
    - pattern: return django.shortcuts.redirect(..., $S % request.$W, ...)
    - pattern: return django.shortcuts.redirect(..., f"...{request.$W}...", ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W.get(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W.get(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W.get(...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W.get(...),
        ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W.get(...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W.get(...),
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W.get(...),
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W.get(...)}...",
        ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W(...)}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W(...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W(...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W(...)}...",
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W(...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W(...),
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W(...),
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W(...)}...",
        ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W[...], ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W[...]}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W[...], ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W[...], ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W[...]}...",
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W[...], ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W[...],
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W[...],
        ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W[...]}...",
        ...)
    - pattern: django.http.HttpResponseRedirect(..., request.$W, ...)
    - pattern: django.http.HttpResponseRedirect(..., $S.format(..., request.$W, ...),
        ...)
    - pattern: django.http.HttpResponseRedirect(..., $S % request.$W, ...)
    - pattern: django.http.HttpResponseRedirect(..., f"...{request.$W}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.HttpResponseRedirect(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.http.HttpResponseRedirect(..., $INTERM, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., request.$W, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., $S % request.$W, ...)
    - pattern: $A = django.http.HttpResponseRedirect(..., f"...{request.$W}...", ...)
    - pattern: return django.http.HttpResponseRedirect(..., request.$W, ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S.format(..., request.$W,
        ...), ...)
    - pattern: return django.http.HttpResponseRedirect(..., $S % request.$W, ...)
    - pattern: return django.http.HttpResponseRedirect(..., f"...{request.$W}...",
        ...)
  - metavariable-regex:
      metavariable: $W
      regex: (?!get_full_path)
- id: python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off
  message: Detected a segment of a Flask template where autoescaping is explicitly
    disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this
    segment. Ensure no user data is rendered here, otherwise this is a cross-site
    scripting (XSS) vulnerability, or turn autoescape on.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping
    - https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off
    shortlink: https://sg.run/Bkn2
    semgrep.dev:
      rule:
        rule_id: YGURo6
        version_id: 8KTLbN
        url: https://semgrep.dev/playground/r/8KTLbN/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off
        origin: community
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{%\s*autoescape\s+false\s*%}'
- id: python.flask.security.xss.audit.template-href-var.template-href-var
  message: Detected a template variable used in an anchor tag with the 'href' attribute.
    This allows a malicious actor to input the 'javascript:' URI and is subject to
    cross- site scripting (XSS) attacks. Use 'url_for()' to safely generate a URL.
    You may also consider setting the Content Security Policy (CSP) header.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss
    - https://content-security-policy.com/
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.xss.audit.template-href-var.template-href-var
    shortlink: https://sg.run/Do7o
    semgrep.dev:
      rule:
        rule_id: 6JUjej
        version_id: gET5qr
        url: https://semgrep.dev/playground/r/gET5qr/python.flask.security.xss.audit.template-href-var.template-href-var
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <a ...>
  - pattern-either:
    - pattern: href = {{ ... }}
    - pattern: href = "{{ ... }}"
    - pattern: href = '{{ ... }}'
  - pattern-not-inside: href = {{ url_for(...) ... }}
  - pattern-not-inside: href = "{{ url_for(...) ... }}"
  - pattern-not-inside: href = '{{ url_for(...) ... }}'
- id: python.lang.security.audit.formatted-sql-query.formatted-sql-query
  message: Detected possible formatted SQL query. Use parameterized queries instead.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://stackoverflow.com/questions/775296/mysql-parameterized-queries
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.formatted-sql-query.formatted-sql-query
    shortlink: https://sg.run/EkWw
    semgrep.dev:
      rule:
        rule_id: 3qUP9k
        version_id: vdT3k4
        url: https://semgrep.dev/playground/r/vdT3k4/python.lang.security.audit.formatted-sql-query.formatted-sql-query
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: $DB.execute("..." % ...)
  - pattern: $DB.execute("...".format(...))
  - pattern: $DB.execute(f"...")
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = "..." % ...
          ...
      - pattern-inside: |
          $SQL = "...".format(...)
          ...
      - pattern-inside: |
          $SQL = f"...{$X}..."
          ...
    - pattern: $DB.execute($SQL)
- id: python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument
  message: Hardcoded password is used as a default argument to '$FUNC'. This could
    be dangerous if a real password is not supplied.
  languages:
  - python
  severity: WARNING
  pattern: |
    def $FUNC(..., password="...", ...):
      ...
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    category: security
    technology:
    - python
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument
    shortlink: https://sg.run/Lw9r
    semgrep.dev:
      rule:
        rule_id: PeUZAW
        version_id: ZRTyEe
        url: https://semgrep.dev/playground/r/ZRTyEe/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument
        origin: community
- id: python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
  message: The HTTPSConnection API has changed frequently with minor releases of Python.
    Ensure you are using the API for your version of Python securely. For example,
    Python 3 versions prior to 3.4.3 will not verify SSL certificates by default.
    See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    for more information.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    references:
    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
    shortlink: https://sg.run/8yby
    semgrep.dev:
      rule:
        rule_id: JDUy7y
        version_id: nWTwep
        url: https://semgrep.dev/playground/r/nWTwep/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: httplib.HTTPSConnection(...)
  - pattern: http.client.HTTPSConnection(...)
  - pattern: six.moves.http_client.HTTPSConnection(...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open.insecure-urlopener-open
  message: Detected an unsecured transmission channel. 'URLopener.open(...)' is being
    used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open.insecure-urlopener-open
    shortlink: https://sg.run/pxWg
    semgrep.dev:
      rule:
        rule_id: yyUnwW
        version_id: A8TnY1
        url: https://semgrep.dev/playground/r/A8TnY1/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open.insecure-urlopener-open
        origin: community
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.URLopener(...).open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.URLopener(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp.insecure-urlretrieve-ftp
  message: Detected 'urllib.urlretrieve()' using 'ftp://'. This request will not be
    encrypted. Use SFTP instead. urllib does not support SFTP, so consider switching
    to a library which supports SFTP.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp.insecure-urlretrieve-ftp
    shortlink: https://sg.run/jR8Y
    semgrep.dev:
      rule:
        rule_id: NbUknL
        version_id: WrT6xD
        url: https://semgrep.dev/playground/r/WrT6xD/python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve-ftp.insecure-urlretrieve-ftp
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.urlretrieve("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.urlretrieve($URL, ...)
  - pattern: |-
      def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlretrieve($URL, ...)
- id: python.lang.security.audit.mako-templates-detected.mako-templates-detected
  pattern: mako.template.Template(...)
  message: Mako templates do not provide a global HTML escaping mechanism. This means
    you must escape all sensitive data in your templates using '| u' for URL escaping
    or '| h' for HTML escaping. If you are using Mako to serve web content, consider
    using a system such as Jinja2 which enables global escaping.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/mako_templates.py
    references:
    - https://docs.makotemplates.org/en/latest/syntax.html#expression-escaping
    - https://jinja.palletsprojects.com/en/2.11.x/intro/#
    category: security
    technology:
    - mako
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected
    shortlink: https://sg.run/Q5v4
    semgrep.dev:
      rule:
        rule_id: GdU79Z
        version_id: l4TNPG
        url: https://semgrep.dev/playground/r/l4TNPG/python.lang.security.audit.mako-templates-detected.mako-templates-detected
        origin: community
  languages:
  - python
  severity: INFO
- id: python.lang.security.audit.marshal.marshal-usage
  languages:
  - python
  message: 'The marshal module is not intended to be secure against erroneous or maliciously
    constructed data. Never unmarshal data received from an untrusted or unauthenticated
    source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security'
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/marshal.html?highlight=security
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage
    shortlink: https://sg.run/3xor
    semgrep.dev:
      rule:
        rule_id: ReUg13
        version_id: YDT8P9
        url: https://semgrep.dev/playground/r/YDT8P9/python.lang.security.audit.marshal.marshal-usage
        origin: community
  pattern-either:
  - pattern: marshal.dump(...)
  - pattern: marshal.dumps(...)
  - pattern: marshal.load(...)
  - pattern: marshal.loads(...)
  severity: WARNING
- id: python.lang.security.audit.network.http-not-https-connection.http-not-https-connection
  message: Detected HTTPConnectionPool. This will transmit data in cleartext. It is
    recommended to use HTTPSConnectionPool instead for to encrypt communications.
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://urllib3.readthedocs.io/en/1.2.1/pools.html#urllib3.connectionpool.HTTPSConnectionPool
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection
    shortlink: https://sg.run/N4Np
    semgrep.dev:
      rule:
        rule_id: v8UnWQ
        version_id: RGTwvl
        url: https://semgrep.dev/playground/r/RGTwvl/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: urllib3.HTTPConnectionPool(...)
  - pattern: urllib3.connectionpool.HTTPConnectionPool(...)
- id: python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
  - pattern: $CLIENT.exec_command(...)
  - pattern-not: $CLIENT.exec_command("...", ...)
  message: Unverified SSL context detected. This will permit insecure connections
    without verifying SSL certificates. Use 'ssl.create_default_context()' instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    references:
    - http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.SSHClient.exec_command
    - https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/plugins/injection_paramiko.py
    category: security
    technology:
    - paramiko
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command
    shortlink: https://sg.run/kXQ7
    semgrep.dev:
      rule:
        rule_id: d8Uj9x
        version_id: BjTGYw
        url: https://semgrep.dev/playground/r/BjTGYw/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command
        origin: community
  severity: ERROR
  languages:
  - python
- id: python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key
  patterns:
  - pattern-inside: |
      $CLIENT = paramiko.client.SSHClient(...)
      ...
      $CLIENT.set_missing_host_key_policy(...)
  - pattern-either:
    - pattern: paramiko.client.AutoAddPolicy
    - pattern: paramiko.client.WarningPolicy
  message: Detected a paramiko host key policy that implicitly trusts a server's host
    key. Host keys should be verified to ensure the connection is not to a malicious
    server. Use RejectPolicy or a custom subclass instead.
  metadata:
    cwe:
    - 'CWE-322: Key Exchange without Entity Authentication'
    owasp:
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/ssh_no_host_key_verification.py
    references:
    - http://docs.paramiko.org/en/stable/api/client.html#paramiko.client.AutoAddPolicy
    category: security
    technology:
    - paramiko
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key
    shortlink: https://sg.run/4xpl
    semgrep.dev:
      rule:
        rule_id: AbUzbe
        version_id: DkTe8O
        url: https://semgrep.dev/playground/r/DkTe8O/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish
  message: Detected Blowfish cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish
    shortlink: https://sg.run/dlOE
    semgrep.dev:
      rule:
        rule_id: JDUGnK
        version_id: LjTp6W
        url: https://semgrep.dev/playground/r/LjTp6W/python.pycryptodome.security.insecure-cipher-algorithm-blowfish.insecure-cipher-algorithm-blowfish
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Cryptodome.Cipher.Blowfish.new(...)
  - pattern: Crypto.Cipher.Blowfish.new(...)
- id: python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des
  message: Detected DES cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://cwe.mitre.org/data/definitions/326.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des
    shortlink: https://sg.run/Z5bw
    semgrep.dev:
      rule:
        rule_id: 5rUr73
        version_id: 8KTLe6
        url: https://semgrep.dev/playground/r/8KTLe6/python.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Cryptodome.Cipher.DES.new(...)
  - pattern: Crypto.Cipher.DES.new(...)
- id: python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2
  message: Detected RC2 cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://cwe.mitre.org/data/definitions/326.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2
    shortlink: https://sg.run/nAbY
    semgrep.dev:
      rule:
        rule_id: GdUYlW
        version_id: gET59j
        url: https://semgrep.dev/playground/r/gET59j/python.pycryptodome.security.insecure-cipher-algorithm-rc2.insecure-cipher-algorithm-rc2
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Cryptodome.Cipher.ARC2.new(...)
  - pattern: Crypto.Cipher.ARC2.new(...)
- id: python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4
  message: Detected ARC4 cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://cwe.mitre.org/data/definitions/326.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4
    shortlink: https://sg.run/Eo6N
    semgrep.dev:
      rule:
        rule_id: ReUnEB
        version_id: QkTQKP
        url: https://semgrep.dev/playground/r/QkTQKP/python.pycryptodome.security.insecure-cipher-algorithm-rc4.insecure-cipher-algorithm-rc4
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Cryptodome.Cipher.ARC4.new(...)
  - pattern: Crypto.Cipher.ARC4.new(...)
- id: python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2
  message: Detected MD2 hash algorithm which is considered insecure. MD2 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2
    shortlink: https://sg.run/7JP2
    semgrep.dev:
      rule:
        rule_id: AbU0Ex
        version_id: 44TYvr
        url: https://semgrep.dev/playground/r/44TYvr/python.pycryptodome.security.insecure-hash-algorithm-md2.insecure-hash-algorithm-md2
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Crypto.Hash.MD2.new(...)
  - pattern: Cryptodome.Hash.MD2.new (...)
- id: python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4
  message: Detected MD4 hash algorithm which is considered insecure. MD4 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4
    shortlink: https://sg.run/Lve6
    semgrep.dev:
      rule:
        rule_id: BYUJy4
        version_id: PkTnAP
        url: https://semgrep.dev/playground/r/PkTnAP/python.pycryptodome.security.insecure-hash-algorithm-md4.insecure-hash-algorithm-md4
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Crypto.Hash.MD4.new(...)
  - pattern: Cryptodome.Hash.MD4.new (...)
- id: python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5
    shortlink: https://sg.run/85JN
    semgrep.dev:
      rule:
        rule_id: DbUXwo
        version_id: JdTZ7r
        url: https://semgrep.dev/playground/r/JdTZ7r/python.pycryptodome.security.insecure-hash-algorithm-md5.insecure-hash-algorithm-md5
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Crypto.Hash.MD5.new(...)
  - pattern: Cryptodome.Hash.MD5.new (...)
- id: python.lang.security.audit.sqli.pg8000-sqli.pg8000-sqli
  languages:
  - python
  message: 'Detected string concatenation with a non-literal variable in a pg8000
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can create parameterized queries like
    so: ''conn.run("SELECT :value FROM table", value=myvalue)''. You can also create
    prepared statements with ''conn.prepare'': ''conn.prepare("SELECT (:v) FROM table")'''
  metadata:
    references:
    - https://github.com/tlocke/pg8000
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - pg8000
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.sqli.pg8000-sqli.pg8000-sqli
    shortlink: https://sg.run/KWAL
    semgrep.dev:
      rule:
        rule_id: 0oUEKo
        version_id: qkT31E
        url: https://semgrep.dev/playground/r/qkT31E/python.lang.security.audit.sqli.pg8000-sqli.pg8000-sqli
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CONN.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CONN.$METHOD(..., $X + $Y, ...)
    - pattern: $CONN.$METHOD(..., '...'.format(...), ...)
    - pattern: $CONN.$METHOD(..., '...' % (...), ...)
    - pattern: $CONN.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = pg8000.native.Connection(...)
        ...
    - pattern-inside: |
        $CONN = pg8000.dhapi.connect(...)
        ...
    - pattern-inside: |
        $CONN1 = pg8000.connect(...)
        ...
        $CONN = $CONN1.cursor(...)
        ...
    - pattern-inside: |
        $CONN = pg8000.connect(...)
        ...
  - pattern-not: $CONN.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CONN.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CONN.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(run|execute|executemany|prepare)$
  severity: WARNING
- id: python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
  languages:
  - python
  message: 'Detected string concatenation with a non-literal variable in a psycopg2
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can use prepared statements by creating
    a ''sql.SQL'' string. You can also use the pyformat binding style to create parameterized
    queries. For example: ''cur.execute(SELECT * FROM table WHERE name=%s, user_input)'''
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://www.psycopg.org/docs/sql.html
    category: security
    technology:
    - psycopg
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
    shortlink: https://sg.run/qrLe
    semgrep.dev:
      rule:
        rule_id: KxU4Kg
        version_id: l4TGrb
        url: https://semgrep.dev/playground/r/l4TGrb/python.lang.security.audit.sqli.psycopg-sqli.psycopg-sqli
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CUR.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CUR.$METHOD(..., $X + $Y, ...)
    - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
    - pattern: $CUR.$METHOD(..., '...' % (...), ...)
    - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = psycopg2.connect(...)
        ...
        $CUR = $CONN.cursor(...)
        ...
    - pattern-inside: |
        $CONN = psycopg2.connect(...)
        ...
        with $CONN.cursor(...) as $CUR:
          ...
  - pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CUR.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(execute|executemany|mogrify)$
  severity: WARNING
- id: php.laravel.security.laravel-code-injection.laravel-code-injection
  message: The application might dynamically evaluate untrusted input, which can lead
    to a code injection vulnerability. An attacker can execute arbitrary code, potentially
    gaining complete control of the system. To prevent this vulnerability, avoid executing
    code containing user input. If this is unavoidable, validate and sanitize the
    input, and use safe alternatives for evaluating user input.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    cwe2022-top25: true
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    references:
    - https://owasp.org/www-community/attacks/Code_Injection
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-code-injection.laravel-code-injection
    shortlink: https://sg.run/PBX3
    semgrep.dev:
      rule:
        rule_id: QrU2Nw
        version_id: l4TD38
        url: https://semgrep.dev/playground/r/l4TD38/php.laravel.security.laravel-code-injection.laravel-code-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: assert($INPUT,...)
      - pattern: create_function($INPUT,...)
      - pattern: create_function($X, $INPUT,...)
      - pattern: eval($INPUT)
    - focus-metavariable: $INPUT
- id: php.laravel.security.laravel-command-injection.laravel-command-injection
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the user input, and use safe methods for executing the commands.
    In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)`
    to correctly sanitize input when used respectively as system commands or command
    arguments.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    references:
    - https://www.php.net/manual/en/ref.exec.php
    - https://www.php.net/manual/en/ref.filesystem.php
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-command-injection.laravel-command-injection
    shortlink: https://sg.run/JPYR
    semgrep.dev:
      rule:
        rule_id: 3qUbw4
        version_id: JdTROl
        url: https://semgrep.dev/playground/r/JdTROl/php.laravel.security.laravel-command-injection.laravel-command-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: system($SINK, ...)
      - pattern: exec($SINK, ...)
      - pattern: shell_exec($SINK)
      - pattern: passthru($SINK, ...)
      - pattern: pcntl_exec($SINK, ...)
      - pattern: proc_open($SINK, ...)
      - pattern: popen($SINK, ...)
      - pattern: expect_popen($SINK, ...)
      - pattern: w32api_invoke_function($SINK, ...)
      - pattern: w32api_register_function($X, $SINK, ...)
    - focus-metavariable: $SINK
  - pattern: |
      `...`
  pattern-sanitizers:
  - pattern: escapeshellcmd(...)
  - pattern: escapeshellarg(...)
- id: php.laravel.security.laravel-mail-command-injection.laravel-mail-command-injection
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the user input, and use safe methods for executing the commands.
    In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)`
    to correctly sanitize input when used respectively as system commands or command
    arguments.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    references:
    - https://www.php.net/manual/en/function.mb-send-mail.php
    - https://www.php.net/manual/en/function.mail.php
    - https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html
    - https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-mail-command-injection.laravel-mail-command-injection
    shortlink: https://sg.run/5vkK
    semgrep.dev:
      rule:
        rule_id: 4bU8q9
        version_id: GxTXbP
        url: https://semgrep.dev/playground/r/GxTXbP/php.laravel.security.laravel-mail-command-injection.laravel-mail-command-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: mail($TO, $SUB, $MSG, $HEADERS, $PARAMS, ...)
      - pattern: mb_send_mail($TO, $SUB, $MSG, $HEADERS, $PARAMS, ...)
    - focus-metavariable: $PARAMS
  pattern-sanitizers:
  - pattern: escapeshellarg(...)
- id: javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization
  message: '`$STR.replace` method will only replace the first occurrence when used
    with a string argument ($CHAR). If this method is used for escaping of dangerous
    data then there is a possibility for a bypass. Try to use sanitization library
    instead or use a Regex with a global flag.'
  metadata:
    cwe:
    - 'CWE-116: Improper Encoding or Escaping of Output'
    category: security
    technology:
    - javascript
    owasp:
    - A03:2021 - Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization
    shortlink: https://sg.run/1GbQ
    semgrep.dev:
      rule:
        rule_id: d8UlRq
        version_id: 0bT35j
        url: https://semgrep.dev/playground/r/0bT35j/javascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern: |
      $STR.replace(($CHAR: string), ...)
  - metavariable-regex:
      metavariable: $CHAR
      regex: ^[\"\']([\'\"\<\>\*\|\{\}\[\]\%\$]{1}|\\n|\\r|\\t|\\&)[\"\']$
- id: csharp.razor.security.html-raw-json.html-raw-json
  patterns:
  - pattern-either:
    - pattern: '@Html.Raw(Json.Encode(...))'
    - pattern: '@Html.Raw(JsonConvert.SerializeObject(...))'
    - pattern: '@Html.Raw(...ToJson(...))'
  message: Unencoded JSON in HTML context is vulnerable to cross-site scripting, because
    `</script>` is not properly encoded.
  languages:
  - generic
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    technology:
    - razor
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.razor.security.html-raw-json.html-raw-json
    shortlink: https://sg.run/P86E
    semgrep.dev:
      rule:
        rule_id: lBUzPw
        version_id: gETLn3
        url: https://semgrep.dev/playground/r/gETLn3/csharp.razor.security.html-raw-json.html-raw-json
        origin: community
  paths:
    include:
    - '*.cshtml'
  severity: ERROR
- id: generic.secrets.security.detected-slack-webhook.detected-slack-webhook
  pattern-regex: https://hooks\.slack\.com/services/T[a-zA-Z0-9_]{8,10}/B[a-zA-Z0-9_]{8,10}/[a-zA-Z0-9_]{24}
  languages:
  - regex
  message: Slack Webhook detected
  severity: ERROR
  metadata:
    references:
    - https://api.slack.com/messaging/webhooks
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - slack
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-slack-webhook.detected-slack-webhook
    shortlink: https://sg.run/weWX
    semgrep.dev:
      rule:
        rule_id: gxU1dy
        version_id: K3TP14
        url: https://semgrep.dev/playground/r/K3TP14/generic.secrets.security.detected-slack-webhook.detected-slack-webhook
        origin: community
- id: swift.cryptoswift.aes-hardcoded-secret.aes-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - AES
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.aes-hardcoded-secret.aes-hardcoded-secret
    shortlink: https://sg.run/3WBr
    semgrep.dev:
      rule:
        rule_id: WAU8dy
        version_id: l4TDBR
        url: https://semgrep.dev/playground/r/l4TDBR/swift.cryptoswift.aes-hardcoded-secret.aes-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try AES(key: $PASSWORD, ...);
        - pattern: |
            AES(key: $PASSWORD, ...);
    - pattern: |
        try AES(key: "...", ...);
    - pattern: |
        AES(key: "...", ...);
    - pattern: |
        AES(key: Array("...".utf8), ...);
    - pattern: |
        try AES(key: Array("...".utf8), ...);
- id: swift.cryptoswift.pkcs5-hardcoded-secret.pkcs5-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - PKCS5
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.pkcs5-hardcoded-secret.pkcs5-hardcoded-secret
    shortlink: https://sg.run/40Dl
    semgrep.dev:
      rule:
        rule_id: 0oUowr
        version_id: GxTX9G
        url: https://semgrep.dev/playground/r/GxTX9G/swift.cryptoswift.pkcs5-hardcoded-secret.pkcs5-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try PKCS5.$FUNC(password: $PASSWORD, ...);
        - pattern: |
            PKCS5.$FUNC(password: $PASSWORD, ...);
    - pattern: |
        try PKCS5.$FUNC(password: "...", ...);
    - pattern: |
        PKCS5.$FUNC(password: "...", ...);
    - pattern: |
        try PKCS5.$FUNC(password: Array("...".utf8), ...);
    - pattern: |
        PKCS5.$FUNC(password: Array("...".utf8), ...);
- id: csharp.lang.security.sqli.csharp-sqli.csharp-sqli
  patterns:
  - metavariable-regex:
      metavariable: $PATTERN
      regex: ^(SqlCommand|CommandText|OleDbCommand|OdbcCommand|OracleCommand)$
  - pattern-either:
    - patterns:
      - pattern-inside: |
          StringBuilder $SB = new StringBuilder(...);
          ...
          $S.$PATTERN = $SB.ToString();
      - pattern: $S.$PATTERN = $SB.ToString();
    - patterns:
      - pattern-inside: |
          StringBuilder $SB = new StringBuilder(...);
          ...
          $PATTERN $X = new $PATTERN($SB.ToString(),...);
      - pattern: $PATTERN $X = new $PATTERN($SB.ToString(),...);
    - pattern: |
        $S.$PATTERN = string.Format(...);
    - pattern: |
        $S.$PATTERN = string.Concat(...);
    - pattern: |
        $S.$PATTERN  = String.Format(...);
    - pattern: |
        $S.$PATTERN  = String.Concat(...);
    - pattern: |
        $S = string.Concat(...);
        ...
        $PATTERN $SQL = new $PATTERN($S,...);
    - pattern: |
        $S = String.Format(...);
        ...
        $PATTERN $SQL = new PATTERN($S,...);
    - pattern: |
        $S = String.Concat(...);
        ...
        $PATTERN $SQL = new $PATTERN($S,...);
    - pattern: |
        $PATTERN $S = new $PATTERN(...);
    - patterns:
      - pattern-inside: |
          $T $X(...,$SQL,...)
          {
            ...
            $S.$PATTERN = $SQL;
            ...
          }
      - pattern: $S.$PATTERN = $SQL;
    - patterns:
      - pattern-inside: |
          $T $X(...,$SQL,...)
          {
            ...
            $PATTERN $S = new $PATTERN($SQL,...);
            ...
          }
      - pattern: $PATTERN $S = new $PATTERN($SQL,...);
  - pattern-not: |
      $S.$PATTERN = "..." + "...";
  - pattern-not-inside: |
      ...
      $S.Parameters
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements instead. You can obtain a PreparedStatement using 'SqlCommand'
    and 'SqlParameter'.
  metadata:
    category: security
    technology:
    - csharp
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.sqli.csharp-sqli.csharp-sqli
    shortlink: https://sg.run/d2Xd
    semgrep.dev:
      rule:
        rule_id: x8UxeP
        version_id: e1TEqj
        url: https://semgrep.dev/playground/r/e1TEqj/csharp.lang.security.sqli.csharp-sqli.csharp-sqli
        origin: community
  languages:
  - csharp
  severity: ERROR
- id: scala.scala-jwt.security.jwt-hardcode.scala-jwt-hardcoded-secret
  languages:
  - scala
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables)'
  metadata:
    category: security
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    technology:
    - jwt
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.scala-jwt.security.jwt-hardcode.scala-jwt-hardcoded-secret
    shortlink: https://sg.run/Z40o
    semgrep.dev:
      rule:
        rule_id: OrU6W1
        version_id: 0bTQOl
        url: https://semgrep.dev/playground/r/0bTQOl/scala.scala-jwt.security.jwt-hardcode.scala-jwt-hardcoded-secret
        origin: community
  pattern-either:
  - pattern: |
      com.auth0.jwt.algorithms.Algorithm.HMAC256("...");
  - pattern: |
      $SECRET = "...";
      ...
      com.auth0.jwt.algorithms.Algorithm.HMAC256($SECRET);
  - pattern: |
      class $CLASS {
        ...
        $DECL $SECRET = "...";
        ...
        def $FUNC (...): $RETURNTYPE = {
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC256($SECRET);
          ...
        }
        ...
      }
  - pattern: |
      com.auth0.jwt.algorithms.Algorithm.HMAC384("...");
  - pattern: |
      $SECRET = "...";
      ...
      com.auth0.jwt.algorithms.Algorithm.HMAC384($SECRET);
  - pattern: |
      class $CLASS {
        ...
        $DECL $SECRET = "...";
        ...
        def $FUNC (...): $RETURNTYPE = {
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC384($SECRET);
          ...
        }
        ...
      }
  - pattern: |
      com.auth0.jwt.algorithms.Algorithm.HMAC512("...");
  - pattern: |
      $SECRET = "...";
      ...
      com.auth0.jwt.algorithms.Algorithm.HMAC512($SECRET);
  - pattern: |
      class $CLASS {
        ...
        $DECL $SECRET = "...";
        ...
        def $FUNC (...): $RETURNTYPE = {
          ...
          com.auth0.jwt.algorithms.Algorithm.HMAC512($SECRET);
          ...
        }
        ...
      }
  severity: ERROR
- id: c.lang.security.info-leak-on-non-formatted-string.info-leak-on-non-formated-string
  message: Use %s, %d, %c... to format your variables, otherwise this could leak information.
  metadata:
    cwe:
    - 'CWE-532: Insertion of Sensitive Information into Log File'
    references:
    - http://nebelwelt.net/files/13PPREW.pdf
    category: security
    technology:
    - c
    confidence: MEDIUM
    owasp:
    - A09:2021 - Security Logging and Monitoring Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.info-leak-on-non-formatted-string.info-leak-on-non-formated-string
    shortlink: https://sg.run/vzwn
    semgrep.dev:
      rule:
        rule_id: 5rUOlg
        version_id: e1TAB7
        url: https://semgrep.dev/playground/r/e1TAB7/c.lang.security.info-leak-on-non-formatted-string.info-leak-on-non-formated-string
        origin: community
  languages:
  - c
  severity: WARNING
  pattern: printf(argv[$NUM]);
- id: c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn
  message: Avoid using user-controlled format strings passed into 'sprintf', 'printf'
    and 'vsprintf'. These functions put you at risk of buffer overflow vulnerabilities
    through the use of format string exploits. Instead, use 'snprintf' and 'vsnprintf'.
  metadata:
    cwe:
    - 'CWE-134: Use of Externally-Controlled Format String'
    references:
    - https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions
    - https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html
    category: security
    technology:
    - c
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn
    shortlink: https://sg.run/ZvJx
    semgrep.dev:
      rule:
        rule_id: ReUgWx
        version_id: A8TO9G
        url: https://semgrep.dev/playground/r/A8TO9G/c.lang.security.insecure-use-printf-fn.insecure-use-printf-fn
        origin: community
  languages:
  - c
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $FUNC($BUFFER, argv[$NUM], ...);
        ...
        vsprintf(..., $BUFFER, ...);
    - pattern: vsprintf(..., argv[$NUM], ...)
    - pattern: |
        $FUNC($BUFFER, argv[$NUM], ...);
        ...
        sprintf(..., $BUFFER, ...);
    - pattern: sprintf(...,argv[$NUM],...)
    - pattern: |
        $FUNC($BUFFER, argv[$NUM], ...);
        ...
        printf(..., $BUFFER, ...);
    - pattern: printf(...,argv[$NUM],...)
  - metavariable-comparison:
      metavariable: $NUM
      comparison: int($NUM) > 0
- id: c.lang.security.use-after-free.use-after-free
  patterns:
  - pattern-either:
    - pattern: $VAR->$ACCESSOR
    - pattern: (*$VAR).$ACCESSOR
    - pattern: $VAR[$NUM]
  - pattern-inside: free($VAR); ...
  - pattern-not-inside: $VAR = NULL; ...
  - pattern-not-inside: free($VAR); ... $VAR = malloc(...); ...
  message: Variable '$VAR' was used after being freed. This can lead to undefined
    behavior.
  metadata:
    cwe:
    - 'CWE-416: Use After Free'
    references:
    - https://cwe.mitre.org/data/definitions/416.html
    - https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/use_after_free/
    category: security
    technology:
    - c
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.use-after-free.use-after-free
    shortlink: https://sg.run/gL6e
    semgrep.dev:
      rule:
        rule_id: KxUb9l
        version_id: A8TdjY
        url: https://semgrep.dev/playground/r/A8TdjY/c.lang.security.use-after-free.use-after-free
        origin: community
  languages:
  - c
  severity: WARNING
- id: c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn
  pattern: scanf(...)
  message: Avoid using 'scanf()'. This function, when used improperly, does not consider
    buffer boundaries and can lead to buffer overflows. Use 'fgets()' instead for
    reading input.
  metadata:
    cwe:
    - 'CWE-676: Use of Potentially Dangerous Function'
    references:
    - http://sekrit.de/webdocs/c/beginners-guide-away-from-scanf.html
    category: security
    technology:
    - c
    confidence: LOW
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn
    shortlink: https://sg.run/nd1g
    semgrep.dev:
      rule:
        rule_id: AbUzPd
        version_id: nWTwv8
        url: https://semgrep.dev/playground/r/nWTwv8/c.lang.security.insecure-use-scanf-fn.insecure-use-scanf-fn
        origin: community
  languages:
  - c
  severity: WARNING
- id: c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn
  pattern: strtok(...)
  message: Avoid using 'strtok()'. This function directly modifies the first argument
    buffer, permanently erasing the delimiter character. Use 'strtok_r()' instead.
  metadata:
    cwe:
    - 'CWE-676: Use of Potentially Dangerous Function'
    references:
    - https://wiki.sei.cmu.edu/confluence/display/c/STR06-C.+Do+not+assume+that+strtok%28%29+leaves+the+parse+string+unchanged
    - https://man7.org/linux/man-pages/man3/strtok.3.html#BUGS
    - https://stackoverflow.com/a/40335556
    category: security
    technology:
    - c
    confidence: LOW
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn
    shortlink: https://sg.run/LwqG
    semgrep.dev:
      rule:
        rule_id: WAUo5v
        version_id: LjTpvr
        url: https://semgrep.dev/playground/r/LjTpvr/c.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn
        origin: community
  languages:
  - c
  severity: WARNING
- id: c.lang.security.random-fd-exhaustion.random-fd-exhaustion
  pattern-either:
  - patterns:
    - pattern: |
        $FD = open("/dev/urandom", ...);
        ...
        read($FD, ...);
    - pattern-not: |
        $FD = open("/dev/urandom", ...);
        ...
        $BYTES_READ = read($FD, ...);
  - patterns:
    - pattern: |
        $FD = open("/dev/random", ...);
        ...
        read($FD, ...);
    - pattern-not: |
        $FD = open("/dev/random", ...);
        ...
        $BYTES_READ = read($FD, ...);
  message: Call to 'read()' without error checking is susceptible to file descriptor
    exhaustion. Consider using the 'getrandom()' function.
  metadata:
    cwe:
    - 'CWE-774: Allocation of File Descriptors or Handles Without Limits or Throttling'
    references:
    - https://lwn.net/Articles/606141/
    category: security
    technology:
    - c
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.random-fd-exhaustion.random-fd-exhaustion
    shortlink: https://sg.run/8yNj
    semgrep.dev:
      rule:
        rule_id: 0oU5k4
        version_id: 8KTLwz
        url: https://semgrep.dev/playground/r/8KTLwz/c.lang.security.random-fd-exhaustion.random-fd-exhaustion
        origin: community
  languages:
  - c
  severity: WARNING
- id: c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn
  pattern: gets(...)
  message: Avoid 'gets()'. This function does not consider buffer boundaries and can
    lead to buffer overflows. Use 'fgets()' or 'gets_s()' instead.
  metadata:
    cwe:
    - 'CWE-676: Use of Potentially Dangerous Function'
    references:
    - https://us-cert.cisa.gov/bsi/articles/knowledge/coding-practices/fgets-and-gets_s
    category: security
    technology:
    - c
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn
    shortlink: https://sg.run/dKqX
    semgrep.dev:
      rule:
        rule_id: GdU7OE
        version_id: 5PTB64
        url: https://semgrep.dev/playground/r/5PTB64/c.lang.security.insecure-use-gets-fn.insecure-use-gets-fn
        origin: community
  languages:
  - c
  severity: ERROR
- id: java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    technology:
    - java
    - secrets
    - jwt
    category: security
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
    shortlink: https://sg.run/RoDK
    semgrep.dev:
      rule:
        rule_id: oqUeAn
        version_id: nWTgZJ
        url: https://semgrep.dev/playground/r/nWTgZJ/java.java-jwt.security.jwt-hardcode.java-jwt-hardcoded-secret
        origin: community
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        (Algorithm $ALG) = $ALGO.$HMAC("$Y");
    - pattern: |
        $SECRET = "$Y";
        ...
        (Algorithm $ALG) = $ALGO.$HMAC($SECRET);
    - pattern: |
        class $CLASS {
          ...
          $TYPE $SECRET = "$Y";
          ...
          $RETURNTYPE $FUNC (...) {
            ...
            (Algorithm $ALG) = $ALGO.$HMAC($SECRET);
            ...
          }
          ...
        }
  - focus-metavariable: $Y
  - metavariable-regex:
      metavariable: $HMAC
      regex: (HMAC384|HMAC256|HMAC512)
- id: java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
  message: Detected the decoding of a JWT token without a verify step. JWT tokens
    must be verified before use, otherwise the token's integrity is unknown. This
    means a malicious actor could forge a JWT token with any claims. Call '.verify()'
    before using the token.
  metadata:
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
    shortlink: https://sg.run/Bk95
    semgrep.dev:
      rule:
        rule_id: pKUOE9
        version_id: A8Tnw0
        url: https://semgrep.dev/playground/r/A8Tnw0/java.java-jwt.security.audit.jwt-decode-without-verify.java-jwt-decode-without-verify
        origin: community
  languages:
  - java
  severity: WARNING
  patterns:
  - pattern: |
      com.auth0.jwt.JWT.decode(...);
  - pattern-not-inside: |-
      class $CLASS {
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          $VERIFIER.verify(...);
          ...
        }
      }
- id: java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
    shortlink: https://sg.run/Av14
    semgrep.dev:
      rule:
        rule_id: zdUkzR
        version_id: DkTeAv
        url: https://semgrep.dev/playground/r/DkTeAv/java.java-jwt.security.jwt-none-alg.java-jwt-none-alg
        origin: community
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: |
      $JWT.sign(com.auth0.jwt.algorithms.Algorithm.none());
  - pattern: |
      $NONE = com.auth0.jwt.algorithms.Algorithm.none();
      ...
      $JWT.sign($NONE);
  - pattern: |-
      class $CLASS {
        ...
        $TYPE $NONE = com.auth0.jwt.algorithms.Algorithm.none();
        ...
        $RETURNTYPE $FUNC (...) {
          ...
          $JWT.sign($NONE);
          ...
        }
        ...
      }
- id: java.jboss.security.session_sqli.find-sql-string-concatenation
  message: In $METHOD, $X is used to construct a SQL query via string concatenation.
  languages:
  - java
  severity: ERROR
  pattern-either:
  - pattern: |
      $RETURN $METHOD(...,String $X,...){
        ...
        Session $SESSION = ...;
        ...
        String $QUERY = ... + $X + ...;
        ...
        PreparedStatement $PS = $SESSION.connection().prepareStatement($QUERY);
        ...
        ResultSet $RESULT = $PS.executeQuery();
        ...
      }
  - pattern: |
      $RETURN $METHOD(...,String $X,...){
        ...
        String $QUERY = ... + $X + ...;
        ...
        Session $SESSION = ...;
        ...
        PreparedStatement $PS = $SESSION.connection().prepareStatement($QUERY);
        ...
        ResultSet $RESULT = $PS.executeQuery();
        ...
      }
  metadata:
    category: security
    technology:
    - jboss
    confidence: MEDIUM
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.jboss.security.session_sqli.find-sql-string-concatenation
    shortlink: https://sg.run/W8kA
    semgrep.dev:
      rule:
        rule_id: X5U8rQ
        version_id: qkTK3A
        url: https://semgrep.dev/playground/r/qkTK3A/java.jboss.security.session_sqli.find-sql-string-concatenation
        origin: community
- id: java.jjwt.security.jwt-none-alg.jjwt-none-alg
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    confidence: LOW
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.jjwt.security.jwt-none-alg.jjwt-none-alg
    shortlink: https://sg.run/0Q7b
    semgrep.dev:
      rule:
        rule_id: j2Uvol
        version_id: l4TNGq
        url: https://semgrep.dev/playground/r/l4TNGq/java.jjwt.security.jwt-none-alg.jjwt-none-alg
        origin: community
  languages:
  - java
  severity: ERROR
  patterns:
  - pattern: |
      io.jsonwebtoken.Jwts.builder();
  - pattern-not-inside: |-
      $RETURNTYPE $FUNC(...) {
        ...
        $JWTS.signWith(...);
        ...
      }
- id: generic.nginx.security.insecure-redirect.insecure-redirect
  patterns:
  - pattern-either:
    - pattern: rewrite ... redirect
    - pattern: rewrite ... permanent
  - pattern-not-inside: rewrite ... https ... $host ... redirect
  - pattern-not-inside: rewrite ... https ... $host ... permanent
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  message: Detected an insecure redirect in this nginx configuration. If no scheme
    is specified, nginx will forward the request with the incoming scheme. This could
    result in unencrypted communications. To fix this, include the 'https' scheme.
  languages:
  - generic
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    category: security
    technology:
    - nginx
    confidence: LOW
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.insecure-redirect.insecure-redirect
    shortlink: https://sg.run/8y14
    semgrep.dev:
      rule:
        rule_id: DbUpJe
        version_id: qkT9Db
        url: https://semgrep.dev/playground/r/qkT9Db/generic.nginx.security.insecure-redirect.insecure-redirect
        origin: community
- id: go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified
  message: Detected the decoding of a JWT token without a verify step. Don't use `ParseUnverified`
    unless you know what you're doing This method parses the token but doesn't validate
    the signature. It's only ever useful in cases where you know the signature is
    valid (because it has been checked previously in the stack) and you want to extract
    values from it.
  metadata:
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified
    shortlink: https://sg.run/Av66
    semgrep.dev:
      rule:
        rule_id: ReUgJJ
        version_id: ZRTBon
        url: https://semgrep.dev/playground/r/ZRTBon/go.jwt-go.security.audit.jwt-parse-unverified.jwt-go-parse-unverified
        origin: community
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-inside: |
      import "github.com/dgrijalva/jwt-go"
      ...
  - pattern: |
      $JWT.ParseUnverified(...)
- id: go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm
  message: Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm
    assumes the integrity of the token has already been verified. This would allow
    a malicious actor to forge a JWT token that will automatically be verified. Do
    not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm
    shortlink: https://sg.run/Gej1
    semgrep.dev:
      rule:
        rule_id: 5rUOWQ
        version_id: nWTdvX
        url: https://semgrep.dev/playground/r/nWTdvX/go.jwt-go.security.jwt-none-alg.jwt-go-none-algorithm
        origin: community
  languages:
  - go
  severity: ERROR
  patterns:
  - pattern-inside: |
      import "github.com/dgrijalva/jwt-go"
      ...
  - pattern-either:
    - pattern: |
        jwt.SigningMethodNone
    - pattern: jwt.UnsafeAllowNoneSignatureType
- id: go.template.security.insecure-types.go-insecure-templates
  patterns:
  - pattern-inside: |
      import "html/template"
      ...
  - pattern-either:
    - pattern: var $VAR template.HTML = $EXP
    - pattern: var $VAR template.CSS = $EXP
    - pattern: var $VAR template.HTMLAttr = $EXP
    - pattern: var $VAR template.JS = $EXP
    - pattern: var $VAR template.JSStr = $EXP
    - pattern: var $VAR template.Srcset = $EXP
  message: usage of insecure template types. They are documented as a security risk.
    See https://golang.org/pkg/html/template/#HTML.
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://golang.org/pkg/html/template/#HTML
    - https://twitter.com/empijei/status/1275177219011350528
    category: security
    technology:
    - template
    confidence: LOW
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.template.security.insecure-types.go-insecure-templates
    shortlink: https://sg.run/PJAq
    semgrep.dev:
      rule:
        rule_id: qNUjDy
        version_id: d6TndD
        url: https://semgrep.dev/playground/r/d6TndD/go.template.security.insecure-types.go-insecure-templates
        origin: community
  languages:
  - go
- id: go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure
  patterns:
  - pattern-not-inside: |
      &sessions.Options{
        ...,
        Secure: true,
        ...,
      }
  - pattern: |
      &sessions.Options{
        ...,
      }
  message: A session cookie was detected without setting the 'Secure' flag. The 'secure'
    flag for cookies prevents the client from transmitting the cookie over insecure
    channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in
    the Options struct.
  metadata:
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69
    category: security
    technology:
    - gorilla
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure
    shortlink: https://sg.run/PJdE
    semgrep.dev:
      rule:
        rule_id: lBU9kw
        version_id: YDTjNR
        url: https://semgrep.dev/playground/r/YDTjNR/go.gorilla.security.audit.session-cookie-missing-secure.session-cookie-missing-secure
        origin: community
  fix-regex:
    regex: (Secure\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
  patterns:
  - pattern-either:
    - pattern: new NullCipher(...);
    - pattern: new javax.crypto.NullCipher(...);
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#NULL_CIPHER
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
    shortlink: https://sg.run/AvA4
    semgrep.dev:
      rule:
        rule_id: GdU7pw
        version_id: K3TEBo
        url: https://semgrep.dev/playground/r/K3TEBo/java.lang.security.audit.crypto.no-null-cipher.no-null-cipher
        origin: community
  message: 'NullCipher was detected. This will not encrypt anything; the cipher text
    will be the same as the plain text. Use a valid, secure cipher: Cipher.getInstance("AES/CBC/PKCS7PADDING").
    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions for
    more information.'
  severity: WARNING
  languages:
  - java
- id: java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_NO_PADDING
    references:
    - https://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - java
    - kotlin
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
    shortlink: https://sg.run/DoOj
    semgrep.dev:
      rule:
        rule_id: AbUzoj
        version_id: qkT6zv
        url: https://semgrep.dev/playground/r/qkT6zv/java.lang.security.audit.crypto.rsa-no-padding.rsa-no-padding
        origin: community
  message: Using RSA without OAEP mode weakens the encryption.
  severity: WARNING
  languages:
  - java
  - kt
  pattern: $CIPHER.getInstance("=~/RSA/[Nn][Oo][Nn][Ee]/NoPadding/")
- id: java.spring.security.audit.spring-sqli.spring-sqli
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $ARG
    - pattern-inside: |
        public $T $M (..., String $ARG,...){...}
  pattern-sanitizers:
  - not_conflicting: true
    pattern-either:
    - patterns:
      - focus-metavariable: $A
      - pattern-inside: |
          new $TYPE(...,$A,...);
    - patterns:
      - pattern-either:
        - pattern: $X != $Y
        - pattern: $X == $Y
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - focus-metavariable: $A
        - pattern: |
            new PreparedStatementCreatorFactory($A,...);
      - patterns:
        - focus-metavariable: $A
        - pattern: |
            (JdbcTemplate $T).$M($A,...)
      - patterns:
        - pattern: (String $A)
        - pattern-inside: |
            (JdbcTemplate $T).batchUpdate(...)
      - patterns:
        - focus-metavariable: $A
        - pattern: |
            NamedParameterBatchUpdateUtils.$M($A,...)
      - patterns:
        - focus-metavariable: $A
        - pattern: |
            BatchUpdateUtils.$M($A,...)
  message: Detected a string argument from a public method contract in a raw SQL statement.
    This could lead to SQL injection if variables in the SQL statement are not properly
    sanitized. Use a prepared statements (java.sql.PreparedStatement) instead. You
    can obtain a PreparedStatement using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - spring
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.audit.spring-sqli.spring-sqli
    shortlink: https://sg.run/1Z3x
    semgrep.dev:
      rule:
        rule_id: eqU8N2
        version_id: LjTger
        url: https://semgrep.dev/playground/r/LjTger/java.spring.security.audit.spring-sqli.spring-sqli
        origin: community
- id: java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
  message: Triple DES (3DES or DESede) is considered deprecated. AES is the recommended
    cipher. Upgrade to use AES.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE
    references:
    - https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA
    category: security
    technology:
    - java
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
    shortlink: https://sg.run/Geqn
    semgrep.dev:
      rule:
        rule_id: JDUy8J
        version_id: rxT8QK
        url: https://semgrep.dev/playground/r/rxT8QK/java.lang.security.audit.crypto.desede-is-deprecated.desede-is-deprecated
        origin: community
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $CIPHER.getInstance("=~/DESede.*/")
    - pattern: |
        $CRYPTO.KeyGenerator.getInstance("DES")
  languages:
  - java
  - kt
- id: java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#ECB_MODE
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
    shortlink: https://sg.run/Ro9K
    semgrep.dev:
      rule:
        rule_id: 5rUOb6
        version_id: bZT42d
        url: https://semgrep.dev/playground/r/bZT42d/java.lang.security.audit.crypto.ecb-cipher.ecb-cipher
        origin: community
  message: Cipher in ECB mode is detected. ECB mode produces the same output for the
    same input each time which allows an attacker to intercept and replay the data.
    Further, ECB mode does not provide any integrity checking. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: |
      Cipher $VAR = $CIPHER.getInstance($MODE);
  - metavariable-regex:
      metavariable: $MODE
      regex: .*ECB.*
- id: java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
  message: Initialization Vectors (IVs) for block ciphers should be randomly generated
    each time they are used. Using a static IV means the same plaintext encrypts to
    the same ciphertext every time, weakening the strength of the encryption.
  metadata:
    cwe:
    - 'CWE-329: Generation of Predictable IV with CBC Mode'
    owasp:
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#STATIC_IV
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cwe.mitre.org/data/definitions/329.html
    category: security
    technology:
    - java
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
    shortlink: https://sg.run/BkB5
    semgrep.dev:
      rule:
        rule_id: ReUgj1
        version_id: xyT3k4
        url: https://semgrep.dev/playground/r/xyT3k4/java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector
        origin: community
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      byte[] $IV = {
          ...
      };
      ...
      new IvParameterSpec($IV, ...);
  - pattern: |
      class $CLASS {
          byte[] $IV = {
              ...
          };
          ...
          $METHOD(...) {
              ...
              new IvParameterSpec($IV, ...);
              ...
          }
      }
- id: java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#CUSTOM_MESSAGE_DIGEST
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#custom-algorithms
    category: security
    technology:
    - java
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
    shortlink: https://sg.run/PJ0p
    semgrep.dev:
      rule:
        rule_id: KxUbW4
        version_id: e1TAJ7
        url: https://semgrep.dev/playground/r/e1TAJ7/java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests
        origin: community
  message: 'Cryptographic algorithms are notoriously difficult to get right. By implementing
    a custom message digest, you risk introducing security issues into your program.
    Use one of the many sound message digests already available to you: MessageDigest
    sha256Digest = MessageDigest.getInstance("SHA256");'
  severity: WARNING
  languages:
  - java
  pattern: |-
    class $CLASS extends MessageDigest {
      ...
    }
- id: java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DEFAULT_HTTP_CLIENT
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
    shortlink: https://sg.run/J9Gj
    semgrep.dev:
      rule:
        rule_id: qNUj8b
        version_id: vdT37r
        url: https://semgrep.dev/playground/r/vdT37r/java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated
        origin: community
  message: DefaultHttpClient is deprecated. Further, it does not support connections
    using TLS1.2, which makes using DefaultHttpClient a security hazard. Use HttpClientBuilder
    instead.
  severity: WARNING
  languages:
  - java
  pattern: new DefaultHttpClient(...);
  fix-regex:
    regex: DefaultHttpClient
    replacement: HttpClientBuilder
- id: java.servlets.security.cookie-issecure-false.cookie-issecure-false
  patterns:
  - pattern: |
      $COOKIE = new Cookie(...);
  - pattern-not-inside: |
      $COOKIE = new Cookie(...);
      ...
      $COOKIE.setSecure(true);
  message: 'Default session middleware settings: `setSecure` not set to true. This
    ensures that the cookie is sent only over HTTPS to prevent cross-site scripting
    attacks.'
  fix-regex:
    regex: setSecure\(false\)
    replacement: setSecure(true)
  metadata:
    vulnerability: Insecure Transport
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://tomcat.apache.org/tomcat-5.5-doc/servletapi/
    category: security
    technology:
    - servlet
    - tomcat
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.servlets.security.cookie-issecure-false.cookie-issecure-false
    shortlink: https://sg.run/pxn0
    semgrep.dev:
      rule:
        rule_id: kxUkn9
        version_id: ZRTyP2
        url: https://semgrep.dev/playground/r/ZRTyP2/java.servlets.security.cookie-issecure-false.cookie-issecure-false
        origin: community
  languages:
  - java
  severity: WARNING
- id: java.spring.security.audit.spel-injection.spel-injection
  message: A Spring expression is built with a dynamic value. The source of the value(s)
    should be verified to avoid that unfiltered values fall into this risky code evaluation.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPEL_INJECTION
    category: security
    technology:
    - spring
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.audit.spel-injection.spel-injection
    shortlink: https://sg.run/XBp4
    semgrep.dev:
      rule:
        rule_id: x8Un7b
        version_id: nWTw4Q
        url: https://semgrep.dev/playground/r/nWTw4Q/java.spring.security.audit.spel-injection.spel-injection
        origin: community
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        class $CLASS {
          ...
          ExpressionParser $PARSER;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          ExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          ExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          SpelExpressionParser $PARSER;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          SpelExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          SpelExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          TemplateAwareExpressionParser $PARSER;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          TemplateAwareExpressionParser $PARSER = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          TemplateAwareExpressionParser $PARSER = ...;
          ...
        }
  - pattern: |
      $X $METHOD(...) {
        ...
        $PARSER.parseExpression(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $PARSER.parseExpression("...");
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $PARSER.parseExpression($S);
        ...
      }
- id: java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
  message: Application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated.
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNVALIDATED_REDIRECT
    category: security
    technology:
    - spring
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
    shortlink: https://sg.run/9oXz
    semgrep.dev:
      rule:
        rule_id: v8Un7w
        version_id: 44TYPN
        url: https://semgrep.dev/playground/r/44TYPN/java.spring.security.audit.spring-unvalidated-redirect.spring-unvalidated-redirect
        origin: community
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        return "redirect:" + $URL;
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        String $REDIR = "redirect:" + $URL;
        ...
        return $REDIR;
        ...
      }
  - pattern: |
      $X $METHOD(...,String $URL,...) {
        ...
        new ModelAndView("redirect:" + $URL);
        ...
      }
  - pattern: |-
      $X $METHOD(...,String $URL,...) {
        ...
        String $REDIR = "redirect:" + $URL;
        ...
        new ModelAndView($REDIR);
        ...
      }
- id: javascript.angular.security.detect-third-party-angular-translate.detect-angular-translateprovider-translations-method
  message: The use of $translateProvider.translations method can be dangerous if user
    input is provided to this API.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angular
    - typescript
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-third-party-angular-translate.detect-angular-translateprovider-translations-method
    shortlink: https://sg.run/ZvXp
    semgrep.dev:
      rule:
        rule_id: PeUZPg
        version_id: X0TJKW
        url: https://semgrep.dev/playground/r/X0TJKW/javascript.angular.security.detect-third-party-angular-translate.detect-angular-translateprovider-translations-method
        origin: community
  languages:
  - javascript
  severity: WARNING
  patterns:
  - pattern: |
      $translateProvider.translations(...,$SOURCE);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
- id: java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#UNENCRYPTED_SOCKET
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
    shortlink: https://sg.run/W8zA
    semgrep.dev:
      rule:
        rule_id: BYUN3X
        version_id: X0Tpkd
        url: https://semgrep.dev/playground/r/X0Tpkd/java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket
        origin: community
  message: Detected use of a Java socket that is not encrypted. As a result, the traffic
    could be read by an attacker intercepting the network traffic. Use an SSLSocket
    created by 'SSLSocketFactory' or 'SSLServerSocketFactory' instead.
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: new ServerSocket(...)
  - pattern: new Socket(...)
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
  message: "Don\u2019t use the default session cookie name Using the default session
    cookie name can open your app to attacks. The security issue posed is similar
    to X-Powered-By: a potential attacker can use it to fingerprint the server and
    target attacks accordingly."
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
    shortlink: https://sg.run/1Z5x
    semgrep.dev:
      rule:
        rule_id: eqU8k2
        version_id: kbTvW0
        url: https://semgrep.dev/playground/r/kbTvW0/javascript.express.security.audit.express-cookie-settings.express-cookie-session-default-name
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {name:...} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {name:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.name = ...;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
  message: 'Default session middleware settings: `secure` not set. It ensures the
    browser only sends the cookie over HTTPS.'
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
    shortlink: https://sg.run/9oKz
    semgrep.dev:
      rule:
        rule_id: v8Unzw
        version_id: w8TgWB
        url: https://semgrep.dev/playground/r/w8TgWB/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-secure
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{secure:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{secure:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {secure:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.secure = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.secure = true;
      ...
      $SESSION($OPTS,...);
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
  message: 'Default session middleware settings: `httpOnly` not set. It ensures the
    cookie is sent only over HTTP(S), not client JavaScript, helping to protect against
    cross-site scripting attacks.'
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
    shortlink: https://sg.run/ydBO
    semgrep.dev:
      rule:
        rule_id: d8UjGo
        version_id: xyTbRg
        url: https://semgrep.dev/playground/r/xyTbRg/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-httponly
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{httpOnly:true}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{httpOnly:true}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {httpOnly:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {httpOnly:true} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.httpOnly = true;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.httpOnly = true;
      ...
      $SESSION($OPTS,...);
- id: problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
  message: Checks for outgoing connections to ftp servers via Spring plugin ftpSessionFactory.
    FTP does not encrypt traffic, possibly leading to PII being sent plaintext over
    the network.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.spring.io/spring-integration/api/org/springframework/integration/ftp/session/AbstractFtpSessionFactory.html#setClientMode-int-
    subcategory:
    - vuln
    technology:
    - spring
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
    shortlink: https://sg.run/0Qzj
    semgrep.dev:
      rule:
        rule_id: pKUOYW
        version_id: QkTjg2
        url: https://semgrep.dev/playground/r/QkTjg2/problem-based-packs.insecure-transport.java-spring.spring-ftp-request.spring-ftp-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[fF][tT][pP]://'
    replacement: sftp://
    count: 1
  pattern-either:
  - pattern: |
      $SF = new DefaultFtpSessionFactory(...);
      ...
      $SF.setHost("=~/^[fF][tT][pP]://.*/");
      ...
      $SF.$FUNC(...);
  - pattern: |
      $SF = new DefaultFtpSessionFactory(...);
      ...
      String $URL = "=~/^[fF][tT][pP]://.*/";
      ...
      $SF.setHost($URL);
      ...
      $SF.$FUNC(...);
- id: java.lang.security.audit.saxreader-xmlreader-constructor.saxreader-xmlreader-constructor
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The constructor for SAXReader has an optional
    XMLReader argument. However, configuring this XMLReader before using it in the
    constructor has no effect on the security of the SAXReader. The SAXReader itself
    needs to be configured to prevent XXE vulnerabilities. For more information, see:
    [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: INFO
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.audit.saxreader-xmlreader-constructor.saxreader-xmlreader-constructor
    shortlink: https://sg.run/PKrW
    semgrep.dev:
      rule:
        rule_id: d8UywD
        version_id: PkTyO3
        url: https://semgrep.dev/playground/r/PkTyO3/java.lang.security.audit.saxreader-xmlreader-constructor.saxreader-xmlreader-constructor
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      (SAXReader $PARSER) = new SAXReader($READER);
  - pattern-inside: (XMLReader $READER) = ...; ... $READER.$CONFIGURE(...); ... (SAXReader
      $PARSER) = new SAXReader($READER);
  - metavariable-pattern:
      metavariable: $CONFIGURE
      pattern-either:
      - pattern: setFeature
      - pattern: setAttribute
      - pattern: setValidating
      - pattern: setExpandEntityReferences
      - pattern: setXIncludeAware
      - pattern: setProperty
- id: java.lang.security.audit.xml-custom-entityresolver.xml-custom-entityresolver
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. By setting a custom `EntityResolver` for all
    previous security configurations for are bypassed. It is your responsibility to
    handle security in the `EntityResolver` implementation instead. For more information,
    see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: INFO
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.audit.xml-custom-entityresolver.xml-custom-entityresolver
    shortlink: https://sg.run/JRXW
    semgrep.dev:
      rule:
        rule_id: ZqUK4E
        version_id: JdTjej
        url: https://semgrep.dev/playground/r/JdTjej/java.lang.security.audit.xml-custom-entityresolver.xml-custom-entityresolver
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER.setEntityResolver(...);
  - metavariable-pattern:
      metavariable: $CONFIGURE
      pattern-either:
      - pattern: setFeature
      - pattern: setProperty
      - pattern: setAttribute
      - pattern: setValidating
      - pattern: setExpandEntityReferences
      - pattern: setXIncludeAware
      - pattern: setNamespaceAware
      - pattern: setIncludeExternalDTDDeclarations
  - pattern-either:
    - pattern-inside: |
        $FACTORY = ...;
        ...
        $FACTORY.$CONFIGURE(...);
        ...
        $PARSER = $FACTORY.$NEWPARSER(...);
        ...
        $PARSER.setEntityResolver(...);
    - pattern-inside: |
        $PARSER = ...;
        ...
        $PARSER.$CONFIGURE(...);
        ...
        $PARSER.setEntityResolver(...);
- id: java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)` `$FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)` Beware, using a custom EntityResolver will render these settings useless
    and you will be responsible for handeling security in the implementation of you
    EntityResolver. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity
    shortlink: https://sg.run/5qYX
    semgrep.dev:
      rule:
        rule_id: nJU2Wq
        version_id: 5PTz3w
        url: https://semgrep.dev/playground/r/5PTz3w/java.lang.security.xxe.documentbuilderfactory-xxe-parameter-entity.documentbuilderfactory-xxe-parameter-entity
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $FACTORY = javax.xml.parsers.DocumentBuilderFactory.newInstance()
  - pattern-inside: |
      $FACTORY = ...;
      ...
      $PARSER = $FACTORY.newDocumentBuilder();
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $PARSER = $FACTORY.newDocumentBuilder();
      ...
      $PARSER.setEntityResolver(...);
- id: java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. It is our recommendation to secure this parser
    against XXE attacks by configuring $FACTORY with `$FACTORY.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks. `$FACTORY.setExpandEntityReferences(false)` `$FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,
    true)` `$FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "")` `$FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/776.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe
    shortlink: https://sg.run/GJd2
    semgrep.dev:
      rule:
        rule_id: EwUEj8
        version_id: GxTRJQ
        url: https://semgrep.dev/playground/r/GxTRJQ/java.lang.security.xxe.documentbuilderfactory-xxe.documentbuilderfactory-xxe
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $FACTORY = javax.xml.parsers.DocumentBuilderFactory.newInstance()
  - pattern-inside: |
      $FACTORY = ...;
      ...
      $PARSER = $FACTORY.newDocumentBuilder();
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setExpandEntityReferences(false);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("=~/.*secure-processing.*/", true);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setAttribute("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
  - pattern-not-inside: |
      $FACTORY = ...;
      ...
      $PARSER = $FACTORY.newDocumentBuilder();
      ...
      $PARSER.setEntityResolver(...);
- id: java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The current configuration allows for XXE attacks
    through parameter entities. It is our recommendation to secure this parser against
    XXE attacks by configuring $PARSER with `$PARSER.setFeature(http://apache.org/xml/features/disallow-doctype-decl,
    true)`. Alternatively, the following configurations also provide protection against
    XXE attacks with parameter entities. `$PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD,
    "")` `$PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities",
    false)`. For more information, see: [Java XXE prevention](https://semgrep.dev/docs/cheat-sheets/java-xxe/)'
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-D97A1F1D-8DDF-4D19-A7E5-99099F27346E
    - https://github.com/returntocorp/java-xxe-research
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    - https://rules.sonarsource.com/java/type/Vulnerability/RSPEC-2755
    - https://blog.sonarsource.com/secure-xml-processor/
    - https://blog.sonarsource.com/understanding-xxe-vulnerabilities/
    - https://cwe.mitre.org/data/definitions/776.html
    - https://cwe.mitre.org/data/definitions/611.html
    - https://cwe.mitre.org/data/definitions/827.html
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities
    shortlink: https://sg.run/Rlee
    semgrep.dev:
      rule:
        rule_id: 7KUEgg
        version_id: RGTlrX
        url: https://semgrep.dev/playground/r/RGTlrX/java.lang.security.xxe.saxbuilder-xxe-parameter-entities.saxbuilder-xxe-parameter-entities
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern: |
      $PARSER = new org.jdom2.input.SAXBuilder(...);
  - pattern-not-inside: |
      $PARSER = new org.jdom2.input.SAXBuilder(...);
      ...
      $PARSER.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
  - pattern-not-inside: |
      $PARSER = new org.jdom2.input.SAXBuilder(...);
      ...
      $PARSER.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
  - pattern-not-inside: |
      $PARSER = new org.jdom2.input.SAXBuilder(...);
      ...
      $PARSER.setProperty("=~/.*accessExternalDTD.*/", "");
  - pattern-not-inside: |
      $PARSER = new org.jdom2.input.SAXBuilder(...);
      ...
      $PARSER.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
- id: javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
  message: Possible writing outside of the destination, make sure that the target
    path is nested in the intended destination
  metadata:
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    category: security
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    technology:
    - express
    - node.js
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
    shortlink: https://sg.run/weRn
    semgrep.dev:
      rule:
        rule_id: L1Uyb8
        version_id: X0Tr63
        url: https://semgrep.dev/playground/r/X0Tr63/javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-traversal
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern-inside: |
          $PATH = require('path');
          ...
      - pattern-inside: |
          import $PATH from 'path';
          ...
    - pattern-either:
      - pattern: $PATH.join(...,$SINK,...)
      - pattern: $PATH.resolve(...,$SINK,...)
  - patterns:
    - focus-metavariable: $SINK
    - pattern-inside: |
        import 'path';
        ...
    - pattern-either:
      - pattern: path.join(...,$SINK,...)
      - pattern: path.resolve(...,$SINK,...)
  pattern-sanitizers:
  - pattern: $Y.replace(...)
  - pattern: $Y.indexOf(...)
  - pattern: |
      function ... (...) {
          ...
          <... $Y.indexOf(...) ...>
          ...
      }
  - patterns:
    - pattern: $FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: sanitize
- id: javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    interfile: true
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - express
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
    shortlink: https://sg.run/Do1d
    semgrep.dev:
      rule:
        rule_id: pKUOjy
        version_id: WrT4yp
        url: https://semgrep.dev/playground/r/WrT4yp/javascript.express.security.express-jwt-hardcoded-secret.express-jwt-hardcoded-secret
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        $JWT = require('express-jwt');
        ...
    - pattern-inside: |
        import $JWT from 'express-jwt';
        ...
    - pattern-inside: |
        import * as $JWT from 'express-jwt';
        ...
    - pattern-inside: |
        import { ..., $JWT, ... } from 'express-jwt';
        ...
  - pattern-either:
    - pattern: |
        $JWT({...,secret: "$Y",...},...)
    - pattern: |
        $OPTS = "$Y";
        ...
        $JWT({...,secret: $OPTS},...);
  - focus-metavariable: $Y
- id: java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace
  message: Possible active debug code detected. Deploying an application with debug
    code can create unintended entry points or expose sensitive information.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: LOW
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A10:2004 - Insecure Configuration Management
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    references:
    - https://cwe.mitre.org/data/definitions/489.html
    - https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/
    - https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces
    - https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace
    shortlink: https://sg.run/30Lp
    semgrep.dev:
      rule:
        rule_id: eqUyRW
        version_id: RGTG6v
        url: https://semgrep.dev/playground/r/RGTG6v/java.lang.security.audit.active-debug-code-getstacktrace.active-debug-code-getstacktrace
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - pattern: $EXCEPTION.getStackTrace()
  - pattern: $UTIL.getStackTrace(...)
  - pattern: $EXCEPTION.getFullStackTrace(...)
  pattern-sinks:
  - pattern: $SYSTEM.println(...)
  - pattern: $SYSTEM.print(...)
  - pattern: $SYSTEM.format(...)
- id: java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace
  message: Possible active debug code detected. Deploying an application with debug
    code can create unintended entry points or expose sensitive information.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A10:2004 - Insecure Configuration Management
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    references:
    - https://cwe.mitre.org/data/definitions/489.html
    - https://www.acunetix.com/vulnerabilities/web/stack-trace-disclosure-java/
    - https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/02-Testing_for_Stack_Traces
    - https://www.securecodewarrior.com/blog/coders-conquer-security-share-learn-series-information-exposure
    technology:
    - java
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace
    shortlink: https://sg.run/4K8z
    semgrep.dev:
      rule:
        rule_id: v8U0rZ
        version_id: A8T7Ob
        url: https://semgrep.dev/playground/r/A8T7Ob/java.lang.security.audit.active-debug-code-printstacktrace.active-debug-code-printstacktrace
        origin: pro_rules
  languages:
  - java
  pattern-either:
  - pattern: printStackTrace()
  - pattern: $EXCEPTION.printStackTrace()
  - pattern: $UTIL.printStackTrace(...)
- id: javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
  message: No token revoking configured for `express-jwt`. A leaked token could still
    be used and unable to be revoked. Consider using function as the `isRevoked` option.
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/security/expirejwt.md
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
    shortlink: https://sg.run/kXNo
    semgrep.dev:
      rule:
        rule_id: 7KUQ9k
        version_id: YDT8by
        url: https://semgrep.dev/playground/r/YDT8by/javascript.express.security.audit.express-jwt-not-revoked.express-jwt-not-revoked
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $JWT = require('express-jwt');
      ...
  - pattern: $JWT(...)
  - pattern-not-inside: $JWT(<... {isRevoked:...} ...>,...)
  - pattern-not-inside: |-
      $OPTS = <... {isRevoked:...} ...>;
      ...
      $JWT($OPTS,...);
- id: javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
  message: Xml Parser is used inside Request Event. Make sure that unverified user
    data can not reach the XML Parser, as it can result in XML External or Internal
    Entity (XXE) Processing vulnerabilities
  metadata:
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    category: security
    technology:
    - express
    references:
    - https://www.npmjs.com/package/xml2json
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
    shortlink: https://sg.run/x1AA
    semgrep.dev:
      rule:
        rule_id: 8GUjkk
        version_id: 0bT6z7
        url: https://semgrep.dev/playground/r/0bT6z7/javascript.express.security.audit.express-xml2json-xxe-event.express-xml2json-xxe-event
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) => {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('xml2json');
          ...
      - pattern-inside: |
          import 'xml2json';
          ...
    - pattern: $REQ.on('...', function(...) { ... $EXPAT.toJson($INPUT,...); ... })
- id: javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
  message: 'The Mustache escape function is being overwritten. This could bypass HTML
    escaping safety measures built into the rendering engine, exposing your application
    to cross-site scripting (XSS) vulnerabilities. If you need unescaped HTML, use
    the triple brace operator in your template: ''{{{ ... }}}''.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/janl/mustache.js/#variables
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
    shortlink: https://sg.run/7oWe
    semgrep.dev:
      rule:
        rule_id: GdU7Ew
        version_id: 2KT62r
        url: https://semgrep.dev/playground/r/2KT62r/javascript.express.security.audit.xss.mustache.escape-function-overwrite.escape-function-overwrite
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: Mustache.escape = ...
  - patterns:
    - pattern-inside: |
        $MUSTACHE = require("mustache");
        ...
    - pattern: $MUSTACHE.escape = ...
- id: javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
  message: Found an insecure gRPC connection. This creates a connection without encryption
    to a gRPC client/server. A malicious attacker could tamper with the gRPC message,
    which could compromise the machine.
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    category: security
    technology:
    - grpc
    references:
    - https://blog.gopheracademy.com/advent-2017/go-grpc-beyond-basics/#:~:text=disables%20transport%20security
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
    shortlink: https://sg.run/5QkD
    semgrep.dev:
      rule:
        rule_id: lBU9D8
        version_id: 44TYjd
        url: https://semgrep.dev/playground/r/44TYjd/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  pattern-either:
  - pattern: |
      require('grpc');
      ...
      $GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);
  - pattern: |
      require('grpc');
      ...
      new $GRPC($ADDR,...,$CREDENTIALS.createInsecure(),...);
  - pattern: |-
      require('grpc');
      ...
      $CREDS = <... $CREDENTIALS.createInsecure() ...>;
      ...
      $GRPC($ADDR,...,$CREDS,...);
  - pattern: |-
      require('grpc');
      ...
      $CREDS = <... $CREDENTIALS.createInsecure() ...>;
      ...
      new $GRPC($ADDR,...,$CREDS,...);
- id: javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
  message: The object is passed strictly to jose.JWT.sign(...) Make sure that sensitive
    information is not exposed through JWT token payload.
  metadata:
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.2 Static API keys or secret
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jose
    - jwt
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
    shortlink: https://sg.run/BkAx
    semgrep.dev:
      rule:
        rule_id: GdU7XP
        version_id: PkTn36
        url: https://semgrep.dev/playground/r/PkTn36/javascript.jose.security.audit.jose-exposed-data.jose-exposed-data
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('jose');
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: function (...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
    - patterns:
      - pattern-inside: function $F(...,$INPUT,...) {...}
      - pattern-either:
        - pattern: $JOSE.JWT.sign($INPUT,...)
        - pattern: $JWT.sign($INPUT,...)
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
  message: 'Default session middleware settings: `domain` not set. It indicates the
    domain of the cookie; use it to compare against the domain of the server in which
    the URL is being requested. If they match, then check the path attribute next.'
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
    shortlink: https://sg.run/rd41
    semgrep.dev:
      rule:
        rule_id: ZqU5Pn
        version_id: O9TLQ9
        url: https://semgrep.dev/playground/r/O9TLQ9/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-domain
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{domain:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{domain:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {domain:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.domain = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.domain = ...;
      ...
      $SESSION($OPTS,...);
- id: problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request
  message: Checks for requests sent to http:// URLs. This is dangerous as the server
    is attempting to connect to a website that does not encrypt traffic with TLS.
    Instead, only send requests to https:// URLs.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://ruby-doc.org/stdlib-2.6.5/libdoc/net/http/rdoc/Net/
    subcategory:
    - vuln
    technology:
    - ruby
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request
    shortlink: https://sg.run/vz6Y
    semgrep.dev:
      rule:
        rule_id: gxU1lE
        version_id: BjTn89
        url: https://semgrep.dev/playground/r/BjTn89/problem-based-packs.insecure-transport.ruby-stdlib.net-http-request.net-http-request
        origin: community
  languages:
  - ruby
  patterns:
  - pattern-either:
    - pattern: |
        $URI = URI('=~/[hH][tT][tT][pP]://.*/')
        ...
        Net::HTTP::$FUNC.new $URI
    - pattern: |
        $URI = URI('=~/[hH][tT][tT][pP]://.*/')
        ...
        Net::HTTP.$FUNC($URI, ...)
    - pattern: |
        Net::HTTP.$FUNC(URI('=~/[hH][tT][tT][pP]://.*/'), ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: ([gG]et|post_form|[pP]ost|get_response|get_print|Head|Patch|Put|Proppatch|Lock|Unlock|Options|Propfind|Delete|Move|Copy|Trace|Mkcol)
- id: problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request
  message: Checks for requests to http and ftp (unencrypted) sites using OpenURI.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://ruby-doc.org/stdlib-2.6.3/libdoc/open-uri/rdoc/OpenURI.html
    subcategory:
    - vuln
    technology:
    - open-uri
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request
    shortlink: https://sg.run/ZvQw
    semgrep.dev:
      rule:
        rule_id: 3qUPNe
        version_id: WrTAjx
        url: https://semgrep.dev/playground/r/WrTAjx/problem-based-packs.insecure-transport.ruby-stdlib.openuri-request.openuri-request
        origin: community
  languages:
  - ruby
  pattern-either:
  - pattern: |
      URI.open('=~/[hH][tT][tT][pP]://.*/', ...)
  - pattern: |
      $URI = URI.parse('=~/[hH][tT][tT][pP]://.*/', ...)
      ...
      $URI.open
  - pattern: |
      URI.open('=~/^[fF][tT][pP]://.*/', ...)
  - pattern: |
      $URI = URI.parse('=~/^[fF][tT][pP]://.*/', ...)
      ...
      $URI.open
- id: problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request
  message: Checks for outgoing connections to ftp servers with the 'net/ftp' package.
    FTP does not encrypt traffic, possibly leading to PII being sent plaintext over
    the network. Instead, connect via the SFTP protocol.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.ruby-lang.org/en/2.0.0/Net/FTP.html
    subcategory:
    - vuln
    technology:
    - ruby
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request
    shortlink: https://sg.run/eLQ8
    semgrep.dev:
      rule:
        rule_id: 8GUj13
        version_id: l4TnW8
        url: https://semgrep.dev/playground/r/l4TnW8/problem-based-packs.insecure-transport.ruby-stdlib.net-ftp-request.net-ftp-request
        origin: community
  languages:
  - ruby
  pattern-either:
  - pattern: |
      $FTP = Net::FTP.new('...')
      ...
      $FTP.login
  - pattern: |
      Net::FTP.open('...') do |ftp|
        ...
        ftp.login
      end
- id: java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
  message: A cookie was detected without setting the 'secure' flag. The 'secure' flag
    for cookies prevents the client from transmitting the cookie over insecure channels
    such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: HIGH
    category: security
    subcategory:
    - audit
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.1 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/www-community/controls/SecureCookieAttribute
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
    technology:
    - java
    - servlets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
    shortlink: https://sg.run/jW2J
    semgrep.dev:
      rule:
        rule_id: 0oUKLg
        version_id: NdT2bw
        url: https://semgrep.dev/playground/r/NdT2bw/java.servlets.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-not-inside: $COOKIE.setValue(""); ...
  - pattern-not-inside: $COOKIE.setSecure(...); ...
  - pattern: $RESPONSE.addCookie($COOKIE);
- id: php.lang.security.search-active-debug.search-active-debug
  message: Debug logging is explicitly enabled. This can potentially disclose sensitive
    information and should never be active on production systems.
  severity: ERROR
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://www.php.net/manual/en/function.setcookie.php
    - https://www.php.net/manual/en/function.session-set-cookie-params.php
    - https://www.php.net/manual/en/configuration.file.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.search-active-debug.search-active-debug
    shortlink: https://sg.run/PKeW
    semgrep.dev:
      rule:
        rule_id: j2UngK
        version_id: PkTr8n
        url: https://semgrep.dev/playground/r/PkTr8n/php.lang.security.search-active-debug.search-active-debug
        origin: pro_rules
  languages:
  - php
  paths:
    exclude:
    - dev/*
    - development/*
  patterns:
  - pattern-either:
    - pattern: |
        define("WP_DEBUG",true)
    - patterns:
      - pattern: |
          ini_set("display_errors",$X)
      - metavariable-regex:
          metavariable: $X
          regex: (?i)("on"|1|true)
- id: php.lang.security.tainted-path-traversal.tainted-path-traversal
  message: Detected user input going into a php include or require command, which
    can lead to path traversal and sensitive data being exposed. These commands can
    also lead to code execution. Instead, allowlist files that the user can access
    or rigorously validate user input.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-23: Relative Path Traversal'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://medium.com/@emmapinheiro42/php-include-ignore-4a3ba81371af
    - https://www.acunetix.com/websitesecurity/php-security-2/
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-path-traversal.tainted-path-traversal
    shortlink: https://sg.run/WGrg
    semgrep.dev:
      rule:
        rule_id: wdUR68
        version_id: WrTpLD
        url: https://semgrep.dev/playground/r/WrTpLD/php.lang.security.tainted-path-traversal.tainted-path-traversal
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: include(...);
      - pattern: include_once(...);
      - pattern: require(...);
      - pattern: require_once(...);
- id: php.lang.security.tainted-code-execution.tainted-code-execution
  message: The application might dynamically evaluate untrusted input, which can lead
    to a code injection vulnerability. An attacker can execute arbitrary code, potentially
    gaining complete control of the system. To prevent this vulnerability, avoid executing
    code containing user input. If this is unavoidable, validate and sanitize the
    input, and use safe alternatives for evaluating user input.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    cwe2022-top25: true
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Code_Injection
    - https://stackoverflow.com/questions/3115559/exploitable-php-functions
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-code-execution.tainted-code-execution
    shortlink: https://sg.run/Ap88
    semgrep.dev:
      rule:
        rule_id: bwU5RR
        version_id: A8Tlvj
        url: https://semgrep.dev/playground/r/A8Tlvj/php.lang.security.tainted-code-execution.tainted-code-execution
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: eval(...)
      - pattern: assert(...)
      - patterns:
        - pattern: create_function($ARGS, $COMMAND)
        - focus-metavariable: $COMMAND
      - patterns:
        - pattern: preg_replace($REPLACE, $CODE, ...);
        - metavariable-regex:
            metavariable: $REPLACE
            regex: ('|")/.*/e('|")
        - focus-metavariable: $CODE
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $FUNC = new ReflectionFunction($FUNC_NAME);
              ...
              $FUNC->invoke(...);
          - pattern-inside: |
              $FUNC = new ReflectionFunction($FUNC_NAME);
              ...
              $FUNC->invokeArgs(...);
        - pattern: $FUNC_NAME
  pattern-sanitizers:
  - pattern: escapeshellarg(...)
- id: php.lang.security.tainted-command-injection.tainted-command-injection
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the user input, and use safe methods for executing the commands.
    In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)`
    to correctly sanitize input that is used respectively as system commands or command
    arguments.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.php.net/manual/en/function.eval
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/NoEvalsSniff.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-command-injection.tainted-command-injection
    shortlink: https://sg.run/Bpj2
    semgrep.dev:
      rule:
        rule_id: NbUzg9
        version_id: BjTL4X
        url: https://semgrep.dev/playground/r/BjTL4X/php.lang.security.tainted-command-injection.tainted-command-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: exec(...)
      - pattern: system(...)
      - pattern: passthru(...)
      - pattern: shell_exec(...)
      - pattern: |
          `...`
      - patterns:
        - focus-metavariable: $COMMAND
        - pattern: proc_open($COMMAND, ...)
      - patterns:
        - focus-metavariable: $COMMAND
        - pattern: popen($COMMAND, ...)
      - pattern: pcntl_exec(...)
- id: php.lang.security.tainted-url-to-connection.tainted-url-to-connection
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/OlivierLaflamme/Auditing-Vulnerabilities/blob/master/SSRF/PHP/PHP_vuln_function.md
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-url-to-connection.tainted-url-to-connection
    shortlink: https://sg.run/0Bb5
    semgrep.dev:
      rule:
        rule_id: x8Ujv2
        version_id: WrTnel
        url: https://semgrep.dev/playground/r/WrTnel/php.lang.security.tainted-url-to-connection.tainted-url-to-connection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            fsockopen($URL, ...)
        - focus-metavariable: $URL
      - patterns:
        - pattern: |
            pfsockopen($URL, ...)
        - focus-metavariable: $URL
      - patterns:
        - pattern: |
            file_put_contents($URL, ...)
        - focus-metavariable: $URL
  pattern-sanitizers:
  - pattern: basename(...)
- id: php.lang.security.tainted-url-to-guzzle-client.tainted-url-to-guzzle-client
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://docs.guzzlephp.org/en/stable/quickstart.html#making-a-request
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-url-to-guzzle-client.tainted-url-to-guzzle-client
    shortlink: https://sg.run/KA3X
    semgrep.dev:
      rule:
        rule_id: OrUpk6
        version_id: 0bT305
        url: https://semgrep.dev/playground/r/0bT305/php.lang.security.tainted-url-to-guzzle-client.tainted-url-to-guzzle-client
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            new GuzzleHttp\Client([..., 'base_uri' => $URL, ...])
        - focus-metavariable: $URL
      - patterns:
        - pattern-inside: |
            $CLIENT = new GuzzleHttp\Client(...);
            ...
            $CLIENT->$REQMETH($HTTPTYPE, $URL, ...);
        - pattern: $URL
        - metavariable-regex:
            metavariable: $REQMETH
            regex: (request)|(requestAsync)
      - patterns:
        - pattern-inside: |
            $CLIENT = new GuzzleHttp\Client(...);
            ...
            $CLIENT->$MAGICREQMETH($URL);
        - pattern: $URL
        - metavariable-regex:
            metavariable: $MAGICREQMETH
            regex: (getAsync)|(deleteAsync)|(headAsync)|(optionsAsync)|(patchAsync)|(postAsync)|(putAsync)|(get)|(delete)|(head)|(options)|(patch)|(post)|(put)
      - patterns:
        - pattern: |
            new \GuzzleHttp\Psr7\Request($HTTPTYPE, $URL)
        - focus-metavariable: $URL
- id: php.lang.security.search-cookie-secure-false-ini-config.search-cookie-secure-false-ini-config
  message: Secure cookie flag is explicitly disabled. This will cause cookies to be
    transmitted over unencrypted HTTP connections which can allow theft of confidential
    user data such as session tokens.
  severity: ERROR
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://www.php.net/manual/en/function.setcookie.php
    - https://www.php.net/manual/en/function.session-set-cookie-params.php
    - https://www.php.net/manual/en/configuration.file.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.search-cookie-secure-false-ini-config.search-cookie-secure-false-ini-config
    shortlink: https://sg.run/JRDW
    semgrep.dev:
      rule:
        rule_id: 10UyOx
        version_id: l4TDPR
        url: https://semgrep.dev/playground/r/l4TDPR/php.lang.security.search-cookie-secure-false-ini-config.search-cookie-secure-false-ini-config
        origin: pro_rules
  languages:
  - generic
  paths:
    include:
    - '*.php.ini'
    - php-*.ini
  patterns:
  - pattern-either:
    - pattern: |
        session.cookie_secure = ''
    - pattern: |
        session.cookie_secure = 0
    - pattern: |
        session.cookie_secure = false
- id: php.lang.security.taint-cookie-http-false.taint-cookie-http-false
  message: HttpOnly cookie flag is explicitly disabled. This will cause cookies to
    be transmitted over unencrypted HTTP connections which can allow theft of confidential
    user data such as session tokens.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: LOW
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://www.php.net/manual/en/function.setcookie.php
    - https://www.php.net/manual/en/function.session-set-cookie-params.php
    - https://www.php.net/manual/en/configuration.file.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.taint-cookie-http-false.taint-cookie-http-false
    shortlink: https://sg.run/5qrX
    semgrep.dev:
      rule:
        rule_id: 9AU4dD
        version_id: YDTbP7
        url: https://semgrep.dev/playground/r/YDTbP7/php.lang.security.taint-cookie-http-false.taint-cookie-http-false
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          false
      - pattern: |
          [
            ...,
            'httponly' => false,
            ...
          ]
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: |
          setcookie($NAME,$VALUE,$EXPIRES,$PATH,$DOMAIN,$SECURE,$SINK)
      - pattern: |
          setrawcookie($NAME,$VALUE,$EXPIRES,$PATH,$DOMAIN,$SECURE,$SINK)
      - pattern: |
          set_session_cookie_params($EXPIRES,$PATH,$DOMAIN,$SECURE,$SINK)
      - pattern: |
          setcookie(...,httponly:$SINK)
      - pattern: |
          setrawcookie(...,httponly:$SINK)
      - pattern: |
          set_session_cookie_params(...,httponly:$SINK)
      - pattern: |
          setcookie($NAME,$VALUE,$SINK)
- id: php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false
  message: Secure cookie flag is explicitly disabled. This will cause cookies to be
    transmitted over unencrypted HTTP connections which can allow theft of confidential
    user data such as session tokens.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://www.php.net/manual/en/function.setcookie.php
    - https://www.php.net/manual/en/function.session-set-cookie-params.php
    - https://www.php.net/manual/en/configuration.file.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false
    shortlink: https://sg.run/GJx2
    semgrep.dev:
      rule:
        rule_id: yyUx3k
        version_id: 6xTXKY
        url: https://semgrep.dev/playground/r/6xTXKY/php.lang.security.taint-cookie-secure-false.taint-cookie-secure-false
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          false
      - pattern: |
          [
            ...,
            'secure' => false,
            ...
          ]
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: |
          setcookie($NAME,$VALUE,$EXPIRES,$PATH,$DOMAIN,$SINK,...)
      - pattern: |
          setrawcookie($NAME,$VALUE,$EXPIRES,$PATH,$DOMAIN,$SINK,...)
      - pattern: |
          set_session_cookie_params($EXPIRES,$PATH,$DOMAIN,$SINK,...)
      - pattern: |
          setcookie(...,secure:$SINK)
      - pattern: |
          setrawcookie(...,secure:$SINK)
      - pattern: |
          set_session_cookie_params(...,secure:$SINK)
      - pattern: |
          setcookie($NAME,$VALUE,$SINK)
- id: php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag
  message: Found direct access to a PHP variable wihout HTML escaping inside an inline
    PHP statement setting data from `$_REQUEST[...]`. This may lead to cross-site
    scripting.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://www.php.net/manual/en/language.basic-syntax.phptags.php
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag
    shortlink: https://sg.run/RlGe
    semgrep.dev:
      rule:
        rule_id: r6UA0y
        version_id: o5T1x0
        url: https://semgrep.dev/playground/r/o5T1x0/php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        $REQ[...]
    - metavariable-regex:
        metavariable: $REQ
        regex: \$_(REQUEST|GET|POST)
  pattern-sinks:
  - patterns:
    - pattern: |
        echo(...);
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: |
          htmlentities(...);
      - pattern: |
          htmlspecialchars(...);
      - pattern: |
          esc_html(...)
      - pattern: |
          esc_attr(...)
- id: php.lang.security.tainted-curl-injection.tainted-curl-injection
  message: Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the user input, and use safe methods for executing the commands.
    In PHP, it is possible to use `escapeshellcmd(...)` and `escapeshellarg(...)`
    to correctly sanitize user input that is used respectively as system commands
    or command arguments. User input going into `curl_exec` or `curl_multi_exec` might
    lead to Server-Side Request Forgery (SSRF), which you can avoid by using an allowlist
    of permitted URLs.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://beaglesecurity.com/blog/vulnerability/curl-file-support-is-not-fixed.html
    technology:
    - php
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-curl-injection.tainted-curl-injection
    shortlink: https://sg.run/Dxko
    semgrep.dev:
      rule:
        rule_id: kxUzgk
        version_id: zyT3Rx
        url: https://semgrep.dev/playground/r/zyT3Rx/php.lang.security.tainted-curl-injection.tainted-curl-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $CURL = curl_init(...);
          ...
          curl_exec($CURL);
      - pattern-inside: |
          $CURL = curl_init(...);
          ...
          $MH = curl_multi_init(...);
          ...
          curl_multi_add_handle($MH, $CURL);
          ...
          curl_multi_exec($MH, ...);
    - pattern: |
        curl_setopt($CURL, CURLOPT_URL, ...);
- id: java.spring.security.hibernate-sqli.hibernate-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in Java, it is possible to adopt prepared statements by using
    the `java.sql.PreparedStatement` class with bind variables.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
    technology:
    - spring
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.spring.security.hibernate-sqli.hibernate-sqli
    shortlink: https://sg.run/gAxZ
    semgrep.dev:
      rule:
        rule_id: zdUbKZ
        version_id: GxTe3W
        url: https://semgrep.dev/playground/r/GxTe3W/java.spring.security.hibernate-sqli.hibernate-sqli
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {
            ...
          }
      - pattern-inside: |
          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {
            ...
          }
    - metavariable-regex:
        metavariable: $TYPE
        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))
    - metavariable-regex:
        metavariable: $REQ
        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
    - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SQL
    - pattern-either:
      - pattern: (javax.persistence.EntityManager $EM).createQuery($SQL,...)
      - pattern: (javax.persistence.EntityManager $EM).createSQLQuery($SQL,...)
      - pattern: (org.hibernate.Session $S).createQuery($SQL,...)
      - pattern: (org.hibernate.Session $S).createSQLQuery($SQL,...)
      - pattern: (org.hibernate.SessionFactory $SF).getCurrentSession(...).createQuery($SQL,...)
      - pattern: (org.hibernate.SessionFactory $SF).getCurrentSession(...).createSQLQuery($SQL,...)
      - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($SQL,...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: $X != $Y
      - pattern: $X == $Y
- id: php.lang.security.xml-external-entities-unsafe-entity-loader.xml-external-entities-unsafe-entity-loader
  message: The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://websec.io/2012/08/27/Preventing-XXE-in-PHP.html
    - https://www.php.net/libxml_disable_entity_loader
    - https://www.php.net/manual/en/function.libxml-set-external-entity-loader.php
    technology:
    - php
    - XML
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.xml-external-entities-unsafe-entity-loader.xml-external-entities-unsafe-entity-loader
    shortlink: https://sg.run/5qPA
    semgrep.dev:
      rule:
        rule_id: ZqUK63
        version_id: yeTrdE
        url: https://semgrep.dev/playground/r/yeTrdE/php.lang.security.xml-external-entities-unsafe-entity-loader.xml-external-entities-unsafe-entity-loader
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          $_GET
      - pattern: |
          $_POST
      - pattern: |
          $_COOKIE
      - pattern: |
          $_FILES
      - pattern: |
          $_REQUEST
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        libxml_disable_entity_loader(false);
        ...
    - pattern-either:
      - patterns:
        - pattern: |
            $X->loadXML(...)
        - pattern-inside: |
            $X = new DOMDocument;
            ...
      - pattern: |
          simplexml_load_string(...)
      - pattern: |
          simplexml_load_file(...)
      - pattern: |
          simplexml_import_dom(...)
      - pattern: |
          DOMDocument::loadXML(...)
      - pattern: |
          DOMDocument::load(...)
- id: php.lang.security.xml-external-entities-unsafe-parser-flags.xml-external-entities-unsafe-parser-flags
  message: The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://websec.io/2012/08/27/Preventing-XXE-in-PHP.html
    - https://www.php.net/libxml_disable_entity_loader
    - https://www.php.net/manual/en/function.libxml-set-external-entity-loader.php
    technology:
    - php
    - XML
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.xml-external-entities-unsafe-parser-flags.xml-external-entities-unsafe-parser-flags
    shortlink: https://sg.run/GJxp
    semgrep.dev:
      rule:
        rule_id: nJU2OP
        version_id: rxTe8q
        url: https://semgrep.dev/playground/r/rxTe8q/php.lang.security.xml-external-entities-unsafe-parser-flags.xml-external-entities-unsafe-parser-flags
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          $_GET
      - pattern: |
          $_POST
      - pattern: |
          $_COOKIE
      - pattern: |
          $_FILES
      - pattern: |
          $_REQUEST
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $X->loadXML(...,<... LIBXML_NOENT ...>)
        - pattern-inside: |
            $X = new DOMDocument;
            ...
      - pattern: |
          simplexml_load_string(...,<... LIBXML_NOENT ...>,...)
      - pattern: |
          simplexml_load_file(...,<... LIBXML_NOENT ...>,...)
      - pattern: |
          simplexml_import_dom(...,<... LIBXML_NOENT ...>,...)
      - pattern: |
          DOMDocument::loadXML(...,<... LIBXML_NOENT ...>)
  pattern-sanitizers:
  - patterns:
    - pattern: |
        libxml_set_external_entity_loader(function () {return null;});
        ...
- id: typescript.nextjs.react-nextjs-router-create-element-dangerouslysetinnerhtml.react-nextjs-router-create-element-dangerouslysetinnerhtml
  message: Detected the use of dangerouslySetInnerHTML where input comes from the
    request URL. This can introduce a Cross-Site-Scripting (XSS) vulnerability if
    this comes from user-provided input. If you have to use dangerouslySetInnerHTML,
    consider using a sanitization library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1
    technology:
    - react
    - browser
    - nextjs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-create-element-dangerouslysetinnerhtml.react-nextjs-router-create-element-dangerouslysetinnerhtml
    shortlink: https://sg.run/BpjW
    semgrep.dev:
      rule:
        rule_id: L1Uk7G
        version_id: YDT0bE
        url: https://semgrep.dev/playground/r/YDT0bE/typescript.nextjs.react-nextjs-router-create-element-dangerouslysetinnerhtml.react-nextjs-router-create-element-dangerouslysetinnerhtml
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$IMPORT,... } from 'next/router'
          ...
      - pattern-inside: |
          import $IMPORT from 'next/router';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern-either:
          - pattern-inside: |
              var { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              const { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              let { ...,$PROPS,... } = $ROUTER.query
              ...
        - focus-metavariable: $PROPS
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern: "$ROUTER.query.$VALUE \n"
      - patterns:
        - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        <$EL ... dangerouslySetInnerHTML={$PROP}></$EL>
    - focus-metavariable: $PROP
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: php.lang.security.tainted-url-to-httpful.tainted-url-to-httpful
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/nategood/httpful
    technology:
    - php
    - httpful
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-url-to-httpful.tainted-url-to-httpful
    shortlink: https://sg.run/4K4l
    semgrep.dev:
      rule:
        rule_id: eqUygr
        version_id: K3TLA4
        url: https://semgrep.dev/playground/r/K3TLA4/php.lang.security.tainted-url-to-httpful.tainted-url-to-httpful
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_REQUEST
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_FILES
      - pattern: $_COOKIE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          \Httpful\Request::$METHOD($URL, ...);
      - pattern-inside: |
          Httpful\Request::$METHOD($URL, ...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: (get)|(post)|(getQuick)|(put)|(patch)|(delete)|(head)|(options)
    - pattern: $URL
- id: php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script
  message: Detected user input going into a string that looks like html. This can
    lead to cross site scripting and your cookies or other information being stolen.
    Instead, encode or sanitize user input with htmlspecialchars or use automatic
    context-aware escaping with a template engine such as Latte.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://brightsec.com/blog/cross-site-scripting-php/
    - https://github.com/tolgadevsec/PHP-Security-Cheatsheet#cross-site-scripting
    technology:
    - php
    - generic
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script
    shortlink: https://sg.run/PKkY
    semgrep.dev:
      rule:
        rule_id: v8U01O
        version_id: qkTwAb
        url: https://semgrep.dev/playground/r/qkTwAb/php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: $_GET
    - pattern: $_REQUEST
    - pattern: $_POST
    - pattern: $_COOKIE
    - pattern: $_FILES
  pattern-sinks:
  - patterns:
    - focus-metavariable: $PHP
    - pattern: |
        $TAG.$PHP.$ENDTAG
    - metavariable-pattern:
        metavariable: $TAG
        pattern-regex: ('|")<[a-zA-Z0-9]*>.*('|")
  pattern-sanitizers:
  - pattern-either:
    - pattern: htmlspecialchars(...)
    - pattern: esc_html(...)
    - pattern: esc_attr(...)
- id: python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
  message: Detected explicitly unescaped content using 'Markup()'. This permits the
    unescaped data to include unescaped HTML which could result in cross-site scripting.
    Ensure this data is not externally controlled, or consider rewriting to not use
    'Markup()'.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://tedboy.github.io/flask/generated/generated/flask.Markup.html
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
    shortlink: https://sg.run/AvZ8
    semgrep.dev:
      rule:
        rule_id: lBU95l
        version_id: LjTp0k
        url: https://semgrep.dev/playground/r/LjTp0k/python.flask.security.xss.audit.explicit-unescape-with-markup.explicit-unescape-with-markup
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: flask.Markup(...)
  - pattern: flask.Markup.unescape(...)
  - pattern: markupsafe.Markup(...)
  - pattern: $MARKUPOBJ.unescape()
- id: python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
  languages:
  - python
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    references:
    - https://cwe.mitre.org/data/definitions/522.html
    category: security
    technology:
    - jwt
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
    shortlink: https://sg.run/qxPy
    semgrep.dev:
      rule:
        rule_id: 2ZUb1L
        version_id: 5PTY6x
        url: https://semgrep.dev/playground/r/5PTY6x/python.jwt.security.jwt-exposed-credentials.jwt-python-exposed-credentials
        origin: community
  message: Password is exposed through JWT token payload. This is not encrypted and
    the password could be compromised. Do not store passwords in JWT tokens.
  pattern-either:
  - pattern: |
      jwt.encode({...,"password":$P,...},...)
  - pattern: |
      $PAYLOAD = {...,"password":$P,...}
      ...
      jwt.encode($PAYLOAD,...)
  severity: ERROR
- id: python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret
  message: 'Hardcoded JWT secret or private key is used. This is a Insufficiently
    Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html
    Consider using an appropriate security mechanism to protect the credentials (e.g.
    keeping secrets in environment variables)'
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    references:
    - https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret
    shortlink: https://sg.run/l2E9
    semgrep.dev:
      rule:
        rule_id: X5U8P5
        version_id: GxTW2b
        url: https://semgrep.dev/playground/r/GxTW2b/python.jwt.security.jwt-hardcode.jwt-python-hardcoded-secret
        origin: community
  patterns:
  - pattern: |
      jwt.encode($X, $SECRET, ...)
  - focus-metavariable: $SECRET
  - pattern: |
      "..."
  languages:
  - python
  severity: ERROR
- id: python.jwt.security.unverified-jwt-decode.unverified-jwt-decode
  pattern: |
    jwt.decode(..., verify=False, ...)
  message: Detected JWT token decoded with 'verify=False'. This bypasses any integrity
    checks for the token which means the token could be tampered with by malicious
    actors. Ensure that the JWT token is verified.
  metadata:
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-287: Improper Authentication'
    references:
    - https://github.com/we45/Vulnerable-Flask-App/blob/752ee16087c0bfb79073f68802d907569a1f0df7/app/app.py#L96
    category: security
    technology:
    - jwt
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode
    shortlink: https://sg.run/6nyB
    semgrep.dev:
      rule:
        rule_id: 10UKjo
        version_id: A8TnR1
        url: https://semgrep.dev/playground/r/A8TnR1/python.jwt.security.unverified-jwt-decode.unverified-jwt-decode
        origin: community
  fix-regex:
    regex: (verify\s*=\s*)False
    replacement: \1True
  severity: ERROR
  languages:
  - python
- id: python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls
  pattern: ftplib.FTP(...)
  fix-regex:
    regex: FTP(.*)\)
    replacement: FTP_TLS\1, context=ssl.create_default_context())
  message: The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS'
    class instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS
    category: security
    technology:
    - ftplib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls
    shortlink: https://sg.run/AvPp
    semgrep.dev:
      rule:
        rule_id: qNUjlR
        version_id: 7ZTY7n
        url: https://semgrep.dev/playground/r/7ZTY7n/python.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
  pattern: $CONTEXT.set_ciphers(...)
  message: The 'ssl' module disables insecure cipher suites by default. Therefore,
    use of 'set_ciphers()' should only be used when you have very specialized requirements.
    Otherwise, you risk lowering the security of the SSL channel.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
    references:
    - https://docs.python.org/3/library/ssl.html#cipher-selection
    - https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers
    category: security
    technology:
    - ssl
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
    shortlink: https://sg.run/0Q0v
    semgrep.dev:
      rule:
        rule_id: oqUeYJ
        version_id: QkTQyA
        url: https://semgrep.dev/playground/r/QkTQyA/python.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp.insecure-openerdirector-open-ftp
  message: Detected an unsecured transmission channel. 'OpenerDirector.open(...)'
    is being used with 'ftp://'. Information sent over this connection will be unencrypted.
    Consider using SFTP instead. urllib does not support SFTP, so consider a library
    which supports SFTP.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp.insecure-openerdirector-open-ftp
    shortlink: https://sg.run/Klj7
    semgrep.dev:
      rule:
        rule_id: zdUkPQ
        version_id: 3ZTxJb
        url: https://semgrep.dev/playground/r/3ZTxJb/python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open-ftp.insecure-openerdirector-open-ftp
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.OpenerDirector(...).open("=~/^[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/^[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: |
        $URL = "=~/^[Ff][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.OpenerDirector(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.OpenerDirector(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp.insecure-request-object-ftp
  message: Detected a 'urllib.request.Request()' object using an insecure transport
    protocol, 'ftp://'. This connection will not be encrypted. Consider using SFTP
    instead. urllib does not support SFTP natively, so consider using a library which
    supports SFTP.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.Request
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp.insecure-request-object-ftp
    shortlink: https://sg.run/l2Py
    semgrep.dev:
      rule:
        rule_id: 2ZUbWA
        version_id: PkTnLn
        url: https://semgrep.dev/playground/r/PkTnLn/python.lang.security.audit.insecure-transport.urllib.insecure-request-object-ftp.insecure-request-object-ftp
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.Request("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.Request($URL, ...)
  - pattern: |-
      def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
        ...
        urllib.request.Request($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-request-object.insecure-request-object
  message: Detected a 'urllib.request.Request()' object using an insecure transport
    protocol, 'http://'. This connection will not be encrypted. Use 'https://' instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.Request
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-request-object.insecure-request-object
    shortlink: https://sg.run/YvAe
    semgrep.dev:
      rule:
        rule_id: X5U8Bp
        version_id: JdTZg2
        url: https://semgrep.dev/playground/r/JdTZg2/python.lang.security.audit.insecure-transport.urllib.insecure-request-object.insecure-request-object
        origin: community
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.Request("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.Request($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        urllib.request.Request($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen
  message: Detected 'urllib.urlopen()' using 'http://'. This request will not be encrypted.
    Use 'https://' instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen
    shortlink: https://sg.run/oxB9
    semgrep.dev:
      rule:
        rule_id: 10UKgW
        version_id: GxTWwb
        url: https://semgrep.dev/playground/r/GxTWwb/python.lang.security.audit.insecure-transport.urllib.insecure-urlopen.insecure-urlopen
        origin: community
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  pattern-either:
  - pattern: urllib.request.urlopen("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.urlopen($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlopen($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp.insecure-urlopener-open-ftp
  message: Detected an insecure transmission channel. 'URLopener.open(...)' is being
    used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider
    using a library which supports SFTP.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp.insecure-urlopener-open-ftp
    shortlink: https://sg.run/zvwG
    semgrep.dev:
      rule:
        rule_id: 9AU1DY
        version_id: RGTwvW
        url: https://semgrep.dev/playground/r/RGTwvW/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-open-ftp.insecure-urlopener-open-ftp
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.URLopener(...).open("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Ff][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - pattern: |
      $URL = "=~/[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.URLopener(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Ff][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context
  options:
    symbolic_propagation: true
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-pattern:
        metavariable: $URL
        language: regex
        patterns:
        - pattern-regex: http://
        - pattern-not-regex: .*://localhost
        - pattern-not-regex: .*://127\.0\.0\.1
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        with requests.Session(...) as $SESSION:
          ...
    - pattern-either:
      - pattern: $SESSION.$W($SINK, ...)
      - pattern: $SESSION.request($METHOD, $SINK, ...)
    - focus-metavariable: $SINK
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  message: Detected a request using 'http://'. This request will be unencrypted. Use
    'https://' instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
    category: security
    technology:
    - requests
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context
    shortlink: https://sg.run/Bk5W
    semgrep.dev:
      rule:
        rule_id: lBU9BZ
        version_id: zyTgNb
        url: https://semgrep.dev/playground/r/zyTgNb/python.lang.security.audit.insecure-transport.requests.request-session-http-in-with-context.request-session-http-in-with-context
        origin: community
  languages:
  - python
  severity: INFO
- id: python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http
  options:
    symbolic_propagation: true
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-pattern:
        metavariable: $URL
        language: regex
        patterns:
        - pattern-regex: http://
        - pattern-not-regex: .*://localhost
        - pattern-not-regex: .*://127\.0\.0\.1
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: requests.Session(...).$W($SINK, ...)
      - pattern: requests.Session(...).request($METHOD, $SINK, ...)
    - focus-metavariable: $SINK
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  message: Detected a request using 'http://'. This request will be unencrypted. Use
    'https://' instead.
  languages:
  - python
  severity: INFO
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
    category: security
    technology:
    - requests
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http
    shortlink: https://sg.run/DoBY
    semgrep.dev:
      rule:
        rule_id: YGURXw
        version_id: pZTgen
        url: https://semgrep.dev/playground/r/pZTgen/python.lang.security.audit.insecure-transport.requests.request-session-with-http.request-session-with-http
        origin: community
- id: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5
  pattern: hashlib.md5(...)
  fix-regex:
    regex: md5
    replacement: sha256
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp: 'A3: Sensitive Data Exposure'
    bandit-code: B303
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5
    shortlink: https://sg.run/9odY
    semgrep.dev:
      rule:
        rule_id: wdUJ2Y
        version_id: nWTPy6
        url: https://semgrep.dev/playground/r/nWTPy6/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5
        origin: community
  severity: WARNING
  languages:
  - python
- id: typescript.react.react-refs-url.react-refs-url
  message: Detected the use of innerHTML/outerHTML where input comes from a request
    URL. This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes
    from user-provided input. If you have to use dangerouslySetInnerHTML, consider
    using a sanitization library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - react
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.react.react-refs-url.react-refs-url
    shortlink: https://sg.run/1DQw
    semgrep.dev:
      rule:
        rule_id: 0oUKyN
        version_id: w8TxbX
        url: https://semgrep.dev/playground/r/w8TxbX/typescript.react.react-refs-url.react-refs-url
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: new URLSearchParams(useLocation().search).get('...')
      - pattern: new URL(location.href).searchParams.get('...')
      - pattern: new URL($WINDOW. ... .location.href).searchParams.get('...')
      - pattern: new URLSearchParams(location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams(location.hash.slice(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.slice(1)).get("...")
      - pattern: location.hash.split("...")[1]
      - pattern: $WINDOW. ... .location.hash.split("...")[1]
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URLSearchParams(useLocation().search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(window.location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.slice(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.slice(1))
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URL(location.href)
          ...
      - pattern-inside: |
          $VALUE = new URL($WINDOW. ... .location.href)
          ...
    - pattern: $VALUE.searchParams.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          [...,$VALUE,...] = useSearchParams()
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern: |
        [$QUERY,...] = useQueryParams(...)
    - focus-metavariable: $QUERY
  - patterns:
    - pattern: |
        $QUERY = useQueryParams(...)
    - focus-metavariable: $QUERY
    - pattern: $QUERY.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          var { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          const { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          let { ...,$VALUE,... } = useLocation()
          ...
    - pattern-inside: |
        $ASSIGN = new URLSearchParams($VALUE)
        ...
    - pattern: $ASSIGN.get('...')
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $BODY = $REACT.useRef(...)
          ...
      - pattern-inside: |
          $BODY = useRef(...)
          ...
      - pattern-inside: |
          $BODY = findDOMNode(...)
          ...
      - pattern-inside: |
          $BODY = createRef(...)
          ...
      - pattern-inside: |
          $BODY = $REACT.findDOMNode(...)
          ...
      - pattern-inside: |
          $BODY = $REACT.createRef(...)
          ...
    - pattern-either:
      - pattern: "$BODY. ... .innerHTML = $SINK \n"
      - pattern: "$BODY.innerHTML = $SINK \n"
      - pattern: "$BODY. ... .outerHTML = $SINK \n"
      - pattern: "$BODY.outerHTML = $SINK \n"
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
  pattern: hashlib.sha1(...)
  fix-regex:
    regex: sha1
    replacement: sha256
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B303
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - python
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
    shortlink: https://sg.run/ydYx
    semgrep.dev:
      rule:
        rule_id: x8UnBk
        version_id: e1TA7A
        url: https://semgrep.dev/playground/r/e1TA7A/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Use SHA256 or SHA3 instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L59
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html
    - https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability
    - http://2012.sharcs.org/slides/stevens.pdf
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1
    shortlink: https://sg.run/3ALr
    semgrep.dev:
      rule:
        rule_id: ReUPO3
        version_id: 5PTYnG
        url: https://semgrep.dev/playground/r/5PTYnG/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Crypto.Hash.SHA.new(...)
  - pattern: Cryptodome.Hash.SHA.new (...)
- id: python.requests.security.disabled-cert-validation.disabled-cert-validation
  message: Certificate verification has been explicitly disabled. This permits insecure
    connections to insecure servers. Re-enable certification validation.
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://stackoverflow.com/questions/41740361/is-it-safe-to-disable-ssl-certificate-verification-in-pythonss-requests-lib
    category: security
    technology:
    - requests
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation
    shortlink: https://sg.run/AlYp
    semgrep.dev:
      rule:
        rule_id: qNUoYR
        version_id: rxTbO4
        url: https://semgrep.dev/playground/r/rxTbO4/python.requests.security.disabled-cert-validation.disabled-cert-validation
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: requests.put(..., verify=False, ...)
  - pattern: requests.patch(..., verify=False, ...)
  - pattern: requests.delete(..., verify=False, ...)
  - pattern: requests.head(..., verify=False, ...)
  - pattern: requests.options(..., verify=False, ...)
  - pattern: requests.request(..., verify=False, ...)
  - pattern: requests.get(..., verify=False, ...)
  - pattern: requests.post(..., verify=False, ...)
  fix-regex:
    regex: verify(\s)*=(\s)*False
    replacement: verify=True
- id: python.sh.security.string-concat.string-concat
  languages:
  - python
  severity: ERROR
  message: Detected string concatenation or formatting in a call to a command via
    'sh'. This could be a command injection vulnerability if the data is user-controlled.
    Instead, use a list and append the argument.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - sh
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sh.security.string-concat.string-concat
    shortlink: https://sg.run/Wg34
    semgrep.dev:
      rule:
        rule_id: JDUP1G
        version_id: NdT5DZ
        url: https://semgrep.dev/playground/r/NdT5DZ/python.sh.security.string-concat.string-concat
        origin: community
  pattern-either:
  - pattern: sh.$BIN($X + $Y)
  - pattern: sh.$BIN($X.format(...))
  - pattern: sh.$BIN(f"...{...}...")
- id: python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection
  patterns:
  - pattern-either:
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          $SESSION.query(...).$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          $SESSION.query.join(...).$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          $SESSION.query.$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
    - pattern: |
        def $FUNC(...,$VAR,...):
          ...
          query.$SQLFUNC("...".$FORMATFUNC(...,$VAR,...))
  - metavariable-regex:
      metavariable: $SQLFUNC
      regex: (group_by|order_by|distinct|having|filter)
  - metavariable-regex:
      metavariable: $FORMATFUNC
      regex: (?!bindparams)
  message: Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause
    sql injections if the developer inputs raw SQL into the before-mentioned clauses.
    This pattern captures relevant cases in which the developer inputs raw SQL into
    the distinct, having, group_by, order_by or filter clauses and injects user-input
    into the raw SQL with any function besides "bindparams". Use bindParams to securely
    bind user-input to SQL statements.
  fix-regex:
    regex: format
    replacement: bindparams
  languages:
  - python
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - sqlalchemy
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection
    shortlink: https://sg.run/J3Xo
    semgrep.dev:
      rule:
        rule_id: BYUBWo
        version_id: xyT9Lw
        url: https://semgrep.dev/playground/r/xyT9Lw/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection
        origin: community
- id: ruby.jwt.security.audit.jwt-decode-without-verify.ruby-jwt-decode-without-verify
  message: Detected the decoding of a JWT token without a verify step. JWT tokens
    must be verified before use, otherwise the token's integrity is unknown. This
    means a malicious actor could forge a JWT token with any claims.
  metadata:
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.jwt.security.audit.jwt-decode-without-verify.ruby-jwt-decode-without-verify
    shortlink: https://sg.run/AlYg
    semgrep.dev:
      rule:
        rule_id: KxU426
        version_id: 0bTQ68
        url: https://semgrep.dev/playground/r/0bTQ68/ruby.jwt.security.audit.jwt-decode-without-verify.ruby-jwt-decode-without-verify
        origin: community
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern-inside: |
      require 'jwt'
      ...
  - pattern: JWT.decode($PAYLOAD,$SECRET,false,...)
- id: python.lang.security.deserialization.pickle.avoid-shelve
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve
    shortlink: https://sg.run/dKkZ
    semgrep.dev:
      rule:
        rule_id: 8GUje2
        version_id: yeTbGQ
        url: https://semgrep.dev/playground/r/yeTbGQ/python.lang.security.deserialization.pickle.avoid-shelve
        origin: community
  languages:
  - python
  message: Avoid using `shelve`, which uses `pickle`, which is known to lead to code
    execution vulnerabilities. When unpickling, the serialized data could be manipulated
    to run arbitrary code. Instead, consider serializing the relevant data as JSON
    or a similar text-based serialization format.
  severity: WARNING
  pattern: shelve.$FUNC(...)
- id: ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln
  patterns:
  - pattern-either:
    - pattern: |
        $MOD.new(params[$CODE])
    - pattern: |
        $MOD.new(..., params[$CODE], :without_protection => true, ...)
  - pattern-not-inside: |
      attr_accessible $VAR
      ...
      $MOD.new(params[$CODE])
  message: 'Checks for calls to without_protection during mass assignment (which allows
    record creation from hash values). This can lead to users bypassing permissions
    protections. For Rails 4 and higher, mass protection is on by default. Fix: Don''t
    use :without_protection => true. Instead, configure attr_accessible to control
    attribute access.'
  metadata:
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_without_protection.rb
    - https://www.acunetix.com/vulnerabilities/web/rails-mass-assignment/
    category: security
    technology:
    - ruby
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln
    shortlink: https://sg.run/xY8e
    semgrep.dev:
      rule:
        rule_id: ZqUqQg
        version_id: JdT22e
        url: https://semgrep.dev/playground/r/JdT22e/ruby.lang.security.unprotected-mass-assign.mass-assignment-vuln
        origin: community
  languages:
  - ruby
  severity: WARNING
- id: ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1
  message: Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision
    by Google, which could lead to vulnerabilities. Use SHA256, SHA3 or other hashing
    functions instead.
  metadata:
    cwe:
    - 'CWE-328: Use of Weak Hash'
    references:
    - https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html
    - https://shattered.io/
    category: security
    technology:
    - ruby
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1
    shortlink: https://sg.run/e4qX
    semgrep.dev:
      rule:
        rule_id: EwU4jq
        version_id: GxT444
        url: https://semgrep.dev/playground/r/GxT444/ruby.lang.security.weak-hashes-sha1.weak-hashes-sha1
        origin: community
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: Digest::SHA1.$FUNC
  - pattern: OpenSSL::Digest::SHA1.$FUNC
  - pattern: OpenSSL::HMAC.$FUNC("sha1",...)
- id: ruby.lang.security.yaml-parsing.yaml-parsing
  message: Detected enabled YAML parsing. This is vulnerable to remote code execution
    in Rails 2.x versions up to 2.3.14. To fix, delete this line.
  fix-regex:
    regex: ActionController.*:yaml
    replacement: ' '
  severity: WARNING
  languages:
  - ruby
  pattern: ActionController::Base.param_parsers[Mime::YAML] = :yaml
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - ruby
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.yaml-parsing.yaml-parsing
    shortlink: https://sg.run/v08X
    semgrep.dev:
      rule:
        rule_id: 7KUegx
        version_id: RGTBBd
        url: https://semgrep.dev/playground/r/RGTBBd/ruby.lang.security.yaml-parsing.yaml-parsing
        origin: community
- id: ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_content_tag.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
    shortlink: https://sg.run/dg8P
    semgrep.dev:
      rule:
        rule_id: L1U4qz
        version_id: YDTzxq
        url: https://semgrep.dev/playground/r/YDTzxq/ruby.rails.security.audit.xss.avoid-content-tag.avoid-content-tag
        origin: community
  message: '''content_tag()'' bypasses HTML escaping for some portion of the content.
    If external data can reach here, this exposes your application to cross-site scripting
    (XSS) attacks. Ensure no external data reaches here. If you must do this, create
    your HTML manually and use ''html_safe''. Ensure no external data enters the HTML-safe
    string!'
  languages:
  - ruby
  severity: WARNING
  pattern: content_tag(...)
- id: ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cross_site_scripting.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross_site_scripting/index.markdown
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe
    shortlink: https://sg.run/Zeq7
    semgrep.dev:
      rule:
        rule_id: 8GUEQK
        version_id: o5TWPk
        url: https://semgrep.dev/playground/r/o5TWPk/ruby.rails.security.audit.xss.avoid-html-safe.avoid-html-safe
        origin: community
  message: '''html_safe()'' does not make the supplied string safe. ''html_safe()''
    bypasses HTML escaping. If external data can reach here, this exposes your application
    to cross-site scripting (XSS) attacks. Ensure no external data reaches here.'
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: $STR.html_safe
  - pattern: $STR.html_safe.$MORE
- id: ruby.rails.security.audit.xss.avoid-raw.avoid-raw
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cross_site_scripting.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://api.rubyonrails.org/classes/ActionView/Helpers/OutputSafetyHelper.html#method-i-raw
    - https://www.netsparker.com/blog/web-security/preventing-xss-ruby-on-rails-web-applications/
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-raw.avoid-raw
    shortlink: https://sg.run/nqJG
    semgrep.dev:
      rule:
        rule_id: gxUW3x
        version_id: pZTqJO
        url: https://semgrep.dev/playground/r/pZTqJO/ruby.rails.security.audit.xss.avoid-raw.avoid-raw
        origin: community
  message: '''raw()'' bypasses HTML escaping. If external data can reach here, this
    exposes your application to cross-site scripting (XSS) attacks. If you must do
    this, construct individual strings and mark them as safe for HTML rendering with
    `html_safe()`.'
  languages:
  - ruby
  severity: WARNING
  pattern: raw(...)
- id: ruby.rails.security.audit.xss.avoid-render-inline.avoid-render-inline
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render_inline.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-render-inline.avoid-render-inline
    shortlink: https://sg.run/E5w8
    semgrep.dev:
      rule:
        rule_id: QrU6Ww
        version_id: jQTLp3
        url: https://semgrep.dev/playground/r/jQTLp3/ruby.rails.security.audit.xss.avoid-render-inline.avoid-render-inline
        origin: community
  message: '''render inline: ...'' renders an entire ERB template inline and is dangerous.
    If external data can reach here, this exposes your application to server-side
    template injection (SSTI) or cross-site scripting (XSS) attacks. Instead, consider
    using a partial or another safe rendering method.'
  languages:
  - ruby
  severity: WARNING
  pattern: 'render inline: ...'
- id: ruby.rails.security.audit.xss.avoid-render-text.avoid-render-text
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render_inline.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#inline-renders---even-worse-than-xss
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-render-text.avoid-render-text
    shortlink: https://sg.run/70Kv
    semgrep.dev:
      rule:
        rule_id: 3qUBk4
        version_id: 1QT0n5
        url: https://semgrep.dev/playground/r/1QT0n5/ruby.rails.security.audit.xss.avoid-render-text.avoid-render-text
        origin: community
  message: '''render text: ...'' actually sets the content-type to ''text/html''.
    If external data can reach here, this exposes your application to cross-site scripting
    (XSS) attacks. Instead, use ''render plain: ...'' to render non-HTML text.'
  languages:
  - ruby
  severity: WARNING
  pattern: 'render text: ...'
  fix-regex:
    regex: 'text:'
    replacement: 'plain:'
- id: ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_template_injection.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/template_injection/index.markdown
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation
    shortlink: https://sg.run/L01L
    semgrep.dev:
      rule:
        rule_id: 4bUzR9
        version_id: 9lTELJ
        url: https://semgrep.dev/playground/r/9lTELJ/ruby.rails.security.audit.xss.manual-template-creation.manual-template-creation
        origin: community
  message: Detected manual creation of an ERB template. Manual creation of templates
    may expose your application to server-side template injection (SSTI) or cross-site
    scripting (XSS) attacks if user input is used to create the template. Instead,
    create a '.erb' template file and use 'render'.
  languages:
  - ruby
  severity: WARNING
  pattern: ERB.new(...)
- id: ruby.rails.security.audit.xss.templates.alias-for-html-safe.alias-for-html-safe
  message: The syntax `<%== ... %>` is an alias for `html_safe`. This means the content
    inside these tags will be rendered as raw HTML. This may expose your application
    to cross-site scripting. If you need raw HTML, prefer using the more explicit
    `html_safe` and be sure to correctly sanitize variables using a library such as
    DOMPurify.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027
    - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===
    category: security
    technology:
    - rails
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.alias-for-html-safe.alias-for-html-safe
    shortlink: https://sg.run/8nGJ
    semgrep.dev:
      rule:
        rule_id: PeUkJe
        version_id: yeTQzD
        url: https://semgrep.dev/playground/r/yeTQzD/ruby.rails.security.audit.xss.templates.alias-for-html-safe.alias-for-html-safe
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern: <%== ... %>
  - pattern-not: <%== $...A.to_json %>
- id: ruby.rails.security.audit.xss.templates.avoid-content-tag.avoid-content-tag
  message: '''content_tag'' exhibits unintuitive escaping behavior and may accidentally
    expose your application to cross-site scripting. If using Rails 2, only attribute
    values are escaped. If using Rails 3, content and attribute values are escaped.
    Tag and attribute names are never escaped. Because of this, it is recommended
    to use ''html_safe'' if you must render raw HTML data.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://brakemanscanner.org/docs/warning_types/content_tag/
    references:
    - https://brakemanscanner.org/docs/warning_types/content_tag/
    category: security
    technology:
    - rails
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.avoid-content-tag.avoid-content-tag
    shortlink: https://sg.run/gJxo
    semgrep.dev:
      rule:
        rule_id: JDUPNG
        version_id: rxTbX6
        url: https://semgrep.dev/playground/r/rxTbX6/ruby.rails.security.audit.xss.templates.avoid-content-tag.avoid-content-tag
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern: content_tag
- id: ruby.lang.security.weak-hashes-md5.weak-hashes-md5
  message: Should not use md5 to generate hashes. md5 is proven to be vulnerable through
    the use of brute-force attacks. Could also result in collisions, leading to potential
    collision attacks. Use SHA256 or other hashing functions instead.
  metadata:
    cwe:
    - 'CWE-328: Use of Weak Hash'
    references:
    - https://www.ibm.com/support/pages/security-bulletin-vulnerability-md5-signature-and-hash-algorithm-affects-sterling-integrator-and-sterling-file-gateway-cve-2015-7575
    category: security
    technology:
    - ruby
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.weak-hashes-md5.weak-hashes-md5
    shortlink: https://sg.run/O1re
    semgrep.dev:
      rule:
        rule_id: nJUYxZ
        version_id: qkTz15
        url: https://semgrep.dev/playground/r/qkTz15/ruby.lang.security.weak-hashes-md5.weak-hashes-md5
        origin: community
  languages:
  - ruby
  severity: WARNING
  pattern-either:
  - pattern: Digest::MD5.base64digest $X
  - pattern: Digest::MD5.hexdigest $X
  - pattern: Digest::MD5.digest $X
  - pattern: Digest::MD5.new
  - pattern: OpenSSL::Digest::MD5.base64digest $X
  - pattern: OpenSSL::Digest::MD5.hexdigest $X
  - pattern: OpenSSL::Digest::MD5.digest $X
  - pattern: OpenSSL::Digest::MD5.new
- id: terraform.azure.security.appservice.appservice-account-identity-registered.appservice-account-identity-registered
  message: Registering the identity used by an App with AD allows it to interact with
    other services without using username and password. Set the `identity` block in
    your appservice.
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_app_service" "..." {
      ...
        identity {
          type = "..."
          identity_ids = "..."
        }
      ...
      }
  - pattern-not-inside: |
      resource "azurerm_app_service" "..." {
      ...
        identity {
          type = "SystemAssigned"
        }
      ...
      }
  - pattern-inside: |
      resource "azurerm_app_service" "..." {
      ...
      }
  metadata:
    category: security
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-287: Improper Authentication'
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#identity
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.appservice.appservice-account-identity-registered.appservice-account-identity-registered
    shortlink: https://sg.run/PbXY
    semgrep.dev:
      rule:
        rule_id: WAUynd
        version_id: qkTDZK
        url: https://semgrep.dev/playground/r/qkTDZK/terraform.azure.security.appservice.appservice-account-identity-registered.appservice-account-identity-registered
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.appservice.appservice-authentication-enabled.appservice-authentication-enabled
  message: Enabling authentication ensures that all communications in the application
    are authenticated. The `auth_settings` block needs to be filled out with the appropriate
    auth backend settings
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_app_service" "..." {
      ...
        auth_settings {
          ...
          enabled = true
          ...
        }
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
          auth_settings {
            ...
            enabled = false
            ...
          }
        ...
        }
  metadata:
    cwe:
    - 'CWE-287: Improper Authentication'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#auth_settings
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.appservice.appservice-authentication-enabled.appservice-authentication-enabled
    shortlink: https://sg.run/JxYw
    semgrep.dev:
      rule:
        rule_id: 0oU23p
        version_id: l4TEje
        url: https://semgrep.dev/playground/r/l4TEje/terraform.azure.security.appservice.appservice-authentication-enabled.appservice-authentication-enabled
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.azure.security.appservice.appservice-enable-http2.appservice-enable-http2
  message: Use the latest version of HTTP to ensure you are benefiting from security
    fixes. Add `http2_enabled = true` to your appservice resource block
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_app_service" "..." {
      ...
        site_config {
          ...
          http2_enabled = true
          ...
        }
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
          site_config {
            ...
            http2_enabled = false
            ...
          }
        ...
        }
  metadata:
    cwe:
    - 'CWE-444: Inconsistent Interpretation of HTTP Requests (''HTTP Request/Response
      Smuggling'')'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#http2_enabled
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.appservice.appservice-enable-http2.appservice-enable-http2
    shortlink: https://sg.run/5DkA
    semgrep.dev:
      rule:
        rule_id: KxU7LJ
        version_id: YDTLyx
        url: https://semgrep.dev/playground/r/YDTLyx/terraform.azure.security.appservice.appservice-enable-http2.appservice-enable-http2
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.appservice.appservice-enable-https-only.appservice-enable-https-only
  message: By default, clients can connect to App Service by using both HTTP or HTTPS.
    HTTP should be disabled enabling the HTTPS Only setting.
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_app_service" "..." {
      ...
        https_only = true
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
          https_only = false
        ...
        }
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#https_only
    - https://docs.microsoft.com/en-us/azure/app-service/configure-ssl-bindings#enforce-https
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.appservice.appservice-enable-https-only.appservice-enable-https-only
    shortlink: https://sg.run/GOKp
    semgrep.dev:
      rule:
        rule_id: qNUXwx
        version_id: JdTXWO
        url: https://semgrep.dev/playground/r/JdTXWO/terraform.azure.security.appservice.appservice-enable-https-only.appservice-enable-https-only
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.azure.security.appservice.appservice-require-client-cert.appservice-require-client-cert
  message: Detected an AppService that was not configured to use a client certificate.
    Add `client_cert_enabled = true` in your resource block.
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_app_service" "..." {
      ...
        client_cert_enabled = true
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_app_service" "..." {
        ...
          client_cert_enabled = false
        ...
        }
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#client_cert_enabled
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.appservice.appservice-require-client-cert.appservice-require-client-cert
    shortlink: https://sg.run/RX1O
    semgrep.dev:
      rule:
        rule_id: lBU8D6
        version_id: 5PTZwl
        url: https://semgrep.dev/playground/r/5PTZwl/terraform.azure.security.appservice.appservice-require-client-cert.appservice-require-client-cert
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.appservice.appservice-use-secure-tls-policy.appservice-use-secure-tls-policy
  message: Detected an AppService that was not configured to use TLS 1.2. Add `site_config.min_tls_version
    = "1.2"` in your resource block.
  patterns:
  - pattern: min_tls_version = $ANYTHING
  - pattern-inside: |
      resource "azurerm_app_service" "$NAME" {
        ...
      }
  - pattern-not-inside: min_tls_version = "1.2"
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/app_service#min_tls_version
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.appservice.appservice-use-secure-tls-policy.appservice-use-secure-tls-policy
    shortlink: https://sg.run/AXRp
    semgrep.dev:
      rule:
        rule_id: YGUDbZ
        version_id: GxT1A5
        url: https://semgrep.dev/playground/r/GxT1A5/terraform.azure.security.appservice.appservice-use-secure-tls-policy.appservice-use-secure-tls-policy
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.azure.security.functionapp.functionapp-authentication-enabled.functionapp-authentication-enabled
  message: Enabling authentication ensures that all communications in the application
    are authenticated. The `auth_settings` block needs to be filled out with the appropriate
    auth backend settings
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_function_app" "..." {
      ...
        auth_settings {
          ...
          enabled = true
          ...
        }
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_function_app" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_function_app" "..." {
        ...
          auth_settings {
            ...
            enabled = false
            ...
          }
        ...
        }
  metadata:
    cwe:
    - 'CWE-287: Improper Authentication'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#enabled
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.functionapp.functionapp-authentication-enabled.functionapp-authentication-enabled
    shortlink: https://sg.run/B6AW
    semgrep.dev:
      rule:
        rule_id: 6JU1X8
        version_id: zyTzp4
        url: https://semgrep.dev/playground/r/zyTzp4/terraform.azure.security.functionapp.functionapp-authentication-enabled.functionapp-authentication-enabled
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.functionapp.functionapp-enable-http2.functionapp-enable-http2
  message: Use the latest version of HTTP to ensure you are benefiting from security
    fixes. Add `http2_enabled = true` to your function app resource block
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_function_app" "..." {
      ...
        site_config {
          ...
          http2_enabled = true
          ...
        }
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_function_app" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_function_app" "..." {
        ...
          site_config {
            ...
            http2_enabled = false
            ...
          }
        ...
        }
  metadata:
    cwe:
    - 'CWE-444: Inconsistent Interpretation of HTTP Requests (''HTTP Request/Response
      Smuggling'')'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/function_app#http2_enabled
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.functionapp.functionapp-enable-http2.functionapp-enable-http2
    shortlink: https://sg.run/DzDY
    semgrep.dev:
      rule:
        rule_id: oqU41L
        version_id: pZTEKK
        url: https://semgrep.dev/playground/r/pZTEKK/terraform.azure.security.functionapp.functionapp-enable-http2.functionapp-enable-http2
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.storage.storage-default-action-deny.storage-default-action-deny
  message: Detected a Storage that was not configured to deny action by default. Add
    `default_action = "Deny"` in your resource block.
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_storage_account_network_rules" "..." {
      ...
        default_action = "Deny"
      ...
      }
  - pattern-inside: |
      resource "azurerm_storage_account_network_rules" "..." {
      ...
        default_action = "Allow"
      ...
      }
  metadata:
    cwe:
    - 'CWE-16: CWE CATEGORY: Configuration'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#default_action
    - https://docs.microsoft.com/en-us/azure/firewall/rule-processing
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.storage.storage-default-action-deny.storage-default-action-deny
    shortlink: https://sg.run/WpN4
    semgrep.dev:
      rule:
        rule_id: zdUY3N
        version_id: rxTW50
        url: https://semgrep.dev/playground/r/rxTW50/terraform.azure.security.storage.storage-default-action-deny.storage-default-action-deny
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: terraform.azure.security.storage.storage-enforce-https.storage-enforce-https
  message: Detected a Storage that was not configured to deny action by default. Add
    `enable_https_traffic_only = true` in your resource block.
  patterns:
  - pattern-not-inside: |
      resource "azurerm_storage_account" "..." {
      ...
        enable_https_traffic_only = true
      ...
      }
  - pattern-inside: |
      resource "azurerm_storage_account" "..." {
      ...
        enable_https_traffic_only = false
      ...
      }
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#enable_https_traffic_only
    - https://docs.microsoft.com/en-us/azure/storage/common/storage-require-secure-transfer
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.storage.storage-enforce-https.storage-enforce-https
    shortlink: https://sg.run/0y9v
    semgrep.dev:
      rule:
        rule_id: pKUpDA
        version_id: bZTyYK
        url: https://semgrep.dev/playground/r/bZTyYK/terraform.azure.security.storage.storage-enforce-https.storage-enforce-https
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
  message: Detected string concatenation with a non-literal variable in a util.format
    / console.log function. If an attacker injects a format specifier in the string,
    it will forge the log message. Try to use constant values for the format string.
  metadata:
    cwe:
    - 'CWE-134: Use of Externally-Controlled Format String'
    owasp:
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - javascript
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: LOW
    confidence: LOW
    references:
    - https://cwe.mitre.org/data/definitions/134.html
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
    shortlink: https://sg.run/7Y5R
    semgrep.dev:
      rule:
        rule_id: ReU3OJ
        version_id: rxTQzo
        url: https://semgrep.dev/playground/r/rxTQzo/javascript.lang.security.audit.unsafe-formatstring.unsafe-formatstring
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $X + $Y
      - pattern: $X.concat($Y)
      - pattern: |
          `...${...}...`
    - pattern-not: |
        "..." + "..."
    - pattern-not: |
        $X.concat("...")
  pattern-sinks:
  - patterns:
    - focus-metavariable: $STR
    - pattern-either:
      - pattern: |
          console.$LOG($STR,$PARAM,...)
      - patterns:
        - pattern-inside: |
            $UTIL = require('util')
            ...
        - pattern: |
            $UTIL.format($STR,$PARAM,...)
- id: javascript.ajv.security.audit.ajv-allerrors-true.ajv-allerrors-true
  message: 'By setting `allErrors: true` in `Ajv` library, all error objects will
    be allocated without limit. This allows the attacker to produce a huge number
    of errors which can lead to denial of service. Do not use `allErrors: true` in
    production.'
  metadata:
    cwe:
    - 'CWE-400: Uncontrolled Resource Consumption'
    category: security
    technology:
    - ajv
    references:
    - https://ajv.js.org/options.html#allerrors
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.ajv.security.audit.ajv-allerrors-true.ajv-allerrors-true
    shortlink: https://sg.run/d2jY
    semgrep.dev:
      rule:
        rule_id: PeUo5X
        version_id: 5PTGO0
        url: https://semgrep.dev/playground/r/5PTGO0/javascript.ajv.security.audit.ajv-allerrors-true.ajv-allerrors-true
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: |
      new Ajv({...,allErrors: true,...},...)
  - patterns:
    - pattern: |
        new Ajv($SETTINGS,...)
    - pattern-inside: |
        $SETTINGS = {...,allErrors: true,...}
        ...
- id: javascript.express.security.x-frame-options-misconfiguration.x-frame-options-misconfiguration
  message: By letting user input control `X-Frame-Options` header, there is a risk
    that software does not properly verify whether or not a browser should be allowed
    to render a page in an `iframe`.
  metadata:
    references:
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    owasp:
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-451: User Interface (UI) Misrepresentation of Critical Information'
    category: security
    technology:
    - express
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.x-frame-options-misconfiguration.x-frame-options-misconfiguration
    shortlink: https://sg.run/EvjA
    semgrep.dev:
      rule:
        rule_id: GdUrLy
        version_id: A8TlzK
        url: https://semgrep.dev/playground/r/A8TlzK/javascript.express.security.x-frame-options-misconfiguration.x-frame-options-misconfiguration
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.set($HEADER, ...)
      - pattern: $RES.header($HEADER, ...)
      - pattern: $RES.setHeader($HEADER, ...)
      - pattern: |
          $RES.set({$HEADER: ...}, ...)
      - pattern: |
          $RES.writeHead($STATUS, {$HEADER: ...}, ...)
    - metavariable-regex:
        metavariable: $HEADER
        regex: .*(X-Frame-Options|x-frame-options).*
- id: javascript.express.security.audit.remote-property-injection.remote-property-injection
  message: Bracket object notation with user input is present, this might allow an
    attacker to access all properties of the object and even it's prototype. Use literal
    values for object properties.
  metadata:
    confidence: LOW
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    category: security
    technology:
    - express
    references:
    - https://github.com/nodesecurity/eslint-plugin-security/blob/3c7522ca1be800353513282867a1034c795d9eb4/docs/the-dangers-of-square-bracket-notation.md
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.remote-property-injection.remote-property-injection
    shortlink: https://sg.run/Z4gn
    semgrep.dev:
      rule:
        rule_id: JDUL1B
        version_id: qkTK7o
        url: https://semgrep.dev/playground/r/qkTK7o/javascript.express.security.audit.remote-property-injection.remote-property-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-inside: $OBJ[...] = ...
    - pattern-not-inside: $OBJ["..."] = ...
    - pattern-not-inside: $OBJ[...] = "..."
    - pattern: $INDEX
    - pattern-not: |
        "..." + $INDEX
    - pattern-not: |
        $INDEX + "..."
  pattern-sanitizers:
  - patterns:
    - pattern: var $X = ...
    - pattern-not: var $X = $REQ.$ANY
- id: javascript.express.security.cors-misconfiguration.cors-misconfiguration
  message: By letting user input control CORS parameters, there is a risk that software
    does not properly verify that the source of data or communication is valid. Use
    literal values for CORS settings.
  metadata:
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-346: Origin Validation Error'
    category: security
    references:
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    technology:
    - express
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.cors-misconfiguration.cors-misconfiguration
    shortlink: https://sg.run/nKXO
    semgrep.dev:
      rule:
        rule_id: 5rULJQ
        version_id: NdTQyQ
        url: https://semgrep.dev/playground/r/NdTQyQ/javascript.express.security.cors-misconfiguration.cors-misconfiguration
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.set($HEADER, $X)
      - pattern: $RES.header($HEADER, $X)
      - pattern: $RES.setHeader($HEADER, $X)
      - pattern: |
          $RES.set({$HEADER: $X}, ...)
      - pattern: |
          $RES.writeHead($STATUS, {$HEADER: $X}, ...)
    - focus-metavariable: $X
    - metavariable-regex:
        metavariable: $HEADER
        regex: .*(Access-Control-Allow-Origin|access-control-allow-origin).*
- id: ruby.rails.security.audit.avoid-session-manipulation.avoid-session-manipulation
  metadata:
    shortDescription: Allowing an attacker to manipulate the session may lead to unintended
      behavior.
    tags:
    - security
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-276: Incorrect Default Permissions'
    references:
    - https://brakemanscanner.org/docs/warning_types/session_manipulation/
    category: security
    technology:
    - rails
    help: |
      ## Remediation
      Session manipulation can occur when an application allows user-input in session keys. Since sessions are typically considered a source of truth (e.g. to check the logged-in user or to match CSRF tokens), allowing an attacker to manipulate the session may lead to unintended behavior.

      ## References
      [Session Manipulation](https://brakemanscanner.org/docs/warning_types/session_manipulation/)
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.avoid-session-manipulation.avoid-session-manipulation
    shortlink: https://sg.run/86q7
    semgrep.dev:
      rule:
        rule_id: BYUdW6
        version_id: A8Tyyv
        url: https://semgrep.dev/playground/r/A8Tyyv/ruby.rails.security.audit.avoid-session-manipulation.avoid-session-manipulation
        origin: community
  message: This gets data from session using user inputs. A malicious user may be
    able to retrieve information from your session that you didn't intend them to.
    Do not use user input as a session key.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  pattern-sinks:
  - pattern: session[...]
- id: ruby.rails.security.audit.avoid-tainted-file-access.avoid-tainted-file-access
  metadata:
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.avoid-tainted-file-access.avoid-tainted-file-access
    shortlink: https://sg.run/gYln
    semgrep.dev:
      rule:
        rule_id: DbU1dr
        version_id: BjTQQj
        url: https://semgrep.dev/playground/r/BjTQQj/ruby.rails.security.audit.avoid-tainted-file-access.avoid-tainted-file-access
        origin: community
  message: Using user input when accessing files is potentially dangerous. A malicious
    actor could use this to modify or access files they have no right to.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: Dir.$X(...)
      - pattern: File.$X(...)
      - pattern: IO.$X(...)
      - pattern: Kernel.$X(...)
      - pattern: PStore.$X(...)
      - pattern: Pathname.$X(...)
    - metavariable-pattern:
        metavariable: $X
        patterns:
        - pattern-either:
          - pattern: chdir
          - pattern: chroot
          - pattern: delete
          - pattern: entries
          - pattern: foreach
          - pattern: glob
          - pattern: install
          - pattern: lchmod
          - pattern: lchown
          - pattern: link
          - pattern: load
          - pattern: load_file
          - pattern: makedirs
          - pattern: move
          - pattern: new
          - pattern: open
          - pattern: read
          - pattern: readlines
          - pattern: rename
          - pattern: rmdir
          - pattern: safe_unlink
          - pattern: symlink
          - pattern: syscopy
          - pattern: sysopen
          - pattern: truncate
          - pattern: unlink
- id: ruby.rails.security.audit.avoid-tainted-ftp-call.avoid-tainted-ftp-call
  metadata:
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.avoid-tainted-ftp-call.avoid-tainted-ftp-call
    shortlink: https://sg.run/Q9gP
    semgrep.dev:
      rule:
        rule_id: WAUyzp
        version_id: DkT334
        url: https://semgrep.dev/playground/r/DkT334/ruby.rails.security.audit.avoid-tainted-ftp-call.avoid-tainted-ftp-call
        origin: community
  message: Using user input when accessing files is potentially dangerous. A malicious
    actor could use this to modify or access files they have no right to.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  pattern-sinks:
  - pattern-either:
    - pattern: Net::FTP.$X(...)
    - patterns:
      - pattern-inside: |
          $FTP = Net::FTP.$OPEN(...)
          ...
          $FTP.$METHOD(...)
      - pattern: $FTP.$METHOD(...)
- id: ruby.rails.security.audit.avoid-tainted-http-request.avoid-tainted-http-request
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.avoid-tainted-http-request.avoid-tainted-http-request
    shortlink: https://sg.run/3rLb
    semgrep.dev:
      rule:
        rule_id: 0oU2x3
        version_id: WrTkkA
        url: https://semgrep.dev/playground/r/WrTkkA/ruby.rails.security.audit.avoid-tainted-http-request.avoid-tainted-http-request
        origin: community
  message: Using user input when accessing files is potentially dangerous. A malicious
    actor could use this to modify or access files they have no right to.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern: Net::HTTP::$METHOD.new(...)
      - metavariable-pattern:
          metavariable: $METHOD
          patterns:
          - pattern-either:
            - pattern: Copy
            - pattern: Delete
            - pattern: Get
            - pattern: Head
            - pattern: Lock
            - pattern: Mkcol
            - pattern: Move
            - pattern: Options
            - pattern: Patch
            - pattern: Post
            - pattern: Propfind
            - pattern: Proppatch
            - pattern: Put
            - pattern: Trace
            - pattern: Unlock
    - patterns:
      - pattern: Net::HTTP.$X(...)
      - metavariable-pattern:
          metavariable: $X
          patterns:
          - pattern-either:
            - pattern: get
            - pattern: get2
            - pattern: head
            - pattern: head2
            - pattern: options
            - pattern: patch
            - pattern: post
            - pattern: post2
            - pattern: post_form
            - pattern: put
            - pattern: request
            - pattern: request_get
            - pattern: request_head
            - pattern: request_post
            - pattern: send_request
            - pattern: trace
            - pattern: get_print
            - pattern: get_response
            - pattern: start
- id: ruby.rails.security.audit.xss.avoid-default-routes.avoid-default-routes
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-276: Incorrect Default Permissions'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/default_routes/index.markdown
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-default-routes.avoid-default-routes
    shortlink: https://sg.run/Pbrq
    semgrep.dev:
      rule:
        rule_id: qNUXYy
        version_id: 6xTAkv
        url: https://semgrep.dev/playground/r/6xTAkv/ruby.rails.security.audit.xss.avoid-default-routes.avoid-default-routes
        origin: community
  message: Default routes are enabled in this routes file. This means any public method
    on a controller can be called as an action. It is very easy to accidentally expose
    a method you didn't mean to. Instead, remove this line and explicitly include
    all routes you intend external users to follow.
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: map.connect ":controller/:action/:id"
    - pattern: match ':controller(/:action(/:id(.:format)))'
  paths:
    include:
    - '*routes.rb'
- id: ruby.rails.security.audit.xss.avoid-link-to.avoid-link-to
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_link_to.rb
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://brakemanscanner.org/docs/warning_types/link_to/
    - https://brakemanscanner.org/docs/warning_types/link_to_href/
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-link-to.avoid-link-to
    shortlink: https://sg.run/JxXQ
    semgrep.dev:
      rule:
        rule_id: lBU8Qj
        version_id: zyTX9A
        url: https://semgrep.dev/playground/r/zyTX9A/ruby.rails.security.audit.xss.avoid-link-to.avoid-link-to
        origin: community
  message: This code includes user input in `link_to`. In Rails 2.x, the body of `link_to`
    is not escaped. This means that user input which reaches the body will be executed
    when the HTML is rendered. Even in other versions, values starting with `javascript:`
    or `data:` are not escaped. It is better to create and use a safer function which
    checks the body argument.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  - pattern-either:
    - pattern: $MODEL.url(...)
    - pattern: $MODEL.uri(...)
    - pattern: $MODEL.link(...)
    - pattern: $MODEL.page(...)
    - pattern: $MODEL.site(...)
  pattern-sinks:
  - pattern: link_to(...)
  pattern-sanitizers:
  - patterns:
    - pattern: |
        "...#{...}..."
    - pattern-not: |
        "#{...}..."
- id: ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    references:
    - https://brakemanscanner.org/docs/warning_types/redirect/
    category: security
    technology:
    - rails
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect
    shortlink: https://sg.run/5DY3
    semgrep.dev:
      rule:
        rule_id: YGUDqJ
        version_id: 2KTAX4
        url: https://semgrep.dev/playground/r/2KTAX4/ruby.rails.security.audit.xss.avoid-redirect.avoid-redirect
        origin: community
  message: When a redirect uses user input, a malicious user can spoof a website under
    a trusted URL or access restricted parts of a site. When using user-supplied values,
    sanitize the value before using it for the redirect.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  - patterns:
    - pattern: $MODEL.$X(...)
    - pattern-not: $MODEL.$X("...")
    - metavariable-pattern:
        metavariable: $X
        pattern-either:
        - pattern: all
        - pattern: create
        - pattern: create!
        - pattern: find
        - pattern: find_by_sql
        - pattern: first
        - pattern: last
        - pattern: new
        - pattern: from
        - pattern: group
        - pattern: having
        - pattern: joins
        - pattern: lock
        - pattern: order
        - pattern: reorder
        - pattern: select
        - pattern: where
        - pattern: find_by
        - pattern: find_by!
        - pattern: take
  pattern-sinks:
  - pattern: redirect_to(...)
  pattern-sanitizers:
  - pattern: params.merge(:only_path => true)
  - pattern: params.merge(:host => ...)
- id: ruby.rails.security.audit.xss.avoid-render-dynamic-path.avoid-render-dynamic-path
  metadata:
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    references:
    - https://brakemanscanner.org/docs/warning_types/dynamic_render_paths/
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.avoid-render-dynamic-path.avoid-render-dynamic-path
    shortlink: https://sg.run/GO2n
    semgrep.dev:
      rule:
        rule_id: 6JU1bL
        version_id: X0Top7
        url: https://semgrep.dev/playground/r/X0Top7/ruby.rails.security.audit.xss.avoid-render-dynamic-path.avoid-render-dynamic-path
        origin: community
  message: Avoid rendering user input. It may be possible for a malicious user to
    input a path that lets them access a template they shouldn't. To prevent this,
    check dynamic template paths against a predefined allowlist to make sure it's
    an allowed template.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: cookies
  - pattern: request.env
  pattern-sinks:
  - patterns:
    - pattern-inside: render($X => $INPUT, ...)
    - pattern: $INPUT
    - metavariable-pattern:
        metavariable: $X
        pattern-either:
        - pattern: action
        - pattern: template
        - pattern: partial
        - pattern: file
- id: ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/file_access/index.markdown
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call
    shortlink: https://sg.run/4e8E
    semgrep.dev:
      rule:
        rule_id: KxU72k
        version_id: 1QTnze
        url: https://semgrep.dev/playground/r/1QTnze/ruby.rails.security.audit.avoid-tainted-shell-call.avoid-tainted-shell-call
        origin: community
  message: Using user input when accessing files is potentially dangerous. A malicious
    actor could use this to modify or access files they have no right to.
  languages:
  - ruby
  severity: ERROR
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: params[...]
    - pattern: cookies
    - pattern: request.env
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: Kernel.$X(...)
      - patterns:
        - pattern-either:
          - pattern: Shell.$X(...)
          - patterns:
            - pattern-inside: |
                $SHELL = Shell.$ANY(...)
                ...
                $SHELL.$X(...)
            - pattern: $SHELL.$X(...)
    - metavariable-pattern:
        metavariable: $X
        patterns:
        - pattern-either:
          - pattern: cat
          - pattern: chdir
          - pattern: chroot
          - pattern: delete
          - pattern: entries
          - pattern: exec
          - pattern: foreach
          - pattern: glob
          - pattern: install
          - pattern: lchmod
          - pattern: lchown
          - pattern: link
          - pattern: load
          - pattern: load_file
          - pattern: makedirs
          - pattern: move
          - pattern: new
          - pattern: open
          - pattern: read
          - pattern: readlines
          - pattern: rename
          - pattern: rmdir
          - pattern: safe_unlink
          - pattern: symlink
          - pattern: syscopy
          - pattern: sysopen
          - pattern: system
          - pattern: truncate
          - pattern: unlink
- id: python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
  message: 'Avoiding SQL string concatenation: untrusted input concatenated with raw
    SQL query can result in SQL Injection. In order to execute raw query safely, prepared
    statement should be used. SQLAlchemy provides TextualSQL to easily used prepared
    statement with named parameters. For complex SQL composition, use SQL Expression
    Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be
    a better option.'
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql
    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm
    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column
    category: security
    technology:
    - sqlalchemy
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
    shortlink: https://sg.run/2b1L
    semgrep.dev:
      rule:
        rule_id: oqUz5y
        version_id: YDTd6W
        url: https://semgrep.dev/playground/r/YDTd6W/python.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query
        origin: community
  severity: ERROR
  languages:
  - python
  pattern-either:
  - pattern: |
      $CONNECTION.execute( $SQL + ..., ... )
  - pattern: |
      $CONNECTION.execute( $SQL % (...), ...)
  - pattern: |
      $CONNECTION.execute( $SQL.format(...), ... )
  - pattern: |
      $CONNECTION.execute(f"...{...}...", ...)
  - patterns:
    - pattern-inside: |
        $QUERY = $SQL + ...
        ...
    - pattern: |
        $CONNECTION.execute($QUERY, ...)
  - patterns:
    - pattern-inside: |
        $QUERY = $SQL % (...)
        ...
    - pattern: |
        $CONNECTION.execute($QUERY, ...)
  - patterns:
    - pattern-inside: |
        $QUERY = $SQL.format(...)
        ...
    - pattern: |
        $CONNECTION.execute($QUERY, ...)
  - patterns:
    - pattern-inside: |
        $QUERY = f"...{...}..."
        ...
    - pattern: |
        $CONNECTION.execute($QUERY, ...)
- id: java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
  metadata:
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
    references:
    - https://www.owasp.org/index.php/Path_Traversal
    category: security
    technology:
    - jax-rs
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
    shortlink: https://sg.run/DoWj
    semgrep.dev:
      rule:
        rule_id: 2ZUb9l
        version_id: 0bT6jQ
        url: https://semgrep.dev/playground/r/0bT6jQ/java.jax-rs.security.jax-rs-path-traversal.jax-rs-path-traversal
        origin: community
  message: Detected a potential path traversal. A malicious actor could control the
    location of this file, to include going backwards in the directory with '../'.
    To address this, ensure that user-controlled variables in file paths are sanitized.
    You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...)
    to only retrieve the file name from the path.
  severity: WARNING
  languages:
  - java
  pattern-either:
  - pattern: |
      $RETURNTYPE $FUNC (..., @PathParam(...) $TYPE $VAR, ...) {
        ...
        new File(..., $VAR, ...);
        ...
      }
  - pattern: |-
      $RETURNTYPE $FUNC (..., @javax.ws.rs.PathParam(...) $TYPE $VAR, ...) {
        ...
        new File(..., $VAR, ...);
        ...
      }
- id: java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
  message: Using CBC with PKCS5Padding is susceptible to padding oracle attacks. A
    malicious actor could discern the difference between plaintext with valid or invalid
    padding. Further, CBC mode does not include any integrity checks. Use 'AES/GCM/NoPadding'
    instead.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE
    references:
    - https://capec.mitre.org/data/definitions/463.html
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#cipher-modes
    - https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY
    category: security
    technology:
    - java
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
    shortlink: https://sg.run/ydxr
    semgrep.dev:
      rule:
        rule_id: ZqU5oD
        version_id: zyTeEO
        url: https://semgrep.dev/playground/r/zyTeEO/java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle
        origin: community
  severity: WARNING
  fix: |
    "AES/GCM/NoPadding"
  languages:
  - java
  patterns:
  - pattern-inside: Cipher.getInstance("=~/.*\/CBC\/PKCS5Padding/")
  - pattern: |
      "=~/.*\/CBC\/PKCS5Padding/"
- id: java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.2.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
    references:
    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https
    category: security
    technology:
    - java
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
    shortlink: https://sg.run/GePy
    semgrep.dev:
      rule:
        rule_id: YGUR9A
        version_id: ZRTyY6
        url: https://semgrep.dev/playground/r/ZRTyY6/java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager
        origin: community
  message: Detected empty trust manager implementations. This is dangerous because
    it accepts any certificate, enabling man-in-the-middle attacks. Consider using
    a KeyStore and TrustManagerFactory instead. See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https
    for more information.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        class $CLASS implements X509TrustManager {
          ...
        }
    - pattern-inside: |
        new X509TrustManager() {
          ...
        }
    - pattern-inside: |
        class $CLASS implements X509ExtendedTrustManager {
          ...
        }
    - pattern-inside: |
        new X509ExtendedTrustManager() {
          ...
        }
  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }
  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }
  - pattern-either:
    - pattern: public void checkClientTrusted(...) {}
    - pattern: public void checkServerTrusted(...) {}
    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }
- id: java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#PATH_TRAVERSAL_IN
    references:
    - https://www.owasp.org/index.php/Path_Traversal
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
    shortlink: https://sg.run/oxXN
    semgrep.dev:
      rule:
        rule_id: NbUk7X
        version_id: bZT4eN
        url: https://semgrep.dev/playground/r/bZT4eN/java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal
        origin: community
  message: Detected a potential path traversal. A malicious actor could control the
    location of this file, to include going backwards in the directory with '../'.
    To address this, ensure that user-controlled variables in file paths are sanitized.
    You may also consider using a utility method such as org.apache.commons.io.FilenameUtils.getName(...)
    to only retrieve the file name from the path.
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          (HttpServletRequest $REQ)
      - patterns:
        - pattern-inside: |
            (javax.servlet.http.Cookie[] $COOKIES) = (HttpServletRequest $REQ).getCookies(...);
            ...
            for (javax.servlet.http.Cookie $COOKIE: $COOKIES) {
              ...
            }
        - pattern: |
            $COOKIE.getValue(...)
      - patterns:
        - pattern-inside: |
            $TYPE[] $VALS = (HttpServletRequest $REQ).$GETFUNC(...);
            ...
        - pattern: |
            $PARAM = $VALS[$INDEX];
  pattern-sanitizers:
  - pattern: org.apache.commons.io.FilenameUtils.getName(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          (java.io.File $FILE) = ...
      - pattern: |
          (java.io.FileOutputStream $FOS) = ...
      - pattern: |
          new java.io.FileInputStream(...)
  severity: ERROR
  languages:
  - java
- id: java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
  severity: WARNING
  languages:
  - java
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.3 Insecue Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://www.blackhat.com/docs/us-16/materials/us-16-Kaiser-Pwning-Your-Java-Messaging-With-Deserialization-Vulnerabilities-wp.pdf
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
    shortlink: https://sg.run/zvO1
    semgrep.dev:
      rule:
        rule_id: kxUk12
        version_id: NdTQ2N
        url: https://semgrep.dev/playground/r/NdTQ2N/java.lang.security.insecure-jms-deserialization.insecure-jms-deserialization
        origin: community
  message: JMS Object messages depend on Java Serialization for marshalling/unmarshalling
    of the message payload when ObjectMessage.getObject() is called. Deserialization
    of untrusted data can lead to security flaws; a remote attacker could via a crafted
    JMS ObjectMessage to execute arbitrary code with the permissions of the application
    listening/consuming JMS Messages. In this case, the JMS MessageListener consume
    an ObjectMessage type received inside the onMessage method, which may lead to
    arbitrary code execution when calling the $Y.getObject method.
  patterns:
  - pattern-inside: |
      public class $JMS_LISTENER implements MessageListener {
        ...
        public void onMessage(Message $JMS_MSG) {
            ...
        }
      }
  - pattern-either:
    - pattern-inside: $X = $Y.getObject(...);
    - pattern-inside: $X = ($Z) $Y.getObject(...);
- id: java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
  severity: WARNING
  languages:
  - java
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
    category: security
    technology:
    - rmi
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
    shortlink: https://sg.run/oxg6
    semgrep.dev:
      rule:
        rule_id: bwUwj4
        version_id: vdT3z8
        url: https://semgrep.dev/playground/r/vdT3z8/java.rmi.security.server-dangerous-class-deserialization.server-dangerous-class-deserialization
        origin: community
  message: Using a non-primitive class with Java RMI may be an insecure deserialization
    vulnerability. Depending on the underlying implementation. This object could be
    manipulated by a malicious actor allowing them to execute code on your system.
    Instead, use an integer ID to look up your object, or consider alternative serialization
    schemes such as JSON.
  patterns:
  - pattern: |
      interface $INTERFACE extends Remote {
        $RETURNTYPE $METHOD($CLASS $PARAM) throws RemoteException;
      }
  - metavariable-regex:
      metavariable: $CLASS
      regex: (?!int|boolean|short|long|byte|char|float|double)
- id: java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://mogwailabs.de/blog/2019/03/attacking-java-rmi-services-after-jep-290/
    - https://frohoff.github.io/appseccali-marshalling-pickles/
    category: security
    technology:
    - rmi
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
    shortlink: https://sg.run/zvnl
    semgrep.dev:
      rule:
        rule_id: NbUkw5
        version_id: d6TbGy
        url: https://semgrep.dev/playground/r/d6TbGy/java.rmi.security.server-dangerous-object-deserialization.server-dangerous-object-deserialization
        origin: community
  message: Using an arbitrary object ('Object $PARAM') with Java RMI is an insecure
    deserialization vulnerability. This object can be manipulated by a malicious actor
    allowing them to execute code on your system. Instead, use an integer ID to look
    up your object, or consider alternative serialization schemes such as JSON.
  languages:
  - java
  pattern: |
    interface $INTERFACE extends Remote {
      $RETURNTYPE $METHOD(Object $PARAM) throws RemoteException;
    }
- id: javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method
  message: The use of $sce.trustAs can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    references:
    - https://docs.angularjs.org/api/ng/service/$sce
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    technology:
    - angular
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method
    shortlink: https://sg.run/OPW2
    semgrep.dev:
      rule:
        rule_id: gxU1QX
        version_id: zyTeJ5
        url: https://semgrep.dev/playground/r/zyTeJ5/javascript.angular.security.detect-angular-trust-as-method.detect-angular-trust-as-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        app.controller(..., function($scope,$sce) {
        ...
        });
    - pattern: $scope.$X
  pattern-sinks:
  - pattern: $sce.trustAs(...)
  - pattern: $sce.trustAsHtml(...)
- id: javascript.angular.security.detect-angular-trust-as-resourceurl-method.detect-angular-trust-as-resourceurl-method
  message: The use of $sce.trustAsResourceUrl can be dangerous if unsanitized user
    input flows through this API.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsResourceUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angular
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-trust-as-resourceurl-method.detect-angular-trust-as-resourceurl-method
    shortlink: https://sg.run/eLOd
    semgrep.dev:
      rule:
        rule_id: QrUzeq
        version_id: pZTQjl
        url: https://semgrep.dev/playground/r/pZTQjl/javascript.angular.security.detect-angular-trust-as-resourceurl-method.detect-angular-trust-as-resourceurl-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsResourceUrl($SOURCE);
    - pattern: |
        $sce.trustAsResourceUrl($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
- id: javascript.angular.security.detect-angular-trust-as-url-method.detect-angular-trust-as-url-method
  message: The use of $sce.trustAsUrl can be dangerous if unsanitized user input flows
    through this API.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.angularjs.org/api/ng/service/$sce#trustAsUrl
    - https://owasp.org/www-chapter-london/assets/slides/OWASPLondon20170727_AngularJS.pdf
    category: security
    technology:
    - angular
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.angular.security.detect-angular-trust-as-url-method.detect-angular-trust-as-url-method
    shortlink: https://sg.run/vznl
    semgrep.dev:
      rule:
        rule_id: 3qUP01
        version_id: 2KT6xW
        url: https://semgrep.dev/playground/r/2KT6xW/javascript.angular.security.detect-angular-trust-as-url-method.detect-angular-trust-as-url-method
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $SOURCE = $scope.$INPUT;
        $sce.trustAsUrl($SOURCE);
    - pattern: |
        $sce.trustAsUrl($scope.$INPUT);
  - pattern-inside: |
      app.controller(..., function($scope,$sce){
      ...
      });
- id: python.django.security.audit.xss.class-extends-safestring.class-extends-safestring
  message: Found a class extending 'SafeString', 'SafeText' or 'SafeData'. These classes
    are for bypassing the escaping engine built in to Django and should not be used
    directly. Improper use of this class exposes your application to cross-site scripting
    (XSS) vulnerabilities. If you need this functionality, use 'mark_safe' instead
    and ensure no user data can reach it.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/howto/custom-template-tags/#filters-and-auto-escaping
    - https://github.com/django/django/blob/f138e75910b1e541686c4dce3d8f467f6fc234cb/django/utils/safestring.py#L11
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.class-extends-safestring.class-extends-safestring
    shortlink: https://sg.run/Zvpw
    semgrep.dev:
      rule:
        rule_id: 3qUPve
        version_id: 2KT6gB
        url: https://semgrep.dev/playground/r/2KT6gB/python.django.security.audit.xss.class-extends-safestring.class-extends-safestring
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: |
      class $CLASS(django.utils.safestring.SafeString):
        ...
  - pattern: |
      class $CLASS(django.utils.safestring.SafeText):
        ...
  - pattern: |-
      class $CLASS(django.utils.safestring.SafeData):
        ...
- id: python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run
  patterns:
  - pattern-either:
    - pattern-inside: |
        $CLIENT = docker.from_env()
        ...
    - pattern-inside: |
        $CLIENT = docker.DockerClient(...)
        ...
  - pattern-either:
    - pattern: |
        $CLIENT.containers.run(...)
    - pattern: |
        $CLIENT.containers.create(...)
  - pattern-not: |
      $CLIENT.containers.run("...",...)
  - pattern-not: |
      $CLIENT.containers.create("...",...)
  message: If unverified user data can reach the `run` or `create` method it can result
    in running arbitrary container.
  languages:
  - python
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    category: security
    technology:
    - docker
    references:
    - https://cwe.mitre.org/data/definitions/250.html
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run
    shortlink: https://sg.run/pxEL
    semgrep.dev:
      rule:
        rule_id: r6Ur5A
        version_id: 0bT64B
        url: https://semgrep.dev/playground/r/0bT64B/python.docker.security.audit.docker-arbitrary-container-run.docker-arbitrary-container-run
        origin: community
- id: python.flask.security.insecure-deserialization.insecure-deserialization
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization
    shortlink: https://sg.run/N45z
    semgrep.dev:
      rule:
        rule_id: d8UjBO
        version_id: vdT324
        url: https://semgrep.dev/playground/r/vdT324/python.flask.security.insecure-deserialization.insecure-deserialization
        origin: community
  message: Detected the use of an insecure deserialization library in a Flask route.
    These libraries are prone to code execution vulnerabilities. Ensure user data
    does not enter this function. To fix this, try to avoid serializing whole objects.
    Consider instead using a serializer such as JSON.
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-inside: |
      @app.route(...)
      def $X(...):
        ...
  - pattern-not: $MODULE.$FUNC("...")
  - pattern-not: $MODULE.$FUNC(open("...", ...))
  - pattern-either:
    - pattern: pickle.$FUNC(...)
    - pattern: _pickle.$FUNC(...)
    - pattern: cPickle.$FUNC(...)
    - pattern: dill.$FUNC(...)
    - pattern: shelve.$FUNC(...)
    - pattern: yaml.load(...)
- id: python.requests.security.no-auth-over-http.no-auth-over-http
  fix-regex:
    regex: http:\/\/
    replacement: https://
    count: 1
  message: Authentication detected over HTTP. HTTP does not provide any encryption
    or protection for these authentication credentials. This may expose these credentials
    to unauthorized parties. Use 'https://' instead.
  metadata:
    cwe:
    - 'CWE-523: Unprotected Transport of Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://pypi.org/project/flake8-flask/
    references:
    - https://blog.r2c.dev/2020/bento-check-no-auth-over-http/
    - https://bento.dev/checks/requests/no-auth-over-http/
    category: security
    technology:
    - requests
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.requests.security.no-auth-over-http.no-auth-over-http
    shortlink: https://sg.run/B4NW
    semgrep.dev:
      rule:
        rule_id: lBUdQZ
        version_id: bZTxA5
        url: https://semgrep.dev/playground/r/bZTxA5/python.requests.security.no-auth-over-http.no-auth-over-http
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: requests.$W("=~/http:\/\/.*/", ..., auth=$X, ...)
  - pattern: |
      $URL = "=~/http:\/\/.../"
      ...
      requests.$W($URL, ..., auth=$X, ...)
- id: ruby.lang.security.nested-attributes.nested-attributes
  message: 'Checks for models that enable nested attributes. A vulnerability in nested_attributes_for
    results in an attacker begin able to change parameters apart from the ones intended
    by the developer. Affected Rails versions: 3.0.0, 2.3.9. Fix: don''t use accepts_nested_attributes_for
    or upgrade Rails version.'
  metadata:
    cwe:
    - 'CWE-20: Improper Input Validation'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_nested_attributes.rb
    - https://groups.google.com/g/rubyonrails-security/c/-fkT0yja_gw/discussion
    category: security
    technology:
    - ruby
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.nested-attributes.nested-attributes
    shortlink: https://sg.run/rA66
    semgrep.dev:
      rule:
        rule_id: x8UWKK
        version_id: gETLLB
        url: https://semgrep.dev/playground/r/gETLLB/ruby.lang.security.nested-attributes.nested-attributes
        origin: community
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern: accepts_nested_attributes_for
- id: python.lang.security.audit.insecure-file-permissions.insecure-file-permissions
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-276: Incorrect Default Permissions'
    technology:
    - python
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions
    shortlink: https://sg.run/AXY4
    semgrep.dev:
      rule:
        rule_id: zdUYqR
        version_id: ExTYkN
        url: https://semgrep.dev/playground/r/ExTYkN/python.lang.security.audit.insecure-file-permissions.insecure-file-permissions
        origin: community
  message: These permissions `$BITS` are widely permissive and grant access to more
    people than may be necessary. A good default is `0o644` which gives read and write
    access to yourself and read access to everyone else.
  patterns:
  - pattern-inside: os.$METHOD(...)
  - metavariable-pattern:
      metavariable: $METHOD
      patterns:
      - pattern-either:
        - pattern: chmod
        - pattern: lchmod
        - pattern: fchmod
  - pattern-either:
    - patterns:
      - pattern: os.$METHOD($FILE, $BITS, ...)
      - metavariable-comparison:
          metavariable: $BITS
          comparison: $BITS >= 0o650 and $BITS < 0o100000
    - patterns:
      - pattern: os.$METHOD($FILE, $BITS)
      - metavariable-comparison:
          metavariable: $BITS
          comparison: $BITS >= 0o100650
    - patterns:
      - pattern: os.$METHOD($FILE, $BITS, ...)
      - metavariable-pattern:
          metavariable: $BITS
          patterns:
          - pattern-either:
            - pattern: <... stat.S_IWGRP ...>
            - pattern: <... stat.S_IXGRP ...>
            - pattern: <... stat.S_IWOTH ...>
            - pattern: <... stat.S_IXOTH ...>
            - pattern: <... stat.S_IRWXO ...>
            - pattern: <... stat.S_IRWXG ...>
    - patterns:
      - pattern: os.$METHOD($FILE, $EXPR | $MOD, ...)
      - metavariable-comparison:
          metavariable: $MOD
          comparison: $MOD == 0o111
- id: javascript.express.security.require-request.require-request
  message: If an attacker controls the x in require(x) then they can cause code to
    load that was not intended to run on the server.
  metadata:
    interfile: true
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    source-rule-url: https://nodesecroadmap.fyi/chapter-1/threat-UIR.html
    category: security
    technology:
    - express
    references:
    - https://github.com/google/node-sec-roadmap/blob/master/chapter-2/dynamism.md#dynamism-when-you-need-it
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.require-request.require-request
    shortlink: https://sg.run/jRbl
    semgrep.dev:
      rule:
        rule_id: OrU3WK
        version_id: xyTEGG
        url: https://semgrep.dev/playground/r/xyTEGG/javascript.express.security.require-request.require-request
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern: require($SINK)
    - focus-metavariable: $SINK
- id: terraform.aws.security.aws-backup-vault-unencrypted.aws-backup-vault-unencrypted
  patterns:
  - pattern-not-inside: |
      resource "aws_backup_vault" $BACKUP {
        ...
        kms_key_arn = ...
        ...
      }
  - pattern: resource "aws_backup_vault" $BACKUP {...}
  message: The AWS Backup vault is unencrypted. The AWS KMS encryption key protects
    backups in the Backup vault. To create your own, create a aws_kms_key resource
    or use the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-backup-vault-unencrypted.aws-backup-vault-unencrypted
    shortlink: https://sg.run/18yw
    semgrep.dev:
      rule:
        rule_id: x8UxrP
        version_id: vdTlQE
        url: https://semgrep.dev/playground/r/vdTlQE/terraform.aws.security.aws-backup-vault-unencrypted.aws-backup-vault-unencrypted
        origin: community
- id: javascript.express.security.express-phantom-injection.express-phantom-injection
  message: If unverified user data can reach the `phantom` methods it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - express
    references:
    - https://phantomjs.org/page-automation.html
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-phantom-injection.express-phantom-injection
    shortlink: https://sg.run/W8BL
    semgrep.dev:
      rule:
        rule_id: 2ZUbx3
        version_id: e1TAjX
        url: https://semgrep.dev/playground/r/e1TAjX/javascript.express.security.express-phantom-injection.express-phantom-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('phantom');
          ...
      - pattern-inside: |
          import 'phantom';
          ...
    - pattern-either:
      - pattern: $PAGE.open($SINK,...)
      - pattern: $PAGE.setContent($SINK,...)
      - pattern: $PAGE.openUrl($SINK,...)
      - pattern: $PAGE.evaluateJavaScript($SINK,...)
      - pattern: $PAGE.property("content",$SINK,...)
    - focus-metavariable: $SINK
- id: javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
  message: If unverified user data can reach the `puppeteer` methods it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - express
    references:
    - https://pptr.dev/api/puppeteer.page
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
    shortlink: https://sg.run/0QJB
    semgrep.dev:
      rule:
        rule_id: X5U8Nz
        version_id: vdT36A
        url: https://semgrep.dev/playground/r/vdT36A/javascript.express.security.express-puppeteer-injection.express-puppeteer-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('puppeteer');
          ...
      - pattern-inside: |
          import 'puppeteer';
          ...
    - pattern-either:
      - pattern: $PAGE.goto($SINK,...)
      - pattern: $PAGE.setContent($SINK,...)
      - pattern: $PAGE.evaluate($SINK,...)
      - pattern: $PAGE.evaluate($CODE,$SINK,...)
      - pattern: $PAGE.evaluateHandle($SINK,...)
      - pattern: $PAGE.evaluateHandle($CODE,$SINK,...)
      - pattern: $PAGE.evaluateOnNewDocument($SINK,...)
      - pattern: $PAGE.evaluateOnNewDocument($CODE,$SINK,...)
    - focus-metavariable: $SINK
- id: javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
  message: Make sure that unverified user data can not reach the XML Parser, as it
    can result in XML External or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    category: security
    technology:
    - express
    references:
    - https://www.npmjs.com/package/xml2json
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
    shortlink: https://sg.run/XBD4
    semgrep.dev:
      rule:
        rule_id: x8Uneb
        version_id: 7ZTY38
        url: https://semgrep.dev/playground/r/7ZTY38/javascript.express.security.express-xml2json-xxe.express-xml2json-xxe
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
      - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
      - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
      - pattern: files.$ANYTHING.data.toString('utf8')
      - pattern: files.$ANYTHING['data'].toString('utf8')
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          require('xml2json');
          ...
      - pattern-inside: |
          import 'xml2json';
          ...
    - pattern: $EXPAT.toJson($SINK,...)
    - focus-metavariable: $SINK
- id: javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
  message: If unverified user data can reach the `phantom` methods it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - express
    references:
    - https://www.npmjs.com/package/wkhtmltopdf
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
    shortlink: https://sg.run/pxe0
    semgrep.dev:
      rule:
        rule_id: kxUkl9
        version_id: ZRTRDo
        url: https://semgrep.dev/playground/r/ZRTRDo/javascript.express.security.express-wkhtml-injection.express-wkhtmltoimage-injection
        origin: community
  severity: ERROR
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern: $WK.generate($SINK,...)
    - focus-metavariable: $SINK
- id: javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
  message: If unverified user data can reach the `wkhtmltopdf` methods it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - express
    references:
    - https://www.npmjs.com/package/wkhtmltopdf
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
    shortlink: https://sg.run/2xGq
    semgrep.dev:
      rule:
        rule_id: wdUJxq
        version_id: nWTDQg
        url: https://semgrep.dev/playground/r/nWTDQg/javascript.express.security.express-wkhtml-injection.express-wkhtmltopdf-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $WK = require('wkhtmltopdf');
        ...
    - pattern: $WK($SINK,...)
    - focus-metavariable: $SINK
- id: kotlin.lang.security.bad-hexa-conversion.bad-hexa-conversion
  metadata:
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    owasp: A03:2017 - Sensitive Data Exposure
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION
    category: security
    technology:
    - kotlin
    references:
    - https://cwe.mitre.org/data/definitions/704.html
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.bad-hexa-conversion.bad-hexa-conversion
    shortlink: https://sg.run/b25p
    semgrep.dev:
      rule:
        rule_id: d8UegG
        version_id: zyT0rZ
        url: https://semgrep.dev/playground/r/zyT0rZ/kotlin.lang.security.bad-hexa-conversion.bad-hexa-conversion
        origin: community
  message: '''Integer.toHexString()'' strips leading zeroes from each byte if read
    byte-by-byte. This mistake weakens the hash value computed since it introduces
    more collisions. Use ''String.format("%02X", ...)'' instead.'
  severity: WARNING
  languages:
  - kt
  pattern: |-
    fun $METHOD(...) {
      ...
      val $MD: MessageDigest = ...
      ...
      $MD.digest(...)
      ...
      Integer.toHexString(...)
    }
- id: kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind
  metadata:
    cwe:
    - 'CWE-287: Improper Authentication'
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS
    category: security
    technology:
    - kotlin
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind
    shortlink: https://sg.run/rY2n
    semgrep.dev:
      rule:
        rule_id: v8U9Q7
        version_id: 5PTB3L
        url: https://semgrep.dev/playground/r/5PTB3L/kotlin.lang.security.anonymous-ldap-bind.anonymous-ldap-bind
        origin: community
  message: Detected anonymous LDAP bind. This permits anonymous users to execute LDAP
    statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html
    for more information.
  severity: WARNING
  pattern: |
    $ENV.put($CTX.SECURITY_AUTHENTICATION, "none")
    ...
    $DCTX = InitialDirContext($ENV, ...)
  languages:
  - kt
- id: kotlin.lang.security.use-of-sha1.use-of-sha1
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Use SHA256 or SHA3 instead.
  languages:
  - kt
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_SHA1
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - kotlin
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.use-of-sha1.use-of-sha1
    shortlink: https://sg.run/N1pp
    semgrep.dev:
      rule:
        rule_id: ZqUOdd
        version_id: YDTzO4
        url: https://semgrep.dev/playground/r/YDTzO4/kotlin.lang.security.use-of-sha1.use-of-sha1
        origin: community
  pattern-either:
  - pattern: |
      $VAR = $MD.getInstance("SHA1")
  - pattern: |
      $DU.getSha1Digest().digest(...)
- id: kotlin.lang.security.weak-rsa.use-of-weak-rsa-key
  message: RSA keys should be at least 2048 bits based on NIST recommendation.
  languages:
  - kt
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#RSA_KEY_SIZE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
    category: security
    technology:
    - kotlin
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/kotlin.lang.security.weak-rsa.use-of-weak-rsa-key
    shortlink: https://sg.run/krq7
    semgrep.dev:
      rule:
        rule_id: nJUZNL
        version_id: JdT2ee
        url: https://semgrep.dev/playground/r/JdT2ee/kotlin.lang.security.weak-rsa.use-of-weak-rsa-key
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $KEY = $G.getInstance("RSA")
        ...
        $KEY.initialize($BITS)
  - metavariable-comparison:
      metavariable: $BITS
      comparison: $BITS < 2048
- id: terraform.azure.security.keyvault.keyvault-content-type-for-secret.keyvault-content-type-for-secret
  message: Key vault Secret should have a content type set
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_key_vault_secret" "..." {
      ...
      content_type = "..."
      ...
      }
  - pattern-inside: |
      resource "azurerm_key_vault_secret" "..." {
      ...
      }
  metadata:
    category: correctness
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#content_type
    - https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-content-type-for-secret.keyvault-content-type-for-secret
    shortlink: https://sg.run/eoAb
    semgrep.dev:
      rule:
        rule_id: 8GUzld
        version_id: 2KT8gD
        url: https://semgrep.dev/playground/r/2KT8gD/terraform.azure.security.keyvault.keyvault-content-type-for-secret.keyvault-content-type-for-secret
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires
  message: Ensure that the expiration date is set on all keys
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_key_vault_key" "..." {
      ...
      expiration_date = "..."
      ...
      }
  - pattern-inside: |
      resource "azurerm_key_vault_key" "..." {
      ...
      }
  metadata:
    cwe:
    - 'CWE-262: Not Using Password Aging'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_key#expiration_date
    - https://docs.microsoft.com/en-us/powershell/module/az.keyvault/update-azkeyvaultkey?view=azps-5.8.0#example-1--modify-a-key-to-enable-it--and-set-the-expiration-date-and-tags
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires
    shortlink: https://sg.run/vq9A
    semgrep.dev:
      rule:
        rule_id: gxUgXq
        version_id: X0TRbP
        url: https://semgrep.dev/playground/r/X0TRbP/terraform.azure.security.keyvault.keyvault-ensure-key-expires.keyvault-ensure-key-expires
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires
  message: Ensure that the expiration date is set on all secrets
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_key_vault_secret" "..." {
      ...
      expiration_date = "..."
      ...
      }
  - pattern-inside: |
      resource "azurerm_key_vault_secret" "..." {
      ...
      }
  metadata:
    cwe:
    - 'CWE-262: Not Using Password Aging'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault_secret#expiration_date
    - https://docs.microsoft.com/en-us/azure/key-vault/secrets/about-secrets
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires
    shortlink: https://sg.run/d2RZ
    semgrep.dev:
      rule:
        rule_id: QrUdNy
        version_id: jQTPbZ
        url: https://semgrep.dev/playground/r/jQTPbZ/terraform.azure.security.keyvault.keyvault-ensure-secret-expires.keyvault-ensure-secret-expires
        origin: community
  languages:
  - hcl
  severity: INFO
- id: terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled
  message: Key vault should have purge protection enabled
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_key_vault" "..." {
      ...
       purge_protection_enabled = true
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_key_vault" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_key_vault" "..." {
        ...
          purge_protection_enabled = false
        ...
        }
  metadata:
    cwe:
    - 'CWE-693: Protection Mechanism Failure'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#purge_protection_enabled
    - https://docs.microsoft.com/en-us/azure/key-vault/general/soft-delete-overview#purge-protection
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled
    shortlink: https://sg.run/Z4xD
    semgrep.dev:
      rule:
        rule_id: 3qUjw9
        version_id: 1QTG9g
        url: https://semgrep.dev/playground/r/1QTG9g/terraform.azure.security.keyvault.keyvault-purge-enabled.keyvault-purge-enabled
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.azure.security.keyvault.keyvault-specify-network-acl.keyvault-specify-network-acl
  message: Network ACLs allow you to reduce your exposure to risk by limiting what
    can access your key vault. The default action of the Network ACL should be set
    to deny for when IPs are not matched. Azure services can be allowed to bypass.
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "azurerm_key_vault" "..." {
      ...
      network_acls {
          ...
          default_action = "Deny"
          ...
      }
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_key_vault" "..." {
        ...
        }
    - pattern-inside: |
        resource "azurerm_key_vault" "..." {
        ...
        network_acls {
            ...
            default_action = "Allow"
            ...
        }
        ...
        }
  metadata:
    cwe:
    - 'CWE-284: Improper Access Control'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/key_vault#network_acls
    - https://docs.microsoft.com/en-us/azure/key-vault/general/network-security
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.keyvault.keyvault-specify-network-acl.keyvault-specify-network-acl
    shortlink: https://sg.run/nKgX
    semgrep.dev:
      rule:
        rule_id: 4bU1jy
        version_id: 9lTpjQ
        url: https://semgrep.dev/playground/r/9lTpjQ/terraform.azure.security.keyvault.keyvault-specify-network-acl.keyvault-specify-network-acl
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: scala.lang.security.audit.scalac-debug.scalac-debug
  patterns:
  - pattern-either:
    - pattern: scalacOptions ... "-Vdebug"
    - pattern: scalacOptions ... "-Ydebug"
  message: Scala applications built with `debug` set to true in production may leak
    debug information to attackers. Debug mode also affects performance and reliability.
    Remove it from configuration.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*.sbt*'
  metadata:
    category: security
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp: A05:2021 - Security Misconfiguration
    technology:
    - scala
    - sbt
    references:
    - https://docs.scala-lang.org/overviews/compiler-options/index.html
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.scalac-debug.scalac-debug
    shortlink: https://sg.run/QbGd
    semgrep.dev:
      rule:
        rule_id: JDUlE0
        version_id: bZTg4Z
        url: https://semgrep.dev/playground/r/bZTg4Z/scala.lang.security.audit.scalac-debug.scalac-debug
        origin: community
- id: terraform.aws.security.wildcard-assume-role.wildcard-assume-role
  patterns:
  - pattern-inside: |
      resource "aws_iam_role" $NAME {
        ...
      }
  - pattern: assume_role_policy = "$STATEMENT"
  - metavariable-pattern:
      metavariable: $STATEMENT
      language: json
      patterns:
      - pattern-inside: |
          {..., "Effect": "Allow", ..., "Action": "sts:AssumeRole", ...}
      - pattern: |
          "Principal": {..., "AWS": "*", ...}
  message: 'Detected wildcard access granted to sts:AssumeRole. This means anyone
    with your AWS account ID and the name of the role can assume the role. Instead,
    limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.'
  metadata:
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    category: security
    technology:
    - aws
    references:
    - https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.wildcard-assume-role.wildcard-assume-role
    shortlink: https://sg.run/LXWr
    semgrep.dev:
      rule:
        rule_id: 5rUL1P
        version_id: 8KTDZj
        url: https://semgrep.dev/playground/r/8KTDZj/terraform.aws.security.wildcard-assume-role.wildcard-assume-role
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: json.aws.security.wildcard-assume-role.wildcard-assume-role
  patterns:
  - pattern-inside: |
      "Statement": [...]
  - pattern-inside: |
      {..., "Effect": "Allow", ..., "Action": "sts:AssumeRole", ...}
  - pattern: |
      "Principal": {..., "AWS": "*", ...}
  message: 'Detected wildcard access granted to sts:AssumeRole. This means anyone
    with your AWS account ID and the name of the role can assume the role. Instead,
    limit to a specific identity in your account, like this: `arn:aws:iam::<account_id>:root`.'
  metadata:
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    category: security
    technology:
    - aws
    references:
    - https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/json.aws.security.wildcard-assume-role.wildcard-assume-role
    shortlink: https://sg.run/7YEZ
    semgrep.dev:
      rule:
        rule_id: JDULx5
        version_id: PkTEOk
        url: https://semgrep.dev/playground/r/PkTEOk/json.aws.security.wildcard-assume-role.wildcard-assume-role
        origin: community
  languages:
  - json
  severity: ERROR
- id: go.net.sql.go-vanillasql-format-string-sqli-taint-med-conf.go-vanillasql-format-string-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/database/sql/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.go-vanillasql-format-string-sqli-taint-med-conf.go-vanillasql-format-string-sqli-taint-med-conf
    shortlink: https://sg.run/ggZR
    semgrep.dev:
      rule:
        rule_id: r6UNeD
        version_id: DkTjYp
        url: https://semgrep.dev/playground/r/DkTjYp/go.net.sql.go-vanillasql-format-string-sqli-taint-med-conf.go-vanillasql-format-string-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT
  - label: IMPORTSQL
    pattern: |
      import "database/sql"
      ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql\.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and not PREPARE and not PREPARECONN
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and not PREPARE and not PREPARECONN
- id: go.net.sql.pg-sqli-taint-med-conf.pg-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pg.uptrace.dev/queries/
    technology:
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    - go-pg/pg/v10
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.pg-sqli-taint-med-conf.pg-sqli-taint-med-conf
    shortlink: https://sg.run/QDlJ
    semgrep.dev:
      rule:
        rule_id: bwUldL
        version_id: 0bTXeJ
        url: https://semgrep.dev/playground/r/0bTXeJ/go.net.sql.pg-sqli-taint-med-conf.pg-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: IMPORTPG
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(.*go\-pg\/pg\/v10\/orm.*)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|ExecOne|Prepare)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $MODEL, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(QueryContext|QueryOneContext)$
    - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?pg.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT
  - patterns:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB := pg.$CONN(...)
            ...
        - pattern: |
            $DB, $ERR := pg.$CONN(...)
            ...
      - metavariable-regex:
          metavariable: $CONN
          regex: ^(Connect|ParseURL)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $DB. ... .$METHOD($QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(Exec|ExecOne|Prepare)$
        - patterns:
          - pattern: $DB. ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
        - patterns:
          - pattern: $DB. ... .$METHOD($CTX, $MODEL, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(QueryContext|QueryOneContext)$
      - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT
- id: go.net.sql.pgx-sqli-taint-med-conf.pgx-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Create parameterized queries in pgx by using positional
    parameters (`$1`, `$2`, ...) and adding the values as additional arguments to
    the function call. It is also possible to create prepared statements through the
    `Prepare` function. This function uses the same placeholders for bound parameters. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/jackc/pgx
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    technology:
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    - pgx
    - go-pgx
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.pgx-sqli-taint-med-conf.pgx-sqli-taint-med-conf
    shortlink: https://sg.run/3vXG
    semgrep.dev:
      rule:
        rule_id: NbUJjq
        version_id: qkTyBW
        url: https://semgrep.dev/playground/r/qkTyBW/go.net.sql.pgx-sqli-taint-med-conf.pgx-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: IMPORTPGX
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*jackc\/pgx\/v(4|5).*)
  pattern-sinks:
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)'
    - metavariable-regex:
        metavariable: $CONNTYPE
        regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and (USERINPUT or CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
  pattern-sanitizers:
  - patterns:
    - pattern: $SANFUNC($QUERY, ...)
    - metavariable-regex:
        metavariable: $SANFUNC
        regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX
  - pattern: '($QUERY : *Query).Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: ' $DB.Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)'
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
- id: python.lang.security.dangerous-code-run.dangerous-interactive-code-run
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $X = code.InteractiveConsole(...)
          ...
      - pattern-inside: |
          $X = code.InteractiveInterpreter(...)
          ...
    - pattern-either:
      - pattern: |
          $X.push($PAYLOAD,...)
      - pattern: |
          $X.runsource($PAYLOAD,...)
      - pattern: |
          $X.runcode(code.compile_command($PAYLOAD),...)
      - pattern: |
          $PL = code.compile_command($PAYLOAD,...)
          ...
          $X.runcode($PL,...)
    - focus-metavariable: $PAYLOAD
    - pattern-not: |
        $X.push("...",...)
    - pattern-not: |
        $X.runsource("...",...)
    - pattern-not: |
        $X.runcode(code.compile_command("..."),...)
    - pattern-not: |
        $PL = code.compile_command("...",...)
        ...
        $X.runcode($PL,...)
  message: Found user controlled data inside InteractiveConsole/InteractiveInterpreter
    method. This is dangerous if external data can reach this function call because
    it allows a malicious actor to run arbitrary Python code.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    category: security
    technology:
    - python
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-code-run.dangerous-interactive-code-run
    shortlink: https://sg.run/9pRY
    semgrep.dev:
      rule:
        rule_id: KxUKzx
        version_id: 44TrPJ
        url: https://semgrep.dev/playground/r/44TrPJ/python.lang.security.dangerous-code-run.dangerous-interactive-code-run
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.lang.security.dangerous-os-exec.dangerous-os-exec
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-not: os.$METHOD("...", ...)
        - pattern: os.$METHOD(...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe)
      - patterns:
        - pattern-not: os.$METHOD("...", [$PATH,"...","...",...],...)
        - pattern-inside: os.$METHOD($BASH,[$PATH,"-c",$CMD,...],...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (execv|execve|execvp|execvpe)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
      - patterns:
        - pattern-not: os.$METHOD("...", $PATH, "...", "...",...)
        - pattern-inside: os.$METHOD($BASH, $PATH, "-c", $CMD,...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (execl|execle|execlp|execlpe)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
  message: Found user controlled content when spawning a process. This is dangerous
    because it allows a malicious actor to execute commands.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    confidence: MEDIUM
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-os-exec.dangerous-os-exec
    shortlink: https://sg.run/yL9x
    semgrep.dev:
      rule:
        rule_id: qNUR13
        version_id: PkTNr7
        url: https://semgrep.dev/playground/r/PkTNr7/python.lang.security.dangerous-os-exec.dangerous-os-exec
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.lang.security.dangerous-spawn-process.dangerous-spawn-process
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - pattern: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
      - patterns:
        - pattern-either:
          - pattern: os.environ['$ANYTHING']
          - pattern: os.environ.get('$FOO', ...)
          - pattern: os.environb['$ANYTHING']
          - pattern: os.environb.get('$FOO', ...)
          - pattern: os.getenv('$ANYTHING', ...)
          - pattern: os.getenvb('$ANYTHING', ...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-either:
              - pattern: sys.argv[...]
              - pattern: sys.orig_argv[...]
          - patterns:
            - pattern-inside: |
                $PARSER = argparse.ArgumentParser(...)
                ...
            - pattern-inside: |
                $ARGS = $PARSER.parse_args()
            - pattern: <... $ARGS ...>
          - patterns:
            - pattern-inside: |
                $PARSER = optparse.OptionParser(...)
                ...
            - pattern-inside: |
                $ARGS = $PARSER.parse_args()
            - pattern: <... $ARGS ...>
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  $OPTS, $ARGS = getopt.getopt(...)
                  ...
              - pattern-inside: |
                  $OPTS, $ARGS = getopt.gnu_getopt(...)
                  ...
            - pattern-either:
              - patterns:
                - pattern-inside: |
                    for $O, $A in $OPTS:
                      ...
                - pattern: $A
              - pattern: $ARGS
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-not: os.$METHOD($MODE, "...", ...)
        - pattern-inside: os.$METHOD($MODE, $CMD, ...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)
      - patterns:
        - pattern-not: os.$METHOD($MODE, "...", ["...","...",...], ...)
        - pattern-inside: os.$METHOD($MODE, $BASH, ["-c",$CMD,...],...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
      - patterns:
        - pattern-not: os.$METHOD($MODE, "...", "...", "...", ...)
        - pattern-inside: os.$METHOD($MODE, $BASH, "-c", $CMD,...)
        - pattern: $CMD
        - metavariable-regex:
            metavariable: $METHOD
            regex: (spawnl|spawnle|spawnlp|spawnlpe)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
  message: Found user controlled content when spawning a process. This is dangerous
    because it allows a malicious actor to execute commands.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    category: security
    technology:
    - python
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-spawn-process.dangerous-spawn-process
    shortlink: https://sg.run/r8Zn
    semgrep.dev:
      rule:
        rule_id: lBUJrn
        version_id: 1QTXg4
        url: https://semgrep.dev/playground/r/1QTXg4/python.lang.security.dangerous-spawn-process.dangerous-spawn-process
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern: |
        _xxsubinterpreters.run_string($ID, $PAYLOAD, ...)
    - pattern-not: |
        _xxsubinterpreters.run_string($ID, "...", ...)
    - focus-metavariable: $PAYLOAD
  message: Found user controlled content in `run_string`. This is dangerous because
    it allows a malicious actor to run arbitrary Python code.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://bugs.python.org/issue43472
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    category: security
    technology:
    - python
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string
    shortlink: https://sg.run/bPop
    semgrep.dev:
      rule:
        rule_id: PeURWr
        version_id: JdT8rw
        url: https://semgrep.dev/playground/r/JdT8rw/python.lang.security.dangerous-subinterpreters-run-string.dangerous-subinterpreters-run-string
        origin: community
  severity: WARNING
  languages:
  - python
- id: go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key
  message: Disabled host key verification detected. This allows man-in-the-middle
    attacks. Use the 'golang.org/x/crypto/ssh/knownhosts' package to do host key verification.
    See https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/ to
    learn more about the problem and how to fix it.
  metadata:
    cwe:
    - 'CWE-322: Key Exchange without Entity Authentication'
    owasp:
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/securego/gosec
    references:
    - https://skarlso.github.io/2019/02/17/go-ssh-with-host-key-verification/
    - https://gist.github.com/Skarlso/34321a230cf0245018288686c9e70b2d
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key
    shortlink: https://sg.run/Yv6X
    semgrep.dev:
      rule:
        rule_id: r6UrW9
        version_id: LjTxv8
        url: https://semgrep.dev/playground/r/LjTxv8/go.lang.security.audit.crypto.insecure_ssh.avoid-ssh-insecure-ignore-host-key
        origin: community
  languages:
  - go
  severity: WARNING
  pattern: ssh.InsecureIgnoreHostKey()
- id: python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-not: subprocess.$FUNC("...", ...)
        - pattern-not: subprocess.$FUNC(["...",...], ...)
        - pattern-not: subprocess.$FUNC(("...",...), ...)
        - pattern-not: subprocess.CalledProcessError(...)
        - pattern-not: subprocess.SubprocessError(...)
        - pattern: subprocess.$FUNC($CMD, ...)
      - patterns:
        - pattern-not: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...)
        - pattern: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", $CMD)
      - patterns:
        - pattern-not: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)
        - pattern-not: subprocess.$FUNC(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...)
        - pattern-either:
          - pattern: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", $CMD],
              ...)
          - pattern: subprocess.$FUNC(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c", $CMD),
              ...)
      - patterns:
        - pattern-not: subprocess.$FUNC("=~/(python)/","...",...)
        - pattern: subprocess.$FUNC("=~/(python)/", $CMD)
      - patterns:
        - pattern-not: subprocess.$FUNC(["=~/(python)/","...",...],...)
        - pattern-not: subprocess.$FUNC(("=~/(python)/","...",...),...)
        - pattern-either:
          - pattern: subprocess.$FUNC(["=~/(python)/", $CMD],...)
          - pattern: subprocess.$FUNC(("=~/(python)/", $CMD),...)
    - focus-metavariable: $CMD
  message: Detected subprocess function '$FUNC' with user controlled data. A malicious
    actor could leverage this to perform command injection. You may consider using
    'shlex.escape()'.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess
    - https://docs.python.org/3/library/subprocess.html
    - https://docs.python.org/3/library/shlex.html
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    category: security
    technology:
    - python
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use
    shortlink: https://sg.run/NWxp
    semgrep.dev:
      rule:
        rule_id: JDUz3R
        version_id: 5PTbD0
        url: https://semgrep.dev/playground/r/5PTbD0/python.lang.security.dangerous-subprocess-use.dangerous-subprocess-use
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.lang.security.dangerous-system-call.dangerous-system-call
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-not: os.$W("...", ...)
    - pattern-either:
      - pattern: os.system(...)
      - pattern: getattr(os, "system")(...)
      - pattern: __import__("os").system(...)
      - pattern: getattr(__import__("os"), "system")(...)
      - pattern: |
          $X = __import__("os")
          ...
          $X.system(...)
      - pattern: |
          $X = __import__("os")
          ...
          getattr($X, "system")(...)
      - pattern: |
          $X = getattr(os, "system")
          ...
          $X(...)
      - pattern: |
          $X = __import__("os")
          ...
          $Y = getattr($X, "system")
          ...
          $Y(...)
      - pattern: os.popen(...)
      - pattern: os.popen2(...)
      - pattern: os.popen3(...)
      - pattern: os.popen4(...)
  message: Found user-controlled data used in a system call. This could allow a malicious
    actor to execute commands. Use the 'subprocess' module instead, which is easier
    to use without accidentally exposing a command injection vulnerability.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
    category: security
    technology:
    - python
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-system-call.dangerous-system-call
    shortlink: https://sg.run/k0W7
    semgrep.dev:
      rule:
        rule_id: 5rUoP1
        version_id: GxTpEK
        url: https://semgrep.dev/playground/r/GxTpEK/python.lang.security.dangerous-system-call.dangerous-system-call
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
  mode: taint
  options:
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: flask.request.form.get(...)
          - pattern: flask.request.form[...]
          - pattern: flask.request.args.get(...)
          - pattern: flask.request.args[...]
          - pattern: flask.request.values.get(...)
          - pattern: flask.request.values[...]
          - pattern: flask.request.cookies.get(...)
          - pattern: flask.request.cookies[...]
          - pattern: flask.request.stream
          - pattern: flask.request.headers.get(...)
          - pattern: flask.request.headers[...]
          - pattern: flask.request.data
          - pattern: flask.request.full_path
          - pattern: flask.request.url
          - pattern: flask.request.json
          - pattern: flask.request.get_json()
          - pattern: flask.request.view_args.get(...)
          - pattern: flask.request.view_args[...]
          - patterns:
            - pattern-inside: |
                @$APP.route(...)
                def $FUNC(..., $ROUTEVAR, ...):
                  ...
            - focus-metavariable: $ROUTEVAR
      - patterns:
        - pattern-inside: |
            def $FUNC(request, ...):
              ...
        - pattern-either:
          - pattern: request.$PROPERTY.get(...)
          - pattern: request.$PROPERTY[...]
      - patterns:
        - pattern-either:
          - pattern-inside: |
              @rest_framework.decorators.api_view(...)
              def $FUNC($REQ, ...):
                ...
          - patterns:
            - pattern-either:
              - pattern-inside: |
                  class $VIEW(..., rest_framework.views.APIView, ...):
                    ...
              - pattern-inside: "class $VIEW(..., rest_framework.generics.GenericAPIView,
                  ...):\n  ...                              \n"
            - pattern-inside: |
                def $METHOD(self, $REQ, ...):
                  ...
            - metavariable-regex:
                metavariable: $METHOD
                regex: (get|post|put|patch|delete|head)
        - pattern-either:
          - pattern: $REQ.POST.get(...)
          - pattern: $REQ.POST[...]
          - pattern: $REQ.FILES.get(...)
          - pattern: $REQ.FILES[...]
          - pattern: $REQ.DATA.get(...)
          - pattern: $REQ.DATA[...]
          - pattern: $REQ.QUERY_PARAMS.get(...)
          - pattern: $REQ.QUERY_PARAMS[...]
          - pattern: $REQ.data.get(...)
          - pattern: $REQ.data[...]
          - pattern: $REQ.query_params.get(...)
          - pattern: $REQ.query_params[...]
          - pattern: $REQ.content_type
          - pattern: $REQ.content_type
          - pattern: $REQ.stream
          - pattern: $REQ.stream
      - patterns:
        - pattern-either:
          - pattern-inside: |
              class $SERVER(..., http.server.BaseHTTPRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.StreamRequestHandler, ...):
                ...
          - pattern-inside: |
              class $SERVER(..., http.server.DatagramRequestHandler, ...):
                ...
        - pattern-either:
          - pattern: self.requestline
          - pattern: self.path
          - pattern: self.headers[...]
          - pattern: self.headers.get(...)
          - pattern: self.rfile
      - patterns:
        - pattern-inside: |
            @pyramid.view.view_config( ... )
            def $VIEW($REQ):
              ...
        - pattern: $REQ.$ANYTHING
        - pattern-not: $REQ.dbsession
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          _testcapi.run_in_subinterp($PAYLOAD, ...)
      - pattern: |
          test.support.run_in_subinterp($PAYLOAD, ...)
    - focus-metavariable: $PAYLOAD
    - pattern-not: |
        _testcapi.run_in_subinterp("...", ...)
    - pattern-not: |
        test.support.run_in_subinterp("...", ...)
  message: Found user controlled content in `run_in_subinterp`. This is dangerous
    because it allows a malicious actor to run arbitrary Python code.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/
    category: security
    technology:
    - python
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
    shortlink: https://sg.run/wLpY
    semgrep.dev:
      rule:
        rule_id: GdUkxR
        version_id: yeT7Ae
        url: https://semgrep.dev/playground/r/yeT7Ae/python.lang.security.dangerous-testcapi-run-in-subinterp.dangerous-testcapi-run-in-subinterp
        origin: community
  severity: WARNING
  languages:
  - python
- id: php.laravel.security.laravel-path-traversal-storage.laravel-path-traversal-storage
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the file
    path which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. In PHP, this
    can lead to both local file inclusion (LFI) or remote file inclusion (RFI) if
    user input reaches this statement. To prevent this vulnerability, validate and
    sanitize any input that is used to create references to file paths. Also, enforce
    strict file access controls. For example, choose privileges allowing public-facing
    applications to access only the required files.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    references:
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#path-traversal
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-path-traversal-storage.laravel-path-traversal-storage
    shortlink: https://sg.run/JPAR
    semgrep.dev:
      rule:
        rule_id: x8Uw5j
        version_id: A8TlvX
        url: https://semgrep.dev/playground/r/A8TlvX/php.laravel.security.laravel-path-traversal-storage.laravel-path-traversal-storage
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: Illuminate\Support\Facades\Storage->$METHOD($FILE,...)
      - pattern: Illuminate\Support\Facades\Storage->disk(...)->...->$METHOD($FILE,...)
      - patterns:
        - pattern-inside: |
            $X = Illuminate\Support\Facades\Storage->disk(...);
            ...
        - pattern-either:
          - pattern: $X->$METHOD($FILE,...)
    - focus-metavariable: $FILE
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: download
          - pattern: response
          - pattern: append
          - pattern: missing
          - pattern: prepend
          - pattern: put
          - pattern: setVisibility
          - pattern: writeStream
          - pattern: lastModified
          - pattern: size
          - pattern: readStream
          - pattern: get
          - pattern: getVisibility
          - pattern: path
          - pattern: temporaryUrl
          - pattern: url
          - pattern: mimeType
          - pattern: putFile
          - pattern: putFileAs
          - pattern: delete
          - pattern: allDirectories
          - pattern: allFiles
          - pattern: directories
          - pattern: files
          - pattern: deleteDirectory
          - pattern: move
          - pattern: copy
  - patterns:
    - pattern-either:
      - pattern: Illuminate\Support\Facades\Storage->$METHOD($TO,$FILE,...)
      - pattern: Illuminate\Support\Facades\Storage->disk(...)->...->$METHOD($TO,$FILE,...)
      - patterns:
        - pattern-inside: |
            $X = Illuminate\Support\Facades\Storage->disk(...);
            ...
        - pattern-either:
          - pattern: $X->$METHOD($TO,$FILE,...)
    - focus-metavariable: $FILE
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: move
          - pattern: copy
  pattern-sanitizers:
  - pattern: basename(...)
  - pattern: dirname(...)
  - pattern: pathinfo(...)
  - pattern: $APP\Models\$MODEL->$CALL(...)
  - pattern: $APP\Models\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $APP\Models\$CN\$MODEL->$CALL(...)
  - pattern: $APP\Models\$CN\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $APP\Model\$MODEL->$CALL(...)
  - pattern: $APP\Model\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $APP\Model\$CN\$MODEL->$CALL(...)
  - pattern: $APP\Model\$CN\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $REQ->file(...)
  - pattern: $REQ->file(...)->...->$CALL(...)
  - pattern: $X->where(...)
  - pattern: $X->find(...)
- id: php.laravel.security.laravel-path-traversal.laravel-path-traversal
  message: The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the file
    path which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. In PHP, this
    can lead to both local file inclusion (LFI) or remote file inclusion (RFI) if
    user input reaches this statement. To prevent this vulnerability, validate and
    sanitize any input that is used to create references to file paths. Also, enforce
    strict file access controls. For example, choose privileges allowing public-facing
    applications to access only the required files.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    references:
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#path-traversal
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-path-traversal.laravel-path-traversal
    shortlink: https://sg.run/5v1K
    semgrep.dev:
      rule:
        rule_id: OrUBb8
        version_id: BjTL4k
        url: https://semgrep.dev/playground/r/BjTL4k/php.laravel.security.laravel-path-traversal.laravel-path-traversal
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
      - pattern-inside: |
          function handle($REQ, Closure $NEXT) {...}
    - pattern-either:
      - pattern: $REQ->file(...)->...->hashName($FILE,...)
      - pattern: $REQ->file(...)->...->store($FILE,...)
      - pattern: $REQ->file(...)->...->storePublicly($FILE,...)
      - pattern: $REQ->file(...)->...->storePubliclyAs($FILE,...)
      - pattern: $REQ->file(...)->...->storeAs($FILE,...)
      - patterns:
        - pattern-inside: |
            $X = $REQ->file(...);
            ...
        - pattern-either:
          - pattern: $X->hashName($FILE,...)
          - pattern: $X->store($FILE,...)
          - pattern: $X->storePublicly($FILE,...)
          - pattern: $X->storePubliclyAs($FILE,...)
          - pattern: $X->storeAs($FILE,...)
    - focus-metavariable: $FILE
  - patterns:
    - pattern-either:
      - pattern: response(...)->...->download($FILE,...)
      - pattern: Illuminate\Routing\ResponseFactory->download($FILE,...)
    - focus-metavariable: $FILE
  - patterns:
    - pattern-either:
      - pattern: include($FILE)
      - pattern: include_once($FILE)
      - pattern: parsekit_compile_file($FILE,...)
      - pattern: php_check_syntax($FILE,...)
      - pattern: require($FILE)
      - pattern: require_once($FILE)
      - pattern: runkit_import($FILE,...)
      - pattern: set_include_path($FILE,...)
      - pattern: virtual($FILE,...)
    - focus-metavariable: $FILE
  pattern-sanitizers:
  - pattern: basename(...)
  - pattern: dirname(...)
  - pattern: pathinfo(...)
  - pattern: $APP\Models\$MODEL->$CALL(...)
  - pattern: $APP\Models\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $APP\Model\$MODEL->$CALL(...)
  - pattern: $APP\Model\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $APP\Models\$CN\$MODEL->$CALL(...)
  - pattern: $APP\Models\$CN\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $APP\Model\$CN\$MODEL->$CALL(...)
  - pattern: $APP\Model\$CN\$MODEL->$FN(...)->...->$CALL(...)
  - pattern: $X->where(...)
  - pattern: $X->find(...)
- id: php.laravel.security.laravel-column-sql-injection.laravel-column-sql-injection
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in PHP, it is possible to adopt prepared statements by using
    `PDO` with bind variables using `bindParam()`.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://laravel.com/docs/9.x/queries
    - https://laravel.com/api/6.x/Illuminate/Database/Query/Builder.html
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#column-name-sql-injection
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-column-sql-injection.laravel-column-sql-injection
    shortlink: https://sg.run/4vjL
    semgrep.dev:
      rule:
        rule_id: kxU5bx
        version_id: X0TK3B
        url: https://semgrep.dev/playground/r/X0TK3B/php.laravel.security.laravel-column-sql-injection.laravel-column-sql-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            use $APP\Models\$MODEL;
            ...
        - pattern: $MODEL->$METHOD($COLUMN, ...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CON = $DB->$SMTH(...);
                ...
            - pattern: $CON->$METHOD($COLUMN,...)
          - pattern: $DB->$METHOD($COLUMN,...)
        - metavariable-pattern:
            metavariable: $DB
            pattern: Illuminate\Support\Facades\DB
    - pattern-not-inside: |
        $COLUMN = $REQ->validate(...);
        ...
    - pattern-not-inside: |
        $COLUMN = [...];
        ...
    - focus-metavariable: $COLUMN
    - metavariable-pattern:
        metavariable: $COLUMN
        patterns:
        - pattern-not: $REQ->validate(...)
        - pattern-not: function (...) {...}
        - pattern-not: |
            [...]
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: whereNull
          - pattern: orWhereNull
          - pattern: whereNotNull
          - pattern: whereRowValues
          - pattern: orWhereRowValues
          - pattern: getCountForPagination
          - pattern: insertUsing
          - pattern: get
          - pattern: count
          - pattern: whereIn
          - pattern: orWhereIn
          - pattern: whereNotIn
          - pattern: orWhereNotIn
          - pattern: whereIntegerInRaw
          - pattern: orWhereIntegerInRaw
          - pattern: whereIntegerNotInRaw
          - pattern: orWhereIntegerNotInRaw
          - pattern: whereBetweenColumns
          - pattern: whereBetween
          - pattern: orWhereBetween
          - pattern: orWhereBetweenColumns
          - pattern: whereNotBetween
          - pattern: whereNotBetweenColumns
          - pattern: orWhereNotBetween
          - pattern: orWhereNotBetweenColumns
          - pattern: orWhereNotNull
          - pattern: whereDate
          - pattern: orWhereDate
          - pattern: whereTime
          - pattern: orWhereTime
          - pattern: whereDay
          - pattern: orWhereDay
          - pattern: whereMonth
          - pattern: orWhereMonth
          - pattern: whereYear
          - pattern: orWhereYear
          - pattern: whereJsonContains
          - pattern: orWhereJsonContains
          - pattern: whereJsonDoesntContain
          - pattern: orWhereJsonDoesntContain
          - pattern: whereJsonLength
          - pattern: orWhereJsonLength
          - pattern: having
          - pattern: orHaving
          - pattern: havingBetween
          - pattern: orderBy
          - pattern: orderByDesc
          - pattern: latest
          - pattern: oldest
          - pattern: value
          - pattern: pluck
          - pattern: implode
          - pattern: min
          - pattern: max
          - pattern: sum
          - pattern: avg
          - pattern: average
          - pattern: increment
          - pattern: decrement
          - pattern: where
          - pattern: orWhere
          - pattern: addSelect
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            use $APP\Models\$MODEL;
            ...
        - pattern: $MODEL->$METHOD($ARG,$COLUMNS, ...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CON = $DB->$SMTH(...);
                ...
            - pattern: $CON->$METHOD($ARG,$COLUMNS,...)
          - pattern: $DB->$METHOD($ARG,$COLUMNS,...)
        - metavariable-pattern:
            metavariable: $DB
            pattern: Illuminate\Support\Facades\DB
    - focus-metavariable: $COLUMNS
    - metavariable-pattern:
        metavariable: $COLUMNS
        patterns:
        - pattern-not: $REQ->validate(...)
        - pattern-not: function (...) {...}
        - pattern-not: |
            [..., $KEY => $VALUE, ...]
    - pattern-not-inside: |
        $COLUMNS = $REQ->validate(...);
        ...
    - pattern-not-inside: |
        $COLUMN = [..., $KEY => $VALUE, ...];
        ...
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: find
          - pattern: paginate
          - pattern: simplePaginate
          - pattern: cursorPaginate
          - pattern: aggregate
          - pattern: numericAggregate
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            use $APP\Models\$MODEL;
            ...
        - pattern: $MODEL->$METHOD($X,$Y,$COLUMNS, ...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CON = $DB->$SMTH(...);
                ...
            - pattern: $CON->$METHOD($X,$Y,$COLUMNS,...)
          - pattern: $DB->$METHOD($X,$Y,$COLUMNS,...)
        - metavariable-pattern:
            metavariable: $DB
            pattern: Illuminate\Support\Facades\DB
    - focus-metavariable: $COLUMNS
    - metavariable-pattern:
        metavariable: $COLUMNS
        patterns:
        - pattern-not: $REQ->validate(...)
        - pattern-not: function (...) {...}
        - pattern-not: |
            [..., $KEY => $VALUE, ...]
    - pattern-not-inside: |
        $COLUMNS = $REQ->validate(...);
        ...
    - pattern-not-inside: |
        $COLUMN = [..., $KEY => $VALUE, ...];
        ...
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: forPageBeforeId
          - pattern: forPageAfterId
  pattern-sanitizers:
  - pattern: |
      $X ? $Y : $Z;
- id: php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in PHP, it is possible to adopt prepared statements by using
    `PDO` with bind variables using `bindParam()`.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection
    shortlink: https://sg.run/PBq3
    semgrep.dev:
      rule:
        rule_id: wdU5LD
        version_id: 9lT7De
        url: https://semgrep.dev/playground/r/9lT7De/php.laravel.security.laravel-native-sql-injection.laravel-native-sql-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $QUERY
    - pattern-either:
      - pattern: dbx_query($X, $QUERY, ...)
      - pattern: odbc_do($X, $QUERY, ...)
      - pattern: odbc_exec($X, $QUERY, ...)
      - pattern: odbc_prepare($X, $QUERY, ...)
      - pattern: db2_exec($X, $QUERY, ...)
      - pattern: db2_prepare($X, $QUERY, ...)
      - pattern: fbsql_db_query($X, $QUERY, ...)
      - pattern: fbsql_query($QUERY, ...)
      - pattern: ibase_query($X, $QUERY, ...)
      - pattern: ibase_prepare($QUERY, ...)
      - pattern: ibase_prepare($X, $QUERY, ...)
      - pattern: ibase_prepare($X, $Y, $QUERY, ...)
      - pattern: ifx_query($QUERY, ...)
      - pattern: ifx_prepare($QUERY, ...)
      - pattern: ingres_query($X, $QUERY, ...)
      - pattern: ingres_prepare($X, $QUERY, ...)
      - pattern: ingres_unbuffered_query($X, $QUERY, ...)
      - pattern: msql_db_query($X, $QUERY, ...)
      - pattern: msql_query($QUERY, ...)
      - pattern: msql($X, $QUERY, ...)
      - pattern: mssql_query($QUERY, ...)
      - pattern: mysql_db_query($X, $QUERY, ...)
      - pattern: mysql_query($QUERY, ...)
      - pattern: mysql_unbuffered_query($QUERY, ...)
      - pattern: mysqli_real_query($X, $QUERY, ...)
      - pattern: mysqli_master_query($X, $QUERY, ...)
      - pattern: mysqli_stmt_execute($QUERY, ...)
      - pattern: mysqli_query($X, $QUERY, ...)
      - patterns:
        - pattern-inside: |
            $M = new mysqli(...);
            ...
        - pattern-either:
          - pattern: $M->query($QUERY, ...)
          - pattern: $M->real_query($QUERY, ...)
      - pattern: oci_parse($X, $QUERY, ...)
      - pattern: ovrimos_exec($X, $QUERY, ...)
      - pattern: ovrimos_prepare($X, $QUERY, ...)
      - pattern: ora_do($X, $QUERY, ...)
      - pattern: ora_parse($X, $QUERY, ...)
      - pattern: pg_query($X, $QUERY, ...)
      - pattern: pg_send_query($X, $QUERY, ...)
      - pattern: pg_send_query_params($X, $QUERY, ...)
      - pattern: pg_send_prepare($X, $Y, $QUERY, ...)
      - pattern: pg_prepare($X, $Y, $QUERY, ...)
      - patterns:
        - pattern-inside: |
            $S = new SQLiteDatabase(...);
            ...
        - pattern-either:
          - pattern: $S->arrayQuery($QUERY, ...)
          - pattern: $S->singleQuery($QUERY, ...)
          - pattern: $S->query($QUERY, ...)
          - pattern: $S->exec($QUERY, ...)
          - pattern: $S->unbufferedQuery($QUERY, ...)
      - pattern: sqlite_array_query($QUERY, ...)
      - pattern: sqlite_array_query($X, $QUERY, ...)
      - pattern: sqlite_query($QUERY, ...)
      - pattern: sqlite_query($X, $QUERY, ...)
      - pattern: sqlite_exec($QUERY, ...)
      - pattern: sqlite_exec($X, $QUERY, ...)
      - pattern: sqlite_single_query($X, $QUERY, ...)
      - pattern: sqlite_unbuffered_query($QUERY, ...)
      - pattern: sqlite_unbuffered_query($X, $QUERY, ...)
      - pattern: sybase_query($QUERY, ...)
      - pattern: sybase_unbuffered_query($QUERY, ...)
  pattern-sanitizers:
  - pattern: addslashes(...)
  - pattern: dbx_escape_string(...)
  - pattern: db2_escape_string(...)
  - pattern: ingres_escape_string(...)
  - pattern: maxdb_escape_string(...)
  - pattern: maxdb_real_escape_string(...)
  - pattern: mysql_escape_string(...)
  - pattern: mysql_real_escape_string(...)
  - pattern: mysqli_escape_string(...)
  - pattern: mysqli_real_escape_string(...)
  - pattern: pg_escape_string(...)
  - pattern: pg_escape_bytea(...)
  - pattern: sqlite_escape_string(...)
  - pattern: sqlite_udf_encode_binary(...)
  - pattern: cubrid_real_escape_string(...)
  - pattern: |
      $X ? $Y : $Z;
- id: php.laravel.security.laravel-raw-sql-injection.laravel-raw-sql-injection
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. To build
    SQL queries safely in PHP, it is possible to adopt prepared statements by using
    `PDO` with bind variables using `bindParam()`.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://laravel.com/docs/9.x/queries
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-raw-sql-injection.laravel-raw-sql-injection
    shortlink: https://sg.run/Go5z
    semgrep.dev:
      rule:
        rule_id: eqUqO4
        version_id: yeTgwB
        url: https://semgrep.dev/playground/r/yeTgwB/php.laravel.security.laravel-raw-sql-injection.laravel-raw-sql-injection
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            use $APP\Models\$MODEL;
            ...
        - pattern: $MODEL->$METHOD($QUERY, ...)
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CON = $DB->$SMTH(...);
                ...
            - pattern: $CON->$METHOD($QUERY,...)
          - pattern: $DB->$METHOD($QUERY,...)
        - metavariable-pattern:
            metavariable: $DB
            pattern: Illuminate\Support\Facades\DB
    - focus-metavariable: $QUERY
    - pattern-not-inside: |
        $QUERY = $REQ->validate(...);
        ...
    - pattern-not-inside: |
        $QUERY = [...];
        ...
    - metavariable-pattern:
        metavariable: $QUERY
        patterns:
        - pattern-not: $REQ->validate(...)
        - pattern-not: function (...) {...}
        - pattern-not: |
            [...]
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: selectRaw
          - pattern: fromRaw
          - pattern: whereRaw
          - pattern: orWhereRaw
          - pattern: groupByRaw
          - pattern: havingRaw
          - pattern: orHavingRaw
          - pattern: orderByRaw
          - pattern: select
          - pattern: insert
          - pattern: statement
          - pattern: unprepared
          - pattern: affectingStatement
          - pattern: delete
          - pattern: update
          - pattern: selectOne
          - pattern: raw
          - pattern: query
          - pattern: scalar
          - pattern: selectFromWriteConnection
          - pattern: cursor
          - pattern: run
          - pattern: runQueryCallback
  pattern-sanitizers:
  - pattern: |
      $X ? $Y : $Z;
- id: go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion
  message: '`MinVersion` is missing from this TLS configuration.  By default, TLS
    1.2 is currently used as the minimum when acting as a client, and TLS 1.0 when
    acting as a server. General purpose web applications should default to TLS 1.3
    with all other protocols disabled.  Only where it is known that a web server must
    support legacy clients with unsupported an insecure browsers (such as Internet
    Explorer 10), it may be necessary to enable TLS 1.0 to provide support. Add `MinVersion:
    tls.VersionTLS13'' to the TLS configuration to bump the minimum version to TLS
    1.3.'
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls_config.go
    references:
    - https://golang.org/doc/go1.14#crypto/tls
    - https://golang.org/pkg/crypto/tls/#:~:text=MinVersion
    - https://www.us-cert.gov/ncas/alerts/TA14-290A
    category: security
    technology:
    - go
    confidence: HIGH
    subcategory:
    - guardrail
    likelihood: MEDIUM
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion
    shortlink: https://sg.run/oxEN
    semgrep.dev:
      rule:
        rule_id: NbUk4X
        version_id: qkT7o6
        url: https://semgrep.dev/playground/r/qkT7o6/go.lang.security.audit.crypto.missing-ssl-minversion.missing-ssl-minversion
        origin: community
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern: |
      tls.Config{ $...CONF }
  - pattern-not: |
      tls.Config{..., MinVersion: ..., ...}
  fix: |
    tls.Config{ $...CONF, MinVersion: tls.VersionTLS13 }
- id: ocaml.lang.compatibility.deprecated.deprecated-pervasives
  pattern: Pervasives.$X
  message: Pervasives is deprecated and will not be available after 4.10. Use Stdlib.
  languages:
  - ocaml
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - ocaml
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ocaml.lang.compatibility.deprecated.deprecated-pervasives
    shortlink: https://sg.run/dKe0
    semgrep.dev:
      rule:
        rule_id: 3qUP1E
        version_id: X0TADB
        url: https://semgrep.dev/playground/r/X0TADB/ocaml.lang.compatibility.deprecated.deprecated-pervasives
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-httpconn
  pattern: http.client.HTTPConnection(blocksize=$X,...)
  message: Found usage of the 'blocksize' argument in a HTTPConnection call. This
    is only available on Python 3.7+ and is therefore not backwards compatible. Remove
    this in order for this code to work in Python 3.6 and below.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-httpconn
    shortlink: https://sg.run/vzAb
    semgrep.dev:
      rule:
        rule_id: 8GUjbX
        version_id: GxToeD
        url: https://semgrep.dev/playground/r/GxToeD/python.lang.compatibility.python37.python37-compatibility-httpconn
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-httpsconn
  pattern: http.client.HTTPSConnection(blocksize=$X,...)
  message: Found usage of the 'blocksize' argument in a HTTPSConnection call. This
    is only available on Python 3.7+ and is therefore not backwards compatible. Remove
    this in order for this code to work in Python 3.6 and below.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-httpsconn
    shortlink: https://sg.run/dKwd
    semgrep.dev:
      rule:
        rule_id: gxU1qd
        version_id: RGT2L2
        url: https://semgrep.dev/playground/r/RGT2L2/python.lang.compatibility.python37.python37-compatibility-httpsconn
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-importlib3
  pattern: import importlib.abc.ResourceReader
  message: Found usage of 'importlib.abc.ResourceReader'. This module is only available
    on Python 3.7+ and is therefore not backwards compatible. Instead, use another
    loader.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-importlib3
    shortlink: https://sg.run/Zv2o
    semgrep.dev:
      rule:
        rule_id: QrUzJ9
        version_id: A8TNdJ
        url: https://semgrep.dev/playground/r/A8TNdJ/python.lang.compatibility.python37.python37-compatibility-importlib3
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-textiowrapper
  pattern: TextIOWrapper.reconfigure(...)
  message: Found usage of 'importlib.abc.ResourceReader'. This module is only available
    on Python 3.7+ and is therefore not backwards compatible. Instead, use another
    loader.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-textiowrapper
    shortlink: https://sg.run/ndL2
    semgrep.dev:
      rule:
        rule_id: 3qUPdy
        version_id: BjTKZr
        url: https://semgrep.dev/playground/r/BjTKZr/python.lang.compatibility.python37.python37-compatibility-textiowrapper
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network1
  pattern: ipaddress.IPv6Network.subnet_of($X)
  message: IPv6Network.subnet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the subnet is in 'subnets'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv6network1
    shortlink: https://sg.run/EkLe
    semgrep.dev:
      rule:
        rule_id: 4bUko0
        version_id: DkT2bY
        url: https://semgrep.dev/playground/r/DkT2bY/python.lang.compatibility.python37.python37-compatibility-ipv6network1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv6network2
  pattern: ipaddress.IPv6Network.supernet_of($X)
  message: IPv6Network.supernet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the supernet is in 'supernet'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv6network2
    shortlink: https://sg.run/7orW
    semgrep.dev:
      rule:
        rule_id: PeUZYr
        version_id: WrTYKq
        url: https://semgrep.dev/playground/r/WrTYKq/python.lang.compatibility.python37.python37-compatibility-ipv6network2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network1
  pattern: ipaddress.IPv4Network.subnet_of($X)
  message: IPv4Network.subnet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the subnet is in 'subnets'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv4network1
    shortlink: https://sg.run/LwRo
    semgrep.dev:
      rule:
        rule_id: JDUyqR
        version_id: 0bTpzo
        url: https://semgrep.dev/playground/r/0bTpzo/python.lang.compatibility.python37.python37-compatibility-ipv4network1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-ipv4network2
  pattern: ipaddress.IPv4Network.supernet_of($X)
  message: IPv4Network.supernet_of is only available on Python 3.7+ and is therefore
    not backwards compatible. Instead, check if the supernet is in 'supernet'.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-ipv4network2
    shortlink: https://sg.run/8y3E
    semgrep.dev:
      rule:
        rule_id: 5rUO61
        version_id: K3Twkg
        url: https://semgrep.dev/playground/r/K3Twkg/python.lang.compatibility.python37.python37-compatibility-ipv4network2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-locale1
  pattern: locale.format_string(monetary=$X, ...)
  message: Found usage of the 'monetary' argument in a function call of 'locale.format_string'.
    This is only available on Python 3.7+ and is therefore not backwards compatible.
    Instead, remove the 'monetary' argument.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-locale1
    shortlink: https://sg.run/gLeZ
    semgrep.dev:
      rule:
        rule_id: GdU72R
        version_id: qkTp7L
        url: https://semgrep.dev/playground/r/qkTp7L/python.lang.compatibility.python37.python37-compatibility-locale1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-math1
  pattern: math.remainder($X, $Y)
  message: math.remainder is only available on Python 3.7+ and is therefore not backwards
    compatible. Instead, use math.fmod() or calculate $X - n* $Y.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-math1
    shortlink: https://sg.run/Q50Q
    semgrep.dev:
      rule:
        rule_id: ReUgbz
        version_id: l4TXR1
        url: https://semgrep.dev/playground/r/l4TXR1/python.lang.compatibility.python37.python37-compatibility-math1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess1
  pattern: multiprocessing.Process.close()
  message: multiprocessing.Process.close() is only available on Python 3.7+ and is
    therefore not backwards compatible. Instead, use join().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-multiprocess1
    shortlink: https://sg.run/3xjp
    semgrep.dev:
      rule:
        rule_id: AbUzRA
        version_id: YDTYeO
        url: https://semgrep.dev/playground/r/YDTYeO/python.lang.compatibility.python37.python37-compatibility-multiprocess1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-multiprocess2
  pattern: multiprocessing.Process.kill()
  message: multiprocessing.Process.kill() is only available on Python 3.7+ and is
    therefore not backwards compatible. Instead, use terminate().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-multiprocess2
    shortlink: https://sg.run/4x1z
    semgrep.dev:
      rule:
        rule_id: BYUNE9
        version_id: 6xTy90
        url: https://semgrep.dev/playground/r/6xTy90/python.lang.compatibility.python37.python37-compatibility-multiprocess2
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-os1
  pattern: os.preadv(...)
  message: os.preadv() is only available on Python 3.7+ and is therefore not backwards
    compatible. Instead, use a combination of os.readv() and os.pread().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-os1
    shortlink: https://sg.run/PJWW
    semgrep.dev:
      rule:
        rule_id: DbUpQQ
        version_id: o5TKDW
        url: https://semgrep.dev/playground/r/o5TKDW/python.lang.compatibility.python37.python37-compatibility-os1
        origin: community
- id: python.lang.compatibility.python37.python37-compatibility-pdb
  pattern: pdb.set_trace(header=$X, ...)
  message: pdb.set_trace() with the header argument is only available on Python 3.7+
    and is therefore not backwards compatible. Instead, use set_trace() without the
    header argument.
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-pdb
    shortlink: https://sg.run/GeA2
    semgrep.dev:
      rule:
        rule_id: KxUby2
        version_id: pZTb3R
        url: https://semgrep.dev/playground/r/pZTb3R/python.lang.compatibility.python37.python37-compatibility-pdb
        origin: community
- id: ruby.lang.security.bad-deserialization.bad-deserialization
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: params
    - pattern: cookies
  pattern-sinks:
  - pattern-either:
    - pattern: |
        CSV.load(...)
    - pattern: |
        Marshal.load(...)
    - pattern: |
        Marshal.restore(...)
    - pattern: |
        Oj.object_load(...)
    - pattern: |
        Oj.load($X)
  message: Checks for unsafe deserialization. Objects in Ruby can be serialized into
    strings, then later loaded from strings. However, uses of load and object_load
    can cause remote code execution. Loading user input with MARSHAL or CSV can potentially
    be dangerous. Use JSON in a secure fashion instead.
  metadata:
    references:
    - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb
    category: security
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    technology:
    - ruby
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.bad-deserialization.bad-deserialization
    shortlink: https://sg.run/DJj2
    semgrep.dev:
      rule:
        rule_id: lBUdQg
        version_id: pZT4jr
        url: https://semgrep.dev/playground/r/pZT4jr/ruby.lang.security.bad-deserialization.bad-deserialization
        origin: community
  languages:
  - ruby
  severity: ERROR
- id: python.lang.security.audit.weak-ssl-version.weak-ssl-version
  message: An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL
    versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2'
    or higher.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/insecure_ssl_tls.py#L30
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.3 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v91-client-communications-security-requirements
      version: '4'
    references:
    - https://tools.ietf.org/html/rfc7568
    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html
    - https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version
    shortlink: https://sg.run/RoZO
    semgrep.dev:
      rule:
        rule_id: KxUbNG
        version_id: pZTQ9w
        url: https://semgrep.dev/playground/r/pZTQ9w/python.lang.security.audit.weak-ssl-version.weak-ssl-version
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: ssl.PROTOCOL_SSLv2
  - pattern: ssl.PROTOCOL_SSLv3
  - pattern: ssl.PROTOCOL_TLSv1
  - pattern: ssl.PROTOCOL_TLSv1_1
  - pattern: pyOpenSSL.SSL.SSLv2_METHOD
  - pattern: pyOpenSSL.SSL.SSLv23_METHOD
  - pattern: pyOpenSSL.SSL.SSLv3_METHOD
  - pattern: pyOpenSSL.SSL.TLSv1_METHOD
  - pattern: pyOpenSSL.SSL.TLSv1_1_METHOD
- id: python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation
    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342
    category: security
    technology:
    - pyyaml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
    shortlink: https://sg.run/we9Y
    semgrep.dev:
      rule:
        rule_id: ZqU5jZ
        version_id: kbTZ4W
        url: https://semgrep.dev/playground/r/kbTZ4W/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load
        origin: community
  languages:
  - python
  message: Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`,
    `yaml.Loader`, `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe
    methods of deserializing YAML. An attacker with control over the YAML input could
    create special YAML input that allows the attacker to run arbitrary Python code.
    This would allow the attacker to steal files, download and install malware, or
    otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.
  fix-regex:
    regex: unsafe_load
    replacement: safe_load
    count: 1
  severity: ERROR
  patterns:
  - pattern-inside: |
      import yaml
      ...
  - pattern-not-inside: |
      $YAML = ruamel.yaml.YAML(...)
      ...
  - pattern-either:
    - pattern: yaml.unsafe_load(...)
    - pattern: yaml.load(..., Loader=yaml.Loader, ...)
    - pattern: yaml.load(..., Loader=yaml.UnsafeLoader, ...)
    - pattern: yaml.load(..., Loader=yaml.CLoader, ...)
    - pattern: yaml.load_all(..., Loader=yaml.Loader, ...)
    - pattern: yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)
    - pattern: yaml.load_all(..., Loader=yaml.CLoader, ...)
- id: python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://yaml.readthedocs.io/en/latest/basicuse.html?highlight=typ
    category: security
    technology:
    - ruamel.yaml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel
    shortlink: https://sg.run/x1rz
    semgrep.dev:
      rule:
        rule_id: nJUzqK
        version_id: w8T0QN
        url: https://semgrep.dev/playground/r/w8T0QN/python.lang.security.deserialization.avoid-unsafe-ruamel.avoid-unsafe-ruamel
        origin: community
  languages:
  - python
  message: Avoid using unsafe `ruamel.yaml.YAML()`. `ruamel.yaml.YAML` can create
    arbitrary Python objects. A malicious actor could exploit this to run arbitrary
    code. Use `YAML(typ='rt')` or `YAML(typ='safe')` instead.
  severity: ERROR
  pattern-either:
  - pattern: ruamel.yaml.YAML(..., typ='unsafe', ...)
  - pattern: ruamel.yaml.YAML(..., typ='base', ...)
- id: python.lang.security.insecure-hash-function.insecure-hash-function
  message: Detected use of an insecure MD4 or MD5 hash function. These functions have
    known vulnerabilities and are considered deprecated. Consider using 'SHA256' or
    a similar function instead.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/hashlib_new_insecure_functions.py
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.2 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://tools.ietf.org/html/rfc6151
    - https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision
    - https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function
    shortlink: https://sg.run/rdBn
    semgrep.dev:
      rule:
        rule_id: OrU30g
        version_id: vdT3WD
        url: https://semgrep.dev/playground/r/vdT3WD/python.lang.security.insecure-hash-function.insecure-hash-function
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: hashlib.new("=~/[M|m][D|d][4|5]/", ...)
  - pattern: hashlib.new(..., name="=~/[M|m][D|d][4|5]/", ...)
- id: python.lang.security.use-defused-xml.use-defused-xml
  metadata:
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    references:
    - https://docs.python.org/3/library/xml.html
    - https://github.com/tiran/defusedxml
    - https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml
    shortlink: https://sg.run/kX47
    semgrep.dev:
      rule:
        rule_id: d8UjRx
        version_id: nWTwqD
        url: https://semgrep.dev/playground/r/nWTwqD/python.lang.security.use-defused-xml.use-defused-xml
        origin: community
  message: The Python documentation recommends using `defusedxml` instead of `xml`
    because the native Python `xml` library is vulnerable to XML External Entity (XXE)
    attacks. These attacks can leak confidential data and "XML bombs" can cause denial
    of service.
  languages:
  - python
  severity: ERROR
  pattern: import xml
- id: python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
  pattern-either:
  - pattern: import xmlrpclib
  - pattern: import SimpleXMLRPCServer
  - pattern: import xmlrpc
  message: Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities.
    Use defusedxml.xmlrpc instead.
  metadata:
    cwe:
    - 'CWE-776: Improper Restriction of Recursive Entity References in DTDs (''XML
      Entity Expansion'')'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://github.com/PyCQA/bandit/blob/07f84cb5f5e7c1055e6feaa0fe93afa471de0ac3/bandit/blacklists/imports.py#L160
    references:
    - https://pypi.org/project/defusedxml/
    - https://docs.python.org/3/library/xml.html#xml-vulnerabilities
    category: security
    technology:
    - python
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
    shortlink: https://sg.run/weqY
    semgrep.dev:
      rule:
        rule_id: ZqU5EZ
        version_id: ExTYBP
        url: https://semgrep.dev/playground/r/ExTYBP/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc
        origin: community
  severity: ERROR
  languages:
  - python
- id: ruby.lang.security.cookie-serialization.cookie-serialization
  message: Checks if code allows cookies to be deserialized using Marshal. If the
    attacker can craft a valid cookie, this could lead to remote code execution. The
    hybrid check is just to warn users to migrate to :json for best practice.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cookie_serialization.rb
    - https://robertheaton.com/2013/07/22/how-to-hack-a-rails-app-using-its-secret-token/
    category: security
    technology:
    - ruby
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.cookie-serialization.cookie-serialization
    shortlink: https://sg.run/Wg3y
    semgrep.dev:
      rule:
        rule_id: YGUrq5
        version_id: zyTXeJ
        url: https://semgrep.dev/playground/r/zyTXeJ/ruby.lang.security.cookie-serialization.cookie-serialization
        origin: community
  languages:
  - ruby
  severity: ERROR
  pattern-either:
  - pattern: |
      Rails.application.config.action_dispatch.cookies_serializer = :marshal
  - pattern: |
      Rails.application.config.action_dispatch.cookies_serializer = :hybrid
- id: ruby.lang.security.create-with.create-with
  patterns:
  - pattern-not: |
      $FUNC.create_with($PARAMSB.permit(...))
  - pattern: |
      $FUNC.create_with($PARAMSA)
  message: Checks for strong parameter bypass through usage of create_with. Create_with
    bypasses strong parameter protection, which could allow attackers to set arbitrary
    attributes on models. To fix this vulnerability, either remove all create_with
    calls or use the permit function to specify tags that are allowed to be set.
  metadata:
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_create_with.rb
    - https://groups.google.com/g/rubyonrails-security/c/M4chq5Sb540/m/CC1Fh0Y_NWwJ
    category: security
    technology:
    - ruby
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.create-with.create-with
    shortlink: https://sg.run/0nLk
    semgrep.dev:
      rule:
        rule_id: 6JUqbn
        version_id: pZTqQD
        url: https://semgrep.dev/playground/r/pZTqQD/ruby.lang.security.create-with.create-with
        origin: community
  languages:
  - ruby
  severity: ERROR
- id: ruby.lang.security.dangerous-exec.dangerous-exec
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        def $F(...,$ARG,...)
            ...
        end
    - focus-metavariable: $ARG
  - pattern: params
  - pattern: cookies
  pattern-sinks:
  - patterns:
    - pattern: |
        $EXEC(...)
    - pattern-not: |
        $EXEC("...","...","...",...)
    - pattern-not: |
        $EXEC(["...","...","...",...],...)
    - pattern-not: |
        $EXEC({...},"...","...","...",...)
    - pattern-not: |
        $EXEC({...},["...","...","...",...],...)
    - metavariable-regex:
        metavariable: $EXEC
        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$
  message: Detected non-static command inside $EXEC. Audit the input to '$EXEC'. If
    unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_execute.rb
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - ruby
    - rails
    references:
    - https://guides.rubyonrails.org/security.html#command-line-injection
    cwe2022-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.dangerous-exec.dangerous-exec
    shortlink: https://sg.run/R8GY
    semgrep.dev:
      rule:
        rule_id: WAUZOw
        version_id: 2KTA62
        url: https://semgrep.dev/playground/r/2KTA62/ruby.lang.security.dangerous-exec.dangerous-exec
        origin: community
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.dangerous-open.dangerous-open
  patterns:
  - pattern: |
      open($CMD,...)
  - pattern-not: |
      open("...",...)
  - metavariable-regex:
      metavariable: $CMD
      regex: '|'
  message: Detected non-static command inside 'open'. Audit the input to 'open'. If
    unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - ruby
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.dangerous-open.dangerous-open
    shortlink: https://sg.run/Al8Q
    semgrep.dev:
      rule:
        rule_id: 0oUEyd
        version_id: X0ToJq
        url: https://semgrep.dev/playground/r/X0ToJq/ruby.lang.security.dangerous-open.dangerous-open
        origin: community
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.dangerous-open3-pipeline.dangerous-open3-pipeline
  patterns:
  - pattern: |
      Open3.$PIPE(...)
  - pattern-not: |
      Open3.$PIPE(...,"...",...)
  - metavariable-regex:
      metavariable: $PIPE
      regex: ^(pipeline|pipeline_r|pipeline_rw|pipeline_start|pipeline_w)$
  message: Detected non-static command inside $PIPE. Audit the input to '$PIPE'. If
    unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - ruby
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.dangerous-open3-pipeline.dangerous-open3-pipeline
    shortlink: https://sg.run/B4jv
    semgrep.dev:
      rule:
        rule_id: KxU4nd
        version_id: jQTL9x
        url: https://semgrep.dev/playground/r/jQTL9x/ruby.lang.security.dangerous-open3-pipeline.dangerous-open3-pipeline
        origin: community
  severity: WARNING
  languages:
  - ruby
- id: ruby.lang.security.dangerous-syscall.dangerous-syscall
  pattern: |
    syscall
  message: '''syscall'' is essentially unsafe and unportable. The DL (https://apidock.com/ruby/Fiddle)
    library is preferred for safer and a bit more portable programming.'
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - ruby
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.dangerous-syscall.dangerous-syscall
    shortlink: https://sg.run/DJkv
    semgrep.dev:
      rule:
        rule_id: qNUo50
        version_id: 9lTEnj
        url: https://semgrep.dev/playground/r/9lTEnj/ruby.lang.security.dangerous-syscall.dangerous-syscall
        origin: community
  severity: WARNING
  languages:
  - ruby
- id: python.lang.security.deserialization.pickle.avoid-dill
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill
    shortlink: https://sg.run/vzjA
    semgrep.dev:
      rule:
        rule_id: L1Uy60
        version_id: 9lTNqn
        url: https://semgrep.dev/playground/r/9lTNqn/python.lang.security.deserialization.pickle.avoid-dill
        origin: community
  languages:
  - python
  message: Avoid using `dill`, which uses `pickle`, which is known to lead to code
    execution vulnerabilities. When unpickling, the serialized data could be manipulated
    to run arbitrary code. Instead, consider serializing the relevant data as JSON
    or a similar text-based serialization format.
  severity: WARNING
  patterns:
  - pattern: dill.$FUNC(...)
  - pattern-not: dill.$FUNC("...")
- id: go.lang.security.audit.net.formatted-template-string.formatted-template-string
  message: Found a formatted template string passed to 'template.HTML()'. 'template.HTML()'
    does not escape contents. Be absolutely sure there is no user-controlled data
    in this template. If user data can reach this template, you may have a XSS vulnerability.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/html/template/#HTML
    category: security
    technology:
    - go
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.formatted-template-string.formatted-template-string
    shortlink: https://sg.run/weE0
    semgrep.dev:
      rule:
        rule_id: 8GUjDW
        version_id: e1TNz3
        url: https://semgrep.dev/playground/r/e1TNz3/go.lang.security.audit.net.formatted-template-string.formatted-template-string
        origin: community
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-not: template.HTML("..." + "...")
  - pattern-either:
    - pattern: template.HTML($T + $X, ...)
    - pattern: template.HTML(fmt.$P("...", ...), ...)
    - pattern: |
        $T = "..."
        ...
        $T = $FXN(..., $T, ...)
        ...
        template.HTML($T, ...)
    - pattern: |
        $T = fmt.$P("...", ...)
        ...
        template.HTML($T, ...)
    - pattern: |
        $T, $ERR = fmt.$P("...", ...)
        ...
        template.HTML($T, ...)
    - pattern: |
        $T = $X + $Y
        ...
        template.HTML($T, ...)
    - pattern: |-
        $T = "..."
        ...
        $OTHER, $ERR = fmt.$P(..., $T, ...)
        ...
        template.HTML($OTHER, ...)
- id: go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr
  message: Found a formatted template string passed to 'template. HTMLAttr()'. 'template.HTMLAttr()'
    does not escape contents. Be absolutely sure there is no user-controlled data
    in this template or validate and sanitize the data before passing it into the
    template.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/html/template/#HTMLAttr
    category: security
    technology:
    - go
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr
    shortlink: https://sg.run/OPRp
    semgrep.dev:
      rule:
        rule_id: QrUz9R
        version_id: vdT790
        url: https://semgrep.dev/playground/r/vdT790/go.lang.security.audit.net.unescaped-data-in-htmlattr.unescaped-data-in-htmlattr
        origin: community
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: template.HTMLAttr($T + $X, ...)
  - pattern: template.HTMLAttr(fmt.$P("...", ...), ...)
  - pattern: |
      $T = "..."
      ...
      $T = $FXN(..., $T, ...)
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T = fmt.$P("...", ...)
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T, $ERR = fmt.$P("...", ...)
      ...
      template.HTMLAttr($T, ...)
  - pattern: |
      $T = $X + $Y
      ...
      template.HTMLAttr($T, ...)
  - pattern: |-
      $T = "..."
      ...
      $OTHER, $ERR = fmt.$P(..., $T, ...)
      ...
      template.HTMLAttr($OTHER, ...)
- id: python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name
  message: Data from request is passed to a file name `$FILE`. This is a path traversal
    vulnerability, which can lead to sensitive data being leaked. To mitigate, consider
    using os.path.abspath or os.path.realpath or the pathlib library.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name
    shortlink: https://sg.run/BkO2
    semgrep.dev:
      rule:
        rule_id: YGUR36
        version_id: zyT7nl
        url: https://semgrep.dev/playground/r/zyT7nl/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name
        origin: community
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-not-inside: |
      def $F(...):
        ...
        os.path.realpath(...)
        ...
  - pattern-not-inside: |
      def $F(...):
        ...
        os.path.abspath(...)
        ...
  - pattern-either:
    - pattern: |
        $V = request.$W.get($X)
        ...
        $FILE % ($V)
    - pattern: |
        $V = request.$W[$X]
        ...
        $FILE % ($V)
    - pattern: |
        $V = request.$W($X)
        ...
        $FILE % ($V)
    - pattern: |
        $V = request.$W
        ...
        $FILE % ($V)
        # match format use cases
    - pattern: |
        $V = request.$W.get($X)
        ...
        $FILE.format(..., $V, ...)
    - pattern: |
        $V = request.$W[$X]
        ...
        $FILE.format(..., $V, ...)
    - pattern: |
        $V = request.$W($X)
        ...
        $FILE.format(..., $V, ...)
    - pattern: |
        $V = request.$W
        ...
        $FILE.format(..., $V, ...)
  - metavariable-regex:
      metavariable: $FILE
      regex: .*\.(log|zip|txt|csv|xml|html).*
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join
  message: Data from request is passed to os.path.join() and to open(). This is a
    path traversal vulnerability, which can lead to sensitive data being leaked. To
    mitigate, consider using os.path.abspath or os.path.realpath or Path library.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join
    shortlink: https://sg.run/Dovo
    semgrep.dev:
      rule:
        rule_id: 6JUjLj
        version_id: pZT7zy
        url: https://semgrep.dev/playground/r/pZT7zy/python.django.security.injection.path-traversal.path-traversal-join.path-traversal-join
        origin: community
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-not-inside: |
      def $F(...):
        ...
        os.path.abspath(...)
        ...
  - pattern-not-inside: |
      def $F(...):
        ...
        os.path.realpath(...)
        ...
  - pattern-either:
    - pattern: open(os.path.join(..., request.$W.get(...), ...), ...)
    - pattern: open(os.path.join(..., request.$W(...), ...), ...)
    - pattern: open(os.path.join(..., request.$W, ...), ...)
    - pattern: open(os.path.join(..., request.$W[...], ...), ...)
    - pattern: |
        $P = os.path.join(..., request.$W.get(...), ...)
        ...
        open($P, ...)
    - pattern: |
        $P = os.path.join(..., request.$W(...), ...)
        ...
        open($P, ...)
    - pattern: |
        $P = os.path.join(..., request.$W, ...)
        ...
        open($P, ...)
    - pattern: |
        $P = os.path.join(..., request.$W[...], ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W.get($X)
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W($X)
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W[$X]
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $V = request.$W
        ...
        $P = os.path.join(..., $V, ...)
        ...
        open($P, ...)
    - pattern: |
        $P = request.$W.get(...)
        ...
        open(os.path.join(..., $P, ...), ...)
    - pattern: |
        $P = request.$W(...)
        ...
        open(os.path.join(..., $P, ...), ...)
    - pattern: |
        $P = request.$W
        ...
        open(os.path.join(..., $P, ...), ...)
    - pattern: |
        $P = request.$W[...]
        ...
        open(os.path.join(..., $P, ...), ...)
  languages:
  - python
  severity: WARNING
- id: generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
  patterns:
  - pattern-regex: (A3T[A-Z0-9]|AKIA|AGPA|AROA|AIPA|ANPA|ANVA|ASIA)[A-Z0-9]{16}
  - pattern-not-regex: (?i)example|sample|test|fake
  languages:
  - regex
  message: AWS Access Key ID Value detected. This is a sensitive credential and should
    not be hardcoded here. Instead, read this value from an environment variable or
    keep it in a separate, private file.
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - aws
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
    shortlink: https://sg.run/GeD1
    semgrep.dev:
      rule:
        rule_id: oqUevO
        version_id: jQTLPB
        url: https://semgrep.dev/playground/r/jQTLPB/generic.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value
        origin: community
- id: generic.secrets.security.detected-private-key.detected-private-key
  patterns:
  - pattern-either:
    - patterns:
      - pattern: '-----BEGIN $TYPE PRIVATE KEY----- $KEY'
      - metavariable-regex:
          metavariable: $TYPE
          regex: (?i)([dr]sa|ec|openssh|encrypted)?
    - patterns:
      - pattern: |
          -----BEGIN PRIVATE KEY-----
          $KEY
  - metavariable-analysis:
      metavariable: $KEY
      analyzer: entropy
  languages:
  - generic
  message: Private Key detected. This is a sensitive credential and should not be
    hardcoded here. Instead, store this in a separate, private file.
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-private-key.detected-private-key
    shortlink: https://sg.run/b7dr
    semgrep.dev:
      rule:
        rule_id: 7KUQ0p
        version_id: BjTQ6X
        url: https://semgrep.dev/playground/r/BjTQ6X/generic.secrets.security.detected-private-key.detected-private-key
        origin: community
- id: terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass
  message: Some Microsoft services that interact with storage accounts operate from
    networks that can't be granted access through network rules. To help this type
    of service work as intended, allow the set of trusted Microsoft services to bypass
    the network rules
  patterns:
  - pattern-not-inside: |
      resource "azurerm_storage_account" "..." {
      ...
        network_rules {
          ...
          bypass = ["...", "AzureServices"]
          ...
        }
      ...
      }
  - pattern-not-inside: |
      resource "azurerm_storage_account_network_rules" "..." {
      ...
        bypass = ["...", "AzureServices"]
      ...
      }
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_storage_account_network_rules" "..." {
        ...
        bypass = [$ANYTHING]
        ...
        }
    - pattern-inside: |
        resource "azurerm_storage_account" "..." {
        ...
          network_rules {
            ...
            bypass = [$ANYTHING]
            ...
          }
        ...
        }
  metadata:
    cwe:
    - 'CWE-284: Improper Access Control'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#bypass
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account_network_rules#bypass
    - https://docs.microsoft.com/en-us/azure/storage/common/storage-network-security#trusted-microsoft-services
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass
    shortlink: https://sg.run/WpX4
    semgrep.dev:
      rule:
        rule_id: GdUreY
        version_id: yeTo6R
        url: https://semgrep.dev/playground/r/yeTo6R/terraform.azure.security.storage.storage-allow-microsoft-service-bypass.storage-allow-microsoft-service-bypass
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging
  message: Storage Analytics logs detailed information about successful and failed
    requests to a storage service. This information can be used to monitor individual
    requests and to diagnose issues with a storage service. Requests are logged on
    a best-effort basis.
  patterns:
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_storage_account" "..." {
          ...
              queue_properties  {
                ...
              }
          ...
        }
    - pattern-inside: |
        resource "azurerm_storage_account" "..." {
          ...
        }
  - pattern-not-inside: |
      resource "azurerm_storage_account" "..." {
        ...
              queue_properties  {
                ...
                logging {
                  ...
                }
                ...
              }
        ...
      }
  metadata:
    cwe:
    - 'CWE-778: Insufficient Logging'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#logging
    - https://docs.microsoft.com/en-us/azure/storage/common/storage-analytics-logging?tabs=dotnet
    owasp:
    - A10:2017 - Insufficient Logging & Monitoring
    - A09:2021 - Security Logging and Monitoring Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging
    shortlink: https://sg.run/0yEv
    semgrep.dev:
      rule:
        rule_id: ReU3L9
        version_id: NdT4xk
        url: https://semgrep.dev/playground/r/NdT4xk/terraform.azure.security.storage.storage-queue-services-logging.storage-queue-services-logging
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy
  message: 'Azure Storage currently supports three versions of the TLS protocol: 1.0,
    1.1, and 1.2. Azure Storage uses TLS 1.2 on public HTTPS endpoints, but TLS 1.0
    and TLS 1.1 are still supported for backward compatibility. This check will warn
    if the minimum TLS is not set to TLS1_2.'
  patterns:
  - pattern-either:
    - pattern-inside: |
        resource "azurerm_storage_account" "..." {
          ...
          min_tls_version = "$ANYTHING"
          ...
        }
    - pattern-inside: |
        resource "azurerm_storage_account" "..." {
          ...
        }
  - pattern-not-inside: |
      resource "azurerm_storage_account" "..." {
        ...
        min_tls_version = "TLS1_2"
        ...
      }
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    category: security
    technology:
    - terraform
    - azure
    references:
    - https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/storage_account#min_tls_version
    - https://docs.microsoft.com/en-us/azure/storage/common/transport-layer-security-configure-minimum-version
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy
    shortlink: https://sg.run/KXD7
    semgrep.dev:
      rule:
        rule_id: AbUQdL
        version_id: kbTJoR
        url: https://semgrep.dev/playground/r/kbTJoR/terraform.azure.security.storage.storage-use-secure-tls-policy.storage-use-secure-tls-policy
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: python.lang.security.audit.python-reverse-shell.python-reverse-shell
  patterns:
  - pattern-either:
    - pattern: pty.spawn("$BINPATH",...)
    - pattern: subprocess.call(["$BINPATH",...],...)
  - metavariable-regex:
      metavariable: $BINPATH
      regex: /bin/.*?sh\b
  - pattern-inside: |
      import socket
      ...
      $S = socket.socket(...)
      ...
      $S.connect(($IP,$PORT),...)
      ...
  message: Semgrep found a Python reverse shell using $BINPATH to $IP at $PORT
  metadata:
    cwe:
    - 'CWE-553: Command Shell in Externally Accessible Directory'
    category: security
    technology:
    - python
    references:
    - https://cwe.mitre.org/data/definitions/553.html
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.python-reverse-shell.python-reverse-shell
    shortlink: https://sg.run/gYZJ
    semgrep.dev:
      rule:
        rule_id: nJUZRY
        version_id: WrT6xb
        url: https://semgrep.dev/playground/r/WrT6xb/python.lang.security.audit.python-reverse-shell.python-reverse-shell
        origin: community
  languages:
  - python
  severity: WARNING
- id: scala.lang.security.audit.insecure-random.insecure-random
  metadata:
    cwe:
    - 'CWE-330: Use of Insufficiently Random Values'
    owasp:
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - scala
    - cryptography
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    resources:
    - https://find-sec-bugs.github.io/bugs.htm
    confidence: LOW
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    source: https://semgrep.dev/r/scala.lang.security.audit.insecure-random.insecure-random
    shortlink: https://sg.run/JxAw
    semgrep.dev:
      rule:
        rule_id: gxUgDk
        version_id: nWTd7K
        url: https://semgrep.dev/playground/r/nWTd7K/scala.lang.security.audit.insecure-random.insecure-random
        origin: community
  message: Flags the use of a predictable random value from `scala.util.Random`. This
    can lead to vulnerabilities when used in security contexts, such as in a CSRF
    token, password reset token, or any other secret value. To fix this, use java.security.SecureRandom
    instead.
  severity: WARNING
  languages:
  - scala
  patterns:
  - pattern: |
      import scala.util.Random
- id: scala.lang.security.audit.path-traversal-fromfile.path-traversal-fromfile
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - scala
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    resources:
    - https://find-sec-bugs.github.io/bugs.htm
    confidence: LOW
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    source: https://semgrep.dev/r/scala.lang.security.audit.path-traversal-fromfile.path-traversal-fromfile
    shortlink: https://sg.run/5D1A
    semgrep.dev:
      rule:
        rule_id: QrUdOZ
        version_id: 7ZT5OL
        url: https://semgrep.dev/playground/r/7ZT5OL/scala.lang.security.audit.path-traversal-fromfile.path-traversal-fromfile
        origin: community
  message: Flags cases of possible path traversal. If an unfiltered parameter is passed
    into 'fromFile', file from an arbitrary filesystem location could be read. This
    could lead to sensitive data exposure and other provles. Instead, sanitize the
    user input instead of performing direct string concatenation.
  severity: WARNING
  languages:
  - scala
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $FILENAME = "..." + $VAR
            ...
        - pattern-inside: |
            $FILENAME = $VAR + "..."
            ...
        - pattern-inside: |
            $FILENAME = $STR.concat($VAR)
            ...
        - pattern-inside: |
            $FILENAME = "...".format(..., $VAR, ...)
            ...
      - pattern: Source.fromFile($FILENAME, ...)
    - patterns:
      - pattern-either:
        - pattern: Source.fromFile("..." + $VAR, ...)
        - pattern: Source.fromFile($VAR + "...", ...)
        - pattern: Source.fromFile($STR.concat($VAR), ...)
        - pattern: Source.fromFile("...".format(..., $VAR, ...), ...)
  - pattern-inside: |
      def $FUNC(..., $VAR: $TYPE, ...) = Action {
        ...
      }
- id: scala.lang.security.audit.rsa-padding-set.rsa-padding-set
  metadata:
    cwe:
    - 'CWE-780: Use of RSA Algorithm without OAEP'
    owasp:
    - A02:2021 - Cryptographic Failures
    category: security
    technology:
    - scala
    - cryptography
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    resources:
    - https://blog.codacy.com/9-scala-security-issues/
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    source: https://semgrep.dev/r/scala.lang.security.audit.rsa-padding-set.rsa-padding-set
    shortlink: https://sg.run/GO5p
    semgrep.dev:
      rule:
        rule_id: 3qUj1Q
        version_id: o5Tjyr
        url: https://semgrep.dev/playground/r/o5Tjyr/scala.lang.security.audit.rsa-padding-set.rsa-padding-set
        origin: community
  message: Usage of RSA without OAEP (Optimal Asymmetric Encryption Padding) may weaken
    encryption. This could lead to sensitive data exposure. Instead, use RSA with
    `OAEPWithMD5AndMGF1Padding` instead.
  severity: WARNING
  languages:
  - scala
  patterns:
  - pattern: |
      $VAR = $CIPHER.getInstance($MODE)
  - metavariable-regex:
      metavariable: $MODE
      regex: .*RSA/.*/NoPadding.*
- id: terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials
  patterns:
  - pattern-inside: |
      provider "aws" {
      ...
          secret_key = "$SECRET"
      }
  - focus-metavariable: $SECRET
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  languages:
  - hcl
  severity: WARNING
  metadata:
    technology:
    - secrets
    - aws
    - terraform
    category: security
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials
    shortlink: https://sg.run/L3kn
    semgrep.dev:
      rule:
        rule_id: d8U4n0
        version_id: gETQJX
        url: https://semgrep.dev/playground/r/gETQJX/terraform.aws.security.aws-provider-static-credentials.aws-provider-static-credentials
        origin: community
- id: php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation
  languages:
  - php
  severity: WARNING
  message: <- A new object is created where the class name is based on user input.
    This could lead to remote code execution, as it allows to instantiate any class
    in the application.
  metadata:
    cwe:
    - 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
      Reflection'')'
    category: security
    technology:
    - php
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation
    shortlink: https://sg.run/7ndw
    semgrep.dev:
      rule:
        rule_id: v8U4DA
        version_id: zyTXQJ
        url: https://semgrep.dev/playground/r/zyTXQJ/php.lang.security.injection.tainted-object-instantiation.tainted-object-instantiation
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
      - pattern: $_REQUEST
      - pattern: $_SERVER
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: new $SINK(...)
    - pattern: $SINK
- id: csharp.lang.security.insecure-deserialization.newtonsoft.insecure-newtonsoft-deserialization
  patterns:
  - pattern-either:
    - pattern: TypeNameHandling = TypeNameHandling.$TYPEHANDLER
    - pattern: |
        $SETTINGS.TypeNameHandling = TypeNameHandling.$TYPEHANDLER;
        ...
        JsonConvert.DeserializeObject<$TYPE>(...,$SETTINGS);
    - pattern: |
        $SETTINGS.TypeNameHandling = TypeNameHandling.$TYPEHANDLER;
        ...
        JsonConvert.DeserializeObject(...,$SETTINGS);
  - pattern-inside: |
      using Newtonsoft.Json;
      ...
  - metavariable-regex:
      metavariable: $TYPEHANDLER
      regex: (All|Auto|Objects|Arrays)
  message: TypeNameHandling $TYPEHANDLER is unsafe and can lead to arbitrary code
    execution in the context of the process. Use a custom SerializationBinder whenever
    using a setting other than TypeNameHandling.None.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_TypeNameHandling.htm#remarks
    technology:
    - .net
    - newtonsoft
    - json
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.newtonsoft.insecure-newtonsoft-deserialization
    shortlink: https://sg.run/8n2g
    semgrep.dev:
      rule:
        rule_id: OrUGgl
        version_id: A8T7Lz
        url: https://semgrep.dev/playground/r/A8T7Lz/csharp.lang.security.insecure-deserialization.newtonsoft.insecure-newtonsoft-deserialization
        origin: community
- id: csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/standard/serialization/binaryformatter-security-guide
    category: security
    technology:
    - .net
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization
    shortlink: https://sg.run/ZeXW
    semgrep.dev:
      rule:
        rule_id: bwUOjK
        version_id: zyTXrX
        url: https://semgrep.dev/playground/r/zyTXrX/csharp.lang.security.insecure-deserialization.binary-formatter.insecure-binaryformatter-deserialization
        origin: community
  message: The BinaryFormatter type is dangerous and is not recommended for data processing.
    Applications should stop using BinaryFormatter as soon as possible, even if they
    believe the data they're processing to be trustworthy. BinaryFormatter is insecure
    and can't be made secure
  patterns:
  - pattern-inside: |
      using System.Runtime.Serialization.Formatters.Binary;
      ...
  - pattern: |
      new BinaryFormatter();
- id: csharp.lang.security.insecure-deserialization.fast-json.insecure-fastjson-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://github.com/mgholam/fastJSON#security-warning-update
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.fast-json.insecure-fastjson-deserialization
    shortlink: https://sg.run/nqnd
    semgrep.dev:
      rule:
        rule_id: NbUAwk
        version_id: 2KTAEn
        url: https://semgrep.dev/playground/r/2KTAEn/csharp.lang.security.insecure-deserialization.fast-json.insecure-fastjson-deserialization
        origin: community
  message: $type extension has the potential to be unsafe, so use it with common sense
    and known json sources and not public facing ones to be safe
  patterns:
  - pattern-inside: |
      using fastJSON;
      ...
  - pattern: |
      new JSONParameters
      {
        BadListTypeChecking = false
      }
- id: csharp.lang.security.insecure-deserialization.javascript-serializer.insecure-javascriptserializer-deserialization
  severity: ERROR
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.simpletyperesolver?view=netframework-4.8#remarks
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.javascript-serializer.insecure-javascriptserializer-deserialization
    shortlink: https://sg.run/0nJq
    semgrep.dev:
      rule:
        rule_id: PeUkrK
        version_id: 1QT0Qw
        url: https://semgrep.dev/playground/r/1QT0Qw/csharp.lang.security.insecure-deserialization.javascript-serializer.insecure-javascriptserializer-deserialization
        origin: community
  message: The SimpleTypeResolver class is insecure and should not be used. Using
    SimpleTypeResolver to deserialize JSON could allow the remote client to execute
    malicious code within the app and take control of the web server.
  patterns:
  - pattern-inside: |
      using System.Web.Script.Serialization;
      ...
  - pattern: |
      new JavaScriptSerializer(new SimpleTypeResolver());
- id: csharp.lang.security.insecure-deserialization.los-formatter.insecure-losformatter-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.losformatter?view=netframework-4.8
    category: security
    technology:
    - .net
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.los-formatter.insecure-losformatter-deserialization
    shortlink: https://sg.run/70pG
    semgrep.dev:
      rule:
        rule_id: wdU87G
        version_id: 9lTE6G
        url: https://semgrep.dev/playground/r/9lTE6G/csharp.lang.security.insecure-deserialization.los-formatter.insecure-losformatter-deserialization
        origin: community
  message: The LosFormatter type is dangerous and is not recommended for data processing.
    Applications should stop using LosFormatter as soon as possible, even if they
    believe the data they're processing to be trustworthy. LosFormatter is insecure
    and can't be made secure
  patterns:
  - pattern-inside: |
      using System.Web.UI;
      ...
  - pattern: |
      new LosFormatter();
- id: csharp.lang.security.insecure-deserialization.net-data-contract.insecure-netdatacontract-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8#security
    category: security
    technology:
    - .net
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.net-data-contract.insecure-netdatacontract-deserialization
    shortlink: https://sg.run/L0AX
    semgrep.dev:
      rule:
        rule_id: x8UW7x
        version_id: yeTQeE
        url: https://semgrep.dev/playground/r/yeTQeE/csharp.lang.security.insecure-deserialization.net-data-contract.insecure-netdatacontract-deserialization
        origin: community
  message: The NetDataContractSerializer type is dangerous and is not recommended
    for data processing. Applications should stop using NetDataContractSerializer
    as soon as possible, even if they believe the data they're processing to be trustworthy.
    NetDataContractSerializer is insecure and can't be made secure
  patterns:
  - pattern-inside: |
      using System.Runtime.Serialization;
      ...
  - pattern: |
      new NetDataContractSerializer();
- id: csharp.lang.security.insecure-deserialization.soap-formatter.insecure-soapformatter-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.soap.soapformatter?view=netframework-4.8#remarks
    category: security
    technology:
    - .net
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.soap-formatter.insecure-soapformatter-deserialization
    shortlink: https://sg.run/gJnR
    semgrep.dev:
      rule:
        rule_id: eqUvND
        version_id: bZTxlp
        url: https://semgrep.dev/playground/r/bZTxlp/csharp.lang.security.insecure-deserialization.soap-formatter.insecure-soapformatter-deserialization
        origin: community
  message: The SoapFormatter type is dangerous and is not recommended for data processing.
    Applications should stop using SoapFormatter as soon as possible, even if they
    believe the data they're processing to be trustworthy. SoapFormatter is insecure
    and can't be made secure
  patterns:
  - pattern-inside: |
      using System.Runtime.Serialization.Formatters.Soap;
      ...
  - pattern: |
      new SoapFormatter();
- id: csharp.lang.security.ssrf.http-client.ssrf
  severity: ERROR
  languages:
  - csharp
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.ssrf.http-client.ssrf
    shortlink: https://sg.run/4eB9
    semgrep.dev:
      rule:
        rule_id: 10UdbE
        version_id: vdTDdR
        url: https://semgrep.dev/playground/r/vdTDdR/csharp.lang.security.ssrf.http-client.ssrf
        origin: community
  message: SSRF is an attack vector that abuses an application to interact with the
    internal/external network or the machine itself.
  patterns:
  - pattern-inside: |
      using System.Net.Http;
      ...
  - pattern-either:
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        HttpClient $Y = new HttpClient();
        ...
        ... $Y.GetAsync(<... $X ...>, ...)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        $A $B = <... $X ...>;
        ...
        HttpClient $Y = new HttpClient();
        ...
        ... $Y.GetAsync($B, ...)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        HttpClient $Y = new HttpClient();
        ...
        ... $Y.GetStringAsync(<... $X ...>)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        $A $B = <... $X ...>;
        ...
        HttpClient $Y = new HttpClient();
        ...
        ... $Y.GetStringAsync($B)
        }
- id: csharp.lang.security.ssrf.rest-client.ssrf
  severity: ERROR
  languages:
  - csharp
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.ssrf.rest-client.ssrf
    shortlink: https://sg.run/Pb9v
    semgrep.dev:
      rule:
        rule_id: 9AURoq
        version_id: d6TnLZ
        url: https://semgrep.dev/playground/r/d6TnLZ/csharp.lang.security.ssrf.rest-client.ssrf
        origin: community
  message: SSRF is an attack vector that abuses an application to interact with the
    internal/external network or the machine itself.
  patterns:
  - pattern-inside: |
      using RestSharp;
      ...
  - pattern-either:
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        ... new RestClient(<... $X ...>)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        $A $B = <... $X ...>;
        ...
        ... new RestClient($B)
        }
- id: csharp.lang.security.ssrf.web-client.ssrf
  severity: ERROR
  languages:
  - csharp
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.ssrf.web-client.ssrf
    shortlink: https://sg.run/JxqP
    semgrep.dev:
      rule:
        rule_id: yyUPBe
        version_id: ZRTBWz
        url: https://semgrep.dev/playground/r/ZRTBWz/csharp.lang.security.ssrf.web-client.ssrf
        origin: community
  message: SSRF is an attack vector that abuses an application to interact with the
    internal/external network or the machine itself.
  patterns:
  - pattern-inside: |
      using System.Net;
      ...
  - pattern-either:
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        WebClient $Y = new WebClient();
        ...
        ... $Y.OpenRead(<... $X ...>)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        $A $B = <... $X ...>;
        ...
        WebClient $Y = new WebClient();
        ...
        ... $Y.OpenRead($B)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        WebClient $Y = new WebClient();
        ...
        ... $Y.OpenReadAsync(<... $X ...>, ...)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        $A $B = <... $X ...>;
        ...
        WebClient $Y = new WebClient();
        ...
        ... $Y.OpenReadAsync($B, ...)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        WebClient $Y = new WebClient();
        ...
        ... $Y.DownloadString(<... $X ...>)
        }
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        $A $B = <... $X ...>;
        ...
        WebClient $Y = new WebClient();
        ...
        ... $Y.DownloadString($B)
        }
- id: csharp.lang.security.ssrf.web-request.ssrf
  severity: ERROR
  languages:
  - csharp
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cwe.mitre.org/data/definitions/918.html
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.ssrf.web-request.ssrf
    shortlink: https://sg.run/5DWj
    semgrep.dev:
      rule:
        rule_id: r6UwoG
        version_id: nWTdk6
        url: https://semgrep.dev/playground/r/nWTdk6/csharp.lang.security.ssrf.web-request.ssrf
        origin: community
  message: The web server receives a URL or similar request from an upstream component
    and retrieves the contents of this URL, but it does not sufficiently ensure that
    the request is being sent to the expected destination. Many different options
    exist to fix this issue depending the use case (Application can send request only
    to identified and trusted applications, Application can send requests to ANY external
    IP address or domain name).
  patterns:
  - pattern-inside: |
      using System.Net;
      ...
  - pattern-either:
    - pattern: |
        $T $F(..., $X, ...)
        {
        ...
        ... WebRequest.Create(<... $X ...>);
        }
    - pattern: |
        $T $F($X)
        {
        ...
        $A $B = <... $X ...>;
        ...
        ... WebRequest.Create($B);
        }
    - pattern: |
        $T $F($X)
        {
        ...
        $A $B = <... $X ...>;
        ...
        $C $D = <... $B ...>;
        ...
        ... WebRequest.Create($D);
        }
- id: csharp.lang.security.insecure-deserialization.fs-pickler.insecure-fspickler-deserialization
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://mbraceproject.github.io/FsPickler/tutorial.html#Disabling-Subtype-Resolution
    category: security
    technology:
    - .net
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.insecure-deserialization.fs-pickler.insecure-fspickler-deserialization
    shortlink: https://sg.run/E5e5
    semgrep.dev:
      rule:
        rule_id: kxURnR
        version_id: BjTQEe
        url: https://semgrep.dev/playground/r/BjTQEe/csharp.lang.security.insecure-deserialization.fs-pickler.insecure-fspickler-deserialization
        origin: community
  message: The FsPickler is dangerous and is not recommended for data processing.
    Default configuration tend to insecure deserialization vulnerability.
  patterns:
  - pattern-inside: |
      using MBrace.FsPickler.Json;
      ...
  - pattern: |
      FsPickler.CreateJsonSerializer();
- id: html.security.audit.missing-integrity.missing-integrity
  metadata:
    category: security
    technology:
    - html
    cwe:
    - 'CWE-353: Missing Support for Integrity Check'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    confidence: LOW
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/html.security.audit.missing-integrity.missing-integrity
    shortlink: https://sg.run/krXA
    semgrep.dev:
      rule:
        rule_id: AbUQzj
        version_id: 6xTPAp
        url: https://semgrep.dev/playground/r/6xTPAp/html.security.audit.missing-integrity.missing-integrity
        origin: community
  patterns:
  - pattern-either:
    - pattern: <script $...A >...</script>
    - pattern: <link $...A >
  - metavariable-pattern:
      metavariable: $...A
      patterns:
      - pattern-either:
        - pattern: src='... :// ...'
        - pattern: src="... :// ..."
        - pattern: href='... :// ...'
        - pattern: href="... :// ..."
        - pattern: src='//...'
        - pattern: src="//..."
        - pattern: href='//...'
        - pattern: href="//..."
      - pattern-not-regex: (?is).*integrity=
      - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)
      - pattern-not-regex: .*rel\s*=\s*['"]?preconnect.*
  paths:
    include:
    - '*.html'
  message: "This tag is missing an 'integrity' subresource integrity attribute. The
    'integrity' attribute allows for the browser to verify that externally hosted
    files (for example from a CDN) are delivered without unexpected manipulation.
    Without this attribute, if an attacker can modify the externally hosted resource,
    this could lead to XSS and other types of attacks. To prevent this, include the
    base64-encoded cryptographic hash of the resource (file) you\u2019re telling the
    browser to fetch in the 'integrity' attribute for all externally hosted files."
  severity: WARNING
  languages:
  - generic
- id: java.aws-lambda.security.tainted-sql-string.tainted-sql-string
  languages:
  - java
  severity: ERROR
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.aws-lambda.security.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/EBYN
    semgrep.dev:
      rule:
        rule_id: YGUl4z
        version_id: DkTEy9
        url: https://semgrep.dev/playground/r/DkTEy9/java.aws-lambda.security.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - focus-metavariable: $EVENT
    - pattern-either:
      - pattern: |
          $HANDLERTYPE $HANDLER($TYPE $EVENT, com.amazonaws.services.lambda.runtime.Context $CONTEXT) {
            ...
          }
      - pattern: |
          $HANDLERTYPE $HANDLER(InputStream $EVENT, OutputStream $OUT, com.amazonaws.services.lambda.runtime.Context $CONTEXT) {
            ...
          }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          "$SQLSTR" + ...
      - pattern: |
          "$SQLSTR".concat(...)
      - patterns:
        - pattern-inside: |
            StringBuilder $SB = new StringBuilder("$SQLSTR");
            ...
        - pattern: $SB.append(...)
      - patterns:
        - pattern-inside: |
            $VAR = "$SQLSTR";
            ...
        - pattern: $VAR += ...
      - pattern: String.format("$SQLSTR", ...)
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: (?i)(select|delete|insert|create|update|alter|drop)\b
    - pattern-not-inside: |
        System.out.$PRINTLN(...)
- id: scala.play.security.tainted-html-response.tainted-html-response
  mode: taint
  metadata:
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    technology:
    - scala
    - play
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.play.security.tainted-html-response.tainted-html-response
    shortlink: https://sg.run/BG96
    semgrep.dev:
      rule:
        rule_id: 0oUwn2
        version_id: LjT8P8
        url: https://semgrep.dev/playground/r/LjT8P8/scala.play.security.tainted-html-response.tainted-html-response
        origin: community
  message: Detected a request with potential user-input going into an `Ok()` response.
    This bypasses any view or template environments, including HTML escaping, which
    may expose this application to cross-site scripting (XSS) vulnerabilities. Consider
    using a view technology such as Twirl which automatically escapes HTML views.
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $REQ
        - pattern-either:
          - pattern-inside: "Action {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action(...) {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action.async {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action.async(...) {\n  $REQ: Request[$T] => \n    ...\n}\n"
      - patterns:
        - pattern: $PARAM
        - pattern-either:
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action(...) {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action.async {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action.async(...) {
                ...
              }
  pattern-sanitizers:
  - pattern-either:
    - pattern: org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(...)
    - pattern: org.owasp.encoder.Encode.forHtml(...)
  pattern-sinks:
  - pattern-either:
    - pattern: Html.apply(...)
    - pattern: Ok(...).as(HTML)
    - pattern: Ok(...).as(ContentTypes.HTML)
    - patterns:
      - pattern: Ok(...).as($CTYPE)
      - metavariable-regex:
          metavariable: $CTYPE
          regex: '"[tT][eE][xX][tT]/[hH][tT][mM][lL]"'
    - patterns:
      - pattern: Ok(...).as($CTYPE)
      - pattern-not: Ok(...).as("...")
      - pattern-either:
        - pattern-inside: |
            def $FUNC(..., $URL: $T, ...) = $A {
              ...
            }
        - pattern-inside: |
            def $FUNC(..., $URL: $T, ...) = {
              ...
            }
  severity: WARNING
  languages:
  - scala
- id: python.aws-lambda.security.tainted-sql-string.tainted-sql-string
  languages:
  - python
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/wXvA
    semgrep.dev:
      rule:
        rule_id: AbU3LX
        version_id: 7ZTY2z
        url: https://semgrep.dev/playground/r/7ZTY2z/python.aws-lambda.security.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          "$SQLSTR" + ...
      - pattern: |
          "$SQLSTR" % ...
      - pattern: |
          "$SQLSTR".format(...)
      - pattern: |
          f"$SQLSTR{...}..."
    - metavariable-regex:
        metavariable: $SQLSTR
        regex: \s*(?i)(select|delete|insert|create|update|alter|drop)\b.*=
    - pattern-not-inside: |
        print(...)
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  severity: ERROR
- id: ruby.aws-lambda.security.tainted-sql-string.tainted-sql-string
  languages:
  - ruby
  severity: ERROR
  message: Detected user input used to manually construct a SQL string. This is usually
    bad practice because manual construction could accidentally result in a SQL injection.
    An attacker could use a SQL injection to steal or modify contents of the database.
    Instead, use a parameterized query which is available by default in most database
    engines. Alternatively, consider using an object-relational mapper (ORM) such
    as Sequelize which will protect your queries.
  metadata:
    references:
    - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet
    category: security
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.aws-lambda.security.tainted-sql-string.tainted-sql-string
    shortlink: https://sg.run/EB7N
    semgrep.dev:
      rule:
        rule_id: PeUxOE
        version_id: WrTk6A
        url: https://semgrep.dev/playground/r/WrTk6A/ruby.aws-lambda.security.tainted-sql-string.tainted-sql-string
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context)
          ...
        end
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            "...#{...}..."
        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\b|\w+\s*!?[<>=].*
      - patterns:
        - pattern-either:
          - pattern: Kernel::sprintf("$SQLSTR", ...)
          - pattern: |
              "$SQLSTR" + $EXPR
          - pattern: |
              "$SQLSTR" % $EXPR
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(select|delete|insert|create|update|alter|drop)\b|\w+\s*!?[<>=].*
    - pattern-not-inside: |
        puts(...)
- id: go.gin.ssrf.gin-tainted-url-host.gin-tainted-url-host
  message: 'Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://goteleport.com/blog/ssrf-attacks/
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - go
    - gin
    - gin-gonic/gin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gin.ssrf.gin-tainted-url-host.gin-tainted-url-host
    shortlink: https://sg.run/248B
    semgrep.dev:
      rule:
        rule_id: QrUPd9
        version_id: nWTRPv
        url: https://semgrep.dev/playground/r/nWTRPv/go.gin.ssrf.gin-tainted-url-host.gin-tainted-url-host
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: FORMAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$URLSTR", $INPUT, ...)
          - pattern: fmt.Sprintf("$URLSTR", $INPUT, ...)
          - pattern: fmt.Printf("$URLSTR", $INPUT, ...)
        - metavariable-regex:
            metavariable: $URLSTR
            regex: ^((http://)|(https://)|(//))%(v|s|q).*
    - focus-metavariable: $INPUT
    requires: INPUT
  - label: ADD_OR_DIRECT
    patterns:
    - pattern-either:
      - pattern: $X + $F
      - pattern: $X
    - focus-metavariable: $X
    - pattern-not-inside: |
        fmt.Printf(...)
        ...
    - pattern-not-inside: |
        fmt.Sprintf(...)
        ...
    - pattern-not-inside: |
        fmt.Fprintf(...)
        ...
    requires: INPUT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CLIENT := &http.Client{...}
                ...
            - pattern: $CLIENT.$METHOD($URL, ...)
          - pattern: http.$METHOD($URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Get|Head|Post|PostForm)$
      - pattern: http.Redirect($W, $REQ, $URL, ...)
      - patterns:
        - pattern: http.NewRequest("$METHOD", $URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(GET|HEAD|POST|POSTFORM)$
    - focus-metavariable: $URL
    requires: FORMAT or ADD_OR_DIRECT
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - patterns:
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Redirect($CODE, $URL, ...)'
        - pattern: '($CONTEXT : *gin.Context).Redirect($CODE, $URL, ...)'
      - focus-metavariable: $URL
    requires: FORMAT or ADD_OR_DIRECT
  pattern-sanitizers:
  - patterns:
    - pattern: $F + $X
    - metavariable-regex:
        metavariable: $F
        regex: .*//[a-zA-Z0-10]+\\..*
- id: go.gin.command-injection.gin-command-injection.gin-command-injection-taint
  message: 'Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the input, and use safe methods for executing the commands.
    In Go, it is possible to use the `exec.Command` function in combination with the
    `bash -c` command to run the user input as a shell command. To sanitize the user
    input, you can use a library like `shellescape` to escape any special characters
    before constructing the command. For more information, see: [Go command injection
    prevention](https://semgrep.dev/docs/cheat-sheets/go-command-injection/) '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/os/exec
    - https://pkg.go.dev/syscall#Exec
    - https://semgrep.dev/docs/cheat-sheets/go-command-injection/
    technology:
    - go
    - gin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gin.command-injection.gin-command-injection.gin-command-injection-taint
    shortlink: https://sg.run/jY9J
    semgrep.dev:
      rule:
        rule_id: 5rUj7r
        version_id: rxTKEx
        url: https://semgrep.dev/playground/r/rxTKEx/go.gin.command-injection.gin-command-injection.gin-command-injection-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $CMD_STRUCT := exec.Command("$SHELL")
            ...
        - pattern-inside: |
            $WRITER, ... := $CMD_STRUCT.StdinPipe()
            ...
        - pattern-either:
          - pattern: $WRITER.Write(...)
          - patterns:
            - pattern: io.WriteString($WRITER, $SHELLCMD, ...)
            - focus-metavariable: $SHELLCMD
      - patterns:
        - pattern-inside: '&exec.Cmd { Path: "$SHELL", ... }'
        - pattern-either:
          - pattern: 'Args: { "$SHELL", "-c", $SHELLCMD, ...}'
          - pattern: 'Args: $TYPE{ "$SHELL", "-c", $SHELLCMD, ...}'
        - focus-metavariable: $SHELLCMD
    - metavariable-regex:
        metavariable: $SHELL
        regex: (bash|csh|dash|fish|ksh|tcsh|sh|zsh)$
  - patterns:
    - pattern-either:
      - pattern-inside: syscall.Exec($PATH, $ARGS, ...)
      - pattern-inside: syscall.ForkExec($PATH, $ARGS, ...)
      - pattern-inside: '&exec.Cmd {$PATH, $ARGS, ...}'
      - patterns:
        - pattern-inside: '&exec.Cmd { ... }'
        - pattern-either:
          - pattern-inside: 'Path: $INPUT'
          - pattern-inside: 'Args: $INPUT'
        - focus-metavariable: $INPUT
  - patterns:
    - pattern-either:
      - pattern: exec.Command($PATH, ...)
      - pattern: exec.CommandContext($CTX, $PATH, ...)
    - focus-metavariable: $PATH
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "gopkg.in/alessio/shellescape.v1"
          ...
      - pattern-inside: |
          import "github.com/alessio/shellescape"
          ...
    - pattern: shellescape.Quote(...)
- id: go.gin.path-traversal.gin-path-traversal-taint.gin-path-traversal-taint
  message: 'The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Go, it is possible to sanitize user input and mitigate path traversal by using
    the built-in `filepath.Clean` function. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - go
    - gin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gin.path-traversal.gin-path-traversal-taint.gin-path-traversal-taint
    shortlink: https://sg.run/169v
    semgrep.dev:
      rule:
        rule_id: GdUylB
        version_id: bZT3nk
        url: https://semgrep.dev/playground/r/bZT3nk/go.gin.path-traversal.gin-path-traversal-taint.gin-path-traversal-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-either:
      - patterns:
        - pattern: http.FileSystem.$FUNC($F, $INPUT)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open|Dir)$
      - patterns:
        - pattern-inside: |
            $DIR := http.Dir(...)
            ...
        - pattern: $DIR.Open($INPUT)
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "os"
        ...
    - pattern: os.$FUNC($INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.$FUNC($FS, $INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Glob|ReadFile|WalkDir)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "archive/zip"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $W := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $W, $ERR := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - pattern: '($W : *zip.Writer).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Create)$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $R := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $R, $ERR := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - pattern: '($R : *zip.Reader).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open)$
        - focus-metavariable: $INPUT
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "path"
          ...
      - pattern-inside: |
          import "path/filepath"
          ...
    - patterns:
      - pattern-either:
        - pattern: $P.Join("/", ..., $INPUT, ...)
        - patterns:
          - pattern: $P.$SANFUNC($INPUT)
          - metavariable-regex:
              metavariable: $SANFUNC
              regex: ^(Abs|Base|Clean|Dir|Ext)$
    - metavariable-regex:
        metavariable: $P
        regex: ^(path|filepath)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.ValidPath(...)
- id: go.gin.xss.gin-formatted-template-string-taint.formatted-template-string-taint
  message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
    scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input
    executes malicious JavaScript code, leading to issues such as account compromise
    and sensitive information leakage. To prevent this vulnerability, validate the
    user input, perform contextual output encoding or sanitize the input. For more
    information, see: [Go XSS prevention](https://semgrep.dev/docs/cheat-sheets/go-xss/). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - gin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.gin.xss.gin-formatted-template-string-taint.formatted-template-string-taint
    shortlink: https://sg.run/9958
    semgrep.dev:
      rule:
        rule_id: ReU7Er
        version_id: kbTGpK
        url: https://semgrep.dev/playground/r/kbTGpK/go.gin.xss.gin-formatted-template-string-taint.formatted-template-string-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "html/template"
        ...
    - pattern-either:
      - pattern: template.HTML(...)
      - pattern: template.HTMLAttr(...)
      - pattern: template.CSS(...)
      - pattern: template.JS(...)
      - pattern: template.JSStr(...)
      - pattern: template.Srcset(...)
      - pattern: template.URL(...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/microcosm-cc/bluemonday"
          ...
      - pattern-inside: |
          import "microcosm-cc/bluemonday"
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $P := bluemonday.$POLICY()
            ...
        - pattern: $P.$SAN(...)
      - pattern: bluemonday.$POLICY().$SAN(...)
    - metavariable-regex:
        metavariable: $SAN
        regex: ^(Sanitize|SanitizeBytes)$
- id: go.grpc.command-injection.grpc-command-injection.grpc-http-command-injection-taint
  message: 'Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the input, and use safe methods for executing the commands.
    In Go, it is possible to use the `exec.Command` function in combination with the
    `bash -c` command to run the user input as a shell command. To sanitize the user
    input, you can use a library like `shellescape` to escape any special characters
    before constructing the command. For more information, see: [Go command injection
    prevention](https://semgrep.dev/docs/cheat-sheets/go-command-injection/) '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/os/exec
    - https://pkg.go.dev/syscall#Exec
    - https://semgrep.dev/docs/cheat-sheets/go-command-injection/
    technology:
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.command-injection.grpc-command-injection.grpc-http-command-injection-taint
    shortlink: https://sg.run/XdOw
    semgrep.dev:
      rule:
        rule_id: 3qUqjy
        version_id: w8Tor9
        url: https://semgrep.dev/playground/r/w8Tor9/go.grpc.command-injection.grpc-command-injection.grpc-http-command-injection-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $CMD_STRUCT := exec.Command("$SHELL")
            ...
        - pattern-inside: |
            $WRITER, ... := $CMD_STRUCT.StdinPipe()
            ...
        - pattern-either:
          - pattern: $WRITER.Write(...)
          - patterns:
            - pattern: io.WriteString($WRITER, $SHELLCMD, ...)
            - focus-metavariable: $SHELLCMD
      - patterns:
        - pattern-inside: '&exec.Cmd { Path: "$SHELL", ... }'
        - pattern-either:
          - pattern: 'Args: { "$SHELL", "-c", $SHELLCMD, ...}'
          - pattern: 'Args: $TYPE{ "$SHELL", "-c", $SHELLCMD, ...}'
        - focus-metavariable: $SHELLCMD
    - metavariable-regex:
        metavariable: $SHELL
        regex: (bash|csh|dash|fish|ksh|tcsh|sh|zsh)$
  - patterns:
    - pattern-either:
      - pattern-inside: syscall.Exec($PATH, $ARGS, ...)
      - pattern-inside: syscall.ForkExec($PATH, $ARGS, ...)
      - pattern-inside: '&exec.Cmd {$PATH, $ARGS, ...}'
      - patterns:
        - pattern-inside: '&exec.Cmd { ... }'
        - pattern-either:
          - pattern-inside: 'Path: $INPUT'
          - pattern-inside: 'Args: $INPUT'
        - focus-metavariable: $INPUT
  - patterns:
    - pattern-either:
      - pattern: exec.Command($PATH, ...)
      - pattern: exec.CommandContext($CTX, $PATH, ...)
    - focus-metavariable: $PATH
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "gopkg.in/alessio/shellescape.v1"
          ...
      - pattern-inside: |
          import "github.com/alessio/shellescape"
          ...
    - pattern: shellescape.Quote(...)
- id: go.grpc.path-traversal.grpc-path-traversal-taint.grpc-path-traversal-taint
  message: 'The application builds a file path from potentially untrusted data, which
    can lead to a path traversal vulnerability. An attacker can manipulate the path
    which the application uses to access files. If the application does not validate
    user input and sanitize file paths, sensitive files such as configuration or user
    data can be accessed, potentially creating or overwriting files. To prevent this
    vulnerability, validate and sanitize any input that is used to create references
    to file paths. Also, enforce strict file access controls. For example, choose
    privileges allowing public-facing applications to access only the required files.
    In Go, it is possible to sanitize user input and mitigate path traversal by using
    the built-in `filepath.Clean` function. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://portswigger.net/web-security/file-path-traversal
    technology:
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.path-traversal.grpc-path-traversal-taint.grpc-path-traversal-taint
    shortlink: https://sg.run/jLwn
    semgrep.dev:
      rule:
        rule_id: 4bU410
        version_id: xyTzOv
        url: https://semgrep.dev/playground/r/xyTzOv/go.grpc.path-traversal.grpc-path-traversal-taint.grpc-path-traversal-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-either:
      - patterns:
        - pattern: http.FileSystem.$FUNC($F, $INPUT)
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open|Dir)$
      - patterns:
        - pattern-inside: |
            $DIR := http.Dir(...)
            ...
        - pattern: $DIR.Open($INPUT)
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "os"
        ...
    - pattern: os.$FUNC($INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Create|CreateTemp|NewFile|Open|OpenFile)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.$FUNC($FS, $INPUT, ...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(Glob|ReadFile|WalkDir)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "archive/zip"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $W := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $W, $ERR := zip.NewWriter(...)
                ...
            - pattern: $W.$FUNC($INPUT)
          - pattern: '($W : *zip.Writer).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Create)$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $R := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - patterns:
            - pattern-inside: |
                $R, $ERR := zip.NewReader(...)
                ...
            - pattern: $R.$FUNC($INPUT)
          - pattern: '($R : *zip.Reader).$FUNC($INPUT)'
        - metavariable-regex:
            metavariable: $FUNC
            regex: ^(Open)$
        - focus-metavariable: $INPUT
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "path"
          ...
      - pattern-inside: |
          import "path/filepath"
          ...
    - patterns:
      - pattern-either:
        - pattern: $P.Join("/", ..., $INPUT, ...)
        - patterns:
          - pattern: $P.$SANFUNC($INPUT)
          - metavariable-regex:
              metavariable: $SANFUNC
              regex: ^(Abs|Base|Clean|Dir|Ext)$
    - metavariable-regex:
        metavariable: $P
        regex: ^(path|filepath)$
    - focus-metavariable: $INPUT
  - patterns:
    - pattern-inside: |
        import "io/fs"
        ...
    - pattern: fs.ValidPath(...)
- id: go.grpc.sql.grpc-pg-sqli-taint-med-conf.grpc-pg-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pg.uptrace.dev/queries/
    technology:
    - go-pg/pg/v10
    - grpc
    - go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.sql.grpc-pg-sqli-taint-med-conf.grpc-pg-sqli-taint-med-conf
    shortlink: https://sg.run/1w85
    semgrep.dev:
      rule:
        rule_id: PeU4or
        version_id: O9Txzn
        url: https://semgrep.dev/playground/r/O9Txzn/go.grpc.sql.grpc-pg-sqli-taint-med-conf.grpc-pg-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: IMPORTPG
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(.*go\-pg\/pg\/v10\/orm.*)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|ExecOne|Prepare)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $MODEL, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(QueryContext|QueryOneContext)$
    - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?pg.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT
  - patterns:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB := pg.$CONN(...)
            ...
        - pattern: |
            $DB, $ERR := pg.$CONN(...)
            ...
      - metavariable-regex:
          metavariable: $CONN
          regex: ^(Connect|ParseURL)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $DB. ... .$METHOD($QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(Exec|ExecOne|Prepare)$
        - patterns:
          - pattern: $DB. ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
        - patterns:
          - pattern: $DB. ... .$METHOD($CTX, $MODEL, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(QueryContext|QueryOneContext)$
      - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT
- id: go.grpc.sql.grpc-pg-sqli-taint.grpc-pg-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pg.uptrace.dev/queries/
    technology:
    - go-pg/pg/v10
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.sql.grpc-pg-sqli-taint.grpc-pg-sqli-taint
    shortlink: https://sg.run/9Bre
    semgrep.dev:
      rule:
        rule_id: JDU0LR
        version_id: e1Tj58
        url: https://semgrep.dev/playground/r/e1Tj58/go.grpc.sql.grpc-pg-sqli-taint.grpc-pg-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTPG
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(.*go\-pg\/pg\/v10\/orm.*)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|ExecOne|Prepare)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $MODEL, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(QueryContext|QueryOneContext)$
    - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?pg.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB := pg.$CONN(...)
            ...
        - pattern: |
            $DB, $ERR := pg.$CONN(...)
            ...
      - metavariable-regex:
          metavariable: $CONN
          regex: ^(Connect|ParseURL)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $DB. ... .$METHOD($QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(Exec|ExecOne|Prepare)$
        - patterns:
          - pattern: $DB. ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
        - patterns:
          - pattern: $DB. ... .$METHOD($CTX, $MODEL, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(QueryContext|QueryOneContext)$
      - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
- id: go.grpc.sql.grpc-pgx-sqli-taint-med-conf.grpc-pgx-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Create parameterized queries in pgx by using positional
    parameters (`$1`, `$2`, ...) and adding the values as additional arguments to
    the function call. It is also possible to create prepared statements through the
    `Prepare` function. This function uses the same placeholders for bound parameters. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/jackc/pgx
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    technology:
    - pgx
    - go-pgx
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.sql.grpc-pgx-sqli-taint-med-conf.grpc-pgx-sqli-taint-med-conf
    shortlink: https://sg.run/yK17
    semgrep.dev:
      rule:
        rule_id: 5rUWL1
        version_id: vdT6g5
        url: https://semgrep.dev/playground/r/vdT6g5/go.grpc.sql.grpc-pgx-sqli-taint-med-conf.grpc-pgx-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: IMPORTPGX
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*jackc\/pgx\/v(4|5).*)
  pattern-sinks:
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)'
    - metavariable-regex:
        metavariable: $CONNTYPE
        regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and (USERINPUT or CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
  pattern-sanitizers:
  - patterns:
    - pattern: $SANFUNC($QUERY, ...)
    - metavariable-regex:
        metavariable: $SANFUNC
        regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX
  - pattern: '($QUERY : *Query).Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: ' $DB.Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)'
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT
- id: go.grpc.sql.grpc-pgx-sqli-taint.grpc-pgx-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Create parameterized queries in pgx by using positional
    parameters (`$1`, `$2`, ...) and adding the values as additional arguments to
    the function call. It is also possible to create prepared statements through the
    `Prepare` function. This function uses the same placeholders for bound parameters. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/jackc/pgx
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    technology:
    - pgx
    - go-pgx
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.sql.grpc-pgx-sqli-taint.grpc-pgx-sqli-taint
    shortlink: https://sg.run/rGYW
    semgrep.dev:
      rule:
        rule_id: GdUNrR
        version_id: d6Tx1l
        url: https://semgrep.dev/playground/r/d6Tx1l/go.grpc.sql.grpc-pgx-sqli-taint.grpc-pgx-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTPGX
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*jackc\/pgx\/v(4|5).*)
  pattern-sinks:
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)'
    - metavariable-regex:
        metavariable: $CONNTYPE
        regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  pattern-sanitizers:
  - patterns:
    - pattern: $SANFUNC($QUERY, ...)
    - metavariable-regex:
        metavariable: $SANFUNC
        regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX
  - pattern: '($QUERY : *Query).Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: ' $DB.Sanitize(...)'
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)'
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
- id: go.grpc.sql.grpc-vanillasql-format-string-sqli-taint-med-conf.grpc-vanillasql-format-string-sqli-taint-med-conf
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/database/sql/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.sql.grpc-vanillasql-format-string-sqli-taint-med-conf.grpc-vanillasql-format-string-sqli-taint-med-conf
    shortlink: https://sg.run/bd2Q
    semgrep.dev:
      rule:
        rule_id: ReUJ3z
        version_id: ZRTAnO
        url: https://semgrep.dev/playground/r/ZRTAnO/go.grpc.sql.grpc-vanillasql-format-string-sqli-taint-med-conf.grpc-vanillasql-format-string-sqli-taint-med-conf
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT
  - label: IMPORTSQL
    pattern: |
      import "database/sql"
      ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql\.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and not PREPARE and not PREPARECONN
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and not PREPARE and not PREPARECONN
- id: go.grpc.sql.grpc-vanillasql-format-string-sqli-taint.grpc-vanillasql-format-string-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/database/sql/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - database/sql
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.sql.grpc-vanillasql-format-string-sqli-taint.grpc-vanillasql-format-string-sqli-taint
    shortlink: https://sg.run/Nk1A
    semgrep.dev:
      rule:
        rule_id: AbUDQA
        version_id: nWTLjG
        url: https://semgrep.dev/playground/r/nWTLjG/go.grpc.sql.grpc-vanillasql-format-string-sqli-taint.grpc-vanillasql-format-string-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTSQL
    pattern: |
      import "database/sql"
      ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql\.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF) and not PREPARE and
      not PREPARECONN
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF) and not PREPARE and
      not PREPARECONN
- id: go.grpc.ssrf.grpc-tainted-url-host.grpc-tainted-url-host
  message: 'Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://goteleport.com/blog/ssrf-attacks/
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - go
    - grpc
    - grpc-go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.grpc.ssrf.grpc-tainted-url-host.grpc-tainted-url-host
    shortlink: https://sg.run/kdre
    semgrep.dev:
      rule:
        rule_id: BYUqd9
        version_id: ExTxOr
        url: https://semgrep.dev/playground/r/ExTxOr/go.grpc.ssrf.grpc-tainted-url-host.grpc-tainted-url-host
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: INPUT
    patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-inside: |
        import $PROTOBUF "$IMPORTPATH"
        ...
    - pattern-inside: |
        type $SERVER struct {
            ...
        }
        ...
    - pattern: |
        func ($NAME *$SERVER) $FUNCNAME(..., $PARAM *$PROTOBUF.$FIELD, ...) {
            ...
        }
    - focus-metavariable: $PARAM
  - label: FORMAT
    patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: fmt.Fprintf($F, "$URLSTR", $INPUT, ...)
          - pattern: fmt.Sprintf("$URLSTR", $INPUT, ...)
          - pattern: fmt.Printf("$URLSTR", $INPUT, ...)
        - metavariable-regex:
            metavariable: $URLSTR
            regex: ^((http://)|(https://)|(//))%(v|s|q).*
    - focus-metavariable: $INPUT
    requires: INPUT
  - label: ADD_OR_DIRECT
    patterns:
    - pattern-either:
      - pattern: $X + $F
      - pattern: $X
    - focus-metavariable: $X
    - pattern-not-inside: |
        fmt.Printf(...)
        ...
    - pattern-not-inside: |
        fmt.Sprintf(...)
        ...
    - pattern-not-inside: |
        fmt.Fprintf(...)
        ...
    requires: INPUT
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "google.golang.org/grpc"
        ...
    - pattern-either:
      - pattern: grpc.Dial($URL, ...)
      - pattern: grpc.DialContext($CXT, $URL, ...)
    - focus-metavariable: $URL
    requires: FORMAT or ADD_OR_DIRECT
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - patterns:
            - pattern-inside: |
                $CLIENT := &http.Client{...}
                ...
            - pattern: $CLIENT.$METHOD($URL, ...)
          - pattern: http.$METHOD($URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Get|Head|Post|PostForm)$
      - pattern: http.Redirect($W, $REQ, $URL, ...)
      - patterns:
        - pattern: http.NewRequest("$METHOD", $URL, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(GET|HEAD|POST|POSTFORM)$
    - focus-metavariable: $URL
    requires: FORMAT or ADD_OR_DIRECT
  pattern-sanitizers:
  - patterns:
    - pattern: $F + $X
    - metavariable-regex:
        metavariable: $F
        regex: .*//[a-zA-Z0-10]+\\..*
- id: go.secrets.gorm.gorm-hardcoded-secret.gorm-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - gorm.io
    - gorm.io/gorm
    - gorm.io/driver/mysql
    - gorm.io/driver/postgres
    - gorm.io/driver/clickhouse
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.gorm.gorm-hardcoded-secret.gorm-hardcoded-secret
    shortlink: https://sg.run/x0ql
    semgrep.dev:
      rule:
        rule_id: WAUByx
        version_id: A8Td8x
        url: https://semgrep.dev/playground/r/A8Td8x/go.secrets.gorm.gorm-hardcoded-secret.gorm-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            "$DSN"
      - metavariable-regex:
          metavariable: $DSN
          regex: ((.*://)?(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*|.*password=(?!<.*>).*)
    - patterns:
      - pattern-inside: |
          $CLICKHOUSE.Options{
            ...,
            Auth: $CH.Auth{
              ...,
              Password: "...",
              ...
            },
            ...
          }
      - pattern-not-inside: |
          $CLICKHOUSE.Options{
            ...,
            Auth: $CH.Auth{
              ...,
              Password: "",
              ...
            },
            ...
          }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "gorm.io/gorm"
          ...
      - pattern-inside: |
          import "gorm.io/gorm/driver/mysql"
          ...
      - pattern-inside: |
          import "gorm.io/gorm/driver/postgres"
          ...
      - pattern-inside: |
          import "gorm.io/gorm/driver/clickhouse"
          ...
    - pattern: $GORMSQL.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: Open|OpenDB|New
- id: go.secrets.mongodb.mongo-hardcoded-secret.mongo-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - go.mongodb.org
    - mongodb
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.mongodb.mongo-hardcoded-secret.mongo-hardcoded-secret
    shortlink: https://sg.run/e7XZ
    semgrep.dev:
      rule:
        rule_id: KxUE52
        version_id: DkTbJo
        url: https://semgrep.dev/playground/r/DkTbJo/go.secrets.mongodb.mongo-hardcoded-secret.mongo-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: $URL
      - patterns:
        - pattern: $CLIENT.ApplyURI("$URL")
        - focus-metavariable: $CLIENT
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/bson"
          ...
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/mongo"
          ...
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/mongo/options"
          ...
      - pattern-inside: |
          import "go.mongodb.org/mongo-driver/mongo/readpref"
          ...
    - pattern: mongo.Connect(...)
- id: go.secrets.oauth2.oauth2-hardcoded-secret.oauth2-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - oauth2
    - golang.org/x/oauth2
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.oauth2.oauth2-hardcoded-secret.oauth2-hardcoded-secret
    shortlink: https://sg.run/n4rd
    semgrep.dev:
      rule:
        rule_id: 6JUnEj
        version_id: qkT7GE
        url: https://semgrep.dev/playground/r/qkT7GE/go.secrets.oauth2.oauth2-hardcoded-secret.oauth2-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "golang.org/x/oauth2"
        ...
    - pattern-either:
      - patterns:
        - pattern: |
            $OAUTH.Config{
                ...,
                ClientSecret: "...",
                ...,
            }
        - pattern-not: |
            $OAUTH.Config{
                ...,
                ClientSecret: "",
                ...,
            }
      - patterns:
        - pattern: |
            $TOKEN{
              ...,
              AccessToken: "...",
              ...,
            }
        - pattern-not: |
            $TOKEN{
              ...,
              AccessToken: "",
              ...,
            }
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "golang.org/x/oauth2"
        ...
    - pattern: $OAUTH.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(AuthCodeURL|Client|NewClient|Exchange)$
- id: go.secrets.openai.openai-empty-secret.openai-empty-secret
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - openai
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.openai.openai-empty-secret.openai-empty-secret
    shortlink: https://sg.run/E2y5
    semgrep.dev:
      rule:
        rule_id: oqUq2z
        version_id: K3TXGO
        url: https://semgrep.dev/playground/r/K3TXGO/go.secrets.openai.openai-empty-secret.openai-empty-secret
        origin: pro_rules
  languages:
  - go
  patterns:
  - pattern-inside: |
      import "github.com/sashabaranov/go-openai"
      ...
  - pattern: openai.NewClient("")
- id: go.secrets.openai.openai-hardcoded-secret.openai-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - openai
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.openai.openai-hardcoded-secret.openai-hardcoded-secret
    shortlink: https://sg.run/7RnG
    semgrep.dev:
      rule:
        rule_id: zdUon1
        version_id: YDTe5W
        url: https://semgrep.dev/playground/r/YDTe5W/go.secrets.openai.openai-hardcoded-secret.openai-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  patterns:
  - pattern-inside: |
      import "github.com/sashabaranov/go-openai"
      ...
  - pattern: openai.NewClient("...")
  - pattern-not: openai.NewClient("")
- id: go.secrets.ssh.ssh-harcoded-secret.ssh-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - ssh
    - golang.org/x/crypto/ssh
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.ssh.ssh-harcoded-secret.ssh-hardcoded-secret
    shortlink: https://sg.run/4JlL
    semgrep.dev:
      rule:
        rule_id: 9AUrZW
        version_id: BjTZ5Z
        url: https://semgrep.dev/playground/r/BjTZ5Z/go.secrets.ssh.ssh-harcoded-secret.ssh-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "golang.org/x/crypto/ssh"
          ...
      - pattern-inside: |
          import "golang.org/x/crypto/ssh/knownhosts"
          ...
    - pattern: ssh.Password("...")
    - pattern-not: ssh.Password("")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "golang.org/x/crypto/ssh"
          ...
      - pattern-inside: |
          import "golang.org/x/crypto/ssh/knownhosts"
          ...
    - pattern: ssh.Dial($TPC, $IP, $CONF)
    - focus-metavariable: $CONF
- id: go.secrets.pg.pg-empty-password.pg-empty-password
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - pg
    - github.com/go-pg/pg/v10
    - postgres
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.pg.pg-empty-password.pg-empty-password
    shortlink: https://sg.run/Lb3X
    semgrep.dev:
      rule:
        rule_id: pKUZzp
        version_id: qkTyB9
        url: https://semgrep.dev/playground/r/qkTyB9/go.secrets.pg.pg-empty-password.pg-empty-password
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*postgres.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@.*
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/lib/pg"
          ...
      - pattern-inside: |
          import "github.com/go-pg/pg/v10"
          ...
      - pattern-inside: |
          import "github.com/go-pg/pg/v10/orm"
          ...
    - pattern: |
        pg.Options{
            ...,
            Password: "",
            ...,
        }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import "database/sql"
              ...
          - pattern-inside: |
              import "github.com/go-sql-driver/mysql"
              ...
        - pattern: sql.Open("postgres", $URL)
        - focus-metavariable: $URL
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import "github.com/go-pg/pg/v10"
              ...
          - pattern-inside: |
              import "github.com/go-pg/pg/v10/orm"
              ...
          - pattern-inside: |
              import "github.com/lib/pg"
              ...
        - pattern: pg.Connect($CONFIG)
        - focus-metavariable: $CONFIG
- id: go.secrets.pg.pg-hardcoded-secret.pg-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - pg
    - github.com/go-pg/pg/v10
    - postgres
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.pg.pg-hardcoded-secret.pg-hardcoded-secret
    shortlink: https://sg.run/8Agg
    semgrep.dev:
      rule:
        rule_id: 2ZUyLL
        version_id: l4T06Y
        url: https://semgrep.dev/playground/r/l4T06Y/go.secrets.pg.pg-hardcoded-secret.pg-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*postgres.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/lib/pg"
          ...
      - pattern-inside: |
          import "github.com/go-pg/pg/v10"
          ...
      - pattern-inside: |
          import "github.com/go-pg/pg/v10/orm"
          ...
    - pattern: |
        pg.Options{
            ...,
            Password: "...",
            ...,
        }
    - pattern-not: |
        pg.Options{
            ...,
            Password: "",
            ...,
        }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import "database/sql"
              ...
          - pattern-inside: |
              import "github.com/go-sql-driver/mysql"
              ...
        - pattern: sql.Open("postgres", $URL)
        - focus-metavariable: $URL
      - patterns:
        - pattern-either:
          - pattern-inside: |
              import "github.com/go-pg/pg/v10"
              ...
          - pattern-inside: |
              import "github.com/go-pg/pg/v10/orm"
              ...
          - pattern-inside: |
              import "github.com/lib/pg"
              ...
        - pattern: pg.Connect($CONFIG)
        - focus-metavariable: $CONFIG
- id: go.secrets.pgx.pgx-empty-password.pgx-empty-password
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - pgx
    - github.com/jackx/pgx
    - postgres
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.pgx.pgx-empty-password.pgx-empty-password
    shortlink: https://sg.run/g3XR
    semgrep.dev:
      rule:
        rule_id: X5UDg5
        version_id: YDT7ng
        url: https://semgrep.dev/playground/r/YDT7ng/go.secrets.pgx.pgx-empty-password.pgx-empty-password
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*postgres.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}@.*
  - patterns:
    - pattern-inside: |
        import "github.com/jackc/pgx/v5"
        ...
    - pattern: |
        pgx.ConnConfig{
            ...,
            Password: "",
            ...,
        }
  pattern-sinks:
  - patterns:
    - pattern: pgx.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(NewConnPool|Connect|ConnectConfig)$
- id: go.secrets.pgx.pgx-hardcoded-secret.pgx-hardcoded-secret
  message: 'A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - pgx
    - github.com/jackx/pgx
    - postgres
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.pgx.pgx-hardcoded-secret.pgx-hardcoded-secret
    shortlink: https://sg.run/Qd6J
    semgrep.dev:
      rule:
        rule_id: j2UdQw
        version_id: 6xToQ7
        url: https://semgrep.dev/playground/r/6xToQ7/go.secrets.pgx.pgx-hardcoded-secret.pgx-hardcoded-secret
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*postgres.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  - patterns:
    - pattern-inside: |
        import "github.com/jackc/pgx/v5"
        ...
    - pattern: |
        pgx.ConnConfig{
            ...,
            Password: "...",
            ...,
        }
    - pattern-not: |
        pgx.ConnConfig{
            ...,
            Password: "",
            ...,
        }
  pattern-sinks:
  - patterns:
    - pattern: pgx.$FUNC(...)
    - metavariable-regex:
        metavariable: $FUNC
        regex: ^(NewConnPool|Connect|ConnectConfig)$
- id: go.secrets.ssh.ssh-empty-password.ssh-empty-password
  message: 'The application uses an empty credential. This can lead to unauthorized
    access by either an internal or external malicious actor. Use environment variables
    to securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-287: Improper Authentication'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    technology:
    - go
    - ssh
    - golang.org/x/crypto/ssh
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.secrets.ssh.ssh-empty-password.ssh-empty-password
    shortlink: https://sg.run/3P8G
    semgrep.dev:
      rule:
        rule_id: 10U65o
        version_id: o5Tw9j
        url: https://semgrep.dev/playground/r/o5Tw9j/go.secrets.ssh.ssh-empty-password.ssh-empty-password
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "golang.org/x/crypto/ssh"
          ...
      - pattern-inside: |
          import "golang.org/x/crypto/ssh/knownhosts"
          ...
    - pattern: ssh.Password("")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "golang.org/x/crypto/ssh"
          ...
      - pattern-inside: |
          import "golang.org/x/crypto/ssh/knownhosts"
          ...
    - pattern: ssh.Dial($TPC, $IP, $CONF)
    - focus-metavariable: $CONF
- id: kotlin.spring.exposed-exec-sqli.exposed-exec-sqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Kotlin, it is possible to adopt prepared statements using
    the `connection.PreparedStatement` class with parameterized queries. For more
    information, see: [Prepared statements in Kotlin](https://developer.android.com/reference/kotlin/java/sql/PreparedStatement).'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - exposed
    - orm
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.exposed-exec-sqli.exposed-exec-sqli
    shortlink: https://sg.run/y4rR
    semgrep.dev:
      rule:
        rule_id: AbU8En
        version_id: 44TdEQ
        url: https://semgrep.dev/playground/r/44TdEQ/kotlin.spring.exposed-exec-sqli.exposed-exec-sqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions
                ...
          - pattern-either:
            - pattern: transactions.transaction.$EXEC($SQL, ...)
            - patterns:
              - pattern-inside: transactions.transaction { ... }
              - pattern: $EXEC($SQL, ...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.transaction
                ...
          - pattern-either:
            - pattern: transaction.$EXEC($SQL, ...)
            - patterns:
              - pattern-inside: transaction { ... }
              - pattern: $EXEC($SQL, ...)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions
                ...
          - patterns:
            - pattern-either:
              - pattern: transactions.TransactionManager. ... .$EXEC($SQL, ...)
              - pattern: '($TM: transactions.TransactionManager). ... .$EXEC($SQL,
                  ...)'
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.*
                ...
            - pattern-inside: |
                import org.jetbrains.exposed.sql.transactions.TransactionManager
                ...
          - patterns:
            - pattern-either:
              - pattern: TransactionManager. ... .$EXEC($SQL, ...)
              - pattern: '($TM: TransactionManager). ... .$EXEC($SQL, ...)'
    - metavariable-regex:
        metavariable: $EXEC
        regex: (exec|execInBatch)
    - focus-metavariable: $SQL
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.spring.hibernate-sqli.hibernate-sqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Kotlin, it is possible to adopt prepared statements using
    the `connection.PreparedStatement` class with parameterized queries. For more
    information, see: [Prepared statements in Kotlin](https://developer.android.com/reference/kotlin/java/sql/PreparedStatement).'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - hibernate
    - orm
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.hibernate-sqli.hibernate-sqli
    shortlink: https://sg.run/r1wR
    semgrep.dev:
      rule:
        rule_id: BYU5yQ
        version_id: PkTyRj
        url: https://semgrep.dev/playground/r/PkTyRj/kotlin.spring.hibernate-sqli.hibernate-sqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SQL
    - pattern-either:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import javax.*
                ...
            - pattern-inside: |
                import javax.persistence
                ...
          - pattern-either:
            - pattern: |
                ($EM: persistence.EntityManager).createQuery($SQL,...)
            - pattern: |
                ($EM: persistence.EntityManager).createSQLQuery($SQL,...)
            - pattern: |
                ($EM: persistence.EntityManager).createNativeQuery($SQL,...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import javax.persistence.*
                ...
            - pattern-inside: |
                import javax.persistence.EntityManager
                ...
          - pattern-either:
            - pattern: |
                ($EM: EntityManager).createQuery($SQL,...)
            - pattern: |
                ($EM: EntityManager).createSQLQuery($SQL,...)
            - pattern: |
                ($EM: EntityManager).createNativeQuery($SQL,...)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $EM = $EMF.createEntityManager(...)
              ...
          - pattern-inside: |
              class $CL(...) {
                ...
                val $EM = $EMF.createEntityManager(...)
                ...
              }
        - pattern-either:
          - pattern: $EM.createQuery($SQL,...)
          - pattern: $EM.createSQLQuery($SQL,...)
          - pattern: $EM.createNativeQuery($SQL,...)
      - pattern: $EMF.createEntityManager(...).createQuery($SQL,...)
      - pattern: $EMF.createEntityManager(...).createSQLQuery($SQL,...)
      - pattern: $EMF.createEntityManager(...).createNativeQuery($SQL,...)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import javax.*
                ...
            - pattern-inside: |
                import javax.persistence
                ...
          - pattern-either:
            - pattern: |
                ($EMF: persistence.EntityManagerFactory). ... .createQuery($SQL,...)
            - pattern: |
                ($EMF: persistence.EntityManagerFactory). ... .createSQLQuery($SQL,...)
            - pattern: |
                ($EMF: persistence.EntityManagerFactory). ... .createNativeQuery($SQL,...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import javax.persistence.*
                ...
            - pattern-inside: |
                import javax.persistence.EntityManagerFactory
                ...
          - pattern-either:
            - pattern: |
                ($EMF: EntityManagerFactory). ... .createQuery($SQL,...)
            - pattern: |
                ($EMF: EntityManagerFactory). ... .createSQLQuery($SQL,...)
            - pattern: |
                ($EMF: EntityManagerFactory). ... .createNativeQuery($SQL,...)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.*
                ...
            - pattern-inside: |
                import org.hibernate
                ...
          - pattern-either:
            - pattern: |
                ($S: hibernate.Session).createQuery($SQL,...)
            - pattern: |
                ($S: hibernate.Session).createSQLQuery($SQL,...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.hibernate.*
                ...
            - pattern-inside: |
                import org.hibernate.Session
                ...
          - pattern-either:
            - pattern: |
                ($S: Session).createQuery($SQL,...)
            - pattern: |
                ($S: Session).createSQLQuery($SQL,...)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $S = $SF.openSession(...)
              ...
          - pattern-inside: |
              class $CL(...) {
                ...
                val $S = $SF.openSession(...)
                ...
              }
        - pattern-either:
          - pattern: $S.createQuery($SQL,...)
          - pattern: $S.createSQLQuery($SQL,...)
      - pattern: $SF.openSession(...). ... .createQuery($SQL,...)
      - pattern: $SF.openSession(...). ... .createSQLQuery($SQL,...)
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.*
                ...
            - pattern-inside: |
                import org.hibernate
                ...
          - pattern-either:
            - pattern: |
                ($SF: hibernate.SessionFactory). ... .createQuery($SQL,...)
            - pattern: |
                ($SF: hibernate.SessionFactory). ... .createSQLQuery($SQL,...)
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.hibernate.*
                ...
            - pattern-inside: |
                import org.hibernate.SessionFactory
                ...
          - pattern-either:
            - pattern: |
                ($SF: SessionFactory). ... .createQuery($SQL,...)
            - pattern: |
                ($SF: SessionFactory). ... .createSQLQuery($SQL,...)
      - pattern: Restrictions.sqlRestriction($SQL,...)
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: kotlin.spring.prepare-statetment-sqli.prepare-statement-sqli
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Kotlin, it is possible to adopt prepared statements using
    the `connection.PreparedStatement` class with parameterized queries. For more
    information, see: [Prepared statements in Kotlin](https://developer.android.com/reference/kotlin/java/sql/PreparedStatement).'
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - spring
    - kotlin
    - ktorm
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/kotlin.spring.prepare-statetment-sqli.prepare-statement-sqli
    shortlink: https://sg.run/N69z
    semgrep.dev:
      rule:
        rule_id: WAU97e
        version_id: RGTl00
        url: https://semgrep.dev/playground/r/RGTl00/kotlin.spring.prepare-statetment-sqli.prepare-statement-sqli
        origin: pro_rules
  languages:
  - kotlin
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          ($REQ: ServletRequest)
      - pattern: |
          ($REQ: HttpServletRequest)
      - pattern: |
          ($REQ: WebRequest)
      - pattern: |
          ($REQ: ServletWebRequest)
      - pattern: |
          ($REQ: FacesWebRequest)
      - pattern: |
          ($REQ: NativeWebRequest)
      - patterns:
        - pattern-either:
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) {...}
          - pattern: |
              fun $METHOD(..., @$REQ(...) $SOURCE: $TYPE, ...) = $Z(...)
          - pattern: |
              fun $METHOD(..., @$REQ $SOURCE: $TYPE, ...) = $Z(...)
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(?!(Int|Long|Float|Double|Short|Byte|Char|UByte|UInt|ULong|UShort|Boolean))
        - metavariable-regex:
            metavariable: $REQ
            regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)
        - focus-metavariable: $SOURCE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.ktorm.*
                ...
            - pattern-inside: |
                import org.ktorm.database
                ...
          - patterns:
            - pattern-inside: $DB.useConnection(...)
            - pattern-either:
              - pattern-inside: database.Database.connect(...).apply(...)
              - pattern-inside: |
                  $DB = database.Database.connect(...)
                  ...
              - pattern-inside: |
                  class $CL(...) {
                    ...
                    val $DB = database.Database.connect(...)
                    ...
                  }
              - pattern-inside: |
                  ($DB: database.Database).useConnection(...)
            - pattern: $CN.prepareStatement($SQL, ...)
            - focus-metavariable: $SQL
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import org.ktorm.database.*
                ...
            - pattern-inside: |
                import org.ktorm.database.Database
                ...
          - patterns:
            - pattern-inside: $DB.useConnection(...)
            - pattern-either:
              - pattern-inside: Database.connect(...).apply(...)
              - pattern-inside: |
                  $DB = Database.connect(...)
                  ...
              - pattern-inside: |
                  class $CL(...) {
                    ...
                    val $DB = Database.connect(...)
                    ...
                  }
              - pattern-inside: |
                  ($DB: Database).useConnection(...)
            - pattern: $CN.prepareStatement($SQL, ...)
            - focus-metavariable: $SQL
      - pattern-either:
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.*
                ...
            - pattern-inside: |
                import java.sql
                ...
          - patterns:
            - pattern-either:
              - pattern: |
                  ($CN: sql.Connection).prepareStatement($SQL, ...)
              - patterns:
                - pattern-either:
                  - patterns:
                    - pattern-inside: |
                        $STMT = $DB.createStatement(...)
                        ...
                    - pattern: $STMT.$EXEC($SQL, ...)
                  - pattern: '($STMT: Statement).$EXEC($SQL, ...)'
                - metavariable-regex:
                    metavariable: $EXEC
                    regex: ^execute
            - focus-metavariable: $SQL
        - patterns:
          - pattern-either:
            - pattern-inside: |
                import java.sql.*
                ...
            - pattern-inside: |
                import java.sql.Connection
                ...
          - patterns:
            - pattern-either:
              - pattern: |
                  ($CN: Connection).prepareStatement($SQL, ...)
              - patterns:
                - pattern-either:
                  - patterns:
                    - pattern-inside: |
                        $STMT = $DB.createStatement(...)
                        ...
                    - pattern: $STMT.$EXEC($SQL, ...)
                  - pattern: '($STMT: Statement).$EXEC($SQL, ...)'
                - metavariable-regex:
                    metavariable: $EXEC
                    regex: ^execute
            - focus-metavariable: $SQL
  pattern-sanitizers:
  - patterns:
    - pattern: $X.$METHOD(...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (equals|toInt|toLong|toFloat|toDouble|toShort|toByte|toUByte|toUInt|toULong|toUShort)
  - patterns:
    - pattern-either:
      - pattern: <... $X != $Y ...>
      - pattern: <... $Y != $X ...>
      - pattern: <... $X == $Y ...>
      - pattern: <... $Y == $X ...>
    - focus-metavariable: $X
- id: bash.lang.security.ifs-tampering.ifs-tampering
  languages:
  - bash
  severity: WARNING
  message: The special variable IFS affects how splitting takes place when expanding
    unquoted variables. Don't set it globally. Prefer a dedicated utility such as
    'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS
    locally using e.g. 'IFS="," read -a my_array'.
  pattern: IFS=...
  metadata:
    cwe:
    - 'CWE-20: Improper Input Validation'
    category: security
    technology:
    - bash
    confidence: LOW
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/bash.lang.security.ifs-tampering.ifs-tampering
    shortlink: https://sg.run/Q9pq
    semgrep.dev:
      rule:
        rule_id: WAUy9q
        version_id: 8KTWnY
        url: https://semgrep.dev/playground/r/8KTWnY/bash.lang.security.ifs-tampering.ifs-tampering
        origin: community
- id: scala.lang.security.audit.scalaj-http-ssrf.scalaj-http-ssrf
  patterns:
  - pattern: Http($URL)
  - pattern-inside: |
      import scalaj.http.$HTTP
      ...
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = $A {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = {
          ...
        }
  message: A parameter being passed directly into `Http` most likely lead to SSRF.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data sent with this request. They could also probe internal servers
    or other resources that the server runnig this code can access. Do not allow arbitrary
    hosts. Instead, create an allowlist for approved hosts hardcode the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/scalaj/scalaj-http#simplified-http
    category: security
    technology:
    - scala
    - scalaj-http
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.scalaj-http-ssrf.scalaj-http-ssrf
    shortlink: https://sg.run/OgjB
    semgrep.dev:
      rule:
        rule_id: AbU3xA
        version_id: 3ZT7Jk
        url: https://semgrep.dev/playground/r/3ZT7Jk/scala.lang.security.audit.scalaj-http-ssrf.scalaj-http-ssrf
        origin: community
  languages:
  - scala
  severity: WARNING
- id: go.gorilla.security.audit.websocket-missing-origin-check.websocket-missing-origin-check
  patterns:
  - pattern-inside: |
      import ("github.com/gorilla/websocket")
      ...
  - patterns:
    - pattern-not-inside: |
        $UPGRADER = websocket.Upgrader{..., CheckOrigin: $FN ,...}
        ...
    - pattern-not-inside: |
        $UPGRADER.CheckOrigin = $FN2
        ...
    - pattern: |
        $UPGRADER.Upgrade(...)
  message: 'The Origin header in the HTTP WebSocket handshake is used to guarantee
    that the connection accepted by the WebSocket is from a trusted origin domain.
    Failure to enforce can lead to Cross Site Request Forgery (CSRF). As per "gorilla/websocket"
    documentation: "A CheckOrigin function should carefully validate the request origin
    to prevent cross-site request forgery."'
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://pkg.go.dev/github.com/gorilla/websocket#Upgrader
    technology:
    - gorilla
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.gorilla.security.audit.websocket-missing-origin-check.websocket-missing-origin-check
    shortlink: https://sg.run/xXpz
    semgrep.dev:
      rule:
        rule_id: ReUKdz
        version_id: w8T7jk
        url: https://semgrep.dev/playground/r/w8T7jk/go.gorilla.security.audit.websocket-missing-origin-check.websocket-missing-origin-check
        origin: community
- id: php.laravel.security.laravel-http-client-ssrf.laravel-http-client-ssrf
  message: Untrusted input might be used to build an HTTP request, which can lead
    to a Server-side request forgery (SSRF) vulnerability. SSRF allows an attacker
    to send crafted requests from the server side to other internal or external systems.
    SSRF can lead to unauthorized access to sensitive data and, in some cases, allow
    the attacker to control applications or systems that trust the vulnerable service.
    To prevent this vulnerability, avoid allowing user input to craft the base request.
    Instead, treat it as part of the path or query parameter and encode it appropriately.
    When user input is necessary to prepare the HTTP request, perform strict input
    validation. Additionally, whenever possible, use allowlists to only interact with
    expected, trusted domains.
  severity: ERROR
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://laravel.com/docs/9.x/http-client
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-http-client-ssrf.laravel-http-client-ssrf
    shortlink: https://sg.run/0vRr
    semgrep.dev:
      rule:
        rule_id: WAUJLx
        version_id: 1QTNgO
        url: https://semgrep.dev/playground/r/1QTNgO/php.laravel.security.laravel-http-client-ssrf.laravel-http-client-ssrf
        origin: pro_rules
  languages:
  - php
  mode: taint
  options:
    taint_unify_mvars: true
    symbolic_propagation: true
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern: |
        Route::$GET($ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($ARG, Closure $NEXT) {...}
    - focus-metavariable: $ARG
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $ARG, ...) {...}
    - focus-metavariable: $ARG
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $ARG
        - pattern: $this->$PROPERTY
      - patterns:
        - pattern: $ARG->$GET
        - pattern: $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - patterns:
    - pattern-either:
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
      - pattern: $_REQUEST
      - pattern: $_SERVER
  pattern-sinks:
  - patterns:
    - metavariable-pattern:
        metavariable: $METHOD
        patterns:
        - pattern-either:
          - pattern: baseUrl
          - pattern: delete
          - pattern: get
          - pattern: head
          - pattern: patch
          - pattern: post
          - pattern: put
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: Illuminate\Support\Facades\Http->$METHOD($X.$ARG, ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($X.$ARG->$Y(...), ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($X.$ARG.$FOO, ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($X.$ARG->$Y(...).$FOO,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X.$ARG,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X.$ARG->$Y(...),
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X.$ARG.$FOO,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X.$ARG->$Y(...).$FOO,
              ...)
          - patterns:
            - pattern-either:
              - pattern: Illuminate\Support\Facades\Http->$METHOD($X.$VAR, ...)
              - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X.$VAR,
                  ...)
            - pattern-either:
              - pattern-inside: |
                  $VAR = $ARG;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y(...);
                  ...
              - pattern-inside: |
                  $VAR = $ARG.$FOO;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y(...).$FOO;
                  ...
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern: |
                "..."
            - pattern-regex: ^['"]*https?:\/\/([^\/])*['"]*$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: Illuminate\Support\Facades\Http->$METHOD("...{$VAR}...", ...)
            - pattern: Illuminate\Support\Facades\Http->$METHOD($X, ...)
          - patterns:
            - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD("...{$VAR}...",
                ...)
            - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X,
                ...)
        - focus-metavariable: $X
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern-regex: ^"https?:\/\/([^\/{}])*{
      - patterns:
        - pattern-either:
          - pattern: Illuminate\Support\Facades\Http->$METHOD($X, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($X,
              ...)
        - pattern-inside: |
            $X = $A;
            ...
        - focus-metavariable: $X
        - metavariable-pattern:
            metavariable: $A
            patterns:
            - pattern-regex: \"https?:\/\/([^\/{}])*{
      - patterns:
        - pattern-either:
          - pattern: Illuminate\Support\Facades\Http->$METHOD("{$ARG}...", ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD("{$ARG->$Y}...", ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD("{$ARG->$Y(...)}...",
              ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($ARG, ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($ARG->$Y, ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($ARG->$Y(...), ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($ARG.$SMTH, ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($ARG->$Y.$SMTH, ...)
          - pattern: Illuminate\Support\Facades\Http->$METHOD($ARG->$Y(...).$SMTH,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD("{$ARG}...",
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD("{$ARG->$Y}...",
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD("{$ARG->$Y(...)}...",
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($ARG,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($ARG->$Y,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($ARG->$Y(...),
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($ARG.$SMTH,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($ARG->$Y.$SMTH,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($ARG->$Y(...).$SMTH,
              ...)
          - patterns:
            - pattern-either:
              - pattern: Illuminate\Support\Facades\Http->$METHOD($VAR, ...)
              - pattern: Illuminate\Support\Facades\Http->$METHOD("{$VAR}...", ...)
              - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD($VAR,
                  ...)
              - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->$METHOD("{$VAR}...",
                  ...)
            - pattern-either:
              - pattern-inside: |
                  $VAR = $ARG.$FOO;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y.$FOO;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y(...).$FOO;
                  ...
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: Illuminate\Support\Facades\Http->send($M, $X.$ARG, ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $X.$ARG->$Y(...), ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $X.$ARG.$FOO, ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $X.$ARG->$Y(...).$FOO,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $X.$ARG, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $X.$ARG->$Y(...), ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $X.$ARG.$FOO, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $X.$ARG->$Y(...).$FOO, ...)
          - patterns:
            - pattern-either:
              - pattern: Illuminate\Support\Facades\Http->send($M, $X.$VAR, ...)
              - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
                  $X.$VAR, ...)
            - pattern-either:
              - pattern-inside: |
                  $VAR = $ARG;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y(...);
                  ...
              - pattern-inside: |
                  $VAR = $ARG.$FOO;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y(...).$FOO;
                  ...
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern: |
                "..."
            - pattern-regex: ^['"]*https?:\/\/([^\/])*['"]*$
      - patterns:
        - pattern-either:
          - patterns:
            - pattern: Illuminate\Support\Facades\Http->send($M, "...{$VAR}...", ...)
            - pattern: Illuminate\Support\Facades\Http->send($M, $X, ...)
          - patterns:
            - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
                "...{$VAR}...", ...)
            - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
                $X, ...)
        - focus-metavariable: $X
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern-regex: ^"https?:\/\/([^\/{}])*{
      - patterns:
        - pattern-either:
          - pattern: Illuminate\Support\Facades\Http->send($M, $X, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $X, ...)
        - pattern-inside: |
            $X = $A;
            ...
        - focus-metavariable: $X
        - metavariable-pattern:
            metavariable: $A
            patterns:
            - pattern-regex: \"https?:\/\/([^\/{}])*{
      - patterns:
        - pattern-either:
          - pattern: Illuminate\Support\Facades\Http->send($M, "{$ARG}...", ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, "{$ARG->$Y}...", ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, "{$ARG->$Y(...)}...",
              ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $ARG, ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $ARG->$Y, ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $ARG->$Y(...), ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $ARG.$SMTH, ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $ARG->$Y.$SMTH, ...)
          - pattern: Illuminate\Support\Facades\Http->send($M, $ARG->$Y(...).$SMTH,
              ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              "{$ARG}...", ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              "{$ARG->$Y}...", ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              "{$ARG->$Y(...)}...", ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $ARG, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $ARG->$Y, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $ARG->$Y(...), ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $ARG.$SMTH, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $ARG->$Y.$SMTH, ...)
          - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
              $ARG->$Y(...).$SMTH, ...)
          - patterns:
            - pattern-either:
              - pattern: Illuminate\Support\Facades\Http->send($M, $VAR, ...)
              - pattern: Illuminate\Support\Facades\Http->send($M, "{$VAR}...", ...)
              - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
                  $VAR, ...)
              - pattern: Illuminate\Support\Facades\Http->$ACTION(...)->...->send($M,
                  "{$VAR}...", ...)
            - pattern-either:
              - pattern-inside: |
                  $VAR = $ARG.$FOO;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y.$FOO;
                  ...
              - pattern-inside: |
                  $VAR = $ARG->$Y(...).$FOO;
                  ...
- id: generic.unicode.security.bidi.contains-bidirectional-characters
  patterns:
  - pattern-either:
    - pattern-regex: "\u202A"
    - pattern-regex: "\u202B"
    - pattern-regex: "\u202D"
    - pattern-regex: "\u202E"
    - pattern-regex: "\u2066"
    - pattern-regex: "\u2067"
    - pattern-regex: "\u2068"
    - pattern-regex: "\u202C"
    - pattern-regex: "\u2069"
  message: This code contains bidirectional (bidi) characters. While this is useful
    for support of right-to-left languages such as Arabic or Hebrew, it can also be
    used to trick language parsers into executing code in a manner that is different
    from how it is displayed in code editing and review tools. If this is not what
    you were expecting, please review this code in an editor that can reveal hidden
    Unicode characters.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - unicode
    references:
    - https://trojansource.codes/
    confidence: LOW
    owasp:
    - A03:2021 - Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.unicode.security.bidi.contains-bidirectional-characters
    shortlink: https://sg.run/nK4r
    semgrep.dev:
      rule:
        rule_id: d8UeX4
        version_id: bZTx24
        url: https://semgrep.dev/playground/r/bZTx24/generic.unicode.security.bidi.contains-bidirectional-characters
        origin: community
  languages:
  - bash
  - c
  - csharp
  - go
  - java
  - javascript
  - json
  - kotlin
  - lua
  - ocaml
  - php
  - python
  - ruby
  - rust
  - scala
  - sh
  - typescript
  - yaml
  severity: WARNING
- id: javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization
  message: The following function call $SER.$FUNC accepts user controlled data which
    can result in Remote Code Execution (RCE) through Object Deserialization. It is
    recommended to use secure data processing alternatives such as JSON.parse() and
    Buffer.from().
  metadata:
    interfile: true
    technology:
    - express
    category: security
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
    source_rule_url:
    - https://github.com/ajinabraham/njsscan/blob/75bfbeb9c8d72999e4d527dfa2548f7f0f3cc48a/njsscan/rules/semantic_grep/eval/eval_deserialize.yaml
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization
    shortlink: https://sg.run/8W5j
    semgrep.dev:
      rule:
        rule_id: 9AUyqj
        version_id: yeTEA3
        url: https://semgrep.dev/playground/r/yeTEA3/javascript.express.security.audit.express-third-party-object-deserialization.express-third-party-object-deserialization
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
      - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
      - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
      - pattern: files.$ANYTHING.data.toString('utf8')
      - pattern: files.$ANYTHING['data'].toString('utf8')
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SER = require('$IMPORT')
            ...
        - pattern-inside: |
            import $SER from '$IMPORT'
             ...
        - pattern-inside: |
            import * as $SER from '$IMPORT'
            ...
      - metavariable-regex:
          metavariable: $IMPORT
          regex: ^(node-serialize|serialize-to-js)$
      - pattern: $SER.$FUNC(...)
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(unserialize|deserialize)$
- id: javascript.express.security.audit.express-libxml-noent.express-libxml-noent
  message: The libxml library processes user-input with the `noent` attribute is set
    to `true` which can lead to being vulnerable to XML External Entities (XXE) type
    attacks. It is recommended to set `noent` to `false` when using this feature to
    ensure you are protected.
  metadata:
    interfile: true
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    technology:
    - express
    category: security
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-libxml-noent.express-libxml-noent
    shortlink: https://sg.run/Z75x
    semgrep.dev:
      rule:
        rule_id: pKUNeD
        version_id: pZT57B
        url: https://semgrep.dev/playground/r/pZT57B/javascript.express.security.audit.express-libxml-noent.express-libxml-noent
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
      - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
      - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
      - pattern: files.$ANYTHING.data.toString('utf8')
      - pattern: files.$ANYTHING['data'].toString('utf8')
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $XML = require('$IMPORT')
            ...
        - pattern-inside: |
            import $XML from '$IMPORT'
              ...
        - pattern-inside: |
            import * as $XML from '$IMPORT'
            ...
      - metavariable-regex:
          metavariable: $IMPORT
          regex: ^(libxmljs|libxmljs2)$
      - pattern-inside: $XML.$FUNC($QUERY, {...,noent:true,...})
      - metavariable-regex:
          metavariable: $FUNC
          regex: ^(parseXmlString|parseXml)$
      - focus-metavariable: $QUERY
- id: javascript.express.security.audit.express-open-redirect.express-open-redirect
  message: The application redirects to a URL specified by user-supplied input `$REQ`
    that is not validated. This could redirect users to malicious locations. Consider
    using an allow-list approach to validate URLs, or warn users they are being redirected
    to a third-party website.
  metadata:
    technology:
    - express
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    category: security
    owasp:
    - A01:2021 - Broken Access Control
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-open-redirect.express-open-redirect
    shortlink: https://sg.run/EpoP
    semgrep.dev:
      rule:
        rule_id: X5ULkq
        version_id: 2KT9J1
        url: https://semgrep.dev/playground/r/2KT9J1/javascript.express.security.audit.express-open-redirect.express-open-redirect
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  options:
    taint_unify_mvars: true
    symbolic_propagation: true
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.redirect("$HTTP"+$REQ. ... .$VALUE)
      - pattern: $RES.redirect("$HTTP"+$REQ. ... .$VALUE + $...A)
      - pattern: $RES.redirect(`$HTTP${$REQ. ... .$VALUE}...`)
      - pattern: $RES.redirect("$HTTP"+$REQ.$VALUE[...])
      - pattern: $RES.redirect("$HTTP"+$REQ.$VALUE[...] + $...A)
      - pattern: $RES.redirect(`$HTTP${$REQ.$VALUE[...]}...`)
    - metavariable-regex:
        metavariable: $HTTP
        regex: ^https?:\/\/$
    - pattern-either:
      - pattern: $REQ. ... .$VALUE
  - patterns:
    - pattern-either:
      - pattern: $RES.redirect($REQ. ... .$VALUE)
      - pattern: $RES.redirect($REQ. ... .$VALUE + $...A)
      - pattern: $RES.redirect(`${$REQ. ... .$VALUE}...`)
    - pattern: $REQ. ... .$VALUE
  - patterns:
    - pattern-either:
      - pattern: $RES.redirect($REQ.$VALUE['...'])
      - pattern: $RES.redirect($REQ.$VALUE['...'] + $...A)
      - pattern: $RES.redirect(`${$REQ.$VALUE['...']}...`)
    - pattern: $REQ.$VALUE
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $ASSIGN = $REQ. ... .$VALUE
          ...
      - pattern-inside: |
          $ASSIGN = $REQ.$VALUE['...']
          ...
      - pattern-inside: |
          $ASSIGN = $REQ. ... .$VALUE + $...A
          ...
      - pattern-inside: "$ASSIGN = $REQ.$VALUE['...'] + $...A\n...     \n"
      - pattern-inside: |
          $ASSIGN = `${$REQ. ... .$VALUE}...`
          ...
      - pattern-inside: "$ASSIGN = `${$REQ.$VALUE['...']}...`\n...                    \n"
    - pattern-either:
      - pattern: $RES.redirect($ASSIGN)
      - pattern: $RES.redirect($ASSIGN + $...FOO)
      - pattern: $RES.redirect(`${$ASSIGN}...`)
    - focus-metavariable: $ASSIGN
- id: javascript.express.security.audit.express-res-sendfile.express-res-sendfile
  message: The application processes user-input, this is passed to res.sendFile which
    can allow an attacker to arbitrarily read files on the system through path traversal.
    It is recommended to perform input validation in addition to canonicalizing the
    path. This allows you to validate the path against the intended directory it should
    be accessing.
  metadata:
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html
    technology:
    - express
    category: security
    cwe:
    - 'CWE-73: External Control of File Name or Path'
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-res-sendfile.express-res-sendfile
    shortlink: https://sg.run/7DJk
    semgrep.dev:
      rule:
        rule_id: j2UzDx
        version_id: jQTo7O
        url: https://semgrep.dev/playground/r/jQTo7O/javascript.express.security.audit.express-res-sendfile.express-res-sendfile
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              function ... (...,$REQ: $TYPE, ...) {...}
        - metavariable-regex:
            metavariable: $TYPE
            regex: ^(string|String)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.$METH($QUERY,...)
    - pattern-not-inside: $RES.$METH($QUERY,$OPTIONS)
    - metavariable-regex:
        metavariable: $METH
        regex: ^(sendfile|sendFile)$
    - focus-metavariable: $QUERY
- id: javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
  message: Detected a sequelize statement that is tainted by user-input. This could
    lead to SQL injection if the variable is user-controlled and is not properly sanitized.
    In order to prevent SQL injection, it is recommended to use parameterized queries
    or prepared statements.
  metadata:
    interfile: true
    references:
    - https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements
    category: security
    technology:
    - express
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
    shortlink: https://sg.run/gjoe
    semgrep.dev:
      rule:
        rule_id: yyU0GX
        version_id: bZT2ew
        url: https://semgrep.dev/playground/r/bZT2ew/javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
      - pattern: $REQ.files.$ANYTHING.data.toString('utf8')
      - pattern: $REQ.files.$ANYTHING['data'].toString('utf8')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
      - pattern: files.$ANYTHING.data.toString('utf8')
      - pattern: files.$ANYTHING['data'].toString('utf8')
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: sequelize.query($QUERY,...)
        - pattern: $DB.sequelize.query($QUERY,...)
      - focus-metavariable: $QUERY
  pattern-sanitizers:
  - pattern-either:
    - pattern: parseInt(...)
    - pattern: $FUNC. ... .hash(...)
- id: javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    interfile: true
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - express
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret
    shortlink: https://sg.run/LYvG
    semgrep.dev:
      rule:
        rule_id: 10Uo39
        version_id: DkTr1r
        url: https://semgrep.dev/playground/r/DkTr1r/javascript.express.security.audit.express-session-hardcoded-secret.express-session-hardcoded-secret
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
    - pattern-inside: |
        import $SESSION from 'express-session'
        ...
    - pattern-inside: |
        import {..., $SESSION, ...} from 'express-session'
        ...
    - pattern-inside: |
        import * as $SESSION from 'express-session'
        ...
  - patterns:
    - pattern-either:
      - pattern-inside: $APP.use($SESSION({...}))
      - pattern: |
          $SECRET = $VALUE
          ...
          $APP.use($SESSION($SECRET))
    - pattern: |
        secret: '$Y'
- id: javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent
  message: Detected use of parseXml() function with the `noent` field set to `true`.
    This can lead to an XML External Entities (XXE) attack if untrusted data is passed
    into it.
  metadata:
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent
    shortlink: https://sg.run/n8Ag
    semgrep.dev:
      rule:
        rule_id: 2ZUY52
        version_id: 5PTYGv
        url: https://semgrep.dev/playground/r/5PTYGv/javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: $VM.runInContext("$CMD", ...)
        - pattern: $VM.runInNewContext("$CMD", ...)
        - pattern: $VM.runInThisContext("$CMD", ...)
        - pattern: $VM.compileFunction("$CMD", ...)
      - metavariable-pattern:
          metavariable: $CMD
          language: typescript
          pattern-either:
          - pattern: |
              $LIBXML.parseXml($DATA, {..., noent: true, ...}, ...)
          - patterns:
            - pattern-inside: |
                $OPTS = {..., noent: true, ...}
                ...
            - pattern: $LIBXML.parseXml( $DATA, $OPTS )
    - pattern: |
        $LIBXML.parseXml($DATA, {..., noent: true, ...}, ...)
    - patterns:
      - pattern-inside: |
          $OPTS = {..., noent: true, ...}
          ...
      - pattern: $LIBXML.parseXml( $DATA, $OPTS )
- id: csharp.lang.security.filesystem.unsafe-path-combine.unsafe-path-combine
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $A
    - pattern-inside: |
        Path.Combine(...,$A,...)
    - pattern-inside: |
        public $TYPE $M(...,$A,...){...}
    - pattern-not-inside: |
        <... Path.GetFileName($A) != $A ...>
  pattern-sinks:
  - patterns:
    - focus-metavariable: $X
    - pattern: |
        File.$METHOD($X,...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (?i)^(read|write)
  pattern-sanitizers:
  - pattern: |
      Path.GetFileName(...)
  - patterns:
    - pattern-inside: |
        $X = Path.GetFileName(...);
        ...
    - pattern: $X
  - patterns:
    - pattern: $X
    - pattern-inside: |
        if(<... Path.GetFileName($X) != $X ...>){
          ...
          throw new $EXCEPTION(...);
        }
        ...
  message: String argument $A is used to read or write data from a file via Path.Combine
    without direct sanitization via Path.GetFileName. If the path is user-supplied
    data this can lead to path traversal.
  languages:
  - csharp
  severity: WARNING
  metadata:
    category: security
    confidence: MEDIUM
    references:
    - https://www.praetorian.com/blog/pathcombine-security-issues-in-aspnet-applications/
    - https://docs.microsoft.com/en-us/dotnet/api/system.io.path.combine?view=net-6.0#remarks
    technology:
    - .net
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.filesystem.unsafe-path-combine.unsafe-path-combine
    shortlink: https://sg.run/1RvG
    semgrep.dev:
      rule:
        rule_id: 3qU3bE
        version_id: RGTGrQ
        url: https://semgrep.dev/playground/r/RGTGrQ/csharp.lang.security.filesystem.unsafe-path-combine.unsafe-path-combine
        origin: community
- id: javascript.aws-lambda.security.tainted-html-string.tainted-html-string
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. To be sure this is safe, check that the HTML
    is rendered safely. Otherwise, use templates which will safely render HTML instead.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - aws-lambda
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.tainted-html-string.tainted-html-string
    shortlink: https://sg.run/Lgqr
    semgrep.dev:
      rule:
        rule_id: PeUxwW
        version_id: e1TAK1
        url: https://semgrep.dev/playground/r/e1TAK1/javascript.aws-lambda.security.tainted-html-string.tainted-html-string
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
    - pattern: $EVENT
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              "$HTMLSTR" + $EXPR
          - pattern: |
              "$HTMLSTR".concat(...)
          - pattern: $UTIL.format($HTMLSTR, ...)
          - pattern: format($HTMLSTR, ...)
        - metavariable-pattern:
            metavariable: $HTMLSTR
            language: generic
            pattern: <$TAG ...
      - patterns:
        - pattern: |
            `...${...}...`
        - pattern-regex: |
            .*<\w+.*
    - pattern-not-inside: |
        console.$LOG(...)
- id: python.aws-lambda.security.tainted-html-string.tainted-html-string
  languages:
  - python
  severity: WARNING
  message: Detected user input flowing into a manually constructed HTML string. You
    may be accidentally bypassing secure methods of rendering HTML by manually constructing
    HTML and this could create a cross-site scripting vulnerability, which could let
    attackers steal sensitive user data. To be sure this is safe, check that the HTML
    is rendered safely. Otherwise, use templates which will safely render HTML instead.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - aws-lambda
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.tainted-html-string.tainted-html-string
    shortlink: https://sg.run/8zNy
    semgrep.dev:
      rule:
        rule_id: JDUlwy
        version_id: nWTwKe
        url: https://semgrep.dev/playground/r/nWTwKe/python.aws-lambda.security.tainted-html-string.tainted-html-string
        origin: community
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '"$HTMLSTR" % ...'
          - pattern: '"$HTMLSTR".format(...)'
          - pattern: '"$HTMLSTR" + ...'
          - pattern: f"$HTMLSTR{...}..."
      - patterns:
        - pattern-inside: |
            $HTML = "$HTMLSTR"
            ...
        - pattern-either:
          - pattern: $HTML % ...
          - pattern: $HTML.format(...)
          - pattern: $HTML + ...
    - metavariable-pattern:
        metavariable: $HTMLSTR
        language: generic
        pattern: <$TAG ...
    - pattern-not-inside: |
        print(...)
- id: scala.lang.security.audit.dispatch-ssrf.dispatch-ssrf
  patterns:
  - pattern: url($URL)
  - pattern-inside: |
      import dispatch._
      ...
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = $A {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = {
          ...
        }
  message: A parameter being passed directly into `url` most likely lead to SSRF.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data sent with this request. They could also probe internal servers
    or other resources that the server runnig this code can access. Do not allow arbitrary
    hosts. Instead, create an allowlist for approved hosts hardcode the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://dispatchhttp.org/Dispatch.html
    category: security
    technology:
    - scala
    - dispatch
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.dispatch-ssrf.dispatch-ssrf
    shortlink: https://sg.run/gR6J
    semgrep.dev:
      rule:
        rule_id: 5rUyl4
        version_id: d6TnDx
        url: https://semgrep.dev/playground/r/d6TnDx/scala.lang.security.audit.dispatch-ssrf.dispatch-ssrf
        origin: community
  languages:
  - scala
  severity: WARNING
- id: scala.lang.security.audit.io-source-ssrf.io-source-ssrf
  patterns:
  - pattern-either:
    - pattern: Source.fromURL($URL,...)
    - pattern: Source.fromURI($URL,...)
  - pattern-inside: |
      import scala.io.$SOURCE
      ...
  - pattern-either:
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = $A {
          ...
        }
    - pattern-inside: |
        def $FUNC(..., $URL: $T, ...) = {
          ...
        }
  message: A parameter being passed directly into `fromURL` most likely lead to SSRF.
    This could allow an attacker to send data to their own server, potentially exposing
    sensitive data sent with this request. They could also probe internal servers
    or other resources that the server runnig this code can access. Do not allow arbitrary
    hosts. Instead, create an allowlist for approved hosts hardcode the correct host.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://www.scala-lang.org/api/current/scala/io/Source$.html#fromURL(url:java.net.URL)(implicitcodec:scala.io.Codec):scala.io.BufferedSource
    category: security
    technology:
    - scala
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.io-source-ssrf.io-source-ssrf
    shortlink: https://sg.run/Qbz4
    semgrep.dev:
      rule:
        rule_id: GdUDOZ
        version_id: ExTdnJ
        url: https://semgrep.dev/playground/r/ExTdnJ/scala.lang.security.audit.io-source-ssrf.io-source-ssrf
        origin: community
  languages:
  - scala
  severity: WARNING
- id: swift.cryptoswift.blowfish-hardcoded-secret.blowfish-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - blowfish
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.blowfish-hardcoded-secret.blowfish-hardcoded-secret
    shortlink: https://sg.run/g85K
    semgrep.dev:
      rule:
        rule_id: ReUpR7
        version_id: YDTbX7
        url: https://semgrep.dev/playground/r/YDTbX7/swift.cryptoswift.blowfish-hardcoded-secret.blowfish-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try Blowfish(key: $PASSWORD, ...);
        - pattern: |
            Blowfish(key: $PASSWORD, ...);
    - pattern: |
        try Blowfish(key: "...", ...);
    - pattern: |
        Blowfish(key: "...", ...);
    - pattern: |
        Blowfish(key: Array("...".utf8), ...);
    - pattern: |
        try Blowfish(key: Array("...".utf8), ...);
- id: swift.cryptoswift.chacha20-hardcoded-secret.chacha20-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - chacha20
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.chacha20-hardcoded-secret.chacha20-hardcoded-secret
    shortlink: https://sg.run/QLOd
    semgrep.dev:
      rule:
        rule_id: AbUqXD
        version_id: JdTR7W
        url: https://semgrep.dev/playground/r/JdTR7W/swift.cryptoswift.chacha20-hardcoded-secret.chacha20-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try ChaCha20(key: $PASSWORD, ...);
        - pattern: |
            ChaCha20(key: $PASSWORD, ...);
    - pattern: |
        try ChaCha20(key: "...", ...);
    - pattern: |
        ChaCha20(key: "...", ...);
    - pattern: |
        ChaCha20(key: Array("...".utf8), ...);
    - pattern: |
        try ChaCha20(key: Array("...".utf8), ...);
- id: swift.cryptoswift.hkdf-hardcoded-secret.hkdf-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - HKDF
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.hkdf-hardcoded-secret.hkdf-hardcoded-secret
    shortlink: https://sg.run/3W5D
    semgrep.dev:
      rule:
        rule_id: BYUbpR
        version_id: 5PTGnX
        url: https://semgrep.dev/playground/r/5PTGnX/swift.cryptoswift.hkdf-hardcoded-secret.hkdf-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try HKDF(password: $PASSWORD, ...);
        - pattern: |
            HKDF(password: $PASSWORD, ...);
    - pattern: |
        try HKDF(password: "...", ...);
    - pattern: |
        HKDF(password: "...", ...);
    - pattern: |
        try HKDF(password: Array("...".utf8), ...);
    - pattern: |
        HKDF(password: Array("...".utf8), ...);
- id: swift.cryptoswift.rabbit-hardcoded-secret.rabbit-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - rabbit
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.rabbit-hardcoded-secret.rabbit-hardcoded-secret
    shortlink: https://sg.run/40G7
    semgrep.dev:
      rule:
        rule_id: DbUkYA
        version_id: RGTx1b
        url: https://semgrep.dev/playground/r/RGTx1b/swift.cryptoswift.rabbit-hardcoded-secret.rabbit-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try Rabbit(key: $PASSWORD, ...);
        - pattern: |
            Rabbit(key: $PASSWORD, ...);
    - pattern: |
        try Rabbit(key: "...", ...);
    - pattern: |
        Rabbit(key: "...", ...);
    - pattern: |
        try Rabbit(key: Array("...".utf8), ...);
    - pattern: |
        Rabbit(key: Array("...".utf8), ...);
- id: swift.cryptoswift.scrypt-hardcoded-secret.scrypt-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - audit
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - scrypt
    - cryptoswift
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/swift.cryptoswift.scrypt-hardcoded-secret.scrypt-hardcoded-secret
    shortlink: https://sg.run/PL30
    semgrep.dev:
      rule:
        rule_id: WAU834
        version_id: A8TlbY
        url: https://semgrep.dev/playground/r/A8TlbY/swift.cryptoswift.scrypt-hardcoded-secret.scrypt-hardcoded-secret
        origin: pro_rules
  languages:
  - swift
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $PASSWORD = Array("...".utf8);
          ...
      - pattern-either:
        - pattern: |
            try Scrypt(password: $PASSWORD, ...);
        - pattern: |
            Scrypt(password: $PASSWORD, ...);
    - pattern: |
        try Scrypt(password: "...", ...);
    - pattern: |
        Scrypt(password: "...", ...);
    - pattern: |
        try Scrypt(password: Array("...".utf8), ...);
    - pattern: |
        Scrypt(password: Array("...".utf8), ...);
- id: php.laravel.security.laravel-unsafe-entity-loader.laravel-unsafe-entity-loader
  message: The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://websec.io/2012/08/27/Preventing-XXE-in-PHP.html
    - https://www.php.net/libxml_disable_entity_loader
    - https://www.php.net/manual/en/function.libxml-set-external-entity-loader.php
    technology:
    - laravel
    - XML
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-unsafe-entity-loader.laravel-unsafe-entity-loader
    shortlink: https://sg.run/lePG
    semgrep.dev:
      rule:
        rule_id: BYUv2J
        version_id: bZTd4p
        url: https://semgrep.dev/playground/r/bZTd4p/php.laravel.security.laravel-unsafe-entity-loader.laravel-unsafe-entity-loader
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        libxml_disable_entity_loader(false);
        ...
    - pattern-either:
      - patterns:
        - pattern: $X->loadXML($INPUT,...)
        - pattern-inside: |
            $X = new DOMDocument;
            ...
      - pattern: simplexml_load_string($INPUT,...)
      - pattern: simplexml_load_file($INPUT,...)
      - pattern: simplexml_import_dom($INPUT,...)
      - pattern: DOMDocument::loadXML($INPUT,...)
      - pattern: DOMDocument::load($INPUT,...)
    - focus-metavariable: $INPUT
- id: php.laravel.security.laravel-xml-unsafe-parser-flags.laravel-xml-unsafe-parser-flags
  message: The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a Billion Laughs Attack. The best defense against XXE is to have an XML
    parser that supports disabling DTDs. Limiting the use of external entities from
    the start can prevent the parser from being used to process untrusted XML files.
    Reducing dependencies on external resources is also a good practice for performance
    reasons. It is difficult to guarantee that even a trusted XML file on your server
    or during transmission has not been tampered with by a malicious third-party.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://websec.io/2012/08/27/Preventing-XXE-in-PHP.html
    - https://www.php.net/libxml_disable_entity_loader
    - https://www.php.net/manual/en/function.libxml-set-external-entity-loader.php
    technology:
    - laravel
    - XML
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-xml-unsafe-parser-flags.laravel-xml-unsafe-parser-flags
    shortlink: https://sg.run/YoAo
    semgrep.dev:
      rule:
        rule_id: DbU7z7
        version_id: NdTjQ4
        url: https://semgrep.dev/playground/r/NdTjQ4/php.laravel.security.laravel-xml-unsafe-parser-flags.laravel-xml-unsafe-parser-flags
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $INPUT
    - pattern-either:
      - patterns:
        - pattern: $X->loadXML($INPUT, <... LIBXML_NOENT ...>)
        - pattern-inside: |
            $X = new DOMDocument;
            ...
      - pattern: simplexml_load_string($INPUT, <... LIBXML_NOENT ...>,...)
      - pattern: simplexml_load_file($INPUT, <... LIBXML_NOENT ...>,...)
      - pattern: simplexml_import_dom($INPUT, <... LIBXML_NOENT ...>,...)
      - pattern: DOMDocument::loadXML($INPUT, <... LIBXML_NOENT ...>)
  pattern-sanitizers:
  - patterns:
    - pattern: |
        libxml_set_external_entity_loader(function () {return null;});
        ...
- id: php.laravel.security.laravel-direct-response-write.laravel-direct-response-write
  message: Detected data rendered directly to the end user via 'response' This bypasses
    Laravel's built-in cross-site scripting (XSS) defenses and could result in an
    XSS vulnerability. Use Laravel's template engine to safely render HTML.
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Laravel_Cheat_Sheet.md#cross-site-scripting-xss
    - https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md
    technology:
    - laravel
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/php.laravel.security.laravel-direct-response-write.laravel-direct-response-write
    shortlink: https://sg.run/qwKe
    semgrep.dev:
      rule:
        rule_id: AbUpbE
        version_id: 6xTlDy
        url: https://semgrep.dev/playground/r/6xTlDy/php.laravel.security.laravel-direct-response-write.laravel-direct-response-write
        origin: pro_rules
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: public function $CALL(..., $ARG, ...) {...}
    - pattern-not: public function $CALL(..., $TYPE $ARG, ...) {...}
    - focus-metavariable: $ARG
    - pattern-inside: |
        class $CLASS extends App\Http\Controllers\Controller {...}
  - patterns:
    - pattern-either:
      - pattern: |
          Route::$METHOD($ROUTE, function(...,$ARG,...) { ... })
      - pattern: |
          Route::$METHOD($X, $ROUTE, function(...,$ARG,...) { ... })
    - focus-metavariable: $ARG
  - patterns:
    - pattern: function handle($REQ, Closure $NEXT) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern: |
        function $FN(..., Illuminate\Http\Request $REQ, ...) {...}
    - focus-metavariable: $REQ
  - patterns:
    - pattern-either:
      - pattern: |
          $this->$PROPERTY
      - pattern: |
          $this->$PROPERTY->$GET
    - metavariable-pattern:
        metavariable: $PROPERTY
        patterns:
        - pattern-either:
          - pattern: query
          - pattern: request
          - pattern: headers
          - pattern: cookies
          - pattern: cookie
          - pattern: files
          - pattern: file
          - pattern: allFiles
          - pattern: input
          - pattern: all
          - pattern: post
          - pattern: json
    - pattern-either:
      - pattern-inside: |
          class $CL extends Illuminate\Http\Request {...}
      - pattern-inside: |
          class $CL extends Illuminate\Foundation\Http\FormRequest {...}
  - pattern: $_GET
  - pattern: $_POST
  - pattern: $_COOKIE
  - pattern: $_REQUEST
  - pattern: $_FILES
  - patterns:
    - pattern: $_SERVER['$MEMBER']
    - metavariable-regex:
        metavariable: $MEMBER
        regex: ^(HTTP_ACCEPT|HTTP_ACCEPT_CHARSET|HTTP_ACCEPT_ENCODING|HTTP_ACCEPT_LANGUAGE|HTTP_CONNECTION|HTTP_HOST|HTTP_REFERER|HTTP_USER_AGENT|PHP_AUTH_DIGEST|PHP_AUTH_USER|PHP_AUTH_PW|PATH_INFO|ORIG_PATH_INFO|QUERY_STRING|REQUEST_METHOD)$
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CONTENT
    - patterns:
      - pattern: response($CONTENT,...)
      - pattern-either:
        - pattern: response(...)->...->header('Content-Type', 'text/html')
        - pattern: response(...)->...->withHeaders([..., 'Content-Type' => 'text/html',...],...)
  pattern-sanitizers:
  - patterns:
    - pattern: $FUNC(...)
    - pattern-not: response(...)
    - pattern-not: response(...)->...->$WHATEVER(...)
    - pattern-not: Route->$NAME(...)
- id: go.net.csrf.gorilla-csrf.go-net-http-form-without-gorilla-csrf-protection.go-net-http-form-without-gorilla-csrf-protection
  message: Detected a `HandleFunc()` call where the function `$FUNC` being passed
    in doesn't have a CSRF token header set. If this route modifies sensitive state,
    it will open your application to Cross-Site Request Forgery (CSRF) attacks. This
    can be fixed by getting the CSRF token from the request and including it in a
    response header by including `$W.Header.Set(X-CSRF-Token", csrf.Token($R))` in
    the function before calling `$W.Write()`, or by wrapping the `$FUNC` call with
    `csrf.Protect("secure-auth-key")($FUNC)`.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/gorilla/csrf
    technology:
    - go
    - gorilla
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.csrf.gorilla-csrf.go-net-http-form-without-gorilla-csrf-protection.go-net-http-form-without-gorilla-csrf-protection
    shortlink: https://sg.run/WYJL
    semgrep.dev:
      rule:
        rule_id: 5rUEne
        version_id: 9lT0G3
        url: https://semgrep.dev/playground/r/9lT0G3/go.net.csrf.gorilla-csrf.go-net-http-form-without-gorilla-csrf-protection.go-net-http-form-without-gorilla-csrf-protection
        origin: pro_rules
  languages:
  - go
  mode: taint
  options:
    taint_unify_mvars: true
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/csrf"
        ...
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-inside: |
        import "http/template"
        ...
    - pattern: |
        ...
        func $FUNC($W http.ResponseWriter, $R *http.Request) {
          ...
          $T.ExecuteTemplate($W, "...", map[string]interface{}{
            ...,
          })
          ...
        }
        ...
    - pattern-not: |
        ...
        func $FUNC($W http.ResponseWriter, $R *http.Request) {
          ...
          $W.Header().Set("...", csrf.Token(...))
          ...
        }
        ...
    - pattern-not: |
        ...
        func $FUNC($W http.ResponseWriter, $R *http.Request) {
          ...
          $T.ExecuteTemplate($W, "...", map[string]interface{}{
            ...,
            csrf.$TEMPLTAG: csrf.TemplateField($R),
            ...,
          })
          ...
        }
        ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $HTTP.HandleFunc($ADDR, <... $FUNC ...>)
        - metavariable-regex:
            metavariable: $HTTP
            regex: ^(http)$
      - pattern: |
          ($HTTP : http.ServeMux).HandleFunc($ADDR, <... $FUNC ...>)
      - pattern: |
          ($HTTP : *http.ServeMux).HandleFunc($ADDR, <... $FUNC ...>)
      - patterns:
        - pattern-inside: |
            $HTTP := http.NewServeMux()
            ...
        - pattern: $HTTP.HandleFunc($ADDR, <... $FUNC ...>)
    - pattern-not: $HTTP.HandleFunc($ADDR, <... csrf.Protect(...)( <... $FUNC ...>)
        ...>)
    - focus-metavariable: $FUNC
- id: go.net.csrf.gorilla-csrf.go-net-http-route-without-gorilla-csrf-protection.go-net-http-route-without-gorilla-csrf-protection
  message: Detected a handler or route `$ADDR` without a CSRF middleware or explicit
    CSRF token implementation. If this route modifies sensitive state, it will open
    your application to Cross-Site Request Forgery (CSRF) attacks.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/gorilla/csrf
    technology:
    - go
    - gorilla
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.csrf.gorilla-csrf.go-net-http-route-without-gorilla-csrf-protection.go-net-http-route-without-gorilla-csrf-protection
    shortlink: https://sg.run/KJjL
    semgrep.dev:
      rule:
        rule_id: ReU91p
        version_id: WrTnbj
        url: https://semgrep.dev/playground/r/WrTnbj/go.net.csrf.gorilla-csrf.go-net-http-route-without-gorilla-csrf-protection.go-net-http-route-without-gorilla-csrf-protection
        origin: pro_rules
  languages:
  - go
  options:
    symbolic_propagation: true
  patterns:
  - pattern-inside: |
      import "github.com/gorilla/csrf"
      ...
  - pattern-inside: |
      import "net/http"
      ...
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-not: $HTTP.$LISTEN($ADDR, ..., <... csrf.Protect(...)(...) ...>)
        - pattern: $HTTP.$LISTEN($ADDR, ...)
      - patterns:
        - pattern-inside: |
            $HTTP := http.NewServeMux()
            ...
        - pattern-not: $HTTP.$LISTEN($ADDR, ..., <... csrf.Protect(...)(...) ...>)
        - pattern: $HTTP.$LISTEN($ADDR, ...)
    - metavariable-regex:
        metavariable: $LISTEN
        regex: ^(ListenAndServe(TLS)?|Handle)$
    - metavariable-pattern:
        metavariable: $HTTP
        pattern-either:
        - pattern: http
        - pattern: |
            ($HTTP : http.ServeMux)
        - pattern: |
            ($HTTP : *http.ServeMux)
- id: go.net.csrf.gorilla-csrf.go-net-http-handlefunc-without-gorilla-csrf-protection.go-net-http-handlefunc-without-gorilla-csrf-protection
  message: Detected `HandleFunc()` call in `$HTTP.HandleFunc()` where the function
    `$FUNC` being passed in doesn't have a CSRF token header set. If this route modifies
    sensitive state, it will open your application to Cross-Site Request Forgery (CSRF)
    attacks. This can be fixed by getting the CSRF token from `csrf.Token($R)` and
    setting it with `$W.Header.Set(X-CSRF-Token", token)` in the function before calling
    `$W.Write()`, or by wrapping the `$FUNC` call with `csrf.Protect("secure-auth-key")($FUNC)`.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    - A05:2017 - Broken Access Control
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
    - https://github.com/gorilla/csrf
    technology:
    - go
    - gorilla
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.csrf.gorilla-csrf.go-net-http-handlefunc-without-gorilla-csrf-protection.go-net-http-handlefunc-without-gorilla-csrf-protection
    shortlink: https://sg.run/0v0B
    semgrep.dev:
      rule:
        rule_id: GdUB9k
        version_id: l4TRj0
        url: https://semgrep.dev/playground/r/l4TRj0/go.net.csrf.gorilla-csrf.go-net-http-handlefunc-without-gorilla-csrf-protection.go-net-http-handlefunc-without-gorilla-csrf-protection
        origin: pro_rules
  languages:
  - go
  options:
    symbolic_propagation: true
  patterns:
  - patterns:
    - pattern-inside: |
        import "github.com/gorilla/csrf"
        ...
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-inside: |
        ...
        func $FUNC($W http.ResponseWriter, $R *http.Request) { $...BODY }
        ...
    - metavariable-pattern:
        metavariable: $...BODY
        patterns:
        - pattern-not: |
            ...
            $W.Header().Set("...", csrf.Token(...))
            ...
    - pattern-either:
      - patterns:
        - pattern: $HTTP.HandleFunc($ADDR, ..., <... $FUNC ...>)
        - metavariable-regex:
            metavariable: $HTTP
            regex: ^(http)$
      - pattern: |
          ($HTTP : http.ServeMux).HandleFunc($ADDR, ..., <... $FUNC ...>)
      - pattern: |
          ($HTTP : *http.ServeMux).HandleFunc($ADDR, ..., <... $FUNC ...>)
      - patterns:
        - pattern-inside: |
            $HTTP := http.NewServeMux()
            ...
        - pattern: $HTTP.HandleFunc($ADDR, ..., <... $FUNC ...>)
    - pattern-not: $HTTP.HandleFunc($ADDR, ..., <... csrf.Protect(...)( <... $FUNC
        ...>) ...>)
    - focus-metavariable: $FUNC
- id: python.lang.security.audit.system-wildcard-detected.system-wildcard-detected
  patterns:
  - pattern-either:
    - pattern-inside: os.system("...")
    - pattern-inside: os.popen("...")
    - pattern-inside: os.popen2("...")
    - pattern-inside: os.popen3("...")
    - pattern-inside: os.popen4("...")
    - pattern-inside: subprocess.$W(..., shell=True, ...)
  - pattern-regex: (tar|chmod|chown|rsync)(.*?)\*
  message: Detected use of the wildcard character in a system call that spawns a shell.
    This subjects the wildcard to normal shell expansion, which can have unintended
    consequences if there exist any non-standard file names. Consider a file named
    '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    for more information.
  metadata:
    cwe:
    - 'CWE-155: Improper Neutralization of Wildcards or Matching Symbols'
    owasp: A01:2017 - Injection
    source-url-open: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/injection_wildcard.py
    references:
    - https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected
    shortlink: https://sg.run/5QXA
    semgrep.dev:
      rule:
        rule_id: WAUorE
        version_id: 1QTwXo
        url: https://semgrep.dev/playground/r/1QTwXo/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
  pattern: ssl.wrap_socket(...)
  message: '''ssl.wrap_socket()'' is deprecated. This function creates an insecure
    socket without server name indication or hostname matching. Instead, create an
    SSL context using ''ssl.SSLContext()'' and use that to wrap a socket.'
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://docs.python.org/3/library/ssl.html#ssl.wrap_socket
    - https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket
    category: security
    technology:
    - python
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
    shortlink: https://sg.run/PJOY
    semgrep.dev:
      rule:
        rule_id: BYUN2e
        version_id: YDT8XN
        url: https://semgrep.dev/playground/r/YDT8XN/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
  patterns:
  - pattern: subprocess.$FUNC(..., shell=True, ...)
  - pattern-not: subprocess.$FUNC("...", shell=True, ...)
  message: Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous
    because this call will spawn the command using a shell process. Doing so propagates
    current shell settings and variables, which makes it much easier for a malicious
    actor to execute commands. Use 'shell=False' instead.
  fix-regex:
    regex: (shell\s*=\s*)True
    replacement: \1False
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b602_subprocess_popen_with_shell_equals_true.html
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    references:
    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess
    - https://docs.python.org/3/library/subprocess.html
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
    shortlink: https://sg.run/J92w
    semgrep.dev:
      rule:
        rule_id: DbUpz2
        version_id: 6xT0p5
        url: https://semgrep.dev/playground/r/6xT0p5/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true
        origin: community
  languages:
  - python
  severity: ERROR
- id: ruby.lang.security.force-ssl-false.force-ssl-false
  message: Checks for configuration setting of force_ssl to false. Force_ssl forces
    usage of HTTPS, which could lead to network interception of unencrypted application
    traffic. To fix, set config.force_ssl = true.
  metadata:
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_force_ssl.rb
    category: security
    technology:
    - ruby
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.force-ssl-false.force-ssl-false
    shortlink: https://sg.run/YgkW
    semgrep.dev:
      rule:
        rule_id: 2ZU4lx
        version_id: NdT55D
        url: https://semgrep.dev/playground/r/NdT55D/ruby.lang.security.force-ssl-false.force-ssl-false
        origin: community
  languages:
  - ruby
  severity: WARNING
  pattern: config.force_ssl = false
  fix-regex:
    regex: =\s*false
    replacement: = true
- id: ruby.lang.security.jruby-xml.jruby-xml
  patterns:
  - pattern: |
      XmlMini.backend = $STR
  - pattern-not: |
      XmlMini.backend = "REXML"
  message: The JDOM backend for XmlMini has a vulnerability that lets an attacker
    perform a denial of service attack or gain access to files on the application
    server. This affects versions 3.0, but is fixed in versions 3.1.12 and 3.2.13.
    To fix, either upgrade or use XmlMini.backend="REXML".
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_jruby_xml.rb
    category: security
    technology:
    - ruby
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.jruby-xml.jruby-xml
    shortlink: https://sg.run/ok07
    semgrep.dev:
      rule:
        rule_id: j2Uqk5
        version_id: O9T443
        url: https://semgrep.dev/playground/r/O9T443/ruby.lang.security.jruby-xml.jruby-xml
        origin: community
  languages:
  - ruby
  severity: WARNING
- id: ruby.lang.security.json-entity-escape.json-entity-escape
  pattern-either:
  - pattern: |
      ActiveSupport.escape_html_entities_in_json = false
  - pattern: |
      config.active_support.escape_html_entities_in_json = false
  message: Checks if HTML escaping is globally disabled for JSON output. This could
    lead to XSS.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_json_entity_escape.rb
    category: security
    technology:
    - ruby
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.json-entity-escape.json-entity-escape
    shortlink: https://sg.run/plr3
    semgrep.dev:
      rule:
        rule_id: 9AUOQB
        version_id: vdTDDj
        url: https://semgrep.dev/playground/r/vdTDDj/ruby.lang.security.json-entity-escape.json-entity-escape
        origin: community
  languages:
  - ruby
  severity: WARNING
- id: ruby.lang.security.missing-csrf-protection.missing-csrf-protection
  patterns:
  - pattern: |
      class $CONTROLLER < ActionController::Base
        ...
      end
  - pattern-not: |
      class $CONTROLLER < ActionController::Base
        ...
        protect_from_forgery :with => :exception
      end
  - pattern-not: |
      class $CONTROLLER < ActionController::Base
        ...
        protect_from_forgery prepend: true, with: :exception
      end
  message: Detected controller which does not enable cross-site request forgery protections
    using 'protect_from_forgery'. Add 'protect_from_forgery :with => :exception' to
    your controller class.
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross-site_request_forgery/index.markdown
    category: security
    technology:
    - ruby
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.missing-csrf-protection.missing-csrf-protection
    shortlink: https://sg.run/XLel
    semgrep.dev:
      rule:
        rule_id: r6UkO5
        version_id: nWTddy
        url: https://semgrep.dev/playground/r/nWTddy/ruby.lang.security.missing-csrf-protection.missing-csrf-protection
        origin: community
  languages:
  - ruby
- id: ruby.lang.security.json-encoding.json-encoding
  message: When a 'Hash' with user-supplied input is encoded in JSON, Rails doesn't
    provide adequate escaping. If the JSON string is supplied into HTML, the page
    will be vulnerable to XXS attacks. The affected Rails versions are 3.0.x, 3.1.x,
    3.2.x, 4.1.x, 4.2.x. To fix, either upgrade or add an initializer.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_json_encoding.rb
    - https://groups.google.com/g/rubyonrails-security/c/7VlB_pck3hU/m/3QZrGIaQW6cJ
    category: security
    technology:
    - ruby
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.json-encoding.json-encoding
    shortlink: https://sg.run/zkYz
    semgrep.dev:
      rule:
        rule_id: 10UZ8v
        version_id: w8T43Y
        url: https://semgrep.dev/playground/r/w8T43Y/ruby.lang.security.json-encoding.json-encoding
        origin: community
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        params
    - pattern-not: |
        cookies
  pattern-sinks:
  - pattern-either:
    - patterns:
      - focus-metavariable: $X
      - pattern: |
          $X.to_json
    - pattern: |
        JSON.encode(...)
- id: ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller
  patterns:
  - pattern-inside: |
      class $CONTROLLER < ApplicationController
        ...
        http_basic_authenticate_with ..., :password => "$SECRET", ...
      end
  - focus-metavariable: $SECRET
  message: Detected hardcoded password used in basic authentication in a controller
    class. Including this password in version control could expose this credential.
    Consider refactoring to use environment variables or configuration files.
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/basic_auth/index.markdown
    category: security
    technology:
    - ruby
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller
    shortlink: https://sg.run/6r0w
    semgrep.dev:
      rule:
        rule_id: X5UZWK
        version_id: bZTWQP
        url: https://semgrep.dev/playground/r/bZTWQP/ruby.lang.security.hardcoded-http-auth-in-controller.hardcoded-http-auth-in-controller
        origin: community
  languages:
  - ruby
- id: java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
  metadata:
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#INSECURE_COOKIE
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.1 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
    shortlink: https://sg.run/kXoK
    semgrep.dev:
      rule:
        rule_id: L1Uyvp
        version_id: 9lTN3n
        url: https://semgrep.dev/playground/r/9lTN3n/java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag
        origin: community
  message: A cookie was detected without setting the 'secure' flag. The 'secure' flag
    for cookies prevents the client from transmitting the cookie over insecure channels
    such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not-inside: $COOKIE.setValue(""); ...
  - pattern-either:
    - pattern: $COOKIE.setSecure(false);
    - patterns:
      - pattern-not-inside: $COOKIE.setSecure(...); ...
      - pattern-not-inside: $COOKIE = ResponseCookie.from(...). ...; ...
      - pattern: $RESPONSE.addCookie($COOKIE);
- id: problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
  message: Insecure transport rules to catch socket connections to http, telnet, and
    ftp servers. This is dangerous because these are protocols that do not encrypt
    traffic.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: LOW
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.oracle.com/javase/8/docs/api/java/net/Socket.html
    subcategory:
    - audit
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
    shortlink: https://sg.run/2x9L
    semgrep.dev:
      rule:
        rule_id: NbUkl9
        version_id: BjTn8g
        url: https://semgrep.dev/playground/r/BjTn8g/problem-based-packs.insecure-transport.java-stdlib.socket-request.socket-request
        origin: community
  languages:
  - java
  pattern-either:
  - pattern: |
      $SOCKET = new Socket("=~/[tT][eE][lL][nN][eE][tT]://.*/", ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SOCKET = new Socket("=~/^[fF][tT][pP]://.*/", ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
  - pattern: |
      $SOCKET = new Socket("=~/[hH][tT][tT][pP]://.*/", ...);
      ...
      $OUT = new PrintWriter($SOCKET.getOutputStream(...), ...);
      ...
      $OUT.$FUNC(...);
- id: problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
  message: Checks for attempts to connect through telnet. This is insecure as the
    telnet protocol supports no encryption, and data passes through unencrypted.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://commons.apache.org/proper/commons-net/javadocs/api-3.6/org/apache/commons/net/telnet/TelnetClient.html
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
    shortlink: https://sg.run/XBQB
    semgrep.dev:
      rule:
        rule_id: kxUkXk
        version_id: DkTZvg
        url: https://semgrep.dev/playground/r/DkTZvg/problem-based-packs.insecure-transport.java-stdlib.telnet-request.telnet-request
        origin: community
  languages:
  - java
  pattern: |
    $TELNETCLIENT = new TelnetClient(...);
    ...
    $TELNETCLIENT.connect(...);
- id: problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
  message: Detected an HTTP request sent via HttpURLConnection. This could lead to
    sensitive information being sent over an insecure channel. Instead, it is recommended
    to send requests over HTTPS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URLConnection.html
    - https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/URL.html#openConnection()
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
    shortlink: https://sg.run/px3Z
    semgrep.dev:
      rule:
        rule_id: bwUwvR
        version_id: YDTWdq
        url: https://semgrep.dev/playground/r/YDTWdq/problem-based-packs.insecure-transport.java-stdlib.httpurlconnection-http-request.httpurlconnection-http-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  patterns:
  - pattern: |
      "=~/[Hh][Tt][Tt][Pp]://.*/"
  - pattern-either:
    - pattern-inside: |
        URL $URL = new URL ("=~/[Hh][Tt][Tt][Pp]://.*/", ...);
        ...
        $CON = (HttpURLConnection) $URL.openConnection(...);
        ...
        $CON.$FUNC(...);
    - pattern-inside: |
        URL $URL = new URL ("=~/[Hh][Tt][Tt][Pp]://.*/", ...);
        ...
        $CON = $URL.openConnection(...);
        ...
        $CON.$FUNC(...);
- id: python.django.security.passwords.password-empty-string.password-empty-string
  message: '''$VAR'' is the empty string and is being used to set the password on
    ''$MODEL''. If you meant to set an unusable password, set the password to None
    or call ''set_unusable_password()''.'
  metadata:
    cwe:
    - 'CWE-521: Weak Password Requirements'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.passwords.password-empty-string.password-empty-string
    shortlink: https://sg.run/oxnR
    semgrep.dev:
      rule:
        rule_id: 9AU1jW
        version_id: DkTeOP
        url: https://semgrep.dev/playground/r/DkTeOP/python.django.security.passwords.password-empty-string.password-empty-string
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $MODEL.set_password($EMPTY)
        ...
        $MODEL.save()
    - pattern: |
        $VAR = $EMPTY
        ...
        $MODEL.set_password($VAR)
        ...
        $MODEL.save()
  - metavariable-regex:
      metavariable: $EMPTY
      regex: (\'\'|\"\")
  languages:
  - python
  severity: ERROR
- id: python.flask.security.injection.ssrf-requests.ssrf-requests
  languages:
  - python
  severity: ERROR
  message: Data from request object is passed to a new server-side request. This could
    lead to a server-side request forgery (SSRF). To mitigate, ensure that schemes
    and hosts are validated against an allowlist, do not forward the response to the
    user, and ensure proper authentication and transport-layer security in the proxied
    request.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.ssrf-requests.ssrf-requests
    shortlink: https://sg.run/J9LW
    semgrep.dev:
      rule:
        rule_id: WAUoRx
        version_id: zyT0e1
        url: https://semgrep.dev/playground/r/zyT0e1/python.flask.security.injection.ssrf-requests.ssrf-requests
        origin: community
  pattern-either:
  - patterns:
    - pattern: requests.$FUNC(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.$ROUTE_METHOD($ROUTE, ...)
          def $ROUTE_FUNC(..., $ROUTEVAR, ...):
            ...
            requests.$FUNC(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.$ROUTE_METHOD($ROUTE, ...)
          def $ROUTE_FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            requests.$FUNC(..., <... $INTERM ...>, ...)
  - pattern: requests.$FUNC(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: requests.$FUNC(..., <... flask.request.$W[...] ...>, ...)
  - pattern: requests.$FUNC(..., <... flask.request.$W(...) ...>, ...)
  - pattern: requests.$FUNC(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W.get(...) ...>
        ...
        requests.$FUNC(<... $INTERM ...>, ...)
    - pattern: requests.$FUNC(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W[...] ...>
        ...
        requests.$FUNC(<... $INTERM ...>, ...)
    - pattern: requests.$FUNC(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W(...) ...>
        ...
        requests.$FUNC(<... $INTERM ...>, ...)
    - pattern: requests.$FUNC(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W ...>
        ...
        requests.$FUNC(<... $INTERM ...>, ...)
    - pattern: requests.$FUNC(...)
- id: python.flask.security.audit.render-template-string.render-template-string
  pattern: flask.render_template_string(...)
  metadata:
    cwe:
    - 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html
    category: security
    technology:
    - flask
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string
    shortlink: https://sg.run/8yjE
    semgrep.dev:
      rule:
        rule_id: 5rUOv1
        version_id: o5T571
        url: https://semgrep.dev/playground/r/o5T571/python.flask.security.audit.render-template-string.render-template-string
        origin: community
  message: Found a template created with string formatting. This is susceptible to
    server-side template injection and cross-site scripting attacks.
  languages:
  - python
  severity: WARNING
- id: python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled
  message: Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection.
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://flask-wtf.readthedocs.io/en/stable/csrf.html
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled
    shortlink: https://sg.run/Q5AQ
    semgrep.dev:
      rule:
        rule_id: ReUgXz
        version_id: pZTQBY
        url: https://semgrep.dev/playground/r/pZTQBY/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled
        origin: community
  severity: WARNING
  languages:
  - python
  pattern: $APP.config['WTF_CSRF_ENABLED'] = False
- id: python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content
  patterns:
  - pattern: flask.make_response(...)
  - pattern-not-inside: flask.make_response()
  - pattern-not-inside: flask.make_response("...", ...)
  - pattern-not-inside: 'flask.make_response({"...": "..."}, ...)'
  - pattern-not-inside: flask.make_response(flask.redirect(...), ...)
  - pattern-not-inside: flask.make_response(flask.render_template(...), ...)
  - pattern-not-inside: flask.make_response(flask.jsonify(...), ...)
  - pattern-not-inside: flask.make_response(json.dumps(...), ...)
  - pattern-not-inside: |
      $X = flask.render_template(...)
      ...
      flask.make_response($X, ...)
  - pattern-not-inside: |
      $X = flask.jsonify(...)
      ...
      flask.make_response($X, ...)
  - pattern-not-inside: |
      $X = json.dumps(...)
      ...
      flask.make_response($X, ...)
  message: Be careful with `flask.make_response()`. If this response is rendered onto
    a webpage, this could create a cross-site scripting (XSS) vulnerability. `flask.make_response()`
    will not autoescape HTML. If you are rendering HTML, write your HTML in a template
    file and use `flask.render_template()` which will take care of escaping. If you
    are returning data from an API, consider using `flask.jsonify()`.
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://github.com/python-security/pyt//blob/093a077bcf12d1f58ddeb2d73ddc096623985fb0/examples/vulnerable_code/XSS_assign_to_other_var.py#L11
    - https://flask.palletsprojects.com/en/1.1.x/api/#flask.Flask.make_response
    - https://flask.palletsprojects.com/en/1.1.x/api/#response-objects
    category: security
    technology:
    - flask
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content
    shortlink: https://sg.run/3x3p
    semgrep.dev:
      rule:
        rule_id: AbUz6A
        version_id: 2KT6Dq
        url: https://semgrep.dev/playground/r/2KT6Dq/python.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content
        origin: community
  languages:
  - python
- id: python.flask.security.injection.path-traversal-open.path-traversal-open
  languages:
  - python
  severity: ERROR
  message: Found request data in a call to 'open'. Ensure the request data is validated
    or sanitized, otherwise it could result in path traversal attacks.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.path-traversal-open.path-traversal-open
    shortlink: https://sg.run/PJRW
    semgrep.dev:
      rule:
        rule_id: DbUpOQ
        version_id: rxT8xO
        url: https://semgrep.dev/playground/r/rxT8xO/python.flask.security.injection.path-traversal-open.path-traversal-open
        origin: community
  pattern-either:
  - patterns:
    - pattern: open(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            open(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            with open(..., <... $ROUTEVAR ...>, ...) as $FD:
              ...
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            open(..., <... $INTERM ...>, ...)
  - pattern: open(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: open(..., <... flask.request.$W[...] ...>, ...)
  - pattern: open(..., <... flask.request.$W(...) ...>, ...)
  - pattern: open(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W.get(...) ...>
        ...
        open(<... $INTERM ...>, ...)
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W[...] ...>
        ...
        open(<... $INTERM ...>, ...)
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W(...) ...>
        ...
        open(<... $INTERM ...>, ...)
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W ...>
        ...
        open(<... $INTERM ...>, ...)
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W.get(...) ...>
        ...
        with open(<... $INTERM ...>, ...) as $F:
          ...
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W[...] ...>
        ...
        with open(<... $INTERM ...>, ...) as $F:
          ...
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W(...) ...>
        ...
        with open(<... $INTERM ...>, ...) as $F:
          ...
    - pattern: open(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W ...>
        ...
        with open(<... $INTERM ...>, ...) as $F:
          ...
    - pattern: open(...)
- id: python.django.security.passwords.use-none-for-password-default.use-none-for-password-default
  message: '''$VAR'' is using the empty string as its default and is being used to
    set the password on ''$MODEL''. If you meant to set an unusable password, set
    the default value to ''None'' or call ''set_unusable_password()''.'
  metadata:
    cwe:
    - 'CWE-521: Weak Password Requirements'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.djangoproject.com/en/3.0/ref/contrib/auth/#django.contrib.auth.models.User.set_password
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default
    shortlink: https://sg.run/zvBW
    semgrep.dev:
      rule:
        rule_id: yyUn6Z
        version_id: qkTgLQ
        url: https://semgrep.dev/playground/r/qkTgLQ/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default
        origin: community
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-either:
    - pattern: |
        $VAR = request.$W.get($X, $EMPTY)
        ...
        $MODEL.set_password($VAR)
        ...
        $MODEL.save(...)
    - pattern: |
        def $F(..., $VAR=$EMPTY, ...):
          ...
          $MODEL.set_password($VAR)
  - focus-metavariable: $EMPTY
  fix: |
    None
- id: terraform.lang.security.iam.no-iam-data-exfiltration.no-iam-data-exfiltration
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...,
                {... Resource = "*" ...},
                ...
              ]
              ...
            })
            ...
          }
      - pattern: |
          Action = $ACTION
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
              resources = ["*"]
              ...
            }
            ...
          }
      - pattern: |
          actions = [..., $ACTION, ...]
  - metavariable-pattern:
      metavariable: $ACTION
      pattern-either:
      - pattern: |
          "s3:GetObject"
      - pattern: |
          "ssm:GetParameter*"
      - pattern: |
          "secretsmanager:GetSecretValue"
      - pattern: |
          "rds:CopyDBSnapshot"
      - pattern: |
          "rds:CreateDBSnapshot"
      - pattern: |
          "ssm:*"
      - pattern: |
          "s3:*"
      - pattern: |
          "rds:*"
      - pattern: |
          "rn: secretsmanager:*"
  message: Ensure that IAM policies don't allow data exfiltration actions that are
    not resource-constrained. This can allow the user to read sensitive data they
    don't need to read. Instead, make sure that the user granted these privileges
    are given these permissions on specific resources.
  metadata:
    references:
    - https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMDataExfiltration.py
    - https://cloudsplaining.readthedocs.io/en/latest/glossary/data-exfiltration/
    category: security
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-data-exfiltration.no-iam-data-exfiltration
    shortlink: https://sg.run/pYrN
    semgrep.dev:
      rule:
        rule_id: wdUj1k
        version_id: JdTXgx
        url: https://semgrep.dev/playground/r/JdTXgx/terraform.lang.security.iam.no-iam-data-exfiltration.no-iam-data-exfiltration
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.iam.no-iam-priv-esc-funcs.no-iam-priv-esc-funcs
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...
              ]
              ...
            })
            ...
          }
      - pattern: Action = $ACTION
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
            }
            ...
          }
      - pattern: |
          actions = [..., $ACTION, ...]
  - metavariable-pattern:
      metavariable: $ACTION
      pattern-either:
      - pattern: |
          "iam:AddUserToGroup"
      - pattern: |
          "iam:CreatePolicyVersion"
      - pattern: |
          "iam:SetDefaultPolicyVersion"
      - pattern: |
          "iam:AttachUserPolicy"
      - pattern: |
          "iam:AttachGroupPolicy"
      - pattern: |
          "iam:AttachRolePolicy"
      - pattern: |
          "iam:PutUserPolicy"
      - pattern: |
          "iam:PutGroupPolicy"
      - pattern: |
          "iam:PutRolePolicy"
      - pattern: |
          "glue:UpdateDevEndpoint"
      - pattern: |
          "iam:*"
      - pattern: |
          "glue:*"
  message: Ensure that actions that can result in privilege escalation are not used.
    These actions could potentially result in an attacker gaining full administrator
    access of an AWS account. Try not to use these actions.
  metadata:
    references:
    - https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/
    - https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/
    category: security
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-priv-esc-funcs.no-iam-priv-esc-funcs
    shortlink: https://sg.run/28y5
    semgrep.dev:
      rule:
        rule_id: x8UxLq
        version_id: 5PTZ5z
        url: https://semgrep.dev/playground/r/5PTZ5z/terraform.lang.security.iam.no-iam-priv-esc-funcs.no-iam-priv-esc-funcs
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.iam.no-iam-priv-esc-other-users.no-iam-priv-esc-other-users
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...,
                {... Resource = $RESOURCE ...},
                ...
              ]
              ...
            })
            ...
          }
      - pattern: |
          Action = $ACTION
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
              resources = $RESOURCE
              ...
            }
            ...
          }
      - pattern: |
          actions = [..., $ACTION, ...]
  - metavariable-pattern:
      metavariable: $RESOURCE
      pattern-either:
      - pattern-regex: .*\*.*
  - metavariable-pattern:
      metavariable: $ACTION
      pattern-either:
      - pattern: |
          "iam:CreateAccessKey"
      - pattern: |
          "iam:CreateLoginProfile"
      - pattern: |
          "iam:UpdateLoginProfile"
      - pattern: |
          "iam:*"
  message: Ensure that IAM policies with permissions on other users don't allow for
    privilege escalation. This can lead to an attacker gaining full administrator
    access of AWS accounts. Instead, specify which user the permission should be used
    on or do not use the listed actions. $RESOURCE
  metadata:
    references:
    - https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/
    - https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMPrivilegeEscalation.py
    category: security
    cwe:
    - 'CWE-269: Improper Privilege Management'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-priv-esc-other-users.no-iam-priv-esc-other-users
    shortlink: https://sg.run/XOeA
    semgrep.dev:
      rule:
        rule_id: OrU6jO
        version_id: GxT1wA
        url: https://semgrep.dev/playground/r/GxT1wA/terraform.lang.security.iam.no-iam-priv-esc-other-users.no-iam-priv-esc-other-users
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.iam.no-iam-priv-esc-roles.no-iam-priv-esc-roles
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...
              ]
              ...
            })
            ...
          }
      - pattern: |
          Action = $ACTION
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
            }
            ...
          }
      - pattern: |
          actions = $ACTION
  - metavariable-pattern:
      metavariable: $ACTION
      pattern-either:
      - patterns:
        - pattern: |
            [..., "sts:AssumeRole", ...]
        - pattern: |
            [..., "iam:UpdateAssumeRolePolicy", ...]
      - patterns:
        - pattern: |
            [..., "iam:PassRole", ...]
        - pattern: |
            [..., "lambda:CreateFunction", ...]
        - pattern: |
            [..., "lambda:InvokeFunction", ...]
      - patterns:
        - pattern: |
            [..., "iam:PassRole", ...]
        - pattern: |
            [..., "lambda:CreateFunction", ...]
        - pattern: |
            [..., "lambda:CreateEventSourceMapping", ...]
      - pattern: |
          "lambda:UpdateFunctionCode"
      - patterns:
        - pattern: |
            [..., "iam:PassRole", ...]
        - pattern: |
            [..., "glue:CreateDevEndpoint", ...]
      - patterns:
        - pattern: |
            [..., "iam:PassRole", ...]
        - pattern: |
            [..., "cloudformation:CreateStack", ...]
      - patterns:
        - pattern: |
            [..., "iam:PassRole", ...]
        - pattern: |
            [..., "datapipeline:CreatePipeline", ...]
        - pattern: |
            [..., "datapipeline:PutPipelineDefinition", ...]
  message: Ensure that groups of actions that include iam:PassRole and could result
    in privilege escalation are not all allowed for the same user. These actions could
    result in an attacker gaining full admin access of an AWS account. Try not to
    use these actions in conjuction.
  metadata:
    references:
    - https://cloudsplaining.readthedocs.io/en/latest/glossary/privilege-escalation/
    - https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/
    category: security
    cwe:
    - 'CWE-269: Improper Privilege Management'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-priv-esc-roles.no-iam-priv-esc-roles
    shortlink: https://sg.run/jwrA
    semgrep.dev:
      rule:
        rule_id: eqUzR3
        version_id: RGTyv5
        url: https://semgrep.dev/playground/r/RGTyv5/terraform.lang.security.iam.no-iam-priv-esc-roles.no-iam-priv-esc-roles
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.iam.no-iam-resource-exposure.no-iam-resource-exposure
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...
              ]
              ...
            })
            ...
          }
      - pattern: |
          Action = $ACTION
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
            }
            ...
          }
      - pattern: |
          actions = [..., $ACTION, ...]
  - metavariable-pattern:
      metavariable: $ACTION
      pattern-either:
      - pattern: |
          "acm-pca:CreatePermission"
      - pattern: |
          "acm-pca:DeletePermission"
      - pattern: |
          "acm-pca:DeletePolicy"
      - pattern: |
          "acm-pca:PutPolicy"
      - pattern: |
          "apigateway:UpdateRestApiPolicy"
      - pattern: |
          "backup:DeleteBackupVaultAccessPolicy"
      - pattern: |
          "backup:PutBackupVaultAccessPolicy"
      - pattern: |
          "chime:DeleteVoiceConnectorTerminationCredentials"
      - pattern: |
          "chime:PutVoiceConnectorTerminationCredentials"
      - pattern: |
          "cloudformation:SetStackPolicy"
      - pattern: |
          "cloudsearch:UpdateServiceAccessPolicies"
      - pattern: |
          "codeartifact:DeleteDomainPermissionsPolicy"
      - pattern: |
          "codeartifact:DeleteRepositoryPermissionsPolicy"
      - pattern: |
          "codebuild:DeleteResourcePolicy"
      - pattern: |
          "codebuild:DeleteSourceCredentials"
      - pattern: |
          "codebuild:ImportSourceCredentials"
      - pattern: |
          "codebuild:PutResourcePolicy"
      - pattern: |
          "codeguru-profiler:PutPermission"
      - pattern: |
          "codeguru-profiler:RemovePermission"
      - pattern: |
          "codestar:AssociateTeamMember"
      - pattern: |
          "codestar:CreateProject"
      - pattern: |
          "codestar:DeleteProject"
      - pattern: |
          "codestar:DisassociateTeamMember"
      - pattern: |
          "codestar:UpdateTeamMember"
      - pattern: |
          "cognito-identity:CreateIdentityPool"
      - pattern: |
          "cognito-identity:DeleteIdentities"
      - pattern: |
          "cognito-identity:DeleteIdentityPool"
      - pattern: |
          "cognito-identity:GetId"
      - pattern: |
          "cognito-identity:MergeDeveloperIdentities"
      - pattern: |
          "cognito-identity:SetIdentityPoolRoles"
      - pattern: |
          "cognito-identity:UnlinkDeveloperIdentity"
      - pattern: |
          "cognito-identity:UnlinkIdentity"
      - pattern: |
          "cognito-identity:UpdateIdentityPool"
      - pattern: |
          "deeplens:AssociateServiceRoleToAccount"
      - pattern: |
          "ds:CreateConditionalForwarder"
      - pattern: |
          "ds:CreateDirectory"
      - pattern: |
          "ds:CreateMicrosoftAD"
      - pattern: |
          "ds:CreateTrust"
      - pattern: |
          "ds:ShareDirectory"
      - pattern: |
          "ec2:CreateNetworkInterfacePermission"
      - pattern: |
          "ec2:DeleteNetworkInterfacePermission"
      - pattern: |
          "ec2:ModifySnapshotAttribute"
      - pattern: |
          "ec2:ModifyVpcEndpointServicePermissions"
      - pattern: |
          "ec2:ResetSnapshotAttribute"
      - pattern: |
          "ecr:DeleteRepositoryPolicy"
      - pattern: |
          "ecr:SetRepositoryPolicy"
      - pattern: |
          "elasticfilesystem:DeleteFileSystemPolicy"
      - pattern: |
          "elasticfilesystem:PutFileSystemPolicy"
      - pattern: |
          "elasticmapreduce:PutBlockPublicAccessConfiguration"
      - pattern: |
          "es:CreateElasticsearchDomain"
      - pattern: |
          "es:UpdateElasticsearchDomainConfig"
      - pattern: |
          "glacier:AbortVaultLock"
      - pattern: |
          "glacier:CompleteVaultLock"
      - pattern: |
          "glacier:DeleteVaultAccessPolicy"
      - pattern: |
          "glacier:InitiateVaultLock"
      - pattern: |
          "glacier:SetDataRetrievalPolicy"
      - pattern: |
          "glacier:SetVaultAccessPolicy"
      - pattern: |
          "glue:DeleteResourcePolicy"
      - pattern: |
          "glue:PutResourcePolicy"
      - pattern: |
          "greengrass:AssociateServiceRoleToAccount"
      - pattern: |
          "health:DisableHealthServiceAccessForOrganization"
      - pattern: |
          "health:EnableHealthServiceAccessForOrganization"
      - pattern: |
          "iam:AddClientIDToOpenIDConnectProvider"
      - pattern: |
          "iam:AddRoleToInstanceProfile"
      - pattern: |
          "iam:AddUserToGroup"
      - pattern: |
          "iam:AttachGroupPolicy"
      - pattern: |
          "iam:AttachRolePolicy"
      - pattern: |
          "iam:AttachUserPolicy"
      - pattern: |
          "iam:ChangePassword"
      - pattern: |
          "iam:CreateAccessKey"
      - pattern: |
          "iam:CreateAccountAlias"
      - pattern: |
          "iam:CreateGroup"
      - pattern: |
          "iam:CreateInstanceProfile"
      - pattern: |
          "iam:CreateLoginProfile"
      - pattern: |
          "iam:CreateOpenIDConnectProvider"
      - pattern: |
          "iam:CreatePolicy"
      - pattern: |
          "iam:CreatePolicyVersion"
      - pattern: |
          "iam:CreateRole"
      - pattern: |
          "iam:CreateSAMLProvider"
      - pattern: |
          "iam:CreateServiceLinkedRole"
      - pattern: |
          "iam:CreateServiceSpecificCredential"
      - pattern: |
          "iam:CreateUser"
      - pattern: |
          "iam:CreateVirtualMFADevice"
      - pattern: |
          "iam:DeactivateMFADevice"
      - pattern: |
          "iam:DeleteAccessKey"
      - pattern: |
          "iam:DeleteAccountAlias"
      - pattern: |
          "iam:DeleteAccountPasswordPolicy"
      - pattern: |
          "iam:DeleteGroup"
      - pattern: |
          "iam:DeleteGroupPolicy"
      - pattern: |
          "iam:DeleteInstanceProfile"
      - pattern: |
          "iam:DeleteLoginProfile"
      - pattern: |
          "iam:DeleteOpenIDConnectProvider"
      - pattern: |
          "iam:DeletePolicy"
      - pattern: |
          "iam:DeletePolicyVersion"
      - pattern: |
          "iam:DeleteRole"
      - pattern: |
          "iam:DeleteRolePermissionsBoundary"
      - pattern: |
          "iam:DeleteRolePolicy"
      - pattern: |
          "iam:DeleteSAMLProvider"
      - pattern: |
          "iam:DeleteSSHPublicKey"
      - pattern: |
          "iam:DeleteServerCertificate"
      - pattern: |
          "iam:DeleteServiceLinkedRole"
      - pattern: |
          "iam:DeleteServiceSpecificCredential"
      - pattern: |
          "iam:DeleteSigningCertificate"
      - pattern: |
          "iam:DeleteUser"
      - pattern: |
          "iam:DeleteUserPermissionsBoundary"
      - pattern: |
          "iam:DeleteUserPolicy"
      - pattern: |
          "iam:DeleteVirtualMFADevice"
      - pattern: |
          "iam:DetachGroupPolicy"
      - pattern: |
          "iam:DetachRolePolicy"
      - pattern: |
          "iam:DetachUserPolicy"
      - pattern: |
          "iam:EnableMFADevice"
      - pattern: |
          "iam:PassRole"
      - pattern: |
          "iam:PutGroupPolicy"
      - pattern: |
          "iam:PutRolePermissionsBoundary"
      - pattern: |
          "iam:PutRolePolicy"
      - pattern: |
          "iam:PutUserPermissionsBoundary"
      - pattern: |
          "iam:PutUserPolicy"
      - pattern: |
          "iam:RemoveClientIDFromOpenIDConnectProvider"
      - pattern: |
          "iam:RemoveRoleFromInstanceProfile"
      - pattern: |
          "iam:RemoveUserFromGroup"
      - pattern: |
          "iam:ResetServiceSpecificCredential"
      - pattern: |
          "iam:ResyncMFADevice"
      - pattern: |
          "iam:SetDefaultPolicyVersion"
      - pattern: |
          "iam:SetSecurityTokenServicePreferences"
      - pattern: |
          "iam:UpdateAccessKey"
      - pattern: |
          "iam:UpdateAccountPasswordPolicy"
      - pattern: |
          "iam:UpdateAssumeRolePolicy"
      - pattern: |
          "iam:UpdateGroup"
      - pattern: |
          "iam:UpdateLoginProfile"
      - pattern: |
          "iam:UpdateOpenIDConnectProviderThumbprint"
      - pattern: |
          "iam:UpdateRole"
      - pattern: |
          "iam:UpdateRoleDescription"
      - pattern: |
          "iam:UpdateSAMLProvider"
      - pattern: |
          "iam:UpdateSSHPublicKey"
      - pattern: |
          "iam:UpdateServerCertificate"
      - pattern: |
          "iam:UpdateServiceSpecificCredential"
      - pattern: |
          "iam:UpdateSigningCertificate"
      - pattern: |
          "iam:UpdateUser"
      - pattern: |
          "iam:UploadSSHPublicKey"
      - pattern: |
          "iam:UploadServerCertificate"
      - pattern: |
          "iam:UploadSigningCertificate"
      - pattern: |
          "imagebuilder:PutComponentPolicy"
      - pattern: |
          "imagebuilder:PutImagePolicy"
      - pattern: |
          "imagebuilder:PutImageRecipePolicy"
      - pattern: |
          "iot:AttachPolicy"
      - pattern: |
          "iot:AttachPrincipalPolicy"
      - pattern: |
          "iot:DetachPolicy"
      - pattern: |
          "iot:DetachPrincipalPolicy"
      - pattern: |
          "iot:SetDefaultAuthorizer"
      - pattern: |
          "iot:SetDefaultPolicyVersion"
      - pattern: |
          "iotsitewise:CreateAccessPolicy"
      - pattern: |
          "iotsitewise:DeleteAccessPolicy"
      - pattern: |
          "iotsitewise:UpdateAccessPolicy"
      - pattern: |
          "kms:CreateGrant"
      - pattern: |
          "kms:PutKeyPolicy"
      - pattern: |
          "kms:RetireGrant"
      - pattern: |
          "kms:RevokeGrant"
      - pattern: |
          "lakeformation:BatchGrantPermissions"
      - pattern: |
          "lakeformation:BatchRevokePermissions"
      - pattern: |
          "lakeformation:GrantPermissions"
      - pattern: |
          "lakeformation:PutDataLakeSettings"
      - pattern: |
          "lakeformation:RevokePermissions"
      - pattern: |
          "lambda:AddLayerVersionPermission"
      - pattern: |
          "lambda:AddPermission"
      - pattern: |
          "lambda:DisableReplication"
      - pattern: |
          "lambda:EnableReplication"
      - pattern: |
          "lambda:RemoveLayerVersionPermission"
      - pattern: |
          "lambda:RemovePermission"
      - pattern: |
          "license-manager:UpdateServiceSettings"
      - pattern: |
          "lightsail:GetRelationalDatabaseMasterUserPassword"
      - pattern: |
          "logs:DeleteResourcePolicy"
      - pattern: |
          "logs:PutResourcePolicy"
      - pattern: |
          "mediapackage:RotateIngestEndpointCredentials"
      - pattern: |
          "mediastore:DeleteContainerPolicy"
      - pattern: |
          "mediastore:PutContainerPolicy"
      - pattern: |
          "opsworks:SetPermission"
      - pattern: |
          "opsworks:UpdateUserProfile"
      - pattern: |
          "quicksight:CreateAdmin"
      - pattern: |
          "quicksight:CreateGroup"
      - pattern: |
          "quicksight:CreateGroupMembership"
      - pattern: |
          "quicksight:CreateIAMPolicyAssignment"
      - pattern: |
          "quicksight:CreateUser"
      - pattern: |
          "quicksight:DeleteGroup"
      - pattern: |
          "quicksight:DeleteGroupMembership"
      - pattern: |
          "quicksight:DeleteIAMPolicyAssignment"
      - pattern: |
          "quicksight:DeleteUser"
      - pattern: |
          "quicksight:DeleteUserByPrincipalId"
      - pattern: |
          "quicksight:RegisterUser"
      - pattern: |
          "quicksight:UpdateDashboardPermissions"
      - pattern: |
          "quicksight:UpdateGroup"
      - pattern: |
          "quicksight:UpdateIAMPolicyAssignment"
      - pattern: |
          "quicksight:UpdateTemplatePermissions"
      - pattern: |
          "quicksight:UpdateUser"
      - pattern: |
          "ram:AcceptResourceShareInvitation"
      - pattern: |
          "ram:AssociateResourceShare"
      - pattern: |
          "ram:CreateResourceShare"
      - pattern: |
          "ram:DeleteResourceShare"
      - pattern: |
          "ram:DisassociateResourceShare"
      - pattern: |
          "ram:EnableSharingWithAwsOrganization"
      - pattern: |
          "ram:RejectResourceShareInvitation"
      - pattern: |
          "ram:UpdateResourceShare"
      - pattern: |
          "rds:AuthorizeDBSecurityGroupIngress"
      - pattern: |
          "rds-db:connect"
      - pattern: |
          "redshift:AuthorizeSnapshotAccess"
      - pattern: |
          "redshift:CreateClusterUser"
      - pattern: |
          "redshift:CreateSnapshotCopyGrant"
      - pattern: |
          "redshift:JoinGroup"
      - pattern: |
          "redshift:ModifyClusterIamRoles"
      - pattern: |
          "redshift:RevokeSnapshotAccess"
      - pattern: |
          "route53resolver:PutResolverRulePolicy"
      - pattern: |
          "s3:BypassGovernanceRetention"
      - pattern: |
          "s3:DeleteAccessPointPolicy"
      - pattern: |
          "s3:DeleteBucketPolicy"
      - pattern: |
          "s3:ObjectOwnerOverrideToBucketOwner"
      - pattern: |
          "s3:PutAccessPointPolicy"
      - pattern: |
          "s3:PutAccountPublicAccessBlock"
      - pattern: |
          "s3:PutBucketAcl"
      - pattern: |
          "s3:PutBucketPolicy"
      - pattern: |
          "s3:PutBucketPublicAccessBlock"
      - pattern: |
          "s3:PutObjectAcl"
      - pattern: |
          "s3:PutObjectVersionAcl"
      - pattern: |
          "secretsmanager:DeleteResourcePolicy"
      - pattern: |
          "secretsmanager:PutResourcePolicy"
      - pattern: |
          "secretsmanager:ValidateResourcePolicy"
      - pattern: |
          "servicecatalog:CreatePortfolioShare"
      - pattern: |
          "servicecatalog:DeletePortfolioShare"
      - pattern: |
          "sns:AddPermission"
      - pattern: |
          "sns:CreateTopic"
      - pattern: |
          "sns:RemovePermission"
      - pattern: |
          "sns:SetTopicAttributes"
      - pattern: |
          "sqs:AddPermission"
      - pattern: |
          "sqs:CreateQueue"
      - pattern: |
          "sqs:RemovePermission"
      - pattern: |
          "sqs:SetQueueAttributes"
      - pattern: |
          "ssm:ModifyDocumentPermission"
      - pattern: |
          "sso:AssociateDirectory"
      - pattern: |
          "sso:AssociateProfile"
      - pattern: |
          "sso:CreateApplicationInstance"
      - pattern: |
          "sso:CreateApplicationInstanceCertificate"
      - pattern: |
          "sso:CreatePermissionSet"
      - pattern: |
          "sso:CreateProfile"
      - pattern: |
          "sso:CreateTrust"
      - pattern: |
          "sso:DeleteApplicationInstance"
      - pattern: |
          "sso:DeleteApplicationInstanceCertificate"
      - pattern: |
          "sso:DeletePermissionSet"
      - pattern: |
          "sso:DeletePermissionsPolicy"
      - pattern: |
          "sso:DeleteProfile"
      - pattern: |
          "sso:DisassociateDirectory"
      - pattern: |
          "sso:DisassociateProfile"
      - pattern: |
          "sso:ImportApplicationInstanceServiceProviderMetadata"
      - pattern: |
          "sso:PutPermissionsPolicy"
      - pattern: |
          "sso:StartSSO"
      - pattern: |
          "sso:UpdateApplicationInstanceActiveCertificate"
      - pattern: |
          "sso:UpdateApplicationInstanceDisplayData"
      - pattern: |
          "sso:UpdateApplicationInstanceResponseConfiguration"
      - pattern: |
          "sso:UpdateApplicationInstanceResponseSchemaConfiguration"
      - pattern: |
          "sso:UpdateApplicationInstanceSecurityConfiguration"
      - pattern: |
          "sso:UpdateApplicationInstanceServiceProviderConfiguration"
      - pattern: |
          "sso:UpdateApplicationInstanceStatus"
      - pattern: |
          "sso:UpdateDirectoryAssociation"
      - pattern: |
          "sso:UpdatePermissionSet"
      - pattern: |
          "sso:UpdateProfile"
      - pattern: |
          "sso:UpdateSSOConfiguration"
      - pattern: |
          "sso:UpdateTrust"
      - pattern: |
          "sso-directory:AddMemberToGroup"
      - pattern: |
          "sso-directory:CreateAlias"
      - pattern: |
          "sso-directory:CreateGroup"
      - pattern: |
          "sso-directory:CreateUser"
      - pattern: |
          "sso-directory:DeleteGroup"
      - pattern: |
          "sso-directory:DeleteUser"
      - pattern: |
          "sso-directory:DisableUser"
      - pattern: |
          "sso-directory:EnableUser"
      - pattern: |
          "sso-directory:RemoveMemberFromGroup"
      - pattern: |
          "sso-directory:UpdateGroup"
      - pattern: |
          "sso-directory:UpdatePassword"
      - pattern: |
          "sso-directory:UpdateUser"
      - pattern: |
          "sso-directory:VerifyEmail"
      - pattern: |
          "storagegateway:DeleteChapCredentials"
      - pattern: |
          "storagegateway:SetLocalConsolePassword"
      - pattern: |
          "storagegateway:SetSMBGuestPassword"
      - pattern: |
          "storagegateway:UpdateChapCredentials"
      - pattern: |
          "waf:DeletePermissionPolicy"
      - pattern: |
          "waf:PutPermissionPolicy"
      - pattern: |
          "waf-regional:DeletePermissionPolicy"
      - pattern: |
          "waf-regional:PutPermissionPolicy"
      - pattern: |
          "wafv2:CreateWebACL"
      - pattern: |
          "wafv2:DeletePermissionPolicy"
      - pattern: |
          "wafv2:DeleteWebACL"
      - pattern: |
          "wafv2:PutPermissionPolicy"
      - pattern: |
          "wafv2:UpdateWebACL"
      - pattern: |
          "worklink:UpdateDevicePolicyConfiguration"
      - pattern: |
          "workmail:ResetPassword"
      - pattern: |
          "workmail:ResetUserPassword"
      - pattern: |
          "xray:PutEncryptionConfig"
      - pattern: |
          "worklink:*"
      - pattern: |
          "route53resolver:*"
      - pattern: |
          "es:*"
      - pattern: |
          "greengrass:*"
      - pattern: |
          "redshift:*"
      - pattern: |
          "license-manager:*"
      - pattern: |
          "rds:*"
      - pattern: |
          "lambda:*"
      - pattern: |
          "elasticfilesystem:*"
      - pattern: |
          "logs:*"
      - pattern: |
          "sso:*"
      - pattern: |
          "waf:*"
      - pattern: |
          "mediastore:*"
      - pattern: |
          "acm-pca:*"
      - pattern: |
          "sso-directory:*"
      - pattern: |
          "imagebuilder:*"
      - pattern: |
          "sqs:*"
      - pattern: |
          "codeguru-profiler:*"
      - pattern: |
          "wafv2:*"
      - pattern: |
          "cloudformation:*"
      - pattern: |
          "xray:*"
      - pattern: |
          "codeartifact:*"
      - pattern: |
          "iotsitewise:*"
      - pattern: |
          "workmail:*"
      - pattern: |
          "glue:*"
      - pattern: |
          "deeplens:*"
      - pattern: |
          "chime:*"
      - pattern: |
          "mediapackage:*"
      - pattern: |
          "opsworks:*"
      - pattern: |
          "ds:*"
      - pattern: |
          "ram:*"
      - pattern: |
          "iam:*"
      - pattern: |
          "waf-regional:*"
      - pattern: |
          "glacier:*"
      - pattern: |
          "cloudsearch:*"
      - pattern: |
          "lakeformation:*"
      - pattern: |
          "elasticmapreduce:*"
      - pattern: |
          "quicksight:*"
      - pattern: |
          "sns:*"
      - pattern: |
          "ec2:*"
      - pattern: |
          "health:*"
      - pattern: |
          "lightsail:*"
      - pattern: |
          "codestar:*"
      - pattern: |
          "kms:*"
      - pattern: |
          "codebuild:*"
      - pattern: |
          "s3:*"
      - pattern: |
          "cognito-identity:*"
      - pattern: |
          "apigateway:*"
      - pattern: |
          "rds-db:*"
      - pattern: |
          "iot:*"
      - pattern: |
          "backup:*"
      - pattern: |
          "secretsmanager:*"
      - pattern: |
          "servicecatalog:*"
      - pattern: |
          "ssm:*"
      - pattern: |
          "storagegateway:*"
      - pattern: |
          "ecr:*"
  message: Ensure IAM policies don't allow resource exposure. These actions can expose
    AWS resources to the public. For example `ecr:SetRepositoryPolicy` could let an
    attacker retrieve container images. Instead, use another action that doesn't expose
    AWS resources.
  metadata:
    references:
    - https://cloudsplaining.readthedocs.io/en/latest/glossary/resource-exposure/
    - https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/IAMPermissionsManagement.py
    category: security
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-resource-exposure.no-iam-resource-exposure
    shortlink: https://sg.run/18rD
    semgrep.dev:
      rule:
        rule_id: v8U9r0
        version_id: A8TBY6
        url: https://semgrep.dev/playground/r/A8TBY6/terraform.lang.security.iam.no-iam-resource-exposure.no-iam-resource-exposure
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.lang.security.iam.no-iam-star-actions.no-iam-star-actions
  patterns:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          resource $TYPE "..." {
            ...
            policy = jsonencode({
              ...
              Statement = [
                ...
              ]
              ...
            })
            ...
          }
      - pattern-either:
        - pattern: Action = "*"
        - pattern: Action = ["*"]
      - metavariable-pattern:
          metavariable: $TYPE
          pattern-either:
          - pattern: |
              "aws_iam_role_policy"
          - pattern: |
              "aws_iam_policy"
          - pattern: |
              "aws_iam_user_policy"
          - pattern: |
              "aws_iam_group_policy"
    - patterns:
      - pattern-inside: |
          data aws_iam_policy_document "..." {
            ...
            statement {
              ...
            }
            ...
          }
      - pattern: |
          actions = ["*"]
  message: Ensure that no IAM policies allow "*" as a statement's actions. This allows
    all actions to be performed on the specified resources, and is a violation of
    the principle of least privilege. Instead, specify the actions that a certain
    user or policy is allowed to take.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_policy
    - https://github.com/bridgecrewio/checkov/blob/ca830e14745c2c8e1b941985f305abe985d7f1f9/checkov/terraform/checks/data/aws/StarActionPolicyDocument.py
    category: security
    cwe:
    - 'CWE-269: Improper Privilege Management'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    technology:
    - terraform
    - aws
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    source: https://semgrep.dev/r/terraform.lang.security.iam.no-iam-star-actions.no-iam-star-actions
    shortlink: https://sg.run/9rZ4
    semgrep.dev:
      rule:
        rule_id: d8Uew3
        version_id: BjTRYE
        url: https://semgrep.dev/playground/r/BjTRYE/terraform.lang.security.iam.no-iam-star-actions.no-iam-star-actions
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
  message: Detection of dangerouslySetInnerHTML from non-constant definition. This
    can inadvertently expose users to cross-site scripting (XSS) attacks if this comes
    from user-provided input. If you have to use dangerouslySetInnerHTML, consider
    using a sanitization library such as DOMPurify to sanitize your HTML.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
    category: security
    confidence: MEDIUM
    technology:
    - react
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    source: https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
    shortlink: https://sg.run/rAx6
    semgrep.dev:
      rule:
        rule_id: x8UWvK
        version_id: A8TodP
        url: https://semgrep.dev/playground/r/A8TodP/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml
        origin: community
  languages:
  - typescript
  - javascript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function ...({..., $X, ...}) { ... }
      - pattern-inside: |
          function ...(..., $X, ...) { ... }
    - focus-metavariable: $X
    - pattern-not-inside: |
        $F. ... .$SANITIZEUNC(...)
  pattern-sinks:
  - patterns:
    - focus-metavariable: $X
    - pattern-either:
      - pattern: |
          {...,dangerouslySetInnerHTML: {__html: $X},...}
      - pattern: |
          <$Y ... dangerouslySetInnerHTML={{__html: $X}} />
    - pattern-not: |
        <$Y ... dangerouslySetInnerHTML={{__html: "..."}} />
    - pattern-not: |
        {...,dangerouslySetInnerHTML:{__html: "..."},...}
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            {...}
        metavariable: $X
    - pattern-not: |
        <... {__html: "..."} ...>
    - pattern-not: |
        <... {__html: `...`} ...>
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: typescript.nestjs.security.audit.nestjs-header-cors-any.nestjs-header-cors-any
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  metadata:
    cwe:
    - 'CWE-183: Permissive List of Allowed Inputs'
    asvs:
      section: 'V14: Configuration Verification Requirements'
      control_id: 14.4.8 Permissive CORS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x22-V14-Config.md#v144-http-security-headers-requirements
      version: '4'
    category: security
    technology:
    - nestjs
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.nestjs.security.audit.nestjs-header-cors-any.nestjs-header-cors-any
    shortlink: https://sg.run/ljBL
    semgrep.dev:
      rule:
        rule_id: pKUG17
        version_id: zyTXjr
        url: https://semgrep.dev/playground/r/zyTXjr/typescript.nestjs.security.audit.nestjs-header-cors-any.nestjs-header-cors-any
        origin: community
  languages:
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: |
      class $CN {
          @Header("=~/[Aa][Cc][Cc][Ee][Ss][Ss]-[Cc][Oo][Nn][Tt][Rr][Oo][Ll]-[Aa][Ll][Ll][Oo][Ww]-[Oo][Rr][Ii][Gg][Ii][Nn]/", '*')
          $FN(...) {
              ...
          }
      }
  - pattern: |
      NestFactory.create($MODULE, {cors: true})
  - pattern: |
      NestFactory.create($MODULE, {cors: {origin: '*'}})
  - pattern: |
      $APP.enableCors()
  - pattern: |
      $APP.enableCors({origin: '*'})
- id: typescript.nestjs.security.audit.nestjs-header-xss-disabled.nestjs-header-xss-disabled
  message: X-XSS-Protection header is set to 0. This will disable the browser's XSS
    Filter.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    technology:
    - nestjs
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.nestjs.security.audit.nestjs-header-xss-disabled.nestjs-header-xss-disabled
    shortlink: https://sg.run/YgGW
    semgrep.dev:
      rule:
        rule_id: 2ZU4zx
        version_id: pZTqkx
        url: https://semgrep.dev/playground/r/pZTqkx/typescript.nestjs.security.audit.nestjs-header-xss-disabled.nestjs-header-xss-disabled
        origin: community
  languages:
  - typescript
  severity: WARNING
  pattern: |
    class $CN {
        ...
        @Header("=~/[Xx]-[Xx][Ss][Ss]-[Pp][Rr][Oo][Tt][Ee][Cc][Tt][Ii][Oo][Nn]/", '0')
        $FN(...) {
            ...
        }
        ...
    }
- id: typescript.react.security.audit.react-css-injection.react-css-injection
  message: this rule has been deprecated.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1
    category: security
    deprecated: true
    technology:
    - react
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-css-injection.react-css-injection
    shortlink: https://sg.run/yze8
    semgrep.dev:
      rule:
        rule_id: wdU861
        version_id: X0ToOo
        url: https://semgrep.dev/playground/r/X0ToOo/typescript.react.security.audit.react-css-injection.react-css-injection
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: typescript.react.security.audit.react-props-injection.react-props-injection
  message: this rule has been deprecated.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    deprecated: true
    references:
    - https://medium.com/dailyjs/exploiting-script-injection-flaws-in-reactjs-883fb1fe36c1
    category: security
    technology:
    - react
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-props-injection.react-props-injection
    shortlink: https://sg.run/dg6P
    semgrep.dev:
      rule:
        rule_id: L1U47z
        version_id: xyT9v6
        url: https://semgrep.dev/playground/r/xyT9v6/typescript.react.security.audit.react-props-injection.react-props-injection
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern: a()
  - pattern: b()
- id: trailofbits.go.questionable-assignment.questionable-assignment
  patterns:
  - pattern-either:
    - pattern: '..., $X . $Y, ..., err = ...'
    - pattern: '..., $X . $Y, ..., err := ...'
  message: Should `$X` be modified when an error could be returned?
  languages:
  - go
  severity: WARNING
  metadata:
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.questionable-assignment.questionable-assignment
    shortlink: https://sg.run/qq6y
    semgrep.dev:
      rule:
        rule_id: gxUYAJ
        version_id: BjT7rO
        url: https://semgrep.dev/playground/r/BjT7rO/trailofbits.go.questionable-assignment.questionable-assignment
        origin: community
- id: trailofbits.go.waitgroup-add-called-inside-goroutine.waitgroup-add-called-inside-goroutine
  message: |
    Calling `$WG.Add` inside of an anonymous goroutine may result in `$WG.Wait`
    waiting for more or less calls to `$WG.Done()` than expected
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Calls to `sync.WaitGroup.Add` inside of anonymous goroutines
    references:
    - https://go101.org/article/concurrent-common-mistakes.html
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.waitgroup-add-called-inside-goroutine.waitgroup-add-called-inside-goroutine
    shortlink: https://sg.run/z98W
    semgrep.dev:
      rule:
        rule_id: JDUQ3v
        version_id: X0Tj0R
        url: https://semgrep.dev/playground/r/X0Tj0R/trailofbits.go.waitgroup-add-called-inside-goroutine.waitgroup-add-called-inside-goroutine
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $WG := &sync.WaitGroup{}
        ...
        go func(...) {
          ...
          $WG.Add(...)
          ...
        }(...)
        ...
        $WG.Wait()
    - pattern: |
        var $WG sync.WaitGroup
        ...
        go func(...) {
          ...
          $WG.Add(...)
          ...
        }(...)
        ...
        $WG.Wait()
  - pattern-not-inside: |
      for ... {
        ...
        $WG.Add(...)
        ...
      }
- id: trailofbits.go.waitgroup-wait-inside-loop.waitgroup-wait-inside-loop
  message: Calling `$WG.Wait()` inside a loop blocks the call to `$WG.Done()`
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-667: Improper Locking'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Calls to `sync.WaitGroup.Wait` inside a loop
    references:
    - https://go101.org/article/concurrent-common-mistakes.html
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.waitgroup-wait-inside-loop.waitgroup-wait-inside-loop
    shortlink: https://sg.run/pkGL
    semgrep.dev:
      rule:
        rule_id: 5rU8Po
        version_id: jQT40o
        url: https://semgrep.dev/playground/r/jQT40o/trailofbits.go.waitgroup-wait-inside-loop.waitgroup-wait-inside-loop
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        var $WG sync.WaitGroup
        ...
        for ... {
          ...
          go func(...){
            ...
            defer $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
    - pattern: |
        $WG := &sync.WaitGroup{}
        ...
        for ... {
          ...
          go func(...){
            ...
            defer $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
    - pattern: |
        var $WG sync.WaitGroup
        ...
        for ... {
          ...
          go func(...){
            ...
            $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
    - pattern: |
        $WG := &sync.WaitGroup{}
        ...
        for ... {
          ...
          go func(...){
            ...
            $WG.Done()
            ...
          }()
          ...
          $WG.Wait()
          ...
        }
- id: python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open.insecure-openerdirector-open
  message: Detected an unsecured transmission channel. 'OpenerDirector.open(...)'
    is being used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open.insecure-openerdirector-open
    shortlink: https://sg.run/qxKz
    semgrep.dev:
      rule:
        rule_id: pKUO9Q
        version_id: 44TY3G
        url: https://semgrep.dev/playground/r/44TY3G/python.lang.security.audit.insecure-transport.urllib.insecure-openerdirector-open.insecure-openerdirector-open
        origin: community
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.OpenerDirector(...).open("=~/[Hh][Tt][Tt][Pp]://.*/",
      ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: $OPENERDIRECTOR.open("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
        ...
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.open($URL, ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.OpenerDirector(...).open($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.OpenerDirector(...).open($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.OpenerDirector(...)
            ...
        - pattern: $OPENERDIRECTOR.open($URL, ...)
- id: generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key
  pattern-regex: (?i)sonar.{0,50}(\\\"|'|`)?[0-9a-f]{40}(\\\"|'|`)?
  languages:
  - regex
  message: SonarQube Docs API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - sonarqube
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key
    shortlink: https://sg.run/x10P
    semgrep.dev:
      rule:
        rule_id: QrUzP1
        version_id: YDTzdA
        url: https://semgrep.dev/playground/r/YDTzdA/generic.secrets.security.detected-sonarqube-docs-api-key.detected-sonarqube-docs-api-key
        origin: community
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-urlretrieve
  message: Detected 'urllib.urlretrieve()' using 'http://'. This request will not
    be encrypted. Use 'https://' instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-urlretrieve
    shortlink: https://sg.run/1Zqw
    semgrep.dev:
      rule:
        rule_id: kxUk4N
        version_id: 0bT6OB
        url: https://semgrep.dev/playground/r/0bT6OB/python.lang.security.audit.insecure-transport.urllib.insecure-urlretrieve.insecure-urlretrieve
        origin: community
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
  pattern-either:
  - pattern: urllib.request.urlretrieve("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.urlretrieve($URL, ...)
  - pattern: |
      def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlretrieve($URL, ...)
- id: generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key
  pattern-regex: '[hH][eE][rR][oO][kK][uU].*[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'
  languages:
  - regex
  message: Heroku API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - heroku
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key
    shortlink: https://sg.run/pxXR
    semgrep.dev:
      rule:
        rule_id: x8UnOB
        version_id: LjTxj8
        url: https://semgrep.dev/playground/r/LjTxj8/generic.secrets.security.detected-heroku-api-key.detected-heroku-api-key
        origin: community
- id: go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
  patterns:
  - pattern-either:
    - pattern: |
        $SMTH.MethodByName($NAME,...)
    - pattern: |
        $SMTH.FieldByName($NAME,...)
  - pattern-not: |
      $SMTH.MethodByName("...",...)
  - pattern-not: |
      $SMTH.FieldByName("...",...)
  - pattern-inside: |
      import "reflect"
      ...
  message: If an attacker can supply values that the application then uses to determine
    which method or field to invoke, the potential exists for the attacker to create
    control flow paths through the application that were not intended by the application
    developers. This attack vector may allow the attacker to bypass authentication
    or access control checks or otherwise cause the application to behave in an unexpected
    manner.
  metadata:
    cwe:
    - 'CWE-470: Use of Externally-Controlled Input to Select Classes or Code (''Unsafe
      Reflection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - go
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
    shortlink: https://sg.run/R8Xv
    semgrep.dev:
      rule:
        rule_id: BYUBdJ
        version_id: 6xTAPk
        url: https://semgrep.dev/playground/r/6xTAPk/go.lang.security.audit.unsafe-reflect-by-name.unsafe-reflect-by-name
        origin: community
  severity: WARNING
  languages:
  - go
- id: python.django.security.audit.unvalidated-password.unvalidated-password
  patterns:
  - pattern-not-inside: |
      if <... django.contrib.auth.password_validation.validate_password(...) ...>:
          ...
  - pattern-not-inside: |
      django.contrib.auth.password_validation.validate_password(...)
      ...
  - pattern-not-inside: |
      try:
        ...
        django.contrib.auth.password_validation.validate_password(...)
        ...
      except $EX:
        ...
      ...
  - pattern-not-inside: |
      try:
        ...
        django.contrib.auth.password_validation.validate_password(...)
        ...
      except $EX as $E:
        ...
      ...
  - pattern-not: UserModel().set_password($X)
  - pattern: $MODEL.set_password($X)
  fix: |
    if django.contrib.auth.password_validation.validate_password($X, user=$MODEL):
            $MODEL.set_password($X)
  message: The password on '$MODEL' is being set without validating the password.
    Call django.contrib.auth.password_validation.validate_password() with validation
    functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/
    for more information.
  metadata:
    cwe:
    - 'CWE-521: Weak Password Requirements'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#module-django.contrib.auth.password_validation
    category: security
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password
    shortlink: https://sg.run/OPBL
    semgrep.dev:
      rule:
        rule_id: L1UywG
        version_id: pZTQKg
        url: https://semgrep.dev/playground/r/pZTQKg/python.django.security.audit.unvalidated-password.unvalidated-password
        origin: community
  languages:
  - python
  severity: WARNING
- id: ruby.rails.security.audit.mime-type-dos.mime-type-dos
  metadata:
    owasp: A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-400: Uncontrolled Resource Consumption'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_mime_type_dos.rb
    category: security
    technology:
    - rails
    references:
    - https://cwe.mitre.org/data/definitions/400.html
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.mime-type-dos.mime-type-dos
    shortlink: https://sg.run/Oy3p
    semgrep.dev:
      rule:
        rule_id: 10U56J
        version_id: w8T7lq
        url: https://semgrep.dev/playground/r/w8T7lq/ruby.rails.security.audit.mime-type-dos.mime-type-dos
        origin: community
  message: Detected usage of `Mime.const_set`. This could lead to a Denial of Service
    attack, as an attacker could send lots of different mime types to the server,
    causing the cache to grow large and use all available RAM. Make sure you are using
    5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1 or higher. If this is not possible,
    use the workaround with "Mime.const_set :LOOKUP, Hash.new { |h,k| Mime::Type.new(k)
    unless k.blank? }"
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern: "Mime.const_set ... \n"
  - pattern-not: "Mime.const_set :LOOKUP, ... \n"
- id: ruby.rails.security.audit.number-to-currency-erb.number-to-currency-erb
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_number_to_currency.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.number-to-currency-erb.number-to-currency-erb
    shortlink: https://sg.run/eX7l
    semgrep.dev:
      rule:
        rule_id: 9AUZrN
        version_id: xyT7Gb
        url: https://semgrep.dev/playground/r/xyT7Gb/ruby.rails.security.audit.number-to-currency-erb.number-to-currency-erb
        origin: community
  message: Detected user input flowing into number_to_currency helper. One of the
    parameters to the helper (unit) is not escaped correctly and could lead to XSS,
    which in turn could lead to sensitive data being exfiltrated. Instead, sanitize
    data with the 'html_escape' or 'h' function before passing it into `number_to_currency`
    or upgrade to Rails 4.0.2 or 3.2.16.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*.erb'
  patterns:
  - pattern-either:
    - pattern: |
        <%= ... number_to_currency(..., unit: params[:$UNIT], ...) ... %>
    - pattern: |
        <%= ... number_to_currency(..., unit: params[:$UNIT]) ... %>
  - pattern-not: |
      <%= ... number_to_currency(..., h(unit: params[:$UNIT]), ...) ... %>
  - pattern-not: |
      <%= ... number_to_currency(..., h(unit: params[:$UNIT])) ... %>
- id: ruby.rails.security.audit.number-to-currency.number-to-currency
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_number_to_currency.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.number-to-currency.number-to-currency
    shortlink: https://sg.run/veD4
    semgrep.dev:
      rule:
        rule_id: yyUAl9
        version_id: O9TglK
        url: https://semgrep.dev/playground/r/O9TglK/ruby.rails.security.audit.number-to-currency.number-to-currency
        origin: community
  message: Detected user input flowing into number_to_currency helper. One of the
    parameters to the helper (unit) is not escaped correctly and could lead to XSS,
    which in turn could lead to sensitive data being exfiltrated. Instead, sanitize
    data before passing it into `number_to_currency` with the html_escape (h) function
    or upgrade to Rails 4.0.2 or 3.2.16.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params[$X]
  pattern-sinks:
  - patterns:
    - pattern: $UNIT
    - pattern-inside: |
        number_to_currency(..., unit: $UNIT, ...)
  pattern-sanitizers:
  - pattern: h(...)
- id: php.laravel.security.laravel-sql-injection.laravel-sql-injection
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - laravel
    references:
    - https://laravel.com/docs/8.x/queries
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.laravel.security.laravel-sql-injection.laravel-sql-injection
    shortlink: https://sg.run/x40p
    semgrep.dev:
      rule:
        rule_id: j2UQdp
        version_id: GxT5jA
        url: https://semgrep.dev/playground/r/GxT5jA/php.laravel.security.laravel-sql-injection.laravel-sql-injection
        origin: community
  severity: WARNING
  message: Detected a SQL query based on user input. This could lead to SQL injection,
    which could potentially result in sensitive data being exfiltrated by attackers.
    Instead, use parameterized queries and prepared statements.
  languages:
  - php
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: $_GET
      - pattern: $_POST
      - pattern: $_COOKIE
      - pattern: $_REQUEST
      - pattern: $_SERVER
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $SQL
        - pattern-either:
          - pattern-inside: DB::table(...)->whereRaw($SQL, ...)
          - pattern-inside: DB::table(...)->orWhereRaw($SQL, ...)
          - pattern-inside: DB::table(...)->groupByRaw($SQL, ...)
          - pattern-inside: DB::table(...)->havingRaw($SQL, ...)
          - pattern-inside: DB::table(...)->orHavingRaw($SQL, ...)
          - pattern-inside: DB::table(...)->orderByRaw($SQL, ...)
      - patterns:
        - pattern: $EXPRESSION
        - pattern-either:
          - pattern-inside: DB::table(...)->selectRaw($EXPRESSION, ...)
          - pattern-inside: DB::table(...)->fromRaw($EXPRESSION, ...)
      - patterns:
        - pattern: $COLUMNS
        - pattern-either:
          - pattern-inside: DB::table(...)->whereNull($COLUMNS, ...)
          - pattern-inside: DB::table(...)->orWhereNull($COLUMN)
          - pattern-inside: DB::table(...)->whereNotNull($COLUMNS, ...)
          - pattern-inside: DB::table(...)->whereRowValues($COLUMNS, ...)
          - pattern-inside: DB::table(...)->orWhereRowValues($COLUMNS, ...)
          - pattern-inside: DB::table(...)->find($ID, $COLUMNS)
          - pattern-inside: DB::table(...)->paginate($PERPAGE, $COLUMNS, ...)
          - pattern-inside: DB::table(...)->simplePaginate($PERPAGE, $COLUMNS, ...)
          - pattern-inside: DB::table(...)->cursorPaginate($PERPAGE, $COLUMNS, ...)
          - pattern-inside: DB::table(...)->getCountForPagination($COLUMNS)
          - pattern-inside: DB::table(...)->aggregate($FUNCTION, $COLUMNS)
          - pattern-inside: DB::table(...)->numericAggregate($FUNCTION, $COLUMNS)
          - pattern-inside: DB::table(...)->insertUsing($COLUMNS, ...)
          - pattern-inside: DB::table(...)->select($COLUMNS)
          - pattern-inside: DB::table(...)->get($COLUMNS)
          - pattern-inside: DB::table(...)->count($COLUMNS)
      - patterns:
        - pattern: $COLUMN
        - pattern-either:
          - pattern-inside: DB::table(...)->whereIn($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereIn($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereNotIn($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereNotIn($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereIntegerInRaw($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereIntegerInRaw($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereIntegerNotInRaw($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereIntegerNotInRaw($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereBetweenColumns($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereBetween($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereBetweenColumns($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereNotBetween($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereNotBetweenColumns($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereNotBetween($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereNotBetweenColumns($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereNotNull($COLUMN)
          - pattern-inside: DB::table(...)->whereDate($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereDate($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereTime($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereTime($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereDay($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereDay($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereMonth($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereMonth($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereYear($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereYear($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereJsonContains($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereJsonContains($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereJsonDoesntContain($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereJsonDoesntContain($COLUMN, ...)
          - pattern-inside: DB::table(...)->whereJsonLength($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhereJsonLength($COLUMN, ...)
          - pattern-inside: DB::table(...)->having($COLUMN, ...)
          - pattern-inside: DB::table(...)->orHaving($COLUMN, ...)
          - pattern-inside: DB::table(...)->havingBetween($COLUMN, ...)
          - pattern-inside: DB::table(...)->orderBy($COLUMN, ...)
          - pattern-inside: DB::table(...)->orderByDesc($COLUMN)
          - pattern-inside: DB::table(...)->latest($COLUMN)
          - pattern-inside: DB::table(...)->oldest($COLUMN)
          - pattern-inside: DB::table(...)->forPageBeforeId($PERPAGE, $LASTID, $COLUMN)
          - pattern-inside: DB::table(...)->forPageAfterId($PERPAGE, $LASTID, $COLUMN)
          - pattern-inside: DB::table(...)->value($COLUMN)
          - pattern-inside: DB::table(...)->pluck($COLUMN, ...)
          - pattern-inside: DB::table(...)->implode($COLUMN, ...)
          - pattern-inside: DB::table(...)->min($COLUMN)
          - pattern-inside: DB::table(...)->max($COLUMN)
          - pattern-inside: DB::table(...)->sum($COLUMN)
          - pattern-inside: DB::table(...)->avg($COLUMN)
          - pattern-inside: DB::table(...)->average($COLUMN)
          - pattern-inside: DB::table(...)->increment($COLUMN, ...)
          - pattern-inside: DB::table(...)->decrement($COLUMN, ...)
          - pattern-inside: DB::table(...)->where($COLUMN, ...)
          - pattern-inside: DB::table(...)->orWhere($COLUMN, ...)
          - pattern-inside: DB::table(...)->addSelect($COLUMN)
      - patterns:
        - pattern: $QUERY
        - pattern-inside: DB::unprepared($QUERY)
- id: ruby.rails.security.audit.quote-table-name.quote-table-name
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_quote_table_name.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.quote-table-name.quote-table-name
    shortlink: https://sg.run/d1dY
    semgrep.dev:
      rule:
        rule_id: r6U2dJ
        version_id: YDTj6R
        url: https://semgrep.dev/playground/r/YDTj6R/ruby.rails.security.audit.quote-table-name.quote-table-name
        origin: community
  message: Detected usage of `quote_table_name`, which has a vulnerability allowing
    malicious users to inject arbitrary SQL into a query. This is fixed in Rails versions
    3.0.10, 2.3.13, and 3.1.0.rc5 and above. If updating your Rails version is not
    possible, sanitize input thoroughly before passing it to a `quote_table_name`
    call.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params[$X]
  pattern-sinks:
  - pattern: quote_table_name(...)
- id: python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: $LOOP.subprocess_shell($PROTOCOL, $CMD)
      - pattern: asyncio.subprocess.create_subprocess_shell($CMD, ...)
      - pattern: asyncio.create_subprocess_shell($CMD, ...)
  message: Detected asyncio subprocess function with argument tainted by `event` object.
    If this data can be controlled by a malicious actor, it may be an instance of
    command injection. Audit the use of this call to ensure it is not controllable
    by an external resource. You may consider using 'shlex.escape()'.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://docs.python.org/3/library/asyncio-subprocess.html
    - https://docs.python.org/3/library/shlex.html
    category: security
    technology:
    - python
    - aws-lambda
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell
    shortlink: https://sg.run/p9vZ
    semgrep.dev:
      rule:
        rule_id: L1UEl7
        version_id: O9T5WJ
        url: https://semgrep.dev/playground/r/O9T5WJ/python.aws-lambda.security.dangerous-asyncio-shell.dangerous-asyncio-shell
        origin: community
  languages:
  - python
  severity: ERROR
- id: python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process
  mode: taint
  message: Detected `os` function with argument tainted by `event` object. This is
    dangerous if external data can reach this function call because it allows a malicious
    actor to execute commands. Ensure no external data reaches here.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    category: security
    technology:
    - python
    - aws-lambda
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process
    shortlink: https://sg.run/2AjL
    semgrep.dev:
      rule:
        rule_id: 8GUGBq
        version_id: e1TJkZ
        url: https://semgrep.dev/playground/r/e1TJkZ/python.aws-lambda.security.dangerous-spawn-process.dangerous-spawn-process
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - patterns:
        - pattern: os.$METHOD($MODE, $CMD, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp|startfile)
      - patterns:
        - pattern-inside: os.$METHOD($MODE, $BASH, ["-c", $CMD,...],...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: (spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
      - patterns:
        - pattern-inside: os.$METHOD($MODE, $BASH, "-c", $CMD,...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: (spawnl|spawnle|spawnlp|spawnlpe)
        - metavariable-regex:
            metavariable: $BASH
            regex: (.*)(sh|bash|ksh|csh|tcsh|zsh)
- id: python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use
  mode: taint
  message: Detected subprocess function with argument tainted by `event` object. If
    this data can be controlled by a malicious actor, it may be an instance of command
    injection. Audit the use of this call to ensure it is not controllable by an external
    resource. You may consider using 'shlex.escape()'.
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.3.8 OS Command Injection
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    references:
    - https://docs.python.org/3/library/subprocess.html
    - https://docs.python.org/3/library/shlex.html
    category: security
    technology:
    - python
    - aws-lambda
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use
    shortlink: https://sg.run/XZ7B
    semgrep.dev:
      rule:
        rule_id: gxUyn1
        version_id: vdTyzG
        url: https://semgrep.dev/playground/r/vdTyzG/python.aws-lambda.security.dangerous-subprocess-use.dangerous-subprocess-use
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: subprocess.$FUNC($CMD, ...)
      - pattern: subprocess.$FUNC([$CMD,...], ...)
      - pattern: subprocess.$FUNC("=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", $CMD, ...)
      - pattern: subprocess.$FUNC(["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", $CMD, ...],
          ...)
      - pattern: subprocess.$FUNC("=~/(python)/", $CMD, ...)
      - pattern: subprocess.$FUNC(["=~/(python)/",$CMD,...],...)
  pattern-sanitizers:
  - pattern: shlex.escape(...)
- id: python.aws-lambda.security.dangerous-system-call.dangerous-system-call
  mode: taint
  message: Detected `os` function with argument tainted by `event` object. This is
    dangerous if external data can reach this function call because it allows a malicious
    actor to execute commands. Use the 'subprocess' module instead, which is easier
    to use without accidentally exposing a command injection vulnerability.
  metadata:
    source-rule-url: https://bandit.readthedocs.io/en/latest/plugins/b605_start_process_with_a_shell.html
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    asvs:
      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'
      control_id: 5.2.4 Dyanmic Code Execution Features
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements
      version: '4'
    category: security
    technology:
    - python
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.dangerous-system-call.dangerous-system-call
    shortlink: https://sg.run/jDvN
    semgrep.dev:
      rule:
        rule_id: QrUkg6
        version_id: d6TJGA
        url: https://semgrep.dev/playground/r/d6TJGA/python.aws-lambda.security.dangerous-system-call.dangerous-system-call
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sinks:
  - patterns:
    - focus-metavariable: $CMD
    - pattern-either:
      - pattern: os.system($CMD,...)
      - pattern: os.popen($CMD,...)
      - pattern: os.popen2($CMD,...)
      - pattern: os.popen3($CMD,...)
      - pattern: os.popen4($CMD,...)
- id: javascript.lang.security.detect-child-process.detect-child-process
  message: 'Detected calls to child_process from a function argument `$FUNC`. This
    could lead to a command injection if the input is user controllable. Try to avoid
    calls to child_process, and if it is needed ensure user input is correctly sanitized
    or sandboxed. '
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Nodejs_Security_Cheat_Sheet.html#do-not-use-dangerous-functions
    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js
    category: security
    technology:
    - javascript
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    source: https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process
    shortlink: https://sg.run/l2lo
    semgrep.dev:
      rule:
        rule_id: 10UKNB
        version_id: JdT9LJ
        url: https://semgrep.dev/playground/r/JdT9LJ/javascript.lang.security.detect-child-process.detect-child-process
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        function ... (...,$FUNC,...) {
          ...
        }
    - focus-metavariable: $FUNC
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $CP = require('child_process')
          ...
      - pattern-inside: |
          import * as $CP from 'child_process'
          ...
      - pattern-inside: |
          import $CP from 'child_process'
          ...
    - pattern-either:
      - pattern: $CP.exec($CMD,...)
      - pattern: $CP.execSync($CMD,...)
      - pattern: $CP.spawn($CMD,...)
      - pattern: $CP.spawnSync($CMD,...)
    - pattern-not-inside: $CP.$EXEC("...",...)
    - pattern-not-inside: $CP.$EXEC(["...",...],...)
    - pattern-not-inside: |
        $CMD = "..."
        ...
    - pattern-not-inside: |
        $CMD = ["...",...]
        ...
    - focus-metavariable: $CMD
  - patterns:
    - pattern-either:
      - pattern: child_process.exec($CMD,...)
      - pattern: child_process.execSync($CMD,...)
      - pattern: child_process.spawn($CMD,...)
      - pattern: child_process.spawnSync($CMD,...)
    - pattern-not-inside: child_process.$EXEC("...",...)
    - pattern-not-inside: child_process.$EXEC(["...",...],...)
    - pattern-not-inside: |
        $CMD = "..."
        ...
    - pattern-not-inside: |
        $CMD = ["...",...]
        ...
    - focus-metavariable: $CMD
- id: scala.lang.security.audit.dangerous-seq-run.dangerous-seq-run
  patterns:
  - pattern: Seq($CMD, ...)
  - pattern-not: Seq("...", ...)
  - pattern-inside: |
      import sys.process
      ...
  - pattern-not-inside: |
      $CMD = "..."
      ...
  - pattern-either:
    - pattern-inside: Seq(...).!
    - pattern-inside: Seq(...).!!
    - pattern-inside: Seq(...).lazyLines
  message: Found dynamic content used for the external process. This is dangerous
    if arbitrary data can reach this function call because it allows a malicious actor
    to execute commands. Ensure your variables are not controlled by users or sufficiently
    sanitized.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - scala
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.dangerous-seq-run.dangerous-seq-run
    shortlink: https://sg.run/79b2
    semgrep.dev:
      rule:
        rule_id: JDUle4
        version_id: e1TExk
        url: https://semgrep.dev/playground/r/e1TExk/scala.lang.security.audit.dangerous-seq-run.dangerous-seq-run
        origin: community
- id: scala.lang.security.audit.dangerous-shell-run.dangerous-shell-run
  patterns:
  - pattern: Seq($SH, "-c", $CMD, ...)
  - pattern-not: Seq($SH, "-c", "...", ...)
  - pattern-inside: |
      import sys.process
      ...
  - pattern-not-inside: |
      $CMD = "..."
      ...
  - pattern-either:
    - pattern-inside: Seq(...).!
    - pattern-inside: Seq(...).!!
    - pattern-inside: Seq(...).lazyLines
  - metavariable-regex:
      metavariable: $SH
      regex: '"(sh|bash|ksh|csh|tcsh|zsh)"'
  message: Found dynamic content used for the external process. This is dangerous
    if arbitrary data can reach this function call because it allows a malicious actor
    to execute commands. Ensure your variables are not controlled by users or sufficiently
    sanitized.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - scala
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.dangerous-shell-run.dangerous-shell-run
    shortlink: https://sg.run/Lg76
    semgrep.dev:
      rule:
        rule_id: 5rUy3K
        version_id: vdTD2Q
        url: https://semgrep.dev/playground/r/vdTD2Q/scala.lang.security.audit.dangerous-shell-run.dangerous-shell-run
        origin: community
- id: scala.lang.security.audit.scala-dangerous-process-run.scala-dangerous-process-run
  patterns:
  - pattern-either:
    - pattern: $X.!
    - pattern: $X.!!
    - pattern: $X.lazyLines
  - pattern-inside: |
      import sys.process
      ...
  - pattern-not: |
      "...".!
  - pattern-not: |
      "...".!!
  - pattern-not: |
      "...".lazyLines
  - pattern-not: |
      Seq(...).!
  - pattern-not: |
      Seq(...).!!
  - pattern-not: |
      Seq(...).lazyLines
  - pattern-not-inside: |
      val $X = "..."
      ...
  - pattern-not-inside: |
      val $X = Seq(...)
      ...
  message: Found dynamic content used for the external process. This is dangerous
    if arbitrary data can reach this function call because it allows a malicious actor
    to execute commands. Use `Seq(...)` for dynamically generated commands.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - scala
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.lang.security.audit.scala-dangerous-process-run.scala-dangerous-process-run
    shortlink: https://sg.run/wZBY
    semgrep.dev:
      rule:
        rule_id: 6JUEeo
        version_id: gETLq9
        url: https://semgrep.dev/playground/r/gETLq9/scala.lang.security.audit.scala-dangerous-process-run.scala-dangerous-process-run
        origin: community
- id: typescript.aws-cdk.security.audit.awscdk-bucket-encryption.awscdk-bucket-encryption
  message: 'Add "encryption: $Y.BucketEncryption.KMS_MANAGED" or "encryption: $Y.BucketEncryption.S3_MANAGED"
    to the bucket props for Bucket construct $X'
  metadata:
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    category: security
    technology:
    - AWS-CDK
    references:
    - https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.aws-cdk.security.audit.awscdk-bucket-encryption.awscdk-bucket-encryption
    shortlink: https://sg.run/eowX
    semgrep.dev:
      rule:
        rule_id: bwU8qz
        version_id: K3TPnj
        url: https://semgrep.dev/playground/r/K3TPnj/typescript.aws-cdk.security.audit.awscdk-bucket-encryption.awscdk-bucket-encryption
        origin: community
  languages:
  - typescript
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern-inside: |
        import {Bucket} from '@aws-cdk/aws-s3'
        ...
    - pattern: const $X = new Bucket(...)
    - pattern-not: |
        const $X = new Bucket(..., {..., encryption: BucketEncryption.KMS_MANAGED, ...})
    - pattern-not: |
        const $X = new Bucket(..., {..., encryption: BucketEncryption.KMS, ...})
    - pattern-not: |
        const $X = new Bucket(..., {..., encryption: BucketEncryption.S3_MANAGED, ...})
  - patterns:
    - pattern-inside: |
        import * as $Y from '@aws-cdk/aws-s3'
        ...
    - pattern: const $X = new $Y.Bucket(...)
    - pattern-not: |
        const $X = new $Y.Bucket(..., {..., encryption: $Y.BucketEncryption.KMS_MANAGED, ...})
    - pattern-not: |
        const $X = new $Y.Bucket(..., {..., encryption: $Y.BucketEncryption.KMS, ...})
    - pattern-not: |
        const $X = new $Y.Bucket(..., {..., encryption: $Y.BucketEncryption.S3_MANAGED, ...})
- id: typescript.aws-cdk.security.audit.awscdk-bucket-enforcessl.aws-cdk-bucket-enforcessl
  message: Bucket $X is not set to enforce encryption-in-transit, if not explictly
    setting this on the bucket policy - the property "enforceSSL" should be set to
    true
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    category: security
    technology:
    - AWS-CDK
    references:
    - https://docs.aws.amazon.com/AmazonS3/latest/userguide/security-best-practices.html
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.aws-cdk.security.audit.awscdk-bucket-enforcessl.aws-cdk-bucket-enforcessl
    shortlink: https://sg.run/vqBX
    semgrep.dev:
      rule:
        rule_id: NbUN8B
        version_id: qkT95B
        url: https://semgrep.dev/playground/r/qkT95B/typescript.aws-cdk.security.audit.awscdk-bucket-enforcessl.aws-cdk-bucket-enforcessl
        origin: community
  languages:
  - ts
  severity: ERROR
  pattern-either:
  - patterns:
    - pattern-inside: |
        import {Bucket} from '@aws-cdk/aws-s3';
        ...
    - pattern: const $X = new Bucket(...)
    - pattern-not: |
        const $X = new Bucket(..., {enforceSSL: true}, ...)
  - patterns:
    - pattern-inside: |
        import * as $Y from '@aws-cdk/aws-s3';
        ...
    - pattern: const $X = new $Y.Bucket(...)
    - pattern-not: |
        const $X = new $Y.Bucket(..., {..., enforceSSL: true, ...})
- id: typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue.awscdk-sqs-unencryptedqueue
  message: 'Queue $X is missing encryption at rest. Add "encryption: $Y.QueueEncryption.KMS"
    or "encryption: $Y.QueueEncryption.KMS_MANAGED" to the queue props to enable encryption
    at rest for the queue.'
  metadata:
    category: security
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    technology:
    - AWS-CDK
    references:
    - https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-data-protection.html
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue.awscdk-sqs-unencryptedqueue
    shortlink: https://sg.run/d23P
    semgrep.dev:
      rule:
        rule_id: kxUwqO
        version_id: l4TelJ
        url: https://semgrep.dev/playground/r/l4TelJ/typescript.aws-cdk.security.audit.awscdk-sqs-unencryptedqueue.awscdk-sqs-unencryptedqueue
        origin: community
  languages:
  - ts
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-inside: |
        import {Queue} from '@aws-cdk/aws-sqs'
        ...
    - pattern: const $X = new Queue(...)
    - pattern-not: |
        const $X = new Queue(..., {..., encryption: QueueEncryption.KMS_MANAGED, ...})
    - pattern-not: |
        const $X = new Queue(..., {..., encryption: QueueEncryption.KMS, ...})
  - patterns:
    - pattern-inside: |
        import * as $Y from '@aws-cdk/aws-sqs'
        ...
    - pattern: const $X = new $Y.Queue(...)
    - pattern-not: |
        const $X = new $Y.Queue(..., {..., encryption: $Y.QueueEncryption.KMS_MANAGED, ...})
    - pattern-not: |
        const $X = new $Y.Queue(..., {..., encryption: $Y.QueueEncryption.KMS, ...})
- id: typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod.awscdk-bucket-grantpublicaccessmethod
  message: Using the GrantPublicAccess method on bucket contruct $X will make the
    objects in the bucket world accessible. Verify if this is intentional.
  metadata:
    cwe:
    - 'CWE-306: Missing Authentication for Critical Function'
    category: security
    technology:
    - AWS-CDK
    references:
    - https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-overview.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod.awscdk-bucket-grantpublicaccessmethod
    shortlink: https://sg.run/Z4p7
    semgrep.dev:
      rule:
        rule_id: wdUjZK
        version_id: YDTzNE
        url: https://semgrep.dev/playground/r/YDTzNE/typescript.aws-cdk.security.awscdk-bucket-grantpublicaccessmethod.awscdk-bucket-grantpublicaccessmethod
        origin: community
  languages:
  - ts
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-inside: |
        import {Bucket} from '@aws-cdk/aws-s3'
        ...
    - pattern: |
        const $X = new Bucket(...)
        ...
        $X.grantPublicAccess(...)
  - patterns:
    - pattern-inside: |
        import * as $Y from '@aws-cdk/aws-s3'
        ...
    - pattern: |
        const $X = new $Y.Bucket(...)
        ...
        $X.grantPublicAccess(...)
- id: typescript.aws-cdk.security.awscdk-codebuild-project-public.awscdk-codebuild-project-public
  message: CodeBuild Project $X is set to have a public URL. This will make the build
    results, logs, artifacts publically accessible, including builds prior to the
    project being public. Ensure this is acceptable for the project.
  metadata:
    category: security
    cwe:
    - 'CWE-306: Missing Authentication for Critical Function'
    technology:
    - AWS-CDK
    references:
    - https://docs.aws.amazon.com/codebuild/latest/userguide/public-builds.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.aws-cdk.security.awscdk-codebuild-project-public.awscdk-codebuild-project-public
    shortlink: https://sg.run/nK7G
    semgrep.dev:
      rule:
        rule_id: x8UxXZ
        version_id: 6xTAZR
        url: https://semgrep.dev/playground/r/6xTAZR/typescript.aws-cdk.security.awscdk-codebuild-project-public.awscdk-codebuild-project-public
        origin: community
  languages:
  - ts
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-inside: |
        import {Project} from '@aws-cdk/aws-codebuild'
        ...
    - pattern: |
        const $X = new Project(..., {..., badge: true, ...})
  - patterns:
    - pattern-inside: |
        import * as $Y from '@aws-cdk/aws-codebuild'
        ...
    - pattern: |
        const $X = new $Y.Project(..., {..., badge: true, ...})
- id: python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq
  message: Detected a template variable where autoescaping is explicitly disabled
    with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure
    no user data is rendered here, otherwise this is a cross-site scripting (XSS)
    vulnerability. If you must do this, use `mark_safe` in your Python code.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#safeseq
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq
    shortlink: https://sg.run/5Q30
    semgrep.dev:
      rule:
        rule_id: KxUbdx
        version_id: e1TAWn
        url: https://semgrep.dev/playground/r/e1TAWn/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq
        origin: community
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{{.*?\|\s+safeseq(\s+}})?'
- id: php.doctrine.security.audit.doctrine-dbal-dangerous-query.doctrine-dbal-dangerous-query
  languages:
  - php
  message: Detected string concatenation with a non-literal variable in a Doctrine
    DBAL query method. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead.
  metadata:
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/security.html
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    technology:
    - doctrine
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    source: https://semgrep.dev/r/php.doctrine.security.audit.doctrine-dbal-dangerous-query.doctrine-dbal-dangerous-query
    shortlink: https://sg.run/KXWn
    semgrep.dev:
      rule:
        rule_id: X5UdZj
        version_id: GxTpxW
        url: https://semgrep.dev/playground/r/GxTpxW/php.doctrine.security.audit.doctrine-dbal-dangerous-query.doctrine-dbal-dangerous-query
        origin: community
  patterns:
  - pattern-either:
    - pattern: $CONNECTION->prepare($QUERY,...)
    - pattern: $CONNECTION->createQuery($QUERY,...)
    - pattern: $CONNECTION->executeQuery($QUERY,...)
  - pattern-either:
    - pattern-inside: |
        use Doctrine\DBAL\Connection;
        ...
    - pattern-inside: |
        $CONNECTION = $SMTH->getConnection(...);
        ...
  - pattern-not: $CONNECTION->prepare("...",...)
  - pattern-not: $CONNECTION->createQuery("...",...)
  - pattern-not: $CONNECTION->executeQuery("...",...)
  severity: WARNING
- id: php.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect
  patterns:
  - pattern: $this->redirect(...)
  - pattern-not: $this->redirect("...")
  - pattern-not: $this->redirect()
  message: The `redirect()` method does not check its destination in any way. If you
    redirect to a URL provided by end-users, your application may be open to the unvalidated
    redirects security vulnerability. Consider using literal values or an allowlist
    to validate URLs.
  languages:
  - php
  metadata:
    references:
    - https://symfony.com/doc/current/controller.html#redirecting
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    category: security
    technology:
    - symfony
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect
    shortlink: https://sg.run/4ey5
    semgrep.dev:
      rule:
        rule_id: j2U3q8
        version_id: PkTEnb
        url: https://semgrep.dev/playground/r/PkTEnb/php.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect
        origin: community
  severity: WARNING
- id: contrib.nodejsscan.crypto_node.node_md5
  message: The MD5 hashing algorithm is considered to be weak. If this is used in
    any sensitive operation such as password hashing, or is used to ensure data integrity
    (collision sensitive) then you should use a stronger hashing algorithm. For passwords,
    consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider
    using `SHA-256`
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    technology:
    - node.js
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/contrib.nodejsscan.crypto_node.node_md5
    shortlink: https://sg.run/dKBX
    semgrep.dev:
      rule:
        rule_id: GdU75E
        version_id: zyTdbN
        url: https://semgrep.dev/playground/r/zyTdbN/contrib.nodejsscan.crypto_node.node_md5
        origin: community
  languages:
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          "md5"
      - pattern: |
          "MD5"
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $CRYPTO.createHash(...)
- id: ruby.rails.security.audit.detailed-exceptions.detailed-exceptions
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_detailed_exceptions.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.detailed-exceptions.detailed-exceptions
    shortlink: https://sg.run/Je0d
    semgrep.dev:
      rule:
        rule_id: 8GUAo4
        version_id: kbTn69
        url: https://semgrep.dev/playground/r/kbTn69/ruby.rails.security.audit.detailed-exceptions.detailed-exceptions
        origin: community
  message: Found that the setting for providing detailed exception reports in Rails
    is set to true. This can lead to information exposure, where sensitive system
    or internal information is displayed to the end user. Instead, turn this setting
    off.
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          config.consider_all_requests_local = true
    - patterns:
      - pattern-inside: |
          class $CONTROLLER < ApplicationController
            ...
          end
      - pattern: |
          def show_detailed_exceptions? (...)
            ...
          return $RETURN
          end
      - metavariable-pattern:
          metavariable: $RETURN
          patterns:
          - pattern-not: |
              false
- id: ruby.rails.security.audit.mail-to-erb.mail-to-erb
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_mail_to.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.mail-to-erb.mail-to-erb
    shortlink: https://sg.run/GyBe
    semgrep.dev:
      rule:
        rule_id: QrUn3z
        version_id: l4Teek
        url: https://semgrep.dev/playground/r/l4Teek/ruby.rails.security.audit.mail-to-erb.mail-to-erb
        origin: community
  message: Detected use of mail_to helper used with the `:encode => :javascript option`.
    The attacker could specify a malicious name or email value that could lead to
    a XSS attack. Instead, use `:encode => :hex` or patch to Rails 3.0.4 or 2.3.11.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*.erb'
  patterns:
  - pattern-either:
    - pattern: |
        <%= mail_to ..., ..., :encode => :javascript %>
    - pattern: |
        <%= mail_to ..., ..., :encode => :javascript, ... %>
  - pattern-not: |
      <%= mail_to escape_javascript(...), escape_javascript(...), ... :encode => :javascript %>
  - pattern-not: |
      <%= mail_to escape_javascript(...), escape_javascript(...), ... :encode => :javascript, ... %>
  - pattern-not: |
      <%= mail_to "...", "...", ... :encode => :javascript %>
  - pattern-not: |
      <%= mail_to "...", "...", ... :encode => :javascript, ... %>
- id: ruby.rails.security.audit.mail-to.mail-to
  metadata:
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_mail_to.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.mail-to.mail-to
    shortlink: https://sg.run/Ryp8
    semgrep.dev:
      rule:
        rule_id: 3qU6KB
        version_id: YDTzzL
        url: https://semgrep.dev/playground/r/YDTzzL/ruby.rails.security.audit.mail-to.mail-to
        origin: community
  message: Detected use of mail_to helper used with the `:encode => :javascript option`.
    The attacker could specify a malicious name or email value that could lead to
    a XSS attack. Instead, use `:encode => :hex` or patch to Rails 3.0.4 or 2.3.11.
  languages:
  - ruby
  severity: WARNING
  patterns:
  - pattern: |
      mail_to ..., :encode => "javascript", ...
  - pattern-not: |
      mail_to escape_javascript(...), escape_javascript(...), ..., :encode => "javascript", ...
  - pattern-not: |
      mail_to "...", "...", ..., :encode => "javascript", ...
- id: ruby.rails.security.audit.dynamic-finders.dynamic-finders
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_dynamic_finders.rb
    category: security
    technology:
    - rails
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.dynamic-finders.dynamic-finders
    shortlink: https://sg.run/5yNW
    semgrep.dev:
      rule:
        rule_id: gxUJ8A
        version_id: l4Twrr
        url: https://semgrep.dev/playground/r/l4Twrr/ruby.rails.security.audit.dynamic-finders.dynamic-finders
        origin: community
  message: Discovered an application that uses MySQL and find_by_* dynamic finders
    on potentially sensitive fields. There is a vulnerability in MySQL integer conversion,
    which could case "0" to match any string, and could therefore lead to sensitive
    data being exposed. Instead, upgrade to Rails version 4.
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: params
  - pattern: request.env
  pattern-sinks:
  - pattern: $X.find_by_token(...)
  - pattern: $X.find_by_guid(...)
  - pattern: $X.find_by_password(...)
  - pattern: $X.find_by_api_key(...)
  - pattern: $X.find_by_activation(...)
  - pattern: $X.find_by_code(...)
  - pattern: $X.find_by_private(...)
  - pattern: $X.find_by_reset(...)
- id: javascript.express.security.audit.express-ssrf.express-ssrf
  message: 'The following request $REQUEST.$METHOD() was found to be crafted from
    user-input `$REQ` which can lead to Server-Side Request Forgery (SSRF) vulnerabilities.
    It is recommended where possible to not allow user-input to craft the base request,
    but to be treated as part of the path or query parameter. When user-input is necessary
    to craft the request, it is recommeneded to follow OWASP best practices to prevent
    abuse. '
  metadata:
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    technology:
    - express
    category: security
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-ssrf.express-ssrf
    shortlink: https://sg.run/0PNw
    semgrep.dev:
      rule:
        rule_id: eqU9l2
        version_id: 6xTwWX
        url: https://semgrep.dev/playground/r/6xTwWX/javascript.express.security.audit.express-ssrf.express-ssrf
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  options:
    taint_unify_mvars: true
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,...) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REQUEST = require('request')
          ...
      - pattern-inside: |
          import * as $REQUEST from 'request'
          ...
      - pattern-inside: |
          import $REQUEST from 'request'
          ...
    - pattern-either:
      - pattern: $REQUEST.$METHOD("$HTTP"+$REQ. ... .$VALUE)
      - pattern: $REQUEST.$METHOD("$HTTP"+$REQ. ... .$VALUE + $...A)
      - pattern: $REQUEST.$METHOD(`$HTTP${$REQ. ... .$VALUE}...`)
      - pattern: $REQUEST.$METHOD("$HTTP"+$REQ.$VALUE[...])
      - pattern: $REQUEST.$METHOD("$HTTP"+$REQ.$VALUE[...] + $...A)
      - pattern: $REQUEST.$METHOD(`$HTTP${$REQ.$VALUE[...]}...`)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|post|put|patch|del|head|delete)$
    - metavariable-regex:
        metavariable: $HTTP
        regex: ^(https?:\/\/|//)$
    - pattern-either:
      - pattern: $REQ. ... .$VALUE
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REQUEST = require('request')
          ...
      - pattern-inside: |
          import * as $REQUEST from 'request'
          ...
      - pattern-inside: |
          import $REQUEST from 'request'
          ...
    - pattern-either:
      - pattern: $REQUEST.$METHOD($REQ. ... .$VALUE,...)
      - pattern: $REQUEST.$METHOD($REQ. ... .$VALUE + $...A,...)
      - pattern: $REQUEST.$METHOD(`${$REQ. ... .$VALUE}...`,...)
    - pattern: $REQ. ... .$VALUE
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|post|put|patch|del|head|delete)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REQUEST = require('request')
          ...
      - pattern-inside: |
          import * as $REQUEST from 'request'
          ...
      - pattern-inside: |
          import $REQUEST from 'request'
          ...
    - pattern-either:
      - pattern: $REQUEST.$METHOD($REQ.$VALUE['...'],...)
      - pattern: $REQUEST.$METHOD($REQ.$VALUE['...'] + $...A,...)
      - pattern: $REQUEST.$METHOD(`${$REQ.$VALUE['...']}...`,...)
    - pattern: $REQ.$VALUE
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|post|put|patch|del|head|delete)$
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REQUEST = require('request')
          ...
      - pattern-inside: |
          import * as $REQUEST from 'request'
          ...
      - pattern-inside: |
          import $REQUEST from 'request'
          ...
    - pattern-either:
      - pattern-inside: |
          $ASSIGN = $REQ. ... .$VALUE
          ...
      - pattern-inside: |
          $ASSIGN = $REQ. ... .$VALUE['...']
          ...
      - pattern-inside: |
          $ASSIGN = $REQ. ... .$VALUE + $...A
          ...
      - pattern-inside: "$ASSIGN = $REQ. ... .$VALUE['...'] + $...A\n...     \n"
      - pattern-inside: |
          $ASSIGN = `${$REQ. ... .$VALUE}...`
          ...
      - pattern-inside: "$ASSIGN = `${$REQ. ... .$VALUE['...']}...`\n... \n"
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $ASSIGN = "$HTTP"+ $REQ. ... .$VALUE
              ...
          - pattern-inside: |
              $ASSIGN = "$HTTP"+$REQ. ... .$VALUE + $...A
              ...
          - pattern-inside: |
              $ASSIGN = "$HTTP"+$REQ.$VALUE[...]
              ...
          - pattern-inside: |
              $ASSIGN = "$HTTP"+$REQ.$VALUE[...] + $...A
              ...
          - pattern-inside: |
              $ASSIGN = `$HTTP${$REQ.$VALUE[...]}...`
              ...
        - metavariable-regex:
            metavariable: $HTTP
            regex: ^(https?:\/\/|//)$
    - pattern-either:
      - pattern: $REQUEST.$METHOD($ASSIGN,...)
      - pattern: $REQUEST.$METHOD($ASSIGN + $...FOO,...)
      - pattern: $REQUEST.$METHOD(`${$ASSIGN}...`,...)
      - patterns:
        - pattern-either:
          - pattern: $REQUEST.$METHOD("$HTTP"+$ASSIGN,...)
          - pattern: $REQUEST.$METHOD("$HTTP"+$ASSIGN + $...A,...)
          - pattern: $REQUEST.$METHOD(`$HTTP${$ASSIGN}...`,...)
        - metavariable-regex:
            metavariable: $HTTP
            regex: ^(https?:\/\/|//)$
    - pattern: $ASSIGN
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(get|post|put|patch|del|head|delete)$
- id: javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing
  message: Directory listing/indexing is enabled, which may lead to disclosure of
    sensitive directories and files. It is recommended to disable directory listing
    unless it is a public resource. If you need directory listing, ensure that sensitive
    files are inaccessible when querying the resource.
  metadata:
    interfile: true
    cwe:
    - 'CWE-548: Exposure of Information Through Directory Listing'
    owasp:
    - A06:2017 - Security Misconfiguration
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - express
    references:
    - https://www.npmjs.com/package/serve-index
    - https://www.acunetix.com/blog/articles/directory-listing-information-disclosure/
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing
    shortlink: https://sg.run/DX2G
    semgrep.dev:
      rule:
        rule_id: x8UqEb
        version_id: jQT83O
        url: https://semgrep.dev/playground/r/jQT83O/javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        $APP.use(require('serve-index')(...))
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $SERVEINDEX = require('serve-index')
            ...
        - pattern-inside: |
            import $SERVEINDEX from 'serve-index'
            ...
        - pattern-inside: |
            import * as $SERVEINDEX from 'serve-index'
            ...
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $VALUE = $SERVEINDEX(...)
              ...
          - pattern: |
              $VALUE(...)
        - pattern: |
            $APP.use(..., $SERVEINDEX(...), ...)
- id: javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key
  message: Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using
    an alternate option such as reading the secret from a config file or using an
    environment variable.
  metadata:
    interfile: true
    category: security
    technology:
    - crypto
    - hmac
    references:
    - https://rules.sonarsource.com/javascript/RSPEC-2068
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#key-management
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key
    shortlink: https://sg.run/K9bn
    semgrep.dev:
      rule:
        rule_id: v8UGEw
        version_id: vdTE4G
        url: https://semgrep.dev/playground/r/vdTE4G/javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: $CRYPTO.createHmac($ALGO, '...')
  - patterns:
    - pattern-inside: |
        const $SECRET = '...'
        ...
    - pattern: $CRYPTO.createHmac($ALGO, $SECRET)
- id: javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
  message: A CSRF middleware was not detected in your express application. Ensure
    you are either using one such as `csurf` or `csrf` (see rule references) and/or
    you are properly doing CSRF validation in your routes with a token or cookies.
  metadata:
    category: security
    references:
    - https://www.npmjs.com/package/csurf
    - https://www.npmjs.com/package/csrf
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    technology:
    - javascript
    - typescript
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
    shortlink: https://sg.run/BxzR
    semgrep.dev:
      rule:
        rule_id: wdUKEq
        version_id: BjT3d6
        url: https://semgrep.dev/playground/r/BjT3d6/javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-middleware-usage
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern-inside: |
      $EXPRESS = require('express')
      ...
  - pattern-not-inside: |
      import {$CSRF} from 'csurf'
      ...
  - pattern-not-inside: |
      require('csurf')
      ...
  - pattern-not-inside: |
      import {$CSRF} from 'csrf'
      ...
  - pattern-not-inside: |
      require('csrf')
      ...
  - pattern: |
      $APP = $EXPRESS()
- id: javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization
  message: Detected a call to `$FUNC()` in an attempt to HTML escape the string `$STR`.
    Manually sanitizing input through a manually built list can be circumvented in
    many situations, and it's better to use a well known sanitization library such
    as `sanitize-html` or `DOMPurify`.
  metadata:
    category: security
    technology:
    - javascript
    - typescript
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    references:
    - https://www.npmjs.com/package/dompurify
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization
    shortlink: https://sg.run/AzoB
    semgrep.dev:
      rule:
        rule_id: kxUYE9
        version_id: 9lTn7o
        url: https://semgrep.dev/playground/r/9lTn7o/javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization
        origin: community
  languages:
  - javascript
  - typescript
  severity: INFO
  patterns:
  - pattern-either:
    - pattern: $STR.$FUNC('<', '&lt;')
    - pattern: $STR.$FUNC('>', '&gt;')
    - pattern: $STR.$FUNC('"', '&quot;')
    - pattern: $STR.$FUNC("'", '&apos;')
    - pattern: $STR.$FUNC('&', '&amp;')
  - metavariable-regex:
      metavariable: $FUNC
      regex: (replace|replaceAll)
- id: javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage
  message: Detected usage of the `notevil` package, which is unmaintained and has
    vulnerabilities. Using any sort of `eval()` functionality can be very dangerous,
    but if you must, the `eval` package is an up to date alternative. Be sure that
    only trusted input reaches an `eval()` function.
  metadata:
    category: security
    references:
    - https://github.com/mmckegg/notevil
    cwe:
    - 'CWE-1104: Use of Unmaintained Third Party Components'
    owasp:
    - A06:2021 - Vulnerable and Outdated Components
    technology:
    - javascript
    - typescript
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage
    shortlink: https://sg.run/W70E
    semgrep.dev:
      rule:
        rule_id: OrUX9K
        version_id: l4TND0
        url: https://semgrep.dev/playground/r/l4TND0/javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: |
        import $EVAL from 'notevil'
        ...
    - pattern-inside: |
        import {$EVAL} from 'notevil'
        ...
    - pattern-inside: |
        $EVAL = require('notevil')
        ...
  - pattern-either:
    - patterns:
      - pattern: $EVAL(...)
      - pattern-not: $EVAL('...')
    - patterns:
      - pattern-either:
        - pattern: $VM.runInContext("$CMD", ...)
        - pattern: $VM.runInNewContext("$CMD", ...)
        - pattern: $VM.runInThisContext("$CMD", ...)
        - pattern: $VM.compileFunction("$CMD", ...)
      - metavariable-pattern:
          patterns:
          - pattern: $EVAL(...)
          - pattern-not: $EVAL('...')
          metavariable: $CMD
          language: typescript
- id: php.symfony.security.audit.symfony-csrf-protection-disabled.symfony-csrf-protection-disabled
  patterns:
  - pattern-either:
    - pattern: $X->createForm($TYPE, $TASK, [..., 'csrf_protection' => false, ...],
        ...)
    - pattern: $X->prependExtensionConfig('framework', [..., 'csrf_protection' =>
        false, ...], ...)
    - pattern: $X->loadFromExtension('framework', [..., 'csrf_protection' => false,
        ...], ...)
    - pattern: $X->setDefaults([..., 'csrf_protection' => false, ...], ...)
    - patterns:
      - pattern-either:
        - pattern: $X->createForm($TYPE, $TASK, [..., 'csrf_protection' => $VAL, ...],
            ...)
        - pattern: $X->prependExtensionConfig('framework', [..., 'csrf_protection'
            => $VAL, ...], ...)
        - pattern: $X->loadFromExtension('framework', [..., 'csrf_protection' => $VAL,
            ...], ...)
        - pattern: $X->setDefaults([..., 'csrf_protection' => $VAL, ...], ...)
      - pattern-inside: |
          $VAL = false;
          ...
  message: CSRF protection is disabled for this configuration. This is a security
    risk. Make sure that it is safe or consider setting `csrf_protection` property
    to `true`.
  metadata:
    references:
    - https://symfony.com/doc/current/security/csrf.html
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - symfony
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.symfony.security.audit.symfony-csrf-protection-disabled.symfony-csrf-protection-disabled
    shortlink: https://sg.run/N1gz
    semgrep.dev:
      rule:
        rule_id: d8UeKO
        version_id: 9lT2Zv
        url: https://semgrep.dev/playground/r/9lT2Zv/php.symfony.security.audit.symfony-csrf-protection-disabled.symfony-csrf-protection-disabled
        origin: community
  languages:
  - php
  severity: WARNING
- id: php.doctrine.security.audit.doctrine-orm-dangerous-query.doctrine-orm-dangerous-query
  languages:
  - php
  message: '`$QUERY` Detected string concatenation with a non-literal variable in
    a Doctrine QueryBuilder method. This could lead to SQL injection if the variable
    is user-controlled and not properly sanitized. In order to prevent SQL injection,
    use parameterized queries or prepared statements instead.'
  metadata:
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.doctrine-project.org/projects/doctrine-dbal/en/current/reference/query-builder.html#security-safely-preventing-sql-injection
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    technology:
    - doctrine
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    source: https://semgrep.dev/r/php.doctrine.security.audit.doctrine-orm-dangerous-query.doctrine-orm-dangerous-query
    shortlink: https://sg.run/jwDJ
    semgrep.dev:
      rule:
        rule_id: kxUw23
        version_id: NdT72A
        url: https://semgrep.dev/playground/r/NdT72A/php.doctrine.security.audit.doctrine-orm-dangerous-query.doctrine-orm-dangerous-query
        origin: community
  mode: taint
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: $QUERY->add(...,$SINK,...)
      - pattern: $QUERY->select(...,$SINK,...)
      - pattern: $QUERY->addSelect(...,$SINK,...)
      - pattern: $QUERY->delete(...,$SINK,...)
      - pattern: $QUERY->update(...,$SINK,...)
      - pattern: $QUERY->insert(...,$SINK,...)
      - pattern: $QUERY->from(...,$SINK,...)
      - pattern: $QUERY->join(...,$SINK,...)
      - pattern: $QUERY->innerJoin(...,$SINK,...)
      - pattern: $QUERY->leftJoin(...,$SINK,...)
      - pattern: $QUERY->rightJoin(...,$SINK,...)
      - pattern: $QUERY->where(...,$SINK,...)
      - pattern: $QUERY->andWhere(...,$SINK,...)
      - pattern: $QUERY->orWhere(...,$SINK,...)
      - pattern: $QUERY->groupBy(...,$SINK,...)
      - pattern: $QUERY->addGroupBy(...,$SINK,...)
      - pattern: $QUERY->having(...,$SINK,...)
      - pattern: $QUERY->andHaving(...,$SINK,...)
      - pattern: $QUERY->orHaving(...,$SINK,...)
      - pattern: $QUERY->orderBy(...,$SINK,...)
      - pattern: $QUERY->addOrderBy(...,$SINK,...)
      - pattern: $QUERY->set($SINK,...)
      - pattern: $QUERY->setValue($SINK,...)
    - pattern-either:
      - pattern-inside: |
          $Q = $X->createQueryBuilder();
          ...
      - pattern-inside: |
          $Q = new QueryBuilder(...);
          ...
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: sprintf(...)
      - pattern: |
          "...".$SMTH
  severity: WARNING
- id: php.lang.security.ldap-bind-without-password.ldap-bind-without-password
  patterns:
  - pattern-either:
    - pattern: ldap_bind($LDAP, $DN, NULL)
    - pattern: ldap_bind($LDAP, $DN, '')
    - patterns:
      - pattern: ldap_bind(...)
      - pattern-not: ldap_bind($LDAP, $DN, $PASSWORD)
  message: Detected anonymous LDAP bind. This permits anonymous users to execute LDAP
    statements. Consider enforcing authentication for LDAP.
  metadata:
    references:
    - https://www.php.net/manual/ru/function.ldap-bind.php
    cwe:
    - 'CWE-287: Improper Authentication'
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - php
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.ldap-bind-without-password.ldap-bind-without-password
    shortlink: https://sg.run/18Rv
    semgrep.dev:
      rule:
        rule_id: wdUjA5
        version_id: X0Tolq
        url: https://semgrep.dev/playground/r/X0Tolq/php.lang.security.ldap-bind-without-password.ldap-bind-without-password
        origin: community
  languages:
  - php
  severity: WARNING
- id: php.lang.security.non-literal-header.non-literal-header
  patterns:
  - pattern: header(...)
  - pattern-not: header("...",...)
  message: 'Using user input when setting headers with `header()` is potentially dangerous.
    This could allow an attacker to inject a new line and add a new header into the
    response. This is called HTTP response splitting. To fix, do not allow whitespace
    inside `header()`: ''[^\s]+''.'
  metadata:
    references:
    - https://www.php.net/manual/ru/function.header.php
    - https://owasp.org/www-community/attacks/HTTP_Response_Splitting
    category: security
    technology:
    - php
    cwe:
    - 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Request/Response Splitting'')'
    owasp:
    - A03:2021 - Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.non-literal-header.non-literal-header
    shortlink: https://sg.run/9rL8
    semgrep.dev:
      rule:
        rule_id: x8UxNQ
        version_id: rxTbGY
        url: https://semgrep.dev/playground/r/rxTbGY/php.lang.security.non-literal-header.non-literal-header
        origin: community
  languages:
  - php
  severity: WARNING
- id: php.lang.security.php-permissive-cors.php-permissive-cors
  patterns:
  - pattern: header($VALUE,...)
  - pattern-either:
    - pattern: header("...",...)
    - pattern-inside: |
        $VALUE = "...";
        ...
  - metavariable-regex:
      metavariable: $VALUE
      regex: (\'|\")\s*(Access-Control-Allow-Origin|access-control-allow-origin)\s*:\s*(\*)\s*(\'|\")
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  metadata:
    references:
    - https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-346: Origin Validation Error'
    category: security
    technology:
    - php
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.php-permissive-cors.php-permissive-cors
    shortlink: https://sg.run/y1XR
    semgrep.dev:
      rule:
        rule_id: OrU6JZ
        version_id: NdT5QD
        url: https://semgrep.dev/playground/r/NdT5QD/php.lang.security.php-permissive-cors.php-permissive-cors
        origin: community
  languages:
  - php
  severity: WARNING
- id: php.lang.security.unlink-use.unlink-use
  patterns:
  - pattern: unlink(...)
  - pattern-not: unlink("...",...)
  message: Using user input when deleting files with `unlink()` is potentially dangerous.
    A malicious actor could use this to modify or access files they have no right
    to.
  metadata:
    references:
    - https://www.php.net/manual/en/function.unlink
    - https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html
    category: security
    technology:
    - php
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.unlink-use.unlink-use
    shortlink: https://sg.run/rYeR
    semgrep.dev:
      rule:
        rule_id: eqUzDE
        version_id: xyT93A
        url: https://semgrep.dev/playground/r/xyT93A/php.lang.security.unlink-use.unlink-use
        origin: community
  languages:
  - php
  severity: WARNING
- id: php.lang.security.unserialize-use.unserialize-use
  patterns:
  - pattern: unserialize(...)
  - pattern-not: unserialize("...",...)
  message: Calling `unserialize()` with user input in the pattern can lead to arbitrary
    code execution. Consider using JSON or structured data approaches (e.g. Google
    Protocol Buffers).
  metadata:
    references:
    - https://www.php.net/manual/ru/function.unserialize.php
    - https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization.html
    category: security
    technology:
    - php
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.unserialize-use.unserialize-use
    shortlink: https://sg.run/b24E
    semgrep.dev:
      rule:
        rule_id: v8U9OJ
        version_id: O9T4Z3
        url: https://semgrep.dev/playground/r/O9T4Z3/php.lang.security.unserialize-use.unserialize-use
        origin: community
  languages:
  - php
  severity: WARNING
- id: php.symfony.security.audit.symfony-permissive-cors.symfony-permissive-cors
  patterns:
  - pattern-inside: |
      use Symfony\Component\HttpFoundation\Response;
      ...
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            new Symfony\Component\HttpFoundation\Response($X, $Y, $HEADERS, ...)
        - pattern: new Response($X, $Y, $HEADERS, ...)
      - pattern-either:
        - pattern: new $R($X, $Y, [$KEY => $VALUE], ...)
        - pattern-inside: |
            $HEADERS = [$KEY => $VALUE];
            ...
    - patterns:
      - pattern: $RES->headers->set($KEY, $VALUE)
  - metavariable-regex:
      metavariable: $KEY
      regex: (\'|\")\s*(Access-Control-Allow-Origin|access-control-allow-origin)\s*(\'|\")
  - metavariable-regex:
      metavariable: $VALUE
      regex: (\'|\")\s*(\*)\s*(\'|\")
  message: Access-Control-Allow-Origin response header is set to "*". This will disable
    CORS Same Origin Policy restrictions.
  metadata:
    references:
    - https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-346: Origin Validation Error'
    category: security
    technology:
    - symfony
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.symfony.security.audit.symfony-permissive-cors.symfony-permissive-cors
    shortlink: https://sg.run/kr92
    semgrep.dev:
      rule:
        rule_id: ZqUOlR
        version_id: JdT2Ze
        url: https://semgrep.dev/playground/r/JdT2Ze/php.symfony.security.audit.symfony-permissive-cors.symfony-permissive-cors
        origin: community
  languages:
  - php
  severity: WARNING
- id: java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
  metadata:
    cwe:
    - 'CWE-287: Improper Authentication'
    owasp:
    - A02:2017 - Broken Authentication
    - A07:2021 - Identification and Authentication Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#LDAP_ANONYMOUS
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
    shortlink: https://sg.run/jR6A
    semgrep.dev:
      rule:
        rule_id: eqU8J3
        version_id: YDT8dj
        url: https://semgrep.dev/playground/r/YDT8dj/java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind
        origin: community
  message: Detected anonymous LDAP bind. This permits anonymous users to execute LDAP
    statements. Consider enforcing authentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html
    for more information.
  severity: WARNING
  pattern: |
    $ENV.put($CTX.SECURITY_AUTHENTICATION, "none");
    ...
    $DCTX = new InitialDirContext($ENV, ...);
  languages:
  - java
- id: java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BLOWFISH_KEY_SIZE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
    shortlink: https://sg.run/9o74
    semgrep.dev:
      rule:
        rule_id: d8UjJ3
        version_id: o5T563
        url: https://semgrep.dev/playground/r/o5T563/java.lang.security.audit.blowfish-insufficient-key-size.blowfish-insufficient-key-size
        origin: community
  message: Using less than 128 bits for Blowfish is considered insecure. Use 128 bits
    or more, or switch to use AES instead.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: |
      $KEYGEN = KeyGenerator.getInstance("Blowfish");
      ...
      $KEYGEN.init($SIZE);
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 128
- id: java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
  metadata:
    cwe:
    - 'CWE-704: Incorrect Type Conversion or Cast'
    owasp: A03:2017 - Sensitive Data Exposure
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION
    category: security
    technology:
    - java
    references:
    - https://cwe.mitre.org/data/definitions/704.html
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
    shortlink: https://sg.run/1Z7D
    semgrep.dev:
      rule:
        rule_id: v8Uny0
        version_id: 0bTYqN
        url: https://semgrep.dev/playground/r/0bTYqN/java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion
        origin: community
  message: '''Integer.toHexString()'' strips leading zeroes from each byte if read
    byte-by-byte. This mistake weakens the hash value computed since it introduces
    more collisions. Use ''String.format("%02X", ...)'' instead.'
  severity: WARNING
  languages:
  - java
  pattern: |-
    $X $METHOD(...) {
      ...
      MessageDigest $MD = ...;
      ...
      $MD.digest(...);
      ...
      Integer.toHexString(...);
    }
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1
  message: Detected SHA1 hash algorithm which is considered insecure. SHA1 is not
    collision resistant and is therefore not suitable as a cryptographic signature.
    Use SHA256 or SHA3 instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
    category: security
    technology:
    - go
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1
    shortlink: https://sg.run/XBYA
    semgrep.dev:
      rule:
        rule_id: OrU31O
        version_id: YDTerd
        url: https://semgrep.dev/playground/r/YDTerd/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-sha1
        origin: community
  patterns:
  - pattern-inside: |
      import "crypto/sha1"
      ...
  - pattern-either:
    - pattern: |
        sha1.New()
    - pattern: |
        sha1.Sum(...)
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES
  message: Detected DES cipher algorithm which is insecure. The algorithm is considered
    weak and has been deprecated. Use AES instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
    category: security
    technology:
    - go
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES
    shortlink: https://sg.run/jREA
    semgrep.dev:
      rule:
        rule_id: eqU8B3
        version_id: 6xT9qP
        url: https://semgrep.dev/playground/r/6xT9qP/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-DES
        origin: community
  patterns:
  - pattern-inside: |
      import "crypto/des"
      ...
  - pattern-either:
    - pattern: |
        des.NewTripleDESCipher(...)
    - pattern: |
        des.NewCipher(...)
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4
  message: Detected RC4 cipher algorithm which is insecure. The algorithm has many
    known vulnerabilities. Use AES instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
    category: security
    technology:
    - go
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4
    shortlink: https://sg.run/1ZAD
    semgrep.dev:
      rule:
        rule_id: v8Unl0
        version_id: o5TDzE
        url: https://semgrep.dev/playground/r/o5TDzE/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-rc4
        origin: community
  patterns:
  - pattern-inside: |
      import "crypto/rc4"
      ...
  - pattern: rc4.NewCipher(...)
- id: typescript.react.react-dangerouslysetinnerhtml-url.react-dangerouslysetinnerhtml-url
  message: Detected the use of dangerouslySetInnerHTML where input comes from the
    request URL. This can introduce a Cross-Site-Scripting (XSS) vulnerability if
    this comes from user-provided input. If you have to use dangerouslySetInnerHTML,
    consider using a sanitization library such as DOMPurify to sanitize the HTML within.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - react
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.react.react-dangerouslysetinnerhtml-url.react-dangerouslysetinnerhtml-url
    shortlink: https://sg.run/pLZg
    semgrep.dev:
      rule:
        rule_id: AbUgkZ
        version_id: rxTzvJ
        url: https://semgrep.dev/playground/r/rxTzvJ/typescript.react.react-dangerouslysetinnerhtml-url.react-dangerouslysetinnerhtml-url
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: new URLSearchParams(useLocation().search).get('...')
      - pattern: new URL(location.href).searchParams.get('...')
      - pattern: new URL($WINDOW. ... .location.href).searchParams.get('...')
      - pattern: new URLSearchParams(location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams(location.hash.slice(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.slice(1)).get("...")
      - pattern: location.hash.split("...")[1]
      - pattern: $WINDOW. ... .location.hash.split("...")[1]
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URLSearchParams(useLocation().search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(window.location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.slice(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.slice(1))
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URL(location.href)
          ...
      - pattern-inside: |
          $VALUE = new URL($WINDOW. ... .location.href)
          ...
    - pattern: $VALUE.searchParams.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          [...,$VALUE,...] = useSearchParams()
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern: |
        [$QUERY,...] = useQueryParams(...)
    - focus-metavariable: $QUERY
  - patterns:
    - pattern: |
        $QUERY = useQueryParams(...)
    - focus-metavariable: $QUERY
    - pattern: $QUERY.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          var { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          const { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          let { ...,$VALUE,... } = useLocation()
          ...
    - pattern-inside: |
        $ASSIGN = new URLSearchParams($VALUE)
        ...
    - pattern: $ASSIGN.get('...')
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        <$EL ... dangerouslySetInnerHTML={$PROP}></$EL>
    - focus-metavariable: $PROP
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
- id: typescript.react.react-create-element-href-url.react-create-element-href-url
  message: Detected the use of `$EL` HREF where input comes from either a function
    argument or prop value. This can introduce a Cross-Site-Scripting (XSS) vulnerability
    if this comes from user-provided input due to the JavaScript URI. It is recommended
    to validate URLs before leveraging them with your codebase, a secure utility example
    is provided in the references.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
    technology:
    - react
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.react.react-create-element-href-url.react-create-element-href-url
    shortlink: https://sg.run/oL59
    semgrep.dev:
      rule:
        rule_id: GdUkjO
        version_id: 0bTzxy
        url: https://semgrep.dev/playground/r/0bTzxy/typescript.react.react-create-element-href-url.react-create-element-href-url
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: new URLSearchParams(useLocation().search).get('...')
      - pattern: new URL(location.href).searchParams.get('...')
      - pattern: new URL($WINDOW. ... .location.href).searchParams.get('...')
      - pattern: new URLSearchParams(location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams(location.hash.slice(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.slice(1)).get("...")
      - pattern: location.hash.split("...")[1]
      - pattern: $WINDOW. ... .location.hash.split("...")[1]
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URLSearchParams(useLocation().search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(window.location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.slice(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.slice(1))
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URL(location.href)
          ...
      - pattern-inside: |
          $VALUE = new URL($WINDOW. ... .location.href)
          ...
    - pattern: $VALUE.searchParams.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          [...,$VALUE,...] = useSearchParams()
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern: |
        [$QUERY,...] = useQueryParams(...)
    - focus-metavariable: $QUERY
  - patterns:
    - pattern: |
        $QUERY = useQueryParams(...)
    - focus-metavariable: $QUERY
    - pattern: $QUERY.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          var { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          const { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          let { ...,$VALUE,... } = useLocation()
          ...
    - pattern-inside: |
        $ASSIGN = new URLSearchParams($VALUE)
        ...
    - pattern: $ASSIGN.get('...')
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REACT.createElement("a",{...,href:$PROP,...},...)
      - pattern-inside: |
          $REACT.createElement("a",{...,href:`${$PROP}`,...},...)
    - pattern: $SINK + $ANYTHING
    - focus-metavariable: $SINK
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..." + $SOURCE
        - pattern-not: |
            `...${...}...`
        metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REACT.createElement("a",{...,href:$PROP,...},...)
      - pattern-inside: |
          $REACT.createElement("a",{...,href:`${$PROP}`,...},...)
    - focus-metavariable: $PROP
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            $FOO + $VALUE
        - pattern-not: |
            "..." + $VALUE
        - pattern-not: |
            `...${...}...`
        metavariable: $PROP
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: |
          $A ? $VAL1 : $VAL2
      - pattern: |
          $A ? $VAL2 : $VAL1
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..."
        - pattern-not: |
            "..." + $V
        - pattern-not: |
            `...${...}...`
        metavariable: $VAL1
    - focus-metavariable: $VAL1
  - patterns:
    - pattern: |
        `...`
    - pattern-not: |
        `${$VALUE}...`
  - patterns:
    - pattern: |
        "..." + $VALUE
  - patterns:
    - pattern-inside: "if (<... $SOURCE.startsWith(\"$REGEX\") ...>) { \n    ... \n
        }\n"
- id: typescript.react.react-href-url.react-href-url
  message: Detected the use of `$EL` HREF where input comes from either a function
    argument or prop value. This can introduce a Cross-Site-Scripting (XSS) vulnerability
    if this comes from user-provided input due to the JavaScript URI. It is recommended
    to validate URLs before leveraging them with your codebase, a secure utility example
    is provided in the references.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
    technology:
    - react
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.react.react-href-url.react-href-url
    shortlink: https://sg.run/XR0K
    semgrep.dev:
      rule:
        rule_id: DbURqg
        version_id: K3Tk2z
        url: https://semgrep.dev/playground/r/K3Tk2z/typescript.react.react-href-url.react-href-url
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: new URLSearchParams(useLocation().search).get('...')
      - pattern: new URL(location.href).searchParams.get('...')
      - pattern: new URL($WINDOW. ... .location.href).searchParams.get('...')
      - pattern: new URLSearchParams(location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.search).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get("...")
      - pattern: new URLSearchParams(location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.substr(1)).get("...")
      - pattern: new URLSearchParams(location.hash.slice(1)).get("...")
      - pattern: new URLSearchParams($WINDOW. ... .location.hash.slice(1)).get("...")
      - pattern: location.hash.split("...")[1]
      - pattern: $WINDOW. ... .location.hash.split("...")[1]
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URLSearchParams(useLocation().search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(window.location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.search)
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams(location.hash.slice(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.substr(1))
          ...
      - pattern-inside: |
          $VALUE = new URLSearchParams($WINDOW. ... .location.hash.slice(1))
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $VALUE = new URL(location.href)
          ...
      - pattern-inside: |
          $VALUE = new URL($WINDOW. ... .location.href)
          ...
    - pattern: $VALUE.searchParams.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          [...,$VALUE,...] = useSearchParams()
          ...
    - pattern: $VALUE.get('...')
  - patterns:
    - pattern: |
        [$QUERY,...] = useQueryParams(...)
    - focus-metavariable: $QUERY
  - patterns:
    - pattern: |
        $QUERY = useQueryParams(...)
    - focus-metavariable: $QUERY
    - pattern: $QUERY.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          var { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          const { ...,$VALUE,... } = useLocation()
          ...
      - pattern-inside: |
          let { ...,$VALUE,... } = useLocation()
          ...
    - pattern-inside: |
        $ASSIGN = new URLSearchParams($VALUE)
        ...
    - pattern: $ASSIGN.get('...')
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          <$EL ... href={$X}></$EL>
      - pattern-inside: |
          <$EL ... href={`${$X}...`}></$EL>
    - pattern: $SINK + $ANYTHING
    - focus-metavariable: $SINK
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..." + $SOURCE
        - pattern-not: |
            `...${...}...`
        metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern-inside: |
          <$EL ... href={$PROP}></$EL>
      - pattern-inside: |
          <$EL ... href={`${$PROP}...`}></$EL>
    - focus-metavariable: $PROP
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            $FOO + $VALUE
        - pattern-not: |
            "..." + $VALUE
        - pattern-not: |
            `...${...}...`
        metavariable: $PROP
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: |
          $A ? $VAL1 : $VAL2
      - pattern: |
          $A ? $VAL2 : $VAL1
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..."
        - pattern-not: |
            "..." + $V
        - pattern-not: |
            `...${...}...`
        metavariable: $VAL1
    - focus-metavariable: $VAL1
  - patterns:
    - pattern: |
        `...`
    - pattern-not: |
        `${$VALUE}...`
  - patterns:
    - pattern: |
        "..." + $VALUE
  - patterns:
    - pattern-inside: "if (<... $SOURCE.startsWith(\"$REGEX\") ...>) { \n    ... \n
        }\n"
- id: ruby.rails.security.brakeman.check-regex-dos.check-regex-dos
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          cookies[...]
      - patterns:
        - pattern: |
            cookies. ... .$PROPERTY[...]
        - metavariable-regex:
            metavariable: $PROPERTY
            regex: (?!signed|encrypted)
      - pattern: |
          params[...]
      - pattern: |
          request.env[...]
      - patterns:
        - pattern: $Y
        - pattern-either:
          - pattern-inside: |
              $RECORD.read_attribute($Y)
          - pattern-inside: |
              $RECORD[$Y]
        - metavariable-regex:
            metavariable: $RECORD
            regex: '[A-Z][a-z]+'
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $Y
        - pattern-inside: |
            /...#{...}.../
      - patterns:
        - pattern: $Y
        - pattern-inside: |
            Regexp.new(...)
  message: Found a potentially user-controllable argument in the construction of a
    regular expressions. This may result in excessive resource consumption when applied
    to certain inputs, or when the user is allowed to control the match target. Avoid
    allowing users to specify regular expressions processed by the server. If you
    must support user-controllable input in a regular expression, use an allow-list
    to restrict the expressions users may supply to limit catastrophic backtracking.
  languages:
  - ruby
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb
    category: security
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    technology:
    - ruby
    - rails
    references:
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-regex-dos.check-regex-dos
    shortlink: https://sg.run/qZwx
    semgrep.dev:
      rule:
        rule_id: YGUY4R
        version_id: yeTWdZ
        url: https://semgrep.dev/playground/r/yeTWdZ/ruby.rails.security.brakeman.check-regex-dos.check-regex-dos
        origin: community
- id: javascript.argon2.security.unsafe-argon2-config.unsafe-argon2-config
  message: Prefer Argon2id where possible. Per RFC9016, section 4 IETF recommends
    selecting Argon2id unless you can guarantee an adversary has no direct access
    to the computing environment.
  metadata:
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
    - https://eprint.iacr.org/2016/759.pdf
    - https://www.cs.tau.ac.il/~tromer/papers/cache-joc-20090619.pdf
    - https://datatracker.ietf.org/doc/html/rfc9106#section-4
    category: security
    cwe:
    - 'CWE-916: Use of Password Hash With Insufficient Computational Effort'
    technology:
    - argon2
    - cryptography
    owasp:
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    impact: LOW
    likelihood: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.argon2.security.unsafe-argon2-config.unsafe-argon2-config
    shortlink: https://sg.run/ALq4
    semgrep.dev:
      rule:
        rule_id: DbU2X8
        version_id: 1QTXNz
        url: https://semgrep.dev/playground/r/1QTXNz/javascript.argon2.security.unsafe-argon2-config.unsafe-argon2-config
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        $ARGON = require('argon2');
        ...
    - pattern: |
        {type: ...}
  pattern-sinks:
  - patterns:
    - pattern: |
        $Y
    - pattern-inside: |
        $ARGON.hash(...,$Y)
  pattern-sanitizers:
  - patterns:
    - pattern: |
        {type: $ARGON.argon2id}
        ...
- id: python.distributed.security.require-encryption
  patterns:
  - pattern: |
      distributed.security.Security(..., require_encryption=$VAL, ...)
  - metavariable-pattern:
      metavariable: $VAL
      pattern: |
        False
  - focus-metavariable: $VAL
  fix: |
    True
  message: Initializing a security context for Dask (`distributed`) without "require_encryption"
    keyword argument may silently fail to provide security.
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://distributed.dask.org/en/latest/tls.html?highlight=require_encryption#parameters
    category: security
    technology:
    - distributed
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.distributed.security.require-encryption
    shortlink: https://sg.run/AvQ2
    semgrep.dev:
      rule:
        rule_id: YGURy0
        version_id: A8T1k6
        url: https://semgrep.dev/playground/r/A8T1k6/python.distributed.security.require-encryption
        origin: community
  languages:
  - python
- id: terraform.aws.security.aws-fsx-lustre-files-ystem.aws-fsx-lustre-filesystem-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_fsx_lustre_file_system" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_fsx_lustre_file_system" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  - pattern-regex: (^aws_kms_key\.(.*))
  message: Ensure FSX Lustre file system is encrypted at rest using KMS CMKs. CMKs
    gives you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-fsx-lustre-files-ystem.aws-fsx-lustre-filesystem-encrypted-with-cmk
    shortlink: https://sg.run/oNG9
    semgrep.dev:
      rule:
        rule_id: JDU6gw
        version_id: d6TnOb
        url: https://semgrep.dev/playground/r/d6TnOb/terraform.aws.security.aws-fsx-lustre-files-ystem.aws-fsx-lustre-filesystem-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-codebuild-project-artifacts-unencrypted.aws-codebuild-project-artifacts-unencrypted
  patterns:
  - pattern: |
      resource "aws_codebuild_project" $ANYTHING {
        ...
        artifacts {
          ...
          encryption_disabled = true
          ...
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_codebuild_project" $ANYTHING {
        ...
        artifacts {
          type = "NO_ARTIFACTS"
          encryption_disabled = true
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_codebuild_project" $ANYTHING {
        ...
        artifacts {
          type = "NO_ARTIFACTS"
        }
        ...
      }
  message: The AWS CodeBuild Project Artifacts are unencrypted. The AWS KMS encryption
    key protects artifacts in the CodeBuild Projects. To create your own, create a
    aws_kms_key resource or use the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-codebuild-project-artifacts-unencrypted.aws-codebuild-project-artifacts-unencrypted
    shortlink: https://sg.run/JeWw
    semgrep.dev:
      rule:
        rule_id: eqUrdZ
        version_id: 7ZT8R4
        url: https://semgrep.dev/playground/r/7ZT8R4/terraform.aws.security.aws-codebuild-project-artifacts-unencrypted.aws-codebuild-project-artifacts-unencrypted
        origin: community
- id: terraform.aws.security.aws-codebuild-project-unencrypted.aws-codebuild-project-unencrypted
  patterns:
  - pattern: |
      resource "aws_codebuild_project" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_codebuild_project" $ANYTHING {
        ...
        encryption_key = ...
        ...
      }
  message: The AWS CodeBuild Project is unencrypted. The AWS KMS encryption key protects
    projects in the CodeBuild. To create your own, create a aws_kms_key resource or
    use the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-codebuild-project-unencrypted.aws-codebuild-project-unencrypted
    shortlink: https://sg.run/5yxA
    semgrep.dev:
      rule:
        rule_id: v8U4kG
        version_id: LjTjeb
        url: https://semgrep.dev/playground/r/LjTjeb/terraform.aws.security.aws-codebuild-project-unencrypted.aws-codebuild-project-unencrypted
        origin: community
- id: terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging
  patterns:
  - pattern: |
      resource "aws_db_instance" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_db_instance" $ANYTHING {
        ...
        enabled_cloudwatch_logs_exports = [$SOMETHING, ...]
        ...
      }
  message: Database instance has no logging. Missing logs can cause missing important
    event information.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-311: Missing Encryption of Sensitive Data'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging
    shortlink: https://sg.run/GyAp
    semgrep.dev:
      rule:
        rule_id: d8U4RA
        version_id: gETKX7
        url: https://semgrep.dev/playground/r/gETKX7/terraform.aws.security.aws-db-instance-no-logging.aws-db-instance-no-logging
        origin: community
- id: terraform.aws.security.aws-sagemaker-domain-encrypted-with-cmk.aws-sagemaker-domain-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_sagemaker_domain" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_sagemaker_domain" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure AWS Sagemaker domains are encrypted at rest using KMS CMKs. CMKs
    gives you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-sagemaker-domain-encrypted-with-cmk.aws-sagemaker-domain-encrypted-with-cmk
    shortlink: https://sg.run/ZjrD
    semgrep.dev:
      rule:
        rule_id: DbUx8z
        version_id: w8TYoL
        url: https://semgrep.dev/playground/r/w8TYoL/terraform.aws.security.aws-sagemaker-domain-encrypted-with-cmk.aws-sagemaker-domain-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: ruby.lang.security.dangerous-subshell.dangerous-subshell
  patterns:
  - pattern: |
      `...#{$VAL}...`
  - pattern-not: |
      `...#{"..."}...`
  - pattern-not-inside: |
      $VAL = "..."
      ...
  message: Detected non-static command inside `...`. If unverified user data can reach
    this call site, this is a code injection vulnerability. A malicious actor can
    inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - ruby
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.dangerous-subshell.dangerous-subshell
    shortlink: https://sg.run/NrxL
    semgrep.dev:
      rule:
        rule_id: OrUGn8
        version_id: 1QT0X9
        url: https://semgrep.dev/playground/r/1QT0X9/ruby.lang.security.dangerous-subshell.dangerous-subshell
        origin: community
  severity: WARNING
  languages:
  - ruby
- id: javascript.dompurify.harden-dompurify-usage
  message: DOMPurify.sanitize() was called without using RETURN_DOM or RETURN_DOM_FRAGMENT.
    This is prone to mutation XSS, which could possibly bypass existing XSS filters.
    Adding one of these options will harden against potential future DOMPurify exploits.
  metadata:
    category: security
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    technology:
    - javascript
    - typescript
    references:
    - https://research.securitum.com/mutation-xss-via-mathml-mutation-dompurify-2-0-17-bypass/
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.dompurify.harden-dompurify-usage
    shortlink: https://sg.run/XNYA
    semgrep.dev:
      rule:
        rule_id: KxU5xj
        version_id: RGTxg6
        url: https://semgrep.dev/playground/r/RGTxg6/javascript.dompurify.harden-dompurify-usage
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern: DOMPurify.sanitize($X, ...)
  - pattern-not: |
      DOMPurify.sanitize($X, {RETURN_DOM_FRAGMENT: true})
  - pattern-not: |
      DOMPurify.sanitize($X, {RETURN_DOM: true})
  fix: |
    DOMPurify.sanitize($X, {RETURN_DOM: true})
- id: typescript.nextjs.react-nextjs-router-create-element-href.react-nextjs-router-create-element-href
  message: Detected the use of `$EL` HREF where input comes from either a function
    argument or prop value. This can introduce a Cross-Site-Scripting (XSS) vulnerability
    if this comes from user-provided input due to the JavaScript URI. It is recommended
    to validate URLs before leveraging them with your codebase, a secure utility example
    is provided in the references.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://github.com/segmentio/ui-box/blob/master/src/utils/safeHref.ts
    technology:
    - react
    - nextjs
    - browser
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.nextjs.react-nextjs-router-create-element-href.react-nextjs-router-create-element-href
    shortlink: https://sg.run/DxkY
    semgrep.dev:
      rule:
        rule_id: 8GU543
        version_id: BjTL22
        url: https://semgrep.dev/playground/r/BjTL22/typescript.nextjs.react-nextjs-router-create-element-href.react-nextjs-router-create-element-href
        origin: pro_rules
  languages:
  - typescript
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$IMPORT,... } from 'next/router'
          ...
      - pattern-inside: |
          import $IMPORT from 'next/router';
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern-either:
          - pattern-inside: |
              var { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              const { ...,$PROPS,... } = $ROUTER.query
              ...
          - pattern-inside: |
              let { ...,$PROPS,... } = $ROUTER.query
              ...
        - focus-metavariable: $PROPS
      - patterns:
        - pattern-inside: |
            $ROUTER = $IMPORT()
            ...
        - pattern: "$ROUTER.query.$VALUE \n"
      - patterns:
        - pattern: $IMPORT().query.$VALUE
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REACT.createElement("a",{...,href:$PROP,...},...)
      - pattern-inside: |
          $REACT.createElement("a",{...,href:`${$PROP}`,...},...)
    - pattern: $SINK + $ANYTHING
    - focus-metavariable: $SINK
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..." + $SOURCE
        - pattern-not: |
            `...${...}...`
        metavariable: $SINK
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $REACT.createElement("a",{...,href:$PROP,...},...)
      - pattern-inside: |
          $REACT.createElement("a",{...,href:`${$PROP}`,...},...)
    - focus-metavariable: $PROP
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            $FOO + $VALUE
        - pattern-not: |
            "..." + $VALUE
        - pattern-not: |
            `...${...}...`
        metavariable: $PROP
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: |
          $A ? $VAL1 : $VAL2
      - pattern: |
          $A ? $VAL2 : $VAL1
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..."
        - pattern-not: |
            "..." + $V
        - pattern-not: |
            `...${...}...`
        metavariable: $VAL1
    - focus-metavariable: $VAL1
  - patterns:
    - pattern: |
        `...`
    - pattern-not: |
        `${$VALUE}...`
  - patterns:
    - pattern: |
        "..." + $VALUE
  - patterns:
    - pattern-inside: "if (<... $SOURCE.startsWith(\"$REGEX\") ...>) { \n    ... \n
        }\n"
- id: ruby.rails.security.brakeman.check-render-local-file-include.check-render-local-file-include
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: params[...]
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          render ..., file: ...
      - pattern: |
          render ..., inline: ...
      - pattern: |
          render ..., template: ...
      - pattern: |
          render ..., action: ...
      - pattern: |
          render $FILE, ...
  pattern-sanitizers:
  - patterns:
    - pattern: $MAP[...]
    - metavariable-pattern:
        metavariable: $MAP
        patterns:
        - pattern-not-regex: params
  message: Found request parameters in a call to `render`. This can allow end users
    to request arbitrary local files which may result in leaking sensitive information
    persisted on disk. Where possible, avoid letting users specify template paths
    for `render`. If you must allow user input, use an allow-list of known templates
    or normalize the user-supplied value with `File.basename(...)`.
  languages:
  - ruby
  severity: WARNING
  metadata:
    technology:
    - ruby
    - rails
    category: security
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render.rb
    references:
    - https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_Local_File_Inclusion
    - https://github.com/presidentbeef/brakeman/blob/f74cb53/test/apps/rails2/app/controllers/home_controller.rb#L48-L60
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-render-local-file-include.check-render-local-file-include
    shortlink: https://sg.run/Jw8Z
    semgrep.dev:
      rule:
        rule_id: ReU2pZ
        version_id: A8Tw7K
        url: https://semgrep.dev/playground/r/A8Tw7K/ruby.rails.security.brakeman.check-render-local-file-include.check-render-local-file-include
        origin: community
- id: ruby.rails.security.brakeman.check-send-file.check-send-file
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: |
        cookies[...]
    - patterns:
      - pattern: |
          cookies. ... .$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: (?!signed|encrypted)
    - pattern: |
        params[...]
    - pattern: |
        request.env[...]
  pattern-sinks:
  - patterns:
    - pattern: |
        send_file ...
  message: Allowing user input to `send_file` allows a malicious user to potentially
    read arbitrary files from the server. Avoid accepting user input in `send_file`
    or normalize with `File.basename(...)`
  languages:
  - ruby
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_send_file.rb
    category: security
    cwe:
    - 'CWE-73: External Control of File Name or Path'
    owasp:
    - A04:2021 - Insecure Design
    technology:
    - ruby
    - rails
    references:
    - https://owasp.org/www-community/attacks/Path_Traversal
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control/
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-send-file.check-send-file
    shortlink: https://sg.run/GbY1
    semgrep.dev:
      rule:
        rule_id: BYUKbl
        version_id: 5PTBxg
        url: https://semgrep.dev/playground/r/5PTBxg/ruby.rails.security.brakeman.check-send-file.check-send-file
        origin: community
- id: scala.play.security.tainted-sql-from-http-request.tainted-sql-from-http-request
  languages:
  - scala
  severity: ERROR
  mode: taint
  message: User data flows into this manually-constructed SQL string. User data can
    be safely inserted into SQL strings using prepared statements or an object-relational
    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL
    injection, which could let an attacker steal or manipulate data from the database.
    Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html
    category: security
    technology:
    - scala
    - play
    confidence: HIGH
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.play.security.tainted-sql-from-http-request.tainted-sql-from-http-request
    shortlink: https://sg.run/BeW9
    semgrep.dev:
      rule:
        rule_id: 0oUpon
        version_id: BjTQYe
        url: https://semgrep.dev/playground/r/BjTQYe/scala.play.security.tainted-sql-from-http-request.tainted-sql-from-http-request
        origin: community
  pattern-sources:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $REQ
        - pattern-either:
          - pattern-inside: "Action {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action(...) {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action.async {\n  $REQ: Request[$T] => \n    ...\n}\n"
          - pattern-inside: "Action.async(...) {\n  $REQ: Request[$T] => \n    ...\n}\n"
      - patterns:
        - pattern: $PARAM
        - pattern-either:
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action(...) {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action.async {
                ...
              }
          - pattern-inside: |
              def $CTRL(..., $PARAM: $TYPE, ...) = Action.async(...) {
                ...
              }
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: |
              "$SQLSTR" + ...
          - pattern: |
              "$SQLSTR".format(...)
          - patterns:
            - pattern-inside: |
                $SB = new StringBuilder("$SQLSTR");
                ...
            - pattern: $SB.append(...)
          - patterns:
            - pattern-inside: |
                $VAR = "$SQLSTR"
                ...
            - pattern: $VAR += ...
        - metavariable-regex:
            metavariable: $SQLSTR
            regex: (?i)(select|delete|insert|create|update|alter|drop)\b
      - patterns:
        - pattern: s"..."
        - pattern-regex: |
            .*\b(?i)(select|delete|insert|create|update|alter|drop)\b.*
    - pattern-not-inside: println(...)
- id: scala.slick.security.scala-slick-overridesql-literal.scala-slick-overrideSql-literal
  patterns:
  - pattern: $MODEL.overrideSql($QUERY,...)
  - pattern-not: $MODEL.overrideSql("...",...)
  - pattern-not-inside: |
      $QUERY = "..."
      ...
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Avoid
    using non literal values in `overrideSql(...)`.
  languages:
  - scala
  severity: ERROR
  metadata:
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - scala
    - slick
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.slick.security.scala-slick-overridesql-literal.scala-slick-overrideSql-literal
    shortlink: https://sg.run/PYe0
    semgrep.dev:
      rule:
        rule_id: wdUA97
        version_id: K3TPyG
        url: https://semgrep.dev/playground/r/K3TPyG/scala.slick.security.scala-slick-overridesql-literal.scala-slick-overrideSql-literal
        origin: community
- id: scala.slick.security.scala-slick-sql-non-literal.scala-slick-sql-non-literal
  patterns:
  - pattern: sql"..."
  - pattern-regex: \#\$
  - pattern-inside: |
      import slick.$DEPS
      ...
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Avoid
    using `#$variable` and use `$variable` in `sql"..."` strings instead.
  languages:
  - scala
  severity: ERROR
  metadata:
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SCALA_SQL_INJECTION_SLICK
    references:
    - https://scala-slick.org/doc/3.3.3/sql.html#splicing-literal-values
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - scala
    - slick
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/scala.slick.security.scala-slick-sql-non-literal.scala-slick-sql-non-literal
    shortlink: https://sg.run/JgDk
    semgrep.dev:
      rule:
        rule_id: x8UNKe
        version_id: qkT9qR
        url: https://semgrep.dev/playground/r/qkT9qR/scala.slick.security.scala-slick-sql-non-literal.scala-slick-sql-non-literal
        origin: community
- id: terraform.aws.security.aws-cloudfront-insecure-tls.aws-insecure-cloudfront-distribution-tls-version
  patterns:
  - pattern: |
      resource "aws_cloudfront_distribution" $ANYTHING {
        ...
        viewer_certificate {
          ...
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_cloudfront_distribution" $ANYTHING {
        ...
        viewer_certificate {
          ...
          minimum_protocol_version = "TLSv1.2_2018"
          ...
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_cloudfront_distribution" $ANYTHING {
        ...
        viewer_certificate {
          ...
          minimum_protocol_version = "TLSv1.2_2019"
          ...
        }
        ...
      }
  - pattern-not-inside: |
      resource "aws_cloudfront_distribution" $ANYTHING {
        ...
        viewer_certificate {
          ...
          minimum_protocol_version = "TLSv1.2_2021"
          ...
        }
        ...
      }
  message: Detected an AWS CloudFront Distribution with an insecure TLS version. TLS
    versions less than 1.2 are considered insecure because they can be broken. To
    fix this, set your `minimum_protocol_version` to `"TLS1.2_2018", "TLS1.2_2019"
    or "TLS1.2_2021"`.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-cloudfront-insecure-tls.aws-insecure-cloudfront-distribution-tls-version
    shortlink: https://sg.run/Q6o4
    semgrep.dev:
      rule:
        rule_id: kxU6A8
        version_id: d6TYg1
        url: https://semgrep.dev/playground/r/d6TYg1/terraform.aws.security.aws-cloudfront-insecure-tls.aws-insecure-cloudfront-distribution-tls-version
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: ruby.lang.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  message: The RSA key size $SIZE is insufficent by NIST standards. It is recommended
    to use a key length of 2048 or higher.
  languages:
  - ruby
  severity: WARNING
  metadata:
    technology:
    - ruby
    category: security
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.insufficient-rsa-key-size.insufficient-rsa-key-size
    shortlink: https://sg.run/O4Re
    semgrep.dev:
      rule:
        rule_id: NbUe4N
        version_id: xyT99A
        url: https://semgrep.dev/playground/r/xyT99A/ruby.lang.security.insufficient-rsa-key-size.insufficient-rsa-key-size
        origin: community
  patterns:
  - pattern-either:
    - pattern: OpenSSL::PKey::RSA.generate($SIZE,...)
    - pattern: OpenSSL::PKey::RSA.new($SIZE, ...)
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $ASSIGN = $SIZE
              ...
              def $METHOD(...)
              ...
              end
              ...
          - pattern-either:
            - pattern: OpenSSL::PKey::RSA.new($ASSIGN, ...)
            - pattern: OpenSSL::PKey::RSA.generate($ASSIGN, ...)
        - patterns:
          - pattern-inside: |
              def $METHOD1(...)
              ...
              $ASSIGN = $SIZE
              ...
              end
              ...
              def $METHOD2(...)
              ...
              end
              ...
          - pattern-either:
            - pattern: OpenSSL::PKey::RSA.new($ASSIGN, ...)
            - pattern: OpenSSL::PKey::RSA.generate($ASSIGN, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
- id: ruby.rails.security.audit.rails-check-page-caching-cve.rails-check-page-caching-cve
  patterns:
  - pattern-inside: |
      class $CONTROLLER < $BIGCONTROLLER
      ...
      end
  - pattern: |
      caches_page :$ACTION
  message: All versions below 1.2.1 of the 'actionpack_page-caching' gem are vulnerable
    to arbitrary file write and remote code execution (CVE-2020-8159) when using caching
    methods. Update to version 1.2.1 or greater or remove calls to 'caches_page'.
  languages:
  - ruby
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    technology:
    - rails
    category: security
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_page_caching_cve.rb
    references:
    - https://nvd.nist.gov/vuln/detail/CVE-2020-8159
    - https://groups.google.com/g/rubyonrails-security/c/CFRVkEytdP8
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-check-page-caching-cve.rails-check-page-caching-cve
    shortlink: https://sg.run/Gg2B
    semgrep.dev:
      rule:
        rule_id: v8UOrb
        version_id: BjTQQA
        url: https://semgrep.dev/playground/r/BjTQQA/ruby.rails.security.audit.rails-check-page-caching-cve.rails-check-page-caching-cve
        origin: community
- id: ruby.rails.security.audit.rails-check-page-caching-gem.rails-check-page-caching-gem
  pattern-either:
  - patterns:
    - pattern: gem 'actionpack_page-caching', '1.$MIN'
    - metavariable-comparison:
        metavariable: $MIN
        comparison: $MIN <= 2
  - patterns:
    - pattern: gem 'actionpack_page-caching', '1.$MIN.$PATCH'
    - metavariable-comparison:
        metavariable: $MIN
        comparison: $MIN < 2
  - patterns:
    - patterns:
      - pattern: gem 'actionpack_page-caching', '1.2.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH < 1
  - pattern-either:
    - pattern: gem 'actionpack_page-caching', '~> 0.$MIN'
    - pattern: gem 'actionpack_page-caching', '~> 0.$MIN.$PATCH'
    - patterns:
      - pattern-either:
        - pattern: gem 'actionpack_page-caching', '~> 1.$MIN'
        - pattern: gem 'actionpack_page-caching', '~> 1.$MIN.$PATCH'
      - metavariable-comparison:
          metavariable: $MIN
          comparison: $MIN < 2
  message: All versions below 1.2.1 of the 'actionpack_page-caching' gem are vulnerable
    to arbitrary file write and remote code execution (CVE-2020-8159). Update to version
    1.2.1 or greater or remove calls to 'caches_page'.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*Gemfile'
    - gems.rb
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    technology:
    - rails
    category: security
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_page_caching_cve.rb
    references:
    - https://nvd.nist.gov/vuln/detail/CVE-2020-8159
    - https://groups.google.com/g/rubyonrails-security/c/CFRVkEytdP8
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-check-page-caching-gem.rails-check-page-caching-gem
    shortlink: https://sg.run/RgkE
    semgrep.dev:
      rule:
        rule_id: d8UKw2
        version_id: DkT335
        url: https://semgrep.dev/playground/r/DkT335/ruby.rails.security.audit.rails-check-page-caching-gem.rails-check-page-caching-gem
        origin: community
- id: ruby.rails.security.audit.rails-check-render-dos-cve.rails-check-render-dos
  patterns:
  - pattern-inside: |
      class $CONTROLLER < $BIGCONTROLLER
      ...
      end
  - pattern: |
      render :$TEXT
  message: The render method in Rails versions 3.0.0 - 3.0.20, 3.1.0 - 3.1.12, and
    3.2.0 - 3.2.16 are vulnerable to a denial of service attack (CVE-2014-0082), which
    could lead to service downtime. Upgrade to 3.2.17 or higher instead.
  languages:
  - generic
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-20: Improper Input Validation'
    owasp:
    - A03:2021 - Injection
    technology:
    - rails
    category: security
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render_dos.rb
    references:
    - https://groups.google.com/g/rubyonrails-security/c/LMxO_3_eCuc/m/ozGBEhKaJbIJ
    - https://nvd.nist.gov/vuln/detail/CVE-2014-0082
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-check-render-dos-cve.rails-check-render-dos
    shortlink: https://sg.run/A5Yg
    semgrep.dev:
      rule:
        rule_id: ZqUl4v
        version_id: WrTkkv
        url: https://semgrep.dev/playground/r/WrTkkv/ruby.rails.security.audit.rails-check-render-dos-cve.rails-check-render-dos
        origin: community
- id: ruby.rails.security.audit.rails-check-render-dos-gem.rails-check-render-dos
  pattern-either:
  - pattern-either:
    - patterns:
      - pattern: gem 'rails', '3.$VER'
      - metavariable-comparison:
          metavariable: $VER
          comparison: $VER <= 2
    - patterns:
      - pattern: gem 'rails', '~> 3.$VER'
      - metavariable-comparison:
          metavariable: $VER
          comparison: $VER < 2
  - pattern-either:
    - patterns:
      - pattern: gem 'rails', '3.0.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH <= 20
    - patterns:
      - pattern: gem 'rails', '3.1.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH <= 12
    - patterns:
      - pattern: gem 'rails', '3.2.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH <= 16
  message: Rails versions 3.0.0 - 3.0.20, 3.1.0 - 3.1.12, and 3.2.0 - 3.2.16 are vulnerable
    to a denial of service attack (CVE-2014-0082), which could lead to service downtime.
    Upgrade to 3.2.17 or higher instead.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*Gemfile'
    - gems.rb
  metadata:
    cwe:
    - 'CWE-20: Improper Input Validation'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_render_dos.rb
    technology:
    - rails
    category: security
    references:
    - https://groups.google.com/g/rubyonrails-security/c/LMxO_3_eCuc/m/ozGBEhKaJbIJ
    - https://nvd.nist.gov/vuln/detail/CVE-2014-0082
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-check-render-dos-gem.rails-check-render-dos
    shortlink: https://sg.run/BGNb
    semgrep.dev:
      rule:
        rule_id: nJUyWb
        version_id: 0bTQQ4
        url: https://semgrep.dev/playground/r/0bTQQ4/ruby.rails.security.audit.rails-check-render-dos-gem.rails-check-render-dos
        origin: community
- id: ruby.rails.security.audit.rails-check-response-splitting.rails-check-response-splitting
  pattern-either:
  - pattern-either:
    - pattern: gem 'rails', '2.3'
    - patterns:
      - pattern-either:
        - pattern: gem 'rails', '2.3.$PATCH'
        - pattern: gem 'rails', '~> 2.3.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH < 14
  message: Rails versions 2.3.14 are vulnerable to response splitting, allowing header
    injection (CVE-2011-3186). Upgrade to 2.3.14 or greater.
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*Gemfile'
    - gems.rb
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    technology:
    - rails
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_response_splitting.rb
    category: security
    references:
    - https://groups.google.com/d/topic/rubyonrails-security/b_yTveAph2g/discussion
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.rails-check-response-splitting.rails-check-response-splitting
    shortlink: https://sg.run/DAj2
    semgrep.dev:
      rule:
        rule_id: EwUr8l
        version_id: K3TPPl
        url: https://semgrep.dev/playground/r/K3TPPl/ruby.rails.security.audit.rails-check-response-splitting.rails-check-response-splitting
        origin: community
- id: ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase
  message: Found the use of an hardcoded passphrase for RSA. The passphrase can be
    easily discovered, and therefore should not be stored in source-code. It is recommended
    to remove the passphrase from source-code, and use system environment variables
    or a restricted configuration file.
  languages:
  - ruby
  severity: WARNING
  metadata:
    technology:
    - ruby
    - secrets
    category: security
    references:
    - https://cwe.mitre.org/data/definitions/522.html
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase
    shortlink: https://sg.run/xPEe
    semgrep.dev:
      rule:
        rule_id: bwULyN
        version_id: bZTjz4
        url: https://semgrep.dev/playground/r/bZTjz4/ruby.lang.security.hardcoded-secret-rsa-passphrase.hardcoded-secret-rsa-passphrase
        origin: community
  patterns:
  - pattern-either:
    - pattern: OpenSSL::PKey::RSA.new(..., '...')
    - pattern: OpenSSL::PKey::RSA.new(...).to_pem(..., '...')
    - pattern: OpenSSL::PKey::RSA.new(...).export(..., '...')
    - patterns:
      - pattern-inside: |
          $OPENSSL = OpenSSL::PKey::RSA.new(...)
          ...
      - pattern-either:
        - pattern: |
            $OPENSSL.export(...,'...')
        - pattern: |
            $OPENSSL.to_pem(...,'...')
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $ASSIGN = '...'
              ...
              def $METHOD(...)
              ...
              end
              ...
          - pattern: OpenSSL::PKey::RSA.new(..., $ASSIGN)
        - patterns:
          - pattern-inside: |
              def $METHOD1(...)
              ...
              $ASSIGN = '...'
              ...
              end
              ...
              def $METHOD2(...)
              ...
              end
          - pattern: OpenSSL::PKey::RSA.new(..., $ASSIGN)
        - patterns:
          - pattern-inside: |
              $ASSIGN = '...'
              ...
              def $METHOD(...)
                $OPENSSL = OpenSSL::PKey::RSA.new(...)
              ...
              end
              ...
          - pattern-either:
            - pattern: $OPENSSL.export(...,$ASSIGN)
            - pattern: $OPENSSL.to_pem(...,$ASSIGN)
        - patterns:
          - pattern-inside: |
              def $METHOD1(...)
              ...
              $OPENSSL = OpenSSL::PKey::RSA.new(...)
              ...
              $ASSIGN = '...'
              ...
              end
              ...
          - pattern-either:
            - pattern: $OPENSSL.export(...,$ASSIGN)
            - pattern: $OPENSSL.to_pem(...,$ASSIGN)
        - patterns:
          - pattern-inside: |
              def $METHOD1(...)
              ...
              $ASSIGN = '...'
              ...
              end
              ...
              def $METHOD2(...)
              ...
              $OPENSSL = OpenSSL::PKey::RSA.new(...)
              ...
              end
              ...
          - pattern-either:
            - pattern: $OPENSSL.export(...,$ASSIGN)
            - pattern: $OPENSSL.to_pem(...,$ASSIGN)
- id: ruby.rails.security.injection.rails-check-json-parsing-rce.rails-check-json-parsing-rce
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: gem 'rails', '$MAJ'
        - pattern: gem 'rails', '$MAJ.$MIN'
        - pattern: gem 'rails', '$MAJ.$MIN.$PATCH'
        - pattern: gem 'rails', '~> $MAJ'
        - pattern: gem 'rails', '~> $MAJ.$MIN'
        - pattern: gem 'rails', '~> $MAJ.$MIN.$PATCH'
      - metavariable-comparison:
          metavariable: $MAJ
          comparison: $MAJ < 2
    - patterns:
      - pattern-either:
        - pattern: gem 'rails', '2.$MAJ'
        - pattern: gem 'rails', '2.$MAJ.$PATCH'
        - pattern: gem 'rails', '~> 2.$MAJ'
        - pattern: gem 'rails', '~> 2.$MAJ.$PATCH'
      - metavariable-comparison:
          metavariable: $MAJ
          comparison: $MAJ < 3
    - patterns:
      - pattern-either:
        - pattern: gem 'rails', '2.3.$PATCH'
        - pattern: gem 'rails', '~> 2.3.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH <= 14
    - patterns:
      - pattern-either:
        - pattern: gem 'rails', '3.0.$PATCH'
        - pattern: gem 'rails', '~> 3.0.$PATCH'
      - metavariable-comparison:
          metavariable: $PATCH
          comparison: $PATCH <= 19
  - pattern-not-inside: |
      source '...'
      ...
      gem 'yajl' ...
      ...
  message: Rails versions 0.0.0 - 2.3.14 and 3.0.0 - 3.0.19 are vulnerable to a Remote
    Code Execution attack via JSON parsing (CVE-2013-0333). Either use the 'yajl'
    gem or update to Rails 2.3.16 or greater if using Rails 0.0.0 - 2.3.14 and Rails
    3.0.20 or greater if using Rails 3.0.0 - 3.0.19
  languages:
  - generic
  severity: WARNING
  paths:
    include:
    - '*Gemfile'
    - gems.rb
  metadata:
    cwe:
    - 'CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream
      Component (''Injection'')'
    owasp:
    - A03:2021 - Injection
    technology:
    - rails
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_json_parsing.rb
    category: security
    references:
    - https://nvd.nist.gov/vuln/detail/CVE-2013-0333
    - https://groups.google.com/g/rubyonrails-security/c/1h2DR63ViGo
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.injection.rails-check-json-parsing-rce.rails-check-json-parsing-rce
    shortlink: https://sg.run/Wj3y
    semgrep.dev:
      rule:
        rule_id: 7KUxzd
        version_id: WrTkgv
        url: https://semgrep.dev/playground/r/WrTkgv/ruby.rails.security.injection.rails-check-json-parsing-rce.rails-check-json-parsing-rce
        origin: community
- id: ruby.rails.security.brakeman.check-sql.check-sql
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: |
        cookies[...]
    - patterns:
      - pattern: |
          cookies. ... .$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: (?!signed|encrypted)
    - pattern: |
        params[...]
    - pattern: |
        request.env[...]
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: $X
        - pattern-either:
          - pattern-inside: |
              :$KEY => $X
          - pattern-inside: |
              ["...",$X,...]
      - pattern: |
          params[...].to_i
      - pattern: |
          params[...].to_f
      - patterns:
        - pattern: |
            params[...] ? $A : $B
        - metavariable-pattern:
            metavariable: $A
            patterns:
            - pattern-not: |
                params[...]
        - metavariable-pattern:
            metavariable: $B
            patterns:
            - pattern-not: |
                params[...]
  pattern-sinks:
  - patterns:
    - pattern: $X
    - pattern-not-inside: |
        $P.where("...",...)
    - pattern-not-inside: |
        $P.where(:$KEY => $VAL,...)
    - pattern-either:
      - pattern-inside: |
          $P.$M(...)
      - pattern-inside: |
          $P.$M("...",...)
    - pattern-inside: |
        class $P < ActiveRecord::Base
          ...
        end
    - metavariable-regex:
        metavariable: $M
        regex: (where|find|first|last|select|minimum|maximum|calculate|sum|average)
  message: Found potential SQL injection due to unsafe SQL query construction via
    $X. Where possible, prefer parameterized queries.
  languages:
  - ruby
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_sql.rb
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    technology:
    - ruby
    - rails
    references:
    - https://owasp.org/www-community/attacks/SQL_Injection
    - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/models/product.rb
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-sql.check-sql
    shortlink: https://sg.run/vpgb
    semgrep.dev:
      rule:
        rule_id: OrUv2z
        version_id: 6xTO5q
        url: https://semgrep.dev/playground/r/6xTO5q/ruby.rails.security.brakeman.check-sql.check-sql
        origin: community
- id: java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.2 Insecue XML Deserialization
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v55-deserialization-prevention
      version: '4'
    references:
    - https://semgrep.dev/blog/2022/xml-security-in-java
    - https://semgrep.dev/docs/cheat-sheets/java-xxe/
    - https://blog.sonarsource.com/secure-xml-processor
    - https://xerces.apache.org/xerces2-j/features.html
    category: security
    technology:
    - java
    - xml
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing
    shortlink: https://sg.run/PYBz
    semgrep.dev:
      rule:
        rule_id: 10UPQB
        version_id: 3ZTz1w
        url: https://semgrep.dev/playground/r/3ZTz1w/java.lang.security.audit.xxe.documentbuilderfactory-disallow-doctype-decl-missing.documentbuilderfactory-disallow-doctype-decl-missing
        origin: community
  message: DOCTYPE declarations are enabled for this DocumentBuilderFactory. This
    is vulnerable to XML external entity attacks. Disable this by setting the feature
    "http://apache.org/xml/features/disallow-doctype-decl" to true. Alternatively,
    allow DOCTYPE declarations and only prohibit external entities declarations. This
    can be done by setting the features "http://xml.org/sax/features/external-general-entities"
    and "http://xml.org/sax/features/external-parameter-entities" to false.
  mode: taint
  pattern-sources:
  - by-side-effect: true
    patterns:
    - pattern-either:
      - pattern: |
          $FACTORY = DocumentBuilderFactory.newInstance();
      - patterns:
        - pattern: $FACTORY
        - pattern-inside: |
            class $C {
              ...
              $V $FACTORY = DocumentBuilderFactory.newInstance();
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = DocumentBuilderFactory.newInstance();
              static {
                ...
                $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = DocumentBuilderFactory.newInstance();
              static {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
                ...
              }
              ...
            }
        - pattern-not-inside: |
            class $C {
              ...
              $V $FACTORY = DocumentBuilderFactory.newInstance();
              static {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
              }
              ...
            }
  pattern-sinks:
  - patterns:
    - pattern: $FACTORY.newDocumentBuilder();
  pattern-sanitizers:
  - by-side-effect: true
    pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        - pattern: |
            $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
            ...
            $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
        - pattern: |
            $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            ...
            $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
      - focus-metavariable: $FACTORY
    - patterns:
      - pattern-either:
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl",
                true);
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
              }
              ...
            }
        - pattern-inside: |
            class $C {
              ...
              $T $M(...) {
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
                ...
                $FACTORY.setFeature("http://xml.org/sax/features/external-general-entities",false);
                ...
              }
              ...
            }
      - pattern: $M($X)
      - focus-metavariable: $X
  fix: |
    $FACTORY.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
    $FACTORY.newDocumentBuilder();
  languages:
  - java
- id: trailofbits.python.torch-tensor.torch-tensor
  message: Avoid using `torch.Tensor()` to directly create a tensor for efficiency
    and proper parsing
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: HIGH
    references:
    - https://pytorch.org/docs/stable/tensors.html
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.torch-tensor.torch-tensor
    shortlink: https://sg.run/x4zL
    semgrep.dev:
      rule:
        rule_id: ReUqz0
        version_id: 7ZTq5z
        url: https://semgrep.dev/playground/r/7ZTq5z/trailofbits.python.torch-tensor.torch-tensor
        origin: community
  pattern: torch.Tensor(...)
- id: trailofbits.python.waiting-with-torch-distributed.waiting-with-torch-distributed
  message: Not waiting for requests is a source of undefined behavior
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined Behavior'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: LOW
    impact: LOW
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.waiting-with-torch-distributed.waiting-with-torch-distributed
    shortlink: https://sg.run/OyQL
    semgrep.dev:
      rule:
        rule_id: AbUe4q
        version_id: LjTDxq
        url: https://semgrep.dev/playground/r/LjTDxq/trailofbits.python.waiting-with-torch-distributed.waiting-with-torch-distributed
        origin: community
  patterns:
  - pattern-either:
    - pattern: $REQ = torch.distributed.irecv(...)
    - pattern: $REQ = torch.distributed.isend(...)
  - pattern-not-inside: |
      ...
      $REQ.wait()
- id: trailofbits.python.numpy-in-torch-datasets.numpy-in-torch-datasets
  message: 'Using the NumPy RNG inside of a Torch dataset can lead to a number of
    issues with loading data, including identical augmentations. Instead, use the
    random number generators built into Python and PyTorch '
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-330: Use of Insufficiently Random Values'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: MEDIUM
    impact: LOW
    references:
    - https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.numpy-in-torch-datasets.numpy-in-torch-datasets
    shortlink: https://sg.run/yPpP
    semgrep.dev:
      rule:
        rule_id: qNUWZW
        version_id: NdTKzk
        url: https://semgrep.dev/playground/r/NdTKzk/trailofbits.python.numpy-in-torch-datasets.numpy-in-torch-datasets
        origin: community
  patterns:
  - pattern: |
      class $X(torch.utils.data.Dataset):
        ...
        def __getitem__(...):
          ...
          numpy.random.randint(...)
          ...
- id: trailofbits.python.pickles-in-torch-distributed.pickles-in-torch-distributed
  message: Functions reliant on pickle can result in arbitrary code execution
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-torch-distributed.pickles-in-torch-distributed
    shortlink: https://sg.run/kzGP
    semgrep.dev:
      rule:
        rule_id: 5rUpwA
        version_id: vdTw0v
        url: https://semgrep.dev/playground/r/vdTw0v/trailofbits.python.pickles-in-torch-distributed.pickles-in-torch-distributed
        origin: community
  patterns:
  - pattern-either:
    - pattern: torch.distributed.broadcast_object_list(...)
    - pattern: torch.distributed.all_gather_object(...)
    - pattern: torch.distributed.gather_object(...)
    - pattern: torch.distributed.scatter_object_list(...)
- id: trailofbits.python.torch-package.torch-package
  message: Avoid importing torch.package - it can result in arbitrary code execution
    via pickle
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - audit
    confidence: LOW
    likelihood: MEDIUM
    impact: HIGH
    references:
    - https://pytorch.org/docs/1.13/package.html#torch-package
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.torch-package.torch-package
    shortlink: https://sg.run/wZoA
    semgrep.dev:
      rule:
        rule_id: GdUzA8
        version_id: ExTLEE
        url: https://semgrep.dev/playground/r/ExTLEE/trailofbits.python.torch-package.torch-package
        origin: community
  pattern: import torch.package
- id: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning
  message: 'If possible, it is better to rely on automatic pinning in PyTorch to avoid
    undefined behavior and for efficiency '
  languages:
  - python
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-676: Use of Potentially Dangerous Function'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: LOW
    impact: LOW
    technology:
    - pytorch
    description: '`PyTorch` memory not automatically pinned'
    references:
    - https://pytorch.org/docs/stable/data.html#memory-pinning
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning
    shortlink: https://sg.run/jz5N
    semgrep.dev:
      rule:
        rule_id: WAUN1Z
        version_id: 1QTRwq
        url: https://semgrep.dev/playground/r/1QTRwq/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning
        origin: community
  pattern-either:
  - patterns:
    - pattern: torch.utils.data.DataLoader(...)
    - pattern-not: torch.utils.data.DataLoader(..., pin_memory=$VALUE, ...)
  - pattern: torch.utils.data.DataLoader(..., pin_memory=False, ...)
- id: trailofbits.python.lxml-in-pandas.lxml-in-pandas
  message: Found usage of the `$FLAVOR` library, which is vulnerable to attacks such
    as XML external entity (XXE) attacks
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-611: Improper Restriction of XML External Entity Reference'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - pandas
    description: Potential XXE attacks from loading `lxml` in pandas
    references:
    - https://lxml.de/FAQ.html
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.lxml-in-pandas.lxml-in-pandas
    shortlink: https://sg.run/1z1G
    semgrep.dev:
      rule:
        rule_id: 0oUrdJ
        version_id: 9lTG90
        url: https://semgrep.dev/playground/r/9lTG90/trailofbits.python.lxml-in-pandas.lxml-in-pandas
        origin: community
  pattern-either:
  - patterns:
    - pattern: pandas.read_html($IO)
    - pattern-not: pandas.read_html(**$KWARGS)
  - patterns:
    - metavariable-pattern:
        metavariable: $FLAVOR
        patterns:
        - pattern: '...'
        - pattern-not: |
            "bs4"
        - pattern-not: |
            "html5lib"
    - pattern-either:
      - pattern: pandas.read_html(..., flavor=$FLAVOR, ...)
      - patterns:
        - pattern-inside: |
            $KWARGS = {..., "flavor": $FLAVOR, ...}
            ...
        - pattern: |
            pandas.read_html(**$KWARGS)
- id: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
  message: Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid
    mixing these libraries for efficiency and proper ONNX loading
  languages:
  - python
  severity: WARNING
  metadata:
    category: performance
    subcategory:
    - audit
    confidence: MEDIUM
    technology:
    - pytorch
    - numpy
    description: Uses of `NumPy` functions inside `PyTorch` modules
    references:
    - https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
    shortlink: https://sg.run/9vxr
    semgrep.dev:
      rule:
        rule_id: KxU507
        version_id: NdTKpl
        url: https://semgrep.dev/playground/r/NdTKpl/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules
        origin: community
  patterns:
  - pattern: $RESULT = numpy.$FUNCTION(...)
  - pattern-inside: |
      class $MODULE(torch.nn.Module):
          ...
- id: trailofbits.python.pickles-in-numpy.pickles-in-numpy
  message: Functions reliant on pickle can result in arbitrary code execution.  Consider
    using fickling or switching to a safer serialization method
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - numpy
    description: Potential arbitrary code execution from `NumPy` functions reliant
      on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-numpy.pickles-in-numpy
    shortlink: https://sg.run/ryKe
    semgrep.dev:
      rule:
        rule_id: lBUWjy
        version_id: xyTgD4
        url: https://semgrep.dev/playground/r/xyTgD4/trailofbits.python.pickles-in-numpy.pickles-in-numpy
        origin: community
  patterns:
  - pattern: numpy.load(..., allow_pickle=$VALUE, ...)
  - pattern-not: numpy.load("...", ...)
  - pattern-not: numpy.load(..., file="...", ...)
  - metavariable-pattern:
      metavariable: $VALUE
      patterns:
      - pattern-not: |
          False
      - pattern-not: |
          []
      - pattern-not: |
          None
      - pattern-not: '""'
- id: trailofbits.python.pickles-in-pandas.pickles-in-pandas
  message: Functions reliant on pickle can result in arbitrary code execution. Consider
    using fickling or switching to a safer serialization method
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pandas
    description: Potential arbitrary code execution from `Pandas` functions reliant
      on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-pandas.pickles-in-pandas
    shortlink: https://sg.run/bXQW
    semgrep.dev:
      rule:
        rule_id: PeU06j
        version_id: O9Tq20
        url: https://semgrep.dev/playground/r/O9Tq20/trailofbits.python.pickles-in-pandas.pickles-in-pandas
        origin: community
  patterns:
  - pattern-either:
    - pattern: pandas.read_pickle(...)
    - pattern: pandas.to_pickle(...)
    - patterns:
      - pattern-inside: |
          import pandas
          ...
      - pattern: $SMTH.to_pickle(...)
  - pattern-not: pandas.read_pickle("...")
  - pattern-not: pandas.to_pickle(..., "...")
  - pattern-not: $SMTH.to_pickle("...")
- id: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch
  message: Functions reliant on pickle can result in arbitrary code execution.  Consider
    loading from `state_dict`, using fickling, or switching to a safer serialization
    method like ONNX
  languages:
  - python
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-502: Deserialization of Untrusted Data'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: MEDIUM
    impact: HIGH
    technology:
    - pytorch
    description: Potential arbitrary code execution from `PyTorch` functions reliant
      on pickling
    references:
    - https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch
    shortlink: https://sg.run/NwQy
    semgrep.dev:
      rule:
        rule_id: JDU6WD
        version_id: vdTwwr
        url: https://semgrep.dev/playground/r/vdTwwr/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch
        origin: community
  patterns:
  - pattern-either:
    - pattern: torch.save(...)
    - pattern: torch.load(...)
  - pattern-not: torch.load("...")
  - pattern-not: torch.save(..., "...")
  - pattern-not: torch.save($M.state_dict(), ...)
  - pattern-not-inside: $M.load_state_dict(torch.load(...))
- id: trailofbits.go.invalid-usage-of-modified-variable.invalid-usage-of-modified-variable
  message: 'Variable `$X` is likely modified and later used on error. In some cases
    this could result  in panics due to a nil dereference  '
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-665: Improper Initialization'
    subcategory:
    - audit
    confidence: HIGH
    likelihood: MEDIUM
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Possible unintentional assignment when an error occurs
    references:
    - https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.invalid-usage-of-modified-variable.invalid-usage-of-modified-variable
    shortlink: https://sg.run/WWQ2
    semgrep.dev:
      rule:
        rule_id: kxU6Xb
        version_id: WrTXA6
        url: https://semgrep.dev/playground/r/WrTXA6/trailofbits.go.invalid-usage-of-modified-variable.invalid-usage-of-modified-variable
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        $X, err = ...
        if err != nil {
          <... $X ...>
        }
    - pattern: |
        $X, err := ...
        if err != nil {
          ...
          <... $X.$Y ...>
        }
- id: trailofbits.go.iterate-over-empty-map.iterate-over-empty-map
  message: Iteration over a possibly empty map `$C`. This is likely a bug or redundant
    code
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-665: Improper Initialization'
    subcategory:
    - audit
    confidence: MEDIUM
    likelihood: LOW
    impact: LOW
    technology:
    - --no-technology--
    description: Probably redundant iteration over an empty map
    references:
    - https://blog.trailofbits.com/2019/11/07/attacking-go-vr-ttps/
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.iterate-over-empty-map.iterate-over-empty-map
    shortlink: https://sg.run/08jj
    semgrep.dev:
      rule:
        rule_id: wdUlww
        version_id: 0bT8YQ
        url: https://semgrep.dev/playground/r/0bT8YQ/trailofbits.go.iterate-over-empty-map.iterate-over-empty-map
        origin: community
  patterns:
  - pattern: |
      $C = make(map[$T1] $T2, ...)
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X] = $V
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X]++
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X]--
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $CODEC.Unmarshal($BYTES, &$C)
      ...
      for $K := range $C { ... }
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
  message: 'Default session middleware settings: `path` not set. It indicates the
    path of the cookie; use it to compare against the request path. If this and domain
    match, then send the cookie in the request.'
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
    shortlink: https://sg.run/b7pd
    semgrep.dev:
      rule:
        rule_id: nJUz4X
        version_id: e1TP45
        url: https://semgrep.dev/playground/r/e1TP45/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-path
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{path:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{path:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {path:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.path = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie.path = ...;
      ...
      $SESSION($OPTS,...);
- id: go.lang.security.audit.net.pprof.pprof-debug-exposure
  metadata:
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp: A06:2017 - Security Misconfiguration
    source-rule-url: https://github.com/securego/gosec#available-rules
    references:
    - https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/
    category: security
    technology:
    - go
    confidence: LOW
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.pprof.pprof-debug-exposure
    shortlink: https://sg.run/x1Ep
    semgrep.dev:
      rule:
        rule_id: gxU1Kp
        version_id: WrTAJ9
        url: https://semgrep.dev/playground/r/WrTAJ9/go.lang.security.audit.net.pprof.pprof-debug-exposure
        origin: community
  message: The profiling 'pprof' endpoint is automatically exposed on /debug/pprof.
    This could leak information about the server. Instead, use `import "net/http/pprof"`.
    See https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/
    for more information and mitigation.
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-inside: |
      import _ "net/http/pprof"
      ...
  - pattern-inside: |
      func $ANY(...) {
        ...
      }
  - pattern-not-inside: |
      $MUX = http.NewServeMux(...)
      ...
      http.ListenAndServe($ADDR, $MUX)
  - pattern-not: http.ListenAndServe("=~/^localhost.*/", ...)
  - pattern-not: http.ListenAndServe("=~/^127[.]0[.]0[.]1.*/", ...)
  - pattern: http.ListenAndServe(...)
- id: ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: |
        cookies[...]
    - patterns:
      - pattern: |
          cookies. ... .$PROPERTY[...]
      - metavariable-regex:
          metavariable: $PROPERTY
          regex: (?!signed|encrypted)
    - pattern: |
        params[...]
    - pattern: |
        request.env[...]
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $MODEL.find(...)
      - pattern: $MODEL.find_by_id(...)
      - pattern: $MODEL.find_by_id!(...)
    - metavariable-regex:
        metavariable: $MODEL
        regex: '[A-Z]\S+'
  message: Found an unscoped `find(...)` with user-controllable input. If the ActiveRecord
    model being searched against is sensitive, this may lead to Insecure Direct Object
    Reference (IDOR) behavior and allow users to read arbitrary records. Scope the
    find to the current user, e.g. `current_user.accounts.find(params[:id])`.
  languages:
  - ruby
  severity: WARNING
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_unscoped_find.rb
    category: security
    cwe:
    - 'CWE-639: Authorization Bypass Through User-Controlled Key'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    technology:
    - ruby
    - rails
    references:
    - https://brakemanscanner.org/docs/warning_types/unscoped_find/
    - https://github.com/presidentbeef/brakeman/blob/main/test/apps/rails3.1/app/controllers/users_controller.rb
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find
    shortlink: https://sg.run/dPbP
    semgrep.dev:
      rule:
        rule_id: x8Ud6d
        version_id: d6T11N
        url: https://semgrep.dev/playground/r/d6T11N/ruby.rails.security.brakeman.check-unscoped-find.check-unscoped-find
        origin: community
- id: generic.html-templates.security.var-in-script-tag.var-in-script-tag
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For
    Django, you may also consider using the 'json_script' template tag and retrieving
    the data in your script by using the element ID (e.g., `document.getElementById`).
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    category: security
    technology:
    - html-templates
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag
    shortlink: https://sg.run/eLWE
    semgrep.dev:
      rule:
        rule_id: 4bUkpl
        version_id: GxT4Nw
        url: https://semgrep.dev/playground/r/GxT4Nw/generic.html-templates.security.var-in-script-tag.var-in-script-tag
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern-not-inside: <script ... $ATTR = "..." ...>
  - pattern-not-inside: <script ... $ATTR = '...' ...>
  - pattern: '{{ ... }}'
- id: generic.nginx.security.alias-path-traversal.alias-path-traversal
  patterns:
  - pattern: |
      location ... {
        ...
        alias .../;
        ...
      }
  - pattern-not-inside: location /.../ { ... ... }
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  fix-regex:
    regex: location\s+([A-Za-z0-9/-_\.]+)
    replacement: location \1/
  languages:
  - generic
  severity: WARNING
  message: The alias in this location block is subject to a path traversal because
    the location path does not end in a path separator (e.g., '/'). To fix, add a
    path separator to the end of the path.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    source-rule-url: https://github.com/yandex/gixy/blob/master/docs/en/plugins/aliastraversal.md
    category: security
    technology:
    - nginx
    confidence: LOW
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.alias-path-traversal.alias-path-traversal
    shortlink: https://sg.run/ZvNL
    semgrep.dev:
      rule:
        rule_id: 5rUOjq
        version_id: BjTQRX
        url: https://semgrep.dev/playground/r/BjTQRX/generic.nginx.security.alias-path-traversal.alias-path-traversal
        origin: community
- id: generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: The host for this proxy URL is dynamically determined. This can be dangerous
    if the host can be injected by an attacker because it may forcibly alter destination
    of the proxy. Consider hardcoding acceptable destinations and retrieving them
    with 'map' or something similar.
  metadata:
    source-rule-url: https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
    references:
    - https://nginx.org/en/docs/http/ngx_http_map_module.html
    category: security
    technology:
    - nginx
    confidence: MEDIUM
    cwe:
    - 'CWE-441: Unintended Proxy or Intermediary (''Confused Deputy'')'
    owasp:
    - A01:2021 - Broken Access Control
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host
    shortlink: https://sg.run/ndpb
    semgrep.dev:
      rule:
        rule_id: GdU7yl
        version_id: DkT3Eq
        url: https://semgrep.dev/playground/r/DkT3Eq/generic.nginx.security.dynamic-proxy-host.dynamic-proxy-host
        origin: community
  pattern-either:
  - pattern: proxy_pass $SCHEME://$$HOST ...;
  - pattern: proxy_pass $$SCHEME://$$HOST ...;
- id: generic.nginx.security.header-injection.header-injection
  pattern: |
    location ... <$VARIABLE> ... {
      ...
      add_header ... $$VARIABLE
      ...
    }
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: ERROR
  message: 'The $$VARIABLE path parameter is added as a header in the response. This
    could allow an attacker to inject a newline and add a new header into the response.
    This is called HTTP response splitting. To fix, do not allow whitespace in the
    path parameter: ''[^\s]+''.'
  metadata:
    cwe:
    - 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers (''HTTP
      Request/Response Splitting'')'
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/httpsplitting.md
    - https://owasp.org/www-community/attacks/HTTP_Response_Splitting
    category: security
    technology:
    - nginx
    confidence: MEDIUM
    owasp:
    - A03:2021 - Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.header-injection.header-injection
    shortlink: https://sg.run/7oj4
    semgrep.dev:
      rule:
        rule_id: AbUz8p
        version_id: 0bTQn5
        url: https://semgrep.dev/playground/r/0bTQn5/generic.nginx.security.header-injection.header-injection
        origin: community
- id: generic.nginx.security.header-redefinition.header-redefinition
  patterns:
  - pattern-inside: |
      server {
        ...
        add_header ...;
        ...
        ...
      }
  - pattern-inside: |
      location ... {
        ...
        ...
      }
  - pattern: add_header ...;
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: The 'add_header' directive is called in a 'location' block after headers
    have been set at the server block. Calling 'add_header' in the location block
    will actually overwrite the headers defined in the server block, no matter which
    headers are set. To fix this, explicitly set all headers or set all headers in
    the server block.
  metadata:
    cwe:
    - 'CWE-16: CWE CATEGORY: Configuration'
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/addheaderredefinition.md
    category: security
    technology:
    - nginx
    confidence: LOW
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.header-redefinition.header-redefinition
    shortlink: https://sg.run/Lwl7
    semgrep.dev:
      rule:
        rule_id: BYUN58
        version_id: K3TPx4
        url: https://semgrep.dev/playground/r/K3TPx4/generic.nginx.security.header-redefinition.header-redefinition
        origin: community
- id: generic.nginx.security.insecure-ssl-version.insecure-ssl-version
  patterns:
  - pattern-not: ssl_protocols TLSv1.2 TLSv1.3;
  - pattern-not: ssl_protocols TLSv1.3 TLSv1.2;
  - pattern-not: ssl_protocols TLSv1.2;
  - pattern-not: ssl_protocols TLSv1.3;
  - pattern: ssl_protocols ...;
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2
    and TLS1.3; older versions are known to be broken and are susceptible to attacks.
    Prefer use of TLSv1.2 or later.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    references:
    - https://www.acunetix.com/blog/web-security-zone/hardening-nginx/
    - https://www.acunetix.com/blog/articles/tls-ssl-cipher-hardening/
    category: security
    technology:
    - nginx
    confidence: HIGH
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.insecure-ssl-version.insecure-ssl-version
    shortlink: https://sg.run/gLKy
    semgrep.dev:
      rule:
        rule_id: WAUo9k
        version_id: l4TeE8
        url: https://semgrep.dev/playground/r/l4TeE8/generic.nginx.security.insecure-ssl-version.insecure-ssl-version
        origin: community
- id: generic.nginx.security.missing-internal.missing-internal
  patterns:
  - pattern-inside: |
      location ... {
        ...
        ...
      }
  - pattern-not-inside: |
      location ... {
        ...
        internal;
        ...
      }
  - pattern: proxy_pass ...$...;
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: This location block contains a 'proxy_pass' directive but does not contain
    the 'internal' directive. The 'internal' directive restricts access to this location
    to internal requests. Without 'internal', an attacker could use your server for
    server-side request forgeries (SSRF). Include the 'internal' directive in this
    block to limit exposure.
  metadata:
    cwe:
    - 'CWE-16: CWE CATEGORY: Configuration'
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
    - https://nginx.org/en/docs/http/ngx_http_core_module.html#internal
    category: security
    technology:
    - nginx
    confidence: LOW
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.missing-internal.missing-internal
    shortlink: https://sg.run/Q5px
    semgrep.dev:
      rule:
        rule_id: 0oU5BZ
        version_id: YDTzLA
        url: https://semgrep.dev/playground/r/YDTzLA/generic.nginx.security.missing-internal.missing-internal
        origin: community
- id: generic.nginx.security.missing-ssl-version.missing-ssl-version
  patterns:
  - pattern: server { ... listen $PORT ssl; ... }
  - pattern-not-inside: server { ... ssl_protocols ... }
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: This server configuration is missing the 'ssl_protocols' directive. By
    default, this server will use 'ssl_protocols TLSv1 TLSv1.1 TLSv1.2', and versions
    older than TLSv1.2 are known to be broken. Explicitly specify 'ssl_protocols TLSv1.2
    TLSv1.3' to use secure TLS versions.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    references:
    - https://www.acunetix.com/blog/web-security-zone/hardening-nginx/
    - https://nginx.org/en/docs/http/configuring_https_servers.html
    category: security
    technology:
    - nginx
    confidence: MEDIUM
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.missing-ssl-version.missing-ssl-version
    shortlink: https://sg.run/3xzl
    semgrep.dev:
      rule:
        rule_id: KxUbeA
        version_id: 6xTABD
        url: https://semgrep.dev/playground/r/6xTABD/generic.nginx.security.missing-ssl-version.missing-ssl-version
        origin: community
- id: generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth
  patterns:
  - pattern-regex: '[tT][wW][iI][tT][tT][eE][rR].*[''|"]?[0-9a-zA-Z]{35,44}[''|"]?'
  - pattern-not-regex: '[tT][wW][iI][tT][tT][eE][rR].*hash.*=.*[''|"]?[0-9a-zA-Z]{35,44}[''|"]?'
  languages:
  - regex
  message: Twitter OAuth detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - twitter
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth
    shortlink: https://sg.run/Lwb7
    semgrep.dev:
      rule:
        rule_id: BYUNq8
        version_id: 7ZT0Jd
        url: https://semgrep.dev/playground/r/7ZT0Jd/generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth
        origin: community
- id: generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token
  pattern-regex: amzn\.mws\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}
  languages:
  - regex
  message: Amazon MWS Auth Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - aws
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token
    shortlink: https://sg.run/PJzE
    semgrep.dev:
      rule:
        rule_id: lBU9bw
        version_id: pZTqEy
        url: https://semgrep.dev/playground/r/pZTqEy/generic.secrets.security.detected-amazon-mws-auth-token.detected-amazon-mws-auth-token
        origin: community
- id: generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key
  pattern-regex: '[0-9a-f]{32}-us[0-9]{1,2}'
  languages:
  - regex
  message: MailChimp API Key detected
  severity: ERROR
  metadata:
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    technology:
    - secrets
    - mailchimp
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key
    shortlink: https://sg.run/XBde
    semgrep.dev:
      rule:
        rule_id: eqU8QR
        version_id: 3ZT781
        url: https://semgrep.dev/playground/r/3ZT781/generic.secrets.security.detected-mailchimp-api-key.detected-mailchimp-api-key
        origin: community
- id: generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key
  pattern-regex: key-[0-9a-zA-Z]{32}
  languages:
  - regex
  message: Mailgun API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - mailgun
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key
    shortlink: https://sg.run/jRL2
    semgrep.dev:
      rule:
        rule_id: v8UneY
        version_id: 44TxDO
        url: https://semgrep.dev/playground/r/44TxDO/generic.secrets.security.detected-mailgun-api-key.detected-mailgun-api-key
        origin: community
- id: generic.secrets.security.detected-outlook-team.detected-outlook-team
  pattern-regex: https://outlook\.office\.com/webhook/[0-9a-f-]{36}
  languages:
  - regex
  message: Outlook Team detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - outlook
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-outlook-team.detected-outlook-team
    shortlink: https://sg.run/1ZwQ
    semgrep.dev:
      rule:
        rule_id: d8UjXq
        version_id: 5PTBZ6
        url: https://semgrep.dev/playground/r/5PTBZ6/generic.secrets.security.detected-outlook-team.detected-outlook-team
        origin: community
- id: generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token
  pattern-regex: access_token\$production\$[0-9a-z]{16}\$[0-9a-z]{32}
  languages:
  - regex
  message: PayPal Braintree Access Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - paypal
    - braintree
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token
    shortlink: https://sg.run/9oBR
    semgrep.dev:
      rule:
        rule_id: ZqU507
        version_id: GxT41w
        url: https://semgrep.dev/playground/r/GxT41w/generic.secrets.security.detected-paypal-braintree-access-token.detected-paypal-braintree-access-token
        origin: community
- id: generic.secrets.security.detected-sauce-token.detected-sauce-token
  pattern-regex: (?i)sauce.{0,50}(\\\"|'|`)?[0-9a-f-]{36}(\\\"|'|`)?
  languages:
  - regex
  message: Sauce Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - sauce
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-sauce-token.detected-sauce-token
    shortlink: https://sg.run/N4k1
    semgrep.dev:
      rule:
        rule_id: L1UyZ5
        version_id: DkT3Aq
        url: https://semgrep.dev/playground/r/DkT3Aq/generic.secrets.security.detected-sauce-token.detected-sauce-token
        origin: community
- id: generic.secrets.security.detected-slack-token.detected-slack-token
  pattern-either:
  - pattern-regex: (xox[pboa]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32})
  - pattern-regex: xox.-[0-9]{12}-[0-9]{12}-[0-9a-zA-Z]{24}
  languages:
  - regex
  message: Slack Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    references:
    - https://github.com/davidburkitt/python-secret-scanner/blob/335a1f6dab8de59cf39063e57aea39a58951e939/patterns.txt#L58
    category: security
    technology:
    - secrets
    - slack
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-slack-token.detected-slack-token
    shortlink: https://sg.run/kXdz
    semgrep.dev:
      rule:
        rule_id: 8GUjRA
        version_id: 0bTQj5
        url: https://semgrep.dev/playground/r/0bTQj5/generic.secrets.security.detected-slack-token.detected-slack-token
        origin: community
- id: go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly
  patterns:
  - pattern-not-inside: |
      &sessions.Options{
        ...,
        HttpOnly: true,
        ...,
      }
  - pattern: |
      &sessions.Options{
        ...,
      }
  message: A session cookie was detected without setting the 'HttpOnly' flag. The
    'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts
    from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by
    setting 'HttpOnly' to 'true' in the Options struct.
  metadata:
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/user/session/session.go#L69
    category: security
    technology:
    - gorilla
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly
    shortlink: https://sg.run/4xJZ
    semgrep.dev:
      rule:
        rule_id: qNUj6g
        version_id: w8T4Oq
        url: https://semgrep.dev/playground/r/w8T4Oq/go.gorilla.security.audit.session-cookie-missing-httponly.session-cookie-missing-httponly
        origin: community
  fix-regex:
    regex: (HttpOnly\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
  metadata:
    cwe:
    - 'CWE-300: Channel Accessible by Non-Endpoint'
    references:
    - https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption
    category: security
    technology:
    - grpc
    confidence: HIGH
    owasp:
    - A07:2021 - Identification and Authentication Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
    shortlink: https://sg.run/J9yZ
    semgrep.dev:
      rule:
        rule_id: PeUZ4X
        version_id: vdTDyw
        url: https://semgrep.dev/playground/r/vdTDyw/go.grpc.security.grpc-client-insecure-connection.grpc-client-insecure-connection
        origin: community
  message: 'Found an insecure gRPC connection using ''grpc.WithInsecure()''. This
    creates a connection without encryption to a gRPC server. A malicious attacker
    could tamper with the gRPC message, which could compromise the machine. Instead,
    establish a secure connection with an SSL certificate using the ''grpc.WithTransportCredentials()''
    function. You can create a create credentials using a ''tls.Config{}'' struct
    with ''credentials.NewTLS()''. The final fix looks like this: ''grpc.WithTransportCredentials(credentials.NewTLS(<config>))''.'
  languages:
  - go
  severity: ERROR
  pattern: $GRPC.Dial($ADDR, ..., $GRPC.WithInsecure(...), ...)
  fix-regex:
    regex: (.*)WithInsecure\(.*?\)
    replacement: \1WithTransportCredentials(credentials.NewTLS(<your_tls_config_here>))
- id: go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection
  metadata:
    cwe:
    - 'CWE-300: Channel Accessible by Non-Endpoint'
    references:
    - https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption
    category: security
    technology:
    - grpc
    confidence: HIGH
    owasp:
    - A07:2021 - Identification and Authentication Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection
    shortlink: https://sg.run/5Q5l
    semgrep.dev:
      rule:
        rule_id: JDUy0B
        version_id: d6TnJo
        url: https://semgrep.dev/playground/r/d6TnJo/go.grpc.security.grpc-server-insecure-connection.grpc-server-insecure-connection
        origin: community
  message: Found an insecure gRPC server without 'grpc.Creds()' or options with credentials.
    This allows for a connection without encryption to this server. A malicious attacker
    could tamper with the gRPC message, which could compromise the machine. Include
    credentials derived from an SSL certificate in order to create a secure gRPC connection.
    You can create credentials using 'credentials.NewServerTLSFromFile("cert.pem",
    "cert.key")'.
  languages:
  - go
  severity: ERROR
  patterns:
  - pattern-not: grpc.NewServer(..., grpc.Creds(...), ...)
  - pattern-not-inside: |
      $OPTS := []grpc.ServerOption{
        ...,
        grpc.Creds(credentials.NewClientTLSFromCert(...)),
        ...,
      }
      grpc.NewServer($OPTS...)
  - pattern-not-inside: |
      $CREDS := credentials.NewClientTLSFromCert(...)
      ...
      $OPTS := []grpc.ServerOption{
        ...,
        $CREDS,
        ...,
      }
      grpc.NewServer($OPTS...)
  - pattern: grpc.NewServer(...)
- id: go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure
  message: SSLv3 is insecure because it has known vulnerabilities. Starting with go1.14,
    SSLv3 will be removed. Instead, use 'tls.VersionTLS13'.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls_config.go
    references:
    - https://golang.org/doc/go1.14#crypto/tls
    - https://www.us-cert.gov/ncas/alerts/TA14-290A
    category: security
    technology:
    - go
    confidence: HIGH
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure
    shortlink: https://sg.run/zvE1
    semgrep.dev:
      rule:
        rule_id: kxUkJ2
        version_id: QkTBxq
        url: https://semgrep.dev/playground/r/QkTBxq/go.lang.security.audit.crypto.ssl.ssl-v3-is-insecure
        origin: community
  languages:
  - go
  severity: WARNING
  fix-regex:
    regex: VersionSSL30
    replacement: VersionTLS13
  pattern: 'tls.Config{..., MinVersion: $TLS.VersionSSL30, ...}'
- id: go.jwt-go.security.jwt.hardcoded-jwt-key
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - jwt
    - secrets
    confidence: MEDIUM
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    interfile: true
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.jwt-go.security.jwt.hardcoded-jwt-key
    shortlink: https://sg.run/Rod2
    semgrep.dev:
      rule:
        rule_id: GdU7Ny
        version_id: PkTGNW
        url: https://semgrep.dev/playground/r/PkTGNW/go.jwt-go.security.jwt.hardcoded-jwt-key
        origin: community
  severity: WARNING
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        []byte("$F")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $TOKEN.SignedString($F)
    - focus-metavariable: $F
- id: go.lang.security.audit.dangerous-syscall-exec.dangerous-syscall-exec
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          syscall.$METHOD($BIN,...)
      - pattern-not: |
          syscall.$METHOD("...",...)
      - pattern-not-inside: |
          $BIN,$ERR := exec.LookPath("...");
          ...
      - pattern-not-inside: |
          $BIN = "...";
          ...
    - patterns:
      - pattern: |
          syscall.$METHOD($BIN,$ARGS,...)
      - pattern-not: |
          syscall.$METHOD($BIN,[]string{"...",...},...)
      - pattern-not-inside: |
          $ARGS := []string{"...",...};
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
          $ARGS = []string{$CMD,...};
          ...
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
          $ARGS = []string{$CMD,...};
          ...
    - patterns:
      - pattern: |
          syscall.$METHOD($BIN,[]string{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$EXE,...},...)
      - pattern-not: |
          syscall.$METHOD($BIN,[]string{"...","...","...",...},...)
    - patterns:
      - pattern: |
          syscall.$METHOD($BIN,$ARGS,...)
      - pattern-either:
        - pattern-inside: |
            $ARGS := []string{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$EXE,...};
            ...
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
            ...
            $ARGS = []string{$CMD,"-c",$EXE,...};
            ...
        - pattern-inside: |
            $CMD,$ERR := exec.LookPath("=~/(sh|bash|ksh|csh|tcsh|zsh)/");
            ...
            $ARGS = []string{$CMD,"-c",$EXE,...};
            ...
      - pattern-not-inside: |
          $ARGS := []string{"...","...","...",...};
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
          $ARGS = []string{$CMD,"...","...",...};
          ...
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
          $ARGS = []string{$CMD,"...","...",...};
          ...
  - pattern-inside: |
      import "syscall"
      ...
  - metavariable-regex:
      metavariable: $METHOD
      regex: (Exec|ForkExec)
  message: Detected non-static command inside Exec. Audit the input to 'syscall.Exec'.
    If unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - go
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.dangerous-syscall-exec.dangerous-syscall-exec
    shortlink: https://sg.run/0QRb
    semgrep.dev:
      rule:
        rule_id: j2UvPl
        version_id: DkT3rq
        url: https://semgrep.dev/playground/r/DkT3rq/go.lang.security.audit.dangerous-syscall-exec.dangerous-syscall-exec
        origin: community
  severity: ERROR
  languages:
  - go
- id: go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly
  patterns:
  - pattern-not-inside: |
      http.Cookie{
        ...,
        HttpOnly: true,
        ...,
      }
  - pattern: |
      http.Cookie{
        ...,
      }
  message: A session cookie was detected without setting the 'HttpOnly' flag. The
    'HttpOnly' flag for cookies instructs the browser to forbid client-side scripts
    from reading the cookie which mitigates XSS attacks. Set the 'HttpOnly' flag by
    setting 'HttpOnly' to 'true' in the Cookie.
  metadata:
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go
    - https://golang.org/src/net/http/cookie.go
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly
    shortlink: https://sg.run/b73e
    semgrep.dev:
      rule:
        rule_id: EwU2Z6
        version_id: qkT98b
        url: https://semgrep.dev/playground/r/qkT98b/go.lang.security.audit.net.cookie-missing-httponly.cookie-missing-httponly
        origin: community
  fix-regex:
    regex: (HttpOnly\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: generic.secrets.security.detected-artifactory-password.detected-artifactory-password
  patterns:
  - pattern-regex: |
      \bAP[\dABCDEF][a-zA-Z0-9]{8,}
  - pattern-not-regex: |
      sha(128|256|512).*
  - pattern-not-regex: (?s)---BEGIN.*---\Z
  languages:
  - regex
  message: Artifactory token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/Yelp/detect-secrets/blob/master/detect_secrets/plugins/artifactory.py
    category: security
    technology:
    - secrets
    - artifactory
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-artifactory-password.detected-artifactory-password
    shortlink: https://sg.run/J9KZ
    semgrep.dev:
      rule:
        rule_id: YGUR5K
        version_id: DkTbWZ
        url: https://semgrep.dev/playground/r/DkTbWZ/generic.secrets.security.detected-artifactory-password.detected-artifactory-password
        origin: community
- id: go.lang.security.audit.net.use-tls.use-tls
  pattern: http.ListenAndServe($ADDR, $HANDLER)
  fix: http.ListenAndServeTLS($ADDR, certFile, keyFile, $HANDLER)
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://golang.org/pkg/net/http/#ListenAndServeTLS
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.use-tls.use-tls
    shortlink: https://sg.run/dKbY
    semgrep.dev:
      rule:
        rule_id: PeUZ8X
        version_id: DkT3rk
        url: https://semgrep.dev/playground/r/DkT3rk/go.lang.security.audit.net.use-tls.use-tls
        origin: community
  message: Found an HTTP server without TLS. Use 'http.ListenAndServeTLS' instead.
    See https://golang.org/pkg/net/http/#ListenAndServeTLS for more information.
  languages:
  - go
  severity: WARNING
- id: generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block
  pattern-regex: '-----BEGIN PGP PRIVATE KEY BLOCK-----'
  languages:
  - regex
  message: Something that looks like a PGP private key block is detected. This is
    a potential hardcoded secret that could be leaked if this code is committed. Instead,
    remove this code block from the commit.
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block
    shortlink: https://sg.run/ydKd
    semgrep.dev:
      rule:
        rule_id: nJUzXz
        version_id: pZTJeG
        url: https://semgrep.dev/playground/r/pZTJeG/generic.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block
        origin: community
- id: generic.html-templates.security.var-in-script-src.var-in-script-src
  message: Detected a template variable used as the 'src' in a script tag. Although
    template variables are HTML escaped, HTML escaping does not always prevent malicious
    URLs from being injected and could results in a cross-site scripting (XSS) vulnerability.
    Prefer not to dynamically generate the 'src' attribute and use static URLs instead.
    If you must do this, carefully check URLs against an allowlist and be sure to
    URL-encode the result.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    category: security
    technology:
    - html-templates
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.html-templates.security.var-in-script-src.var-in-script-src
    shortlink: https://sg.run/OPob
    semgrep.dev:
      rule:
        rule_id: 3qUPnO
        version_id: ZRTk72
        url: https://semgrep.dev/playground/r/ZRTk72/generic.html-templates.security.var-in-script-src.var-in-script-src
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.mustache'
    - '*.hbs'
    - '*.html'
  severity: WARNING
  patterns:
  - pattern-inside: <script ...>
  - pattern-not-inside: src = '...'
  - pattern-not-inside: src = "..."
  - pattern-not-inside: nonce = '...'
  - pattern-not-inside: nonce = "..."
  - pattern: '{{ ... }}'
- id: go.lang.security.audit.dangerous-exec-command.dangerous-exec-command
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: |
            exec.Command($CMD,...)
        - pattern: |
            exec.CommandContext($CTX,$CMD,...)
      - pattern-not: |
          exec.Command("...",...)
      - pattern-not: |
          exec.CommandContext($CTX,"...",...)
    - patterns:
      - pattern-either:
        - pattern: |
            exec.Command("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$CMD,...)
        - pattern: |
            exec.CommandContext($CTX,"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$CMD,...)
      - pattern-not: |
          exec.Command("...","...","...",...)
      - pattern-not: |
          exec.CommandContext($CTX,"...","...","...",...)
    - pattern-either:
      - pattern: |
          exec.Command("=~/\/bin\/env/","=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$CMD,...)
      - pattern: |
          exec.CommandContext($CTX,"=~/\/bin\/env/","=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$CMD,...)
  - pattern-inside: |
      import "os/exec"
      ...
  - pattern-not-inside: |
      $CMD,$ERR := exec.LookPath("...");
      ...
  - pattern-not-inside: |
      $CMD = "...";
      ...
  message: Detected non-static command inside Command. Audit the input to 'exec.Command'.
    If unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - go
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command
    shortlink: https://sg.run/W8lA
    semgrep.dev:
      rule:
        rule_id: X5U8RQ
        version_id: zyTgBb
        url: https://semgrep.dev/playground/r/zyTgBb/go.lang.security.audit.dangerous-exec-command.dangerous-exec-command
        origin: community
  severity: ERROR
  languages:
  - go
- id: go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure
  patterns:
  - pattern-not-inside: |
      http.Cookie{
        ...,
        Secure: true,
        ...,
      }
  - pattern: |
      http.Cookie{
        ...,
      }
  message: A session cookie was detected without setting the 'Secure' flag. The 'secure'
    flag for cookies prevents the client from transmitting the cookie over insecure
    channels such as HTTP. Set the 'Secure' flag by setting 'Secure' to 'true' in
    the Options struct.
  metadata:
    cwe:
    - 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://github.com/0c34/govwa/blob/139693e56406b5684d2a6ae22c0af90717e149b8/util/cookie.go
    - https://golang.org/src/net/http/cookie.go
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure
    shortlink: https://sg.run/N4G7
    semgrep.dev:
      rule:
        rule_id: 7KUQ8X
        version_id: o5Tjkr
        url: https://semgrep.dev/playground/r/o5Tjkr/go.lang.security.audit.net.cookie-missing-secure.cookie-missing-secure
        origin: community
  fix-regex:
    regex: (Secure\s*:\s+)false
    replacement: \1true
  severity: WARNING
  languages:
  - go
- id: javascript.express.security.audit.res-render-injection.res-render-injection
  message: User controllable data `$REQ` enters `$RES.render(...)` this can lead to
    the loading of other HTML/templating pages that they may not be authorized to
    render. An attacker may attempt to use directory traversal techniques e.g. `../folder/index`
    to access other HTML pages on the file system. Where possible, do not allow users
    to define what should be  loaded in $RES.render or use an allow list for the existing
    application.
  metadata:
    interfile: true
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    category: security
    technology:
    - express
    references:
    - http://expressjs.com/en/4x/api.html#res.render
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.res-render-injection.res-render-injection
    shortlink: https://sg.run/eLjd
    semgrep.dev:
      rule:
        rule_id: QrUzrq
        version_id: rxTE2o
        url: https://semgrep.dev/playground/r/rxTE2o/javascript.express.security.audit.res-render-injection.res-render-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.render($SINK, ...)
    - focus-metavariable: $SINK
- id: javascript.express.security.audit.xss.direct-response-write.direct-response-write
  message: Detected directly writing to a Response object from user-defined input.
    This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting
    (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.
  metadata:
    interfile: true
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.direct-response-write.direct-response-write
    shortlink: https://sg.run/vzGl
    semgrep.dev:
      rule:
        rule_id: 3qUPA1
        version_id: d6TxQk
        url: https://semgrep.dev/playground/r/d6TxQk/javascript.express.security.audit.xss.direct-response-write.direct-response-write
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)
    - pattern-not-inside: |
        function ... ($REQ, $RES) {
            ...
            $RES.$SET('Content-Type', '$TYPE')
        }
    - pattern-not-inside: |
        $APP.$METHOD(..., function $FUNC($REQ, $RES) {
            ...
            $RES.$SET('Content-Type', '$TYPE')
        })
    - pattern-not-inside: |
        function ... ($REQ, $RES, $NEXT) {
            ...
            $RES.$SET('Content-Type', '$TYPE')
        }
    - pattern-not-inside: |
        function ... ($REQ, $RES) {
            ...
            $RES.set('$TYPE')
        }
    - pattern-not-inside: |
        $APP.$METHOD(..., function $FUNC($REQ, $RES) {
            ...
            $RES.set('$TYPE')
        })
    - pattern-not-inside: |
        function ... ($REQ, $RES, $NEXT) {
            ...
            $RES.set('$TYPE')
        }
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - pattern-not-inside: |
        ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
        {
            ...
            $RES.$SET('Content-Type', '$TYPE')
        }
    - pattern-not-inside: |
        ({ $REQ }: Request,$RES: Response) => {
            ...
            $RES.$SET('Content-Type', '$TYPE')
        }
    - pattern-not-inside: |
        ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
        {
            ...
            $RES.set('$TYPE')
        }
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-inside: function ... (..., $RES,...) {...}
    - pattern-either:
      - pattern: $RES.write($ARG)
      - pattern: $RES.send($ARG)
    - pattern-not: $RES. ... .set('...'). ... .send($ARG)
    - pattern-not: $RES. ... .type('...'). ... .send($ARG)
    - focus-metavariable: $ARG
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          import * as $S from "underscore.string"
          ...
      - pattern-inside: |
          import $S from "underscore.string"
          ...
      - pattern-inside: |
          $S = require("underscore.string")
          ...
    - pattern-either:
      - pattern: $S.escapeHTML(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "dompurify"
          ...
      - pattern-inside: |
          import { ..., $S,... } from "dompurify"
          ...
      - pattern-inside: |
          import * as $S from "dompurify"
          ...
      - pattern-inside: |
          $S = require("dompurify")
          ...
      - pattern-inside: |
          import $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          import * as $S from "isomorphic-dompurify"
          ...
      - pattern-inside: |
          $S = require("isomorphic-dompurify")
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $VALUE = $S(...)
            ...
        - pattern: $VALUE.sanitize(...)
      - patterns:
        - pattern-inside: |
            $VALUE = $S.sanitize
            ...
        - pattern: $S(...)
      - pattern: $S.sanitize(...)
      - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'xss';
          ...
      - pattern-inside: |
          import * as $S from 'xss';
          ...
      - pattern-inside: |
          $S = require("xss")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'sanitize-html';
          ...
      - pattern-inside: |
          import * as $S from "sanitize-html";
          ...
      - pattern-inside: |
          $S = require("sanitize-html")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $S = new Remarkable()
          ...
    - pattern: $S.render(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from 'express-xss-sanitizer';
          ...
      - pattern-inside: |
          import * as $S from "express-xss-sanitizer";
          ...
      - pattern-inside: |
          const { ..., $S, ... } = require('express-xss-sanitizer');
          ...
      - pattern-inside: |
          var { ..., $S, ... } = require('express-xss-sanitizer');
          ...
      - pattern-inside: |
          let { ...,$S,... } = require('express-xss-sanitizer');
          ...
      - pattern-inside: |
          $S = require("express-xss-sanitizer")
          ...
    - pattern: $S(...)
  - patterns:
    - pattern: $RES. ... .type('$F'). ... .send(...)
    - metavariable-regex:
        metavariable: $F
        regex: (?!.*text/html)
  - patterns:
    - pattern-inside: |
        $X = [...];
        ...
    - pattern: |
        if(<... !$X.includes($SOURCE)...>) {
            ...
            return ...
        }
        ...
    - pattern: $SOURCE
- id: javascript.sax.security.audit.sax-xxe.sax-xxe
  message: Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do
    anything with custom DTD entity definitions. If you're implementing a custom DTD
    entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities,
    or be absolutely sure that external entities received from a trusted source while
    processing XML.
  metadata:
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    references:
    - https://github.com/Leonidas-from-XIV/node-xml2js/issues/415
    - https://github.com/isaacs/sax-js
    category: security
    technology:
    - sax
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe
    shortlink: https://sg.run/5QEj
    semgrep.dev:
      rule:
        rule_id: qNUj7e
        version_id: A8Tn45
        url: https://semgrep.dev/playground/r/A8Tn45/javascript.sax.security.audit.sax-xxe.sax-xxe
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  pattern-either:
  - pattern: |
      require('sax');
      ...
      $PARSER.ondoctype = ...;
  - pattern: |-
      require('sax');
      ...
      $PARSER.on('doctype',...);
- id: terraform.aws.security.aws-cloudwatch-log-group-no-retention.aws-cloudwatch-log-group-no-retention
  patterns:
  - pattern: |
      resource "aws_cloudwatch_log_group" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_cloudwatch_log_group" $ANYTHING {
        ...
        retention_in_days = ...
        ...
      }
  message: The AWS CloudWatch Log Group has no retention. Missing retention in log
    groups can cause losing important event information.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-cloudwatch-log-group-no-retention.aws-cloudwatch-log-group-no-retention
    shortlink: https://sg.run/4lwl
    semgrep.dev:
      rule:
        rule_id: x8UGBG
        version_id: nWT3N3
        url: https://semgrep.dev/playground/r/nWT3N3/terraform.aws.security.aws-cloudwatch-log-group-no-retention.aws-cloudwatch-log-group-no-retention
        origin: community
- id: terraform.aws.security.aws-ssm-document-logging-issues.aws-ssm-document-logging-issues
  patterns:
  - pattern-either:
    - patterns:
      - pattern-not-inside: |
          resource "aws_ssm_document" $ANYTHING {
            ...
            document_format = "YAML"
            ...
          }
      - pattern: content = "$STATEMENT"
      - metavariable-pattern:
          metavariable: $STATEMENT
          language: json
          patterns:
          - pattern-either:
            - pattern: '"s3EncryptionEnabled": false'
            - pattern: '"cloudWatchEncryptionEnabled": false'
            - pattern: '{..., "cloudWatchLogGroupName": "", ..., "s3BucketName": "",
                ...}'
  message: The AWS SSM logs are unencrypted or disabled. Please enable logs and use
    AWS KMS encryption key to protect SSM logs. To create your own, create a aws_kms_key
    resource or use the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-ssm-document-logging-issues.aws-ssm-document-logging-issues
    shortlink: https://sg.run/EyWw
    semgrep.dev:
      rule:
        rule_id: 0oUrWL
        version_id: e1TBj6
        url: https://semgrep.dev/playground/r/e1TBj6/terraform.aws.security.aws-ssm-document-logging-issues.aws-ssm-document-logging-issues
        origin: community
- id: terraform.aws.security.aws-timestream-database-encrypted-with-cmk.aws-timestream-database-encrypted-with-cmk
  patterns:
  - pattern: |
      resource "aws_timestreamwrite_database" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_timestreamwrite_database" $ANYTHING {
        ...
        kms_key_id = ...
        ...
      }
  message: Ensure Timestream database is encrypted at rest using KMS CMKs. CMKs gives
    you control over the encryption key in terms of access and rotation.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-timestream-database-encrypted-with-cmk.aws-timestream-database-encrypted-with-cmk
    shortlink: https://sg.run/7nyZ
    semgrep.dev:
      rule:
        rule_id: KxU5Nn
        version_id: d6TYxR
        url: https://semgrep.dev/playground/r/d6TYxR/terraform.aws.security.aws-timestream-database-encrypted-with-cmk.aws-timestream-database-encrypted-with-cmk
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-transfer-server-is-public.aws-transfer-server-is-public
  patterns:
  - pattern: |
      resource "aws_transfer_server" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_transfer_server" $ANYTHING {
        ...
        endpoint_type = "VPC"
        ...
      }
  message: Transfer Server endpoint type should not have public or null configured
    in order to block public access. To fix this, set your `endpoint_type` to `"VPC"`.
  metadata:
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-284: Improper Access Control'
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-transfer-server-is-public.aws-transfer-server-is-public
    shortlink: https://sg.run/L39r
    semgrep.dev:
      rule:
        rule_id: qNUWl1
        version_id: ZRTbAj
        url: https://semgrep.dev/playground/r/ZRTbAj/terraform.aws.security.aws-transfer-server-is-public.aws-transfer-server-is-public
        origin: community
  languages:
  - hcl
  severity: WARNING
- id: terraform.aws.security.aws-workspaces-root-volume-unencrypted.aws-workspaces-root-volume-unencrypted
  patterns:
  - pattern: |
      resource "aws_workspaces_workspace" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_workspaces_workspace" $ANYTHING {
        ...
        root_volume_encryption_enabled = true
        ...
      }
  message: The AWS Workspace root volume is unencrypted. The AWS KMS encryption key
    protects root volume. To create your own, create a aws_kms_key resource or use
    the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-workspaces-root-volume-unencrypted.aws-workspaces-root-volume-unencrypted
    shortlink: https://sg.run/8gby
    semgrep.dev:
      rule:
        rule_id: lBUWB9
        version_id: nWT3RW
        url: https://semgrep.dev/playground/r/nWT3RW/terraform.aws.security.aws-workspaces-root-volume-unencrypted.aws-workspaces-root-volume-unencrypted
        origin: community
- id: terraform.aws.security.aws-workspaces-user-volume-unencrypted.aws-workspaces-user-volume-unencrypted
  patterns:
  - pattern: |
      resource "aws_workspaces_workspace" $ANYTHING {
        ...
      }
  - pattern-not-inside: |
      resource "aws_workspaces_workspace" $ANYTHING {
        ...
        user_volume_encryption_enabled = true
        ...
      }
  message: The AWS Workspace user volume is unencrypted. The AWS KMS encryption key
    protects user volume. To create your own, create a aws_kms_key resource or use
    the ARN string of a key in your account.
  languages:
  - hcl
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    cwe:
    - 'CWE-320: CWE CATEGORY: Key Management Errors'
    technology:
    - aws
    - terraform
    category: security
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-workspaces-user-volume-unencrypted.aws-workspaces-user-volume-unencrypted
    shortlink: https://sg.run/gXdJ
    semgrep.dev:
      rule:
        rule_id: YGUAXr
        version_id: ExTZwj
        url: https://semgrep.dev/playground/r/ExTZwj/terraform.aws.security.aws-workspaces-user-volume-unencrypted.aws-workspaces-user-volume-unencrypted
        origin: community
- id: terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials
  patterns:
  - pattern-inside: |
      resource "$ANYTING" $ANYTHING {
        ...
        environment {
          variables = {
            ...
          }
        }
        ...
      }
  - pattern-either:
    - pattern-inside: |
        AWS_ACCESS_KEY_ID = "$Y"
    - pattern-regex: |
        (?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9])
    - pattern-inside: |
        AWS_SECRET_ACCESS_KEY = "$Y"
    - pattern-regex: |
        (?<![A-Za-z0-9/+=])[A-Za-z0-9/+=]{40}(?![A-Za-z0-9/+=])
  - focus-metavariable: $Y
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    category: security
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    technology:
    - aws
    - terraform
    - secrets
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials
    shortlink: https://sg.run/wZqY
    semgrep.dev:
      rule:
        rule_id: JDU6gj
        version_id: 8KT8Ak
        url: https://semgrep.dev/playground/r/8KT8Ak/terraform.aws.security.aws-lambda-environment-credentials.aws-lambda-environment-credentials
        origin: community
  languages:
  - hcl
  severity: ERROR
- id: java.jsch.jsch-hardcoded-secret.jsch-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - SQL
    - jsch
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.jsch.jsch-hardcoded-secret.jsch-hardcoded-secret
    shortlink: https://sg.run/Dx0G
    semgrep.dev:
      rule:
        rule_id: 2ZUvXN
        version_id: zyT3Xl
        url: https://semgrep.dev/playground/r/zyT3Xl/java.jsch.jsch-hardcoded-secret.jsch-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        (JSch $SRC) = new JSch();
        ...
  pattern-sinks:
  - patterns:
    - pattern: $SESSION. ... .setPassword("$PASSWORD")
    - pattern-not: $SESSION. ... .setPassword("")
- id: java.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - LDAP
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret
    shortlink: https://sg.run/WGxE
    semgrep.dev:
      rule:
        rule_id: X5UzpX
        version_id: yeTgQe
        url: https://semgrep.dev/playground/r/yeTgQe/java.lang.security.properties.properties-hardcoded-secret.properties-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        new Properties();
  pattern-sinks:
  - patterns:
    - pattern: $VALUE.put(Context.SECURITY_CREDENTIALS, "...");
    - pattern-not: $VALUE.put(Context.SECURITY_CREDENTIALS, "");
- id: java.lang.security.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - SQL
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret
    shortlink: https://sg.run/0Bqw
    semgrep.dev:
      rule:
        rule_id: j2Unp0
        version_id: rxTvbG
        url: https://semgrep.dev/playground/r/rxTvbG/java.lang.security.sql.drivermanager-hardcoded-secret.drivermanager-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern: DriverManager.getConnection($DB,$USER,"...")
    - pattern: new DriverManagerDataSource($DB,$USER,"...")
    - patterns:
      - pattern: (DriverManagerDataSource $X). ... .setPassword("...")
  - pattern-not: new DriverManagerDataSource($DB,$USER,"")
  - pattern-not: $X. ... .getConnection($DB,$USER,"")
  - pattern-not: $X. ... .setPassword("")
- id: java.mysql.mysql-jdbc-hardcoded-secret.mysql-jdbc-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - SQL
    - mysql
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.mysql.mysql-jdbc-hardcoded-secret.mysql-jdbc-hardcoded-secret
    shortlink: https://sg.run/PKxz
    semgrep.dev:
      rule:
        rule_id: yyUxz8
        version_id: kbTPr9
        url: https://semgrep.dev/playground/r/kbTPr9/java.mysql.mysql-jdbc-hardcoded-secret.mysql-jdbc-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: (MysqlDataSource $SRC)
  pattern-sinks:
  - patterns:
    - pattern: $SRC.setPassword("...")
    - pattern-not: $SRC.setPassword("")
- id: java.mongo.java-mongo-hardcoded-secret.java-mongo-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Java
    - mongodb
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.mongo.java-mongo-hardcoded-secret.java-mongo-hardcoded-secret
    shortlink: https://sg.run/4Ko5
    semgrep.dev:
      rule:
        rule_id: 9AU4Lv
        version_id: O9T70v
        url: https://semgrep.dev/playground/r/O9T70v/java.mongo.java-mongo-hardcoded-secret.java-mongo-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import com.mongodb.$FOO;
        ...
    - pattern-inside: |
        new MongoClient(...)
- id: java.lang.security.system.system-setproperty-hardcoded-secret.system-setproperty-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: LOW
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - SQL
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/java.lang.security.system.system-setproperty-hardcoded-secret.system-setproperty-hardcoded-secret
    shortlink: https://sg.run/KAzn
    semgrep.dev:
      rule:
        rule_id: 10UynR
        version_id: X0TyZ9
        url: https://semgrep.dev/playground/r/X0TyZ9/java.lang.security.system.system-setproperty-hardcoded-secret.system-setproperty-hardcoded-secret
        origin: pro_rules
  languages:
  - java
  - kotlin
  patterns:
  - pattern-either:
    - pattern: System.setProperty("javax.net.ssl.keyStorePassword", $PASS);
    - pattern: System.setProperty("javax.net.ssl.trustStorePassword", $PASS);
  - pattern-not: $SYSTEM.setProperty(..., "");
  - focus-metavariable: $PASS
  - pattern: |
      "..."
  - pattern-not: |
      ""
- id: php.lang.security.audit.openssl-decrypt-validate.openssl-decrypt-validate
  patterns:
  - pattern: openssl_decrypt(...);
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      if($DECRYPTED_STRING === false){
        ...
      }
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      if($DECRYPTED_STRING == false){
        ...
      }
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      if(false === $DECRYPTED_STRING){
        ...
      }
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      if(false == $DECRYPTED_STRING){
        ...
      }
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      assertTrue(false !== $DECRYPTED_STRING,...);
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      assertTrue($DECRYPTED_STRING !== false,...);
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      $REFERENCE::assertTrue(false !== $DECRYPTED_STRING,...);
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      $REFERENCE::assertTrue($DECRYPTED_STRING !== false,...);
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      assert(false !== $DECRYPTED_STRING,...);
  - pattern-not-inside: |
      $DECRYPTED_STRING = openssl_decrypt(...);
      ...
      assert($DECRYPTED_STRING !== false,...);
  message: The function `openssl_decrypt` returns either a string of the decrypted
    data on success or `false` on failure. If the failure case is not handled, this
    could lead to undefined behavior in your application. Please handle the case where
    `openssl_decrypt` returns `false`.
  languages:
  - php
  severity: WARNING
  metadata:
    references:
    - https://www.php.net/manual/en/function.openssl-decrypt.php
    cwe:
    - 'CWE-252: Unchecked Return Value'
    owasp:
    - A02:2021 - Cryptographic Failures
    technology:
    - php
    - openssl
    category: security
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.audit.openssl-decrypt-validate.openssl-decrypt-validate
    shortlink: https://sg.run/kzn7
    semgrep.dev:
      rule:
        rule_id: YGUAoe
        version_id: BjTQ8j
        url: https://semgrep.dev/playground/r/BjTQ8j/php.lang.security.audit.openssl-decrypt-validate.openssl-decrypt-validate
        origin: community
- id: csharp.dotnet.security.net-webconfig-debug.net-webconfig-debug
  message: ASP.NET applications built with `debug` set to true in production may leak
    debug information to attackers. Debug mode also affects performance and reliability.
    Set `debug` to `false` or remove it from `<compilation ... />`
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: LOW
    confidence: LOW
    category: security
    cwe:
    - 'CWE-11: ASP.NET Misconfiguration: Creating Debug Binary'
    owasp:
    - A05:2021 - Security Misconfiguration
    references:
    - https://web.archive.org/web/20190919105353/https://blogs.msdn.microsoft.com/prashant_upadhyay/2011/07/14/why-debugfalse-in-asp-net-applications-in-production-environment/
    - https://msdn.microsoft.com/en-us/library/e8z01xdh.aspx
    subcategory:
    - audit
    technology:
    - .net
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.dotnet.security.net-webconfig-debug.net-webconfig-debug
    shortlink: https://sg.run/yPWx
    semgrep.dev:
      rule:
        rule_id: 0oUrvj
        version_id: 5PTl7J
        url: https://semgrep.dev/playground/r/5PTl7J/csharp.dotnet.security.net-webconfig-debug.net-webconfig-debug
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*web.config*'
  patterns:
  - pattern: |
      <compilation ... debug = "true" ... />
  - pattern-inside: |
      <system.web>
        ...
      </system.web>
- id: java.lang.security.audit.crypto.use-of-md5.use-of-md5
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use HMAC
    instead.
  languages:
  - java
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-328: Use of Weak Hash'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_MESSAGE_DIGEST_MD5
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.use-of-md5.use-of-md5
    shortlink: https://sg.run/ryJn
    semgrep.dev:
      rule:
        rule_id: KxU5lW
        version_id: rxTgnX
        url: https://semgrep.dev/playground/r/rxTgnX/java.lang.security.audit.crypto.use-of-md5.use-of-md5
        origin: community
  patterns:
  - pattern: |
      java.security.MessageDigest.getInstance($ALGO, ...);
  - metavariable-regex:
      metavariable: $ALGO
      regex: (.MD5.)
  - focus-metavariable: $ALGO
  fix: |
    "SHA-512"
- id: javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli
  message: Detected a `$IMPORT` statement that comes from a `$REQ` argument. This
    could lead to NoSQL injection if the variable is user-controlled and is not properly
    sanitized. Be sure to properly sanitize the data if you absolutely must pass request
    data into a mongo query.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    references:
    - https://owasp.org/www-pdf-archive/GOD16-NOSQL.pdf
    technology:
    - express
    - nodejs
    - mongodb
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli
    shortlink: https://sg.run/Qqxq
    semgrep.dev:
      rule:
        rule_id: WAUqgq
        version_id: WrTpBD
        url: https://semgrep.dev/playground/r/WrTpBD/javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... (...,$REQ, ...) {...}
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          (...,{ $REQ }: Request,...) => {...}
      - pattern-inside: |
          (...,{ $REQ }: $EXPRESS.Request,...) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $DB = require('$IMPORT')
              ...
          - pattern-inside: |
              import { ...,$DB,... } from '$IMPORT'
              ...
          - pattern-inside: |
              import * as $DB from '$IMPORT'
              ...
          - pattern-inside: |
              import $DB from '$IMPORT'
              ...
        - metavariable-regex:
            metavariable: $IMPORT
            regex: .*(mongoose|mongodb|database|collection)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $I = require('$IMPORT')
              ...
          - pattern-inside: |
              import { ...,$I,... } from '$IMPORT'
              ...
          - pattern-inside: |
              import * as $I from '$IMPORT'
              ...
          - pattern-inside: |
              import $I from '$IMPORT'
              ...
        - metavariable-regex:
            metavariable: $IMPORT
            regex: ^(mongoose|mongodb|mongojs)
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $I.connect(..., function(...,$DB,...){
                  ...
              })
          - pattern-inside: |
              $DB = $I.connect(...)
              ...
    - pattern-not-inside: |
        $APP.use(mongoSanitize())
    - pattern-either:
      - pattern-inside: $DB. ... .$M($VALUE,...)
    - metavariable-regex:
        metavariable: $M
        regex: (deleteMany|deleteOne|find|findById|findByIdAndDelete|findByIdAndRemove|findByIdAndUpdate|findOne|updateOne|findOneAndDelete|findOneAndRemove|findOneAndReplace|findOneAndUpdate|replaceOne|updateMany|update)
    - focus-metavariable: $VALUE
  pattern-sanitizers:
  - patterns:
    - pattern-inside: |
        $EMS = require('express-mongo-sanitize')
        ...
    - pattern: $EMS.sanitize(...)
  - patterns:
    - pattern-inside: |
        $MS = require('mongo-sanitize')
        ...
    - pattern: $MS.sanitize(...)
  - patterns:
    - pattern-inside: |
        $OBJ = require('...'). ... .ObjectId
        ...
    - pattern: $OBJ(...)
  - patterns:
    - pattern-inside: |
        $OBJ = require('...'). ... .isValid
        ...
    - pattern: $OBJ(...)
  - patterns:
    - pattern-either:
      - pattern: String(...)
      - pattern: $VALUE. ... .toString()
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
      - pattern: $TYPE. ... .isValid(...)
      - pattern: $TYPE. ... .ObjectId(...)
      - pattern: $TYPE. ... .ObjectID(...)
      - pattern: ObjectID(...)
      - pattern: ObjectId(...)
      - pattern: new $TYPE. ... .isValid(...)
      - pattern: new $TYPE. ... .ObjectId(...)
      - pattern: new $TYPE. ... .ObjectID(...)
      - pattern: new ObjectId(...)
      - pattern: new ObjectID(...)
  - patterns:
    - pattern: $THIS. ... .$HASH(...)
    - metavariable-regex:
        metavariable: $HASH
        regex: (hash|md5|sha1|sha256)
- id: typescript.typescript.node.security.node-rsa-weak-key.node-rsa-weak-key
  message: Use of RSA-$BITS, which is considered weak. Based on NIST standards, RSA
    keys should be at least 2048 bits.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
    technology:
    - nodejs
    - cryptography
    - crypto
    - rsa
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/typescript.typescript.node.security.node-rsa-weak-key.node-rsa-weak-key
    shortlink: https://sg.run/BpDR
    semgrep.dev:
      rule:
        rule_id: pKU0JR
        version_id: xyTer6
        url: https://semgrep.dev/playground/r/xyTer6/typescript.typescript.node.security.node-rsa-weak-key.node-rsa-weak-key
        origin: pro_rules
  languages:
  - javascript
  - typescript
  patterns:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import $CRYPTO from "crypto"
            ...
        - pattern-inside: |
            import { ..., $CRYPTO,... } from "crypto"
            ...
        - pattern-inside: |
            import * as $CRYPTO from "crypto"
            ...
        - pattern-inside: |
            $CRYPTO = require("crypto")
            ...
      - pattern-either:
        - pattern-inside: |
            $CRYPTO. ... .$FUNC("rsa", {
              modulusLength: $BITS,
            })
        - pattern-inside: |
            $UTIL. ... .promisify($CRYPTO.$FUNC)("rsa", {
                modulusLength: $BITS,
            })
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import $CRYPTO from "node-rsa"
            ...
        - pattern-inside: |
            import { ..., $CRYPTO,... } from "node-rsa"
            ...
        - pattern-inside: |
            import * as $CRYPTO from "node-rsa"
            ...
        - pattern-inside: |
            $CRYPTO = require("node-rsa")
            ...
      - pattern-either:
        - pattern: |
            new $CRYPTO({b: $BITS});
    - patterns:
      - pattern-either:
        - pattern-inside: |
            import $CRYPTO from "node-forge"
            ...
        - pattern-inside: |
            import { ..., $CRYPTO,... } from "node-forge"
            ...
        - pattern-inside: |
            import * as $CRYPTO from "node-forge"
            ...
        - pattern-inside: |
            $CRYPTO = require("node-forge")
            ...
      - pattern-either:
        - pattern-inside: |
            $FORGE = $CRYPTO.pki
            ...
        - pattern-inside: |
            $FORGE = $CRYPTO.pki.rsa
            ...
      - pattern-either:
        - pattern: |
            $FORGE.rsa.$FUNC($BITS)
        - pattern: |
            $FORGE.$FUNC({bits:$BITS})
  - focus-metavariable: $BITS
  - metavariable-comparison:
      metavariable: $BITS
      comparison: $BITS < 2048
- id: javascript.express.mysql.express-mysql-sqli.express-mysql-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://sequelize.org/docs/v6/core-concepts/raw-queries/#replacements
    technology:
    - express
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.mysql.express-mysql-sqli.express-mysql-sqli
    shortlink: https://sg.run/306W
    semgrep.dev:
      rule:
        rule_id: 0oUKZo
        version_id: zyT39l
        url: https://semgrep.dev/playground/r/zyT39l/javascript.express.mysql.express-mysql-sqli.express-mysql-sqli
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $MYSQL = require('$IMPORT')
          ...
      - pattern-inside: |
          $MYSQL = require('$IMPORT').$FUNC(...)
          ...
      - pattern-inside: |
          import $MYSQL from '$IMPORT'
          ...
      - pattern-inside: |
          import { ..., $MYSQL, ... } from '$IMPORT'
          ...
      - pattern-inside: |
          import $MYSQL,{ ... } from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $MYSQL from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(mysql|mysql2)
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $CONN = $MYSQL. ...
              ...
          - pattern-inside: |
              $CONN = await $MYSQL. ...
              ...
          - patterns:
            - pattern-inside: |
                $POOL = $MYSQL. ...
                ...
            - pattern-inside: |
                $CONN = $POOL. ...
                ...
          - patterns:
            - pattern-inside: |
                $POOL = await $MYSQL. ...
                ...
            - pattern-inside: |
                $CONN = await $POOL. ...
                ...
        - pattern: |
            $CONN. ... .$QUERY($SINK, ...)
      - pattern: |
          $MYSQL. ... .$QUERY($SINK, ...)
      - patterns:
        - pattern-inside: |
            $CONN.getConnection(function(..., $F,...) {
              ...
            })
        - pattern: $F.$QUERY($SINK,...)
    - pattern-not: $X. ... .$QUERY({...,sql:'...',...},...)
    - pattern-not: $X. ... .$QUERY('...',...)
    - metavariable-regex:
        metavariable: $QUERY
        regex: ^(query|execute)$
    - focus-metavariable: $SINK
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
      - pattern: $MYSQL. ... .escape(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $ESCAPE = require('$IMPORT'). ... .escape
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(mysql|mysql2)
    - pattern-either:
      - pattern: $ESCAPE(...)
      - pattern: $ESCAPE.apply(...)
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import { ...,$ESCAPE, ... } from 'mysql2'
          ...
    - metavariable-pattern:
        metavariable: $ESCAPE
        patterns:
        - pattern-either:
          - pattern: escape(...)
          - pattern: escape.apply(...)
          - pattern: escapeId(...)
  - patterns:
    - pattern: $THIS. ... .$HASH(...)
    - metavariable-regex:
        metavariable: $HASH
        regex: (hash|md5|sha1|sha256)
- id: javascript.express.pg.express-pg-sqli.express-pg-sqli
  message: Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.npmjs.com/package/pg
    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
    technology:
    - pg
    - express
    - nodejs
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.pg.express-pg-sqli.express-pg-sqli
    shortlink: https://sg.run/4Ko9
    semgrep.dev:
      rule:
        rule_id: KxUKRg
        version_id: pZTDJy
        url: https://semgrep.dev/playground/r/pZTDJy/javascript.express.pg.express-pg-sqli.express-pg-sqli
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: function ... ($REQ, $RES) {...}
      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}
      - patterns:
        - pattern-either:
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})
          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)$
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
      - pattern: $REQ.cookies
      - pattern: $REQ.headers
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) => {...}
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) => {...}
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: cookies
      - pattern: headers
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import $S from "pg"
          ...
      - pattern-inside: |
          import { ...,$S,... } from "pg"
          ...
      - pattern-inside: |
          import * as $S from "pg"
          ...
      - pattern-inside: |
          $S =  require("pg")
          ...
    - pattern-either:
      - pattern-inside: |
          $POOL = new $S(...)
          ...
      - pattern-inside: |
          $POOL = new $S.$FUNC(...)
          ...
    - pattern: |
        $POOL. ... .query($QUERY,...)
    - focus-metavariable: $QUERY
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern: parseInt(...)
      - pattern: Number.parseInt(...)
- id: javascript.knex.node-knex-hardcoded-secret.node-knex-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Knex
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.knex.node-knex-hardcoded-secret.node-knex-hardcoded-secret
    shortlink: https://sg.run/PKxv
    semgrep.dev:
      rule:
        rule_id: qNURrL
        version_id: yeTgze
        url: https://semgrep.dev/playground/r/yeTgze/javascript.knex.node-knex-hardcoded-secret.node-knex-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          {...,connection: {...,password:'...',...},...}
      - pattern-not-inside: |
          {...,connection: {...,password:'',...},...}
    - patterns:
      - pattern: |
          return {...,password:'...',...}
      - pattern-not: |
          return {...,password:'',...}
      - pattern-inside: |
          {...,connection: async () => {...} ,...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          require('knex')($FOO);
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $SQL = require('knex')
              ...
          - pattern-inside: |
              import $SQL from 'knex'
              ...
          - pattern-inside: |
              import * as $SQL from 'knex'
              ...
          - pattern-inside: |
              import {...,$SQL,...} from 'knex'
              ...
        - pattern-inside: |
            $SQL($FOO)
    - focus-metavariable: $FOO
- id: javascript.mongoose.node-mongoose-hardcoded-secret.node-mongoose-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mongoose
    - mongodb
    - nosql
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.mongoose.node-mongoose-hardcoded-secret.node-mongoose-hardcoded-secret
    shortlink: https://sg.run/JRoP
    semgrep.dev:
      rule:
        rule_id: lBUJY1
        version_id: e1TKw2
        url: https://semgrep.dev/playground/r/e1TKw2/javascript.mongoose.node-mongoose-hardcoded-secret.node-mongoose-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $DB = require('$IMPORT')
          ...
      - pattern-inside: |
          $DB = require('$IMPORT').Mongoose
          ...
      - pattern-inside: |
          import $DB from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $DB from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$DB,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (mongoose)
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $MONGO = new $DB.Mongoose(...)
            ...
        - pattern: $MONGO. ... .connect($FOO, ...)
      - patterns:
        - pattern-inside: |
            $MONGO = new $DB(...)
            ...
        - pattern: $MONGO. ... .connect($FOO, ...)
      - pattern-inside: |
          $DB. ... .connect($FOO, ...)
    - focus-metavariable: $FOO
- id: javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mysql
    - sql
    - mysql2
    - nodejs
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret
    shortlink: https://sg.run/GJ36
    semgrep.dev:
      rule:
        rule_id: 6JU2k0
        version_id: nWTNlX
        url: https://semgrep.dev/playground/r/nWTNlX/javascript.mysql.node-mysql-hardcoded-secret.node-mysql-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        {...,password:'...',...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $MYSQL = require('$IMPORT')
          ...
      - pattern-inside: |
          import $MYSQL from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $MYSQL from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$MYSQL,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (mysql|mysql2)
    - pattern-either:
      - pattern-inside: |
          $MYSQL. ... .createConnection($FOO)
    - focus-metavariable: $FOO
- id: javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret
    shortlink: https://sg.run/RlxN
    semgrep.dev:
      rule:
        rule_id: oqUbPW
        version_id: 7ZTRwk
        url: https://semgrep.dev/playground/r/7ZTRwk/javascript.pg.node-pg-hardcoded-secret.node-pg-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          "$URL"
      - metavariable-regex:
          metavariable: $URL
          regex: (.*postgres|postgresql|tcp.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
    - pattern-inside: |
        {...,password:'...',...}
    - pattern-inside: |
        {...,secretAccessKey:'...',...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('pg')
          ...
      - pattern-inside: |
          import $SQL from 'pg'
          ...
      - pattern-inside: |
          import * as $SQL from 'pg'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from 'pg'
          ...
    - pattern-either:
      - pattern-inside: |
          new $SQL($FOO)
      - pattern-inside: |
          new $SQL.Client($FOO)
      - pattern-inside: |
          new $SQL.Pool($FOO)
    - focus-metavariable: $FOO
- id: javascript.sequelize.node-sequelize-hardcoded-secret.node-sequelize-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - Sequelize
    - Nodejs
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.sequelize.node-sequelize-hardcoded-secret.node-sequelize-hardcoded-secret
    shortlink: https://sg.run/ApBB
    semgrep.dev:
      rule:
        rule_id: zdUb99
        version_id: PkTGKg
        url: https://semgrep.dev/playground/r/PkTGKg/javascript.sequelize.node-sequelize-hardcoded-secret.node-sequelize-hardcoded-secret
        origin: pro_rules
  languages:
  - js
  - ts
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          {...,password:'...',...}
      - pattern-not-inside: |
          {...,password:'',...}
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $SQL = require('$IMPORT')
          ...
      - pattern-inside: |
          import $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import * as $SQL from '$IMPORT'
          ...
      - pattern-inside: |
          import {...,$SQL,...} from '$IMPORT'
          ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(sequelize)$
    - patterns:
      - pattern-inside: |
          new $SQL($PWD)
      - focus-metavariable: $PWD
- id: python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw
  message: Data that is possible user-controlled from a python request is passed to
    `raw()`. This could lead to SQL injection and attackers gaining access to protected
    information. Instead, use django's QuerySets, which are built with query parameterization
    and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw
    shortlink: https://sg.run/l2v9
    semgrep.dev:
      rule:
        rule_id: X5U8v5
        version_id: YDT838
        url: https://semgrep.dev/playground/r/YDT838/python.django.security.injection.sql.sql-injection-using-raw.sql-injection-using-raw
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W.get(...), ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W.get(...)}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: return $MODEL.objects.raw(..., request.$W.get(...), ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W(...), ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W(...)}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: return $MODEL.objects.raw(..., request.$W(...), ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W[...], ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W[...]}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: return $MODEL.objects.raw(..., request.$W[...], ...)
    - pattern: $MODEL.objects.raw(..., $S.format(..., request.$W, ...), ...)
    - pattern: $MODEL.objects.raw(..., $S % request.$W, ...)
    - pattern: $MODEL.objects.raw(..., f"...{request.$W}...", ...)
    - pattern: $MODEL.objects.raw(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $MODEL.objects.raw(..., $INTERM, ...)
    - pattern: $A = $MODEL.objects.raw(..., request.$W, ...)
    - pattern: return $MODEL.objects.raw(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $MODEL.objects.raw($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $MODEL.objects.raw($INTERM, ...)
- id: python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host
  message: Running flask app with host 0.0.0.0 could expose the server publicly.
  metadata:
    cwe:
    - 'CWE-668: Exposure of Resource to Wrong Sphere'
    owasp:
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - flask
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host
    shortlink: https://sg.run/eLby
    semgrep.dev:
      rule:
        rule_id: L1Uy1n
        version_id: K3TOpE
        url: https://semgrep.dev/playground/r/K3TOpE/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: app.run(..., host="0.0.0.0", ...)
  - pattern: app.run(..., "0.0.0.0", ...)
- id: python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly
  patterns:
  - pattern-not-inside: |
      if __name__ == '__main__':
        ...
  - pattern-not-inside: |
      def $X(...):
        ...
  - pattern: app.run(...)
  message: top-level app.run(...) is ignored by flask. Consider putting app.run(...)
    behind a guard, like inside a function
  metadata:
    cwe:
    - 'CWE-668: Exposure of Resource to Wrong Sphere'
    owasp:
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - flask
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly
    shortlink: https://sg.run/vz5b
    semgrep.dev:
      rule:
        rule_id: 8GUjdX
        version_id: qkTK0D
        url: https://semgrep.dev/playground/r/qkTK0D/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.flask.security.injection.os-system-injection.os-system-injection
  languages:
  - python
  severity: ERROR
  message: User data detected in os.system. This could be vulnerable to a command
    injection and should be avoided. If this must be done, use the 'subprocess' module
    instead and pass the arguments as a list.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    category: security
    technology:
    - flask
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.injection.os-system-injection.os-system-injection
    shortlink: https://sg.run/4xzz
    semgrep.dev:
      rule:
        rule_id: BYUN99
        version_id: yeTd6w
        url: https://semgrep.dev/playground/r/yeTd6w/python.flask.security.injection.os-system-injection.os-system-injection
        origin: community
  pattern-either:
  - patterns:
    - pattern: os.system(...)
    - pattern-either:
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            os.system(..., <... $ROUTEVAR ...>, ...)
      - pattern-inside: |
          @$APP.route($ROUTE, ...)
          def $FUNC(..., $ROUTEVAR, ...):
            ...
            $INTERM = <... $ROUTEVAR ...>
            ...
            os.system(..., <... $INTERM ...>, ...)
  - pattern: os.system(..., <... flask.request.$W.get(...) ...>, ...)
  - pattern: os.system(..., <... flask.request.$W[...] ...>, ...)
  - pattern: os.system(..., <... flask.request.$W(...) ...>, ...)
  - pattern: os.system(..., <... flask.request.$W ...>, ...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W.get(...) ...>
        ...
        os.system(<... $INTERM ...>)
    - pattern: os.system(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W[...] ...>
        ...
        os.system(<... $INTERM ...>)
    - pattern: os.system(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W(...) ...>
        ...
        os.system(<... $INTERM ...>)
    - pattern: os.system(...)
  - patterns:
    - pattern-inside: |
        $INTERM = <... flask.request.$W ...>
        ...
        os.system(<... $INTERM ...>)
    - pattern: os.system(...)
- id: python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute
  message: User-controlled data from a request is passed to 'execute()'. This could
    lead to a SQL injection and therefore protected information could be leaked. Instead,
    use django's QuerySets, which are built with query parameterization and therefore
    not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute
    shortlink: https://sg.run/qx7y
    semgrep.dev:
      rule:
        rule_id: 2ZUbDL
        version_id: DkT4q8
        url: https://semgrep.dev/playground/r/DkT4q8/python.django.security.injection.sql.sql-injection-using-db-cursor-execute.sql-injection-db-cursor-execute
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W.get(...), ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W.get(...), ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W.get(...)}...", ...)
    - pattern: $CURSOR.execute(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W.get(...), ...)
    - pattern: return $CURSOR.execute(..., request.$W.get(...), ...)
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W(...), ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W(...)}...", ...)
    - pattern: $CURSOR.execute(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W(...), ...)
    - pattern: return $CURSOR.execute(..., request.$W(...), ...)
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W[...], ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W[...]}...", ...)
    - pattern: $CURSOR.execute(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W[...], ...)
    - pattern: return $CURSOR.execute(..., request.$W[...], ...)
    - pattern: $CURSOR.execute(..., $S.format(..., request.$W, ...), ...)
    - pattern: $CURSOR.execute(..., $S % request.$W, ...)
    - pattern: $CURSOR.execute(..., f"...{request.$W}...", ...)
    - pattern: $CURSOR.execute(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        $CURSOR.execute(..., $INTERM, ...)
    - pattern: $A = $CURSOR.execute(..., request.$W, ...)
    - pattern: return $CURSOR.execute(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $CURSOR.execute($STR % (..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
    - pattern: |-
        $DATA = request.$W
        ...
        $INTERM = $STR % (..., $DATA, ...)
        ...
        $CURSOR.execute($INTERM, ...)
- id: python.django.security.injection.request-data-fileresponse.request-data-fileresponse
  message: Found user-controlled request data being passed into a file open, which
    is them passed as an argument into the FileResponse. This is dangerous because
    an attacker could specify an arbitrary file to read, which could result in leaking
    important data. Be sure to validate or sanitize the user-inputted filename in
    the request data before using it in FileResponse.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    references:
    - https://django-book.readthedocs.io/en/latest/chapter20.html#cross-site-scripting-xss
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.request-data-fileresponse.request-data-fileresponse
    shortlink: https://sg.run/W862
    semgrep.dev:
      rule:
        rule_id: GdU7QR
        version_id: X0T6gz
        url: https://semgrep.dev/playground/r/X0T6gz/python.django.security.injection.request-data-fileresponse.request-data-fileresponse
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.http.FileResponse(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W.get(...), ...)
    - pattern: return django.http.FileResponse(..., request.$W.get(...), ...)
    - pattern: django.http.FileResponse(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W(...), ...)
    - pattern: return django.http.FileResponse(..., request.$W(...), ...)
    - pattern: django.http.FileResponse(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W[...], ...)
    - pattern: return django.http.FileResponse(..., request.$W[...], ...)
    - pattern: django.http.FileResponse(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.http.FileResponse(..., open($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = open($DATA, ...)
        ...
        django.http.FileResponse(..., $INTERM, ...)
    - pattern: $A = django.http.FileResponse(..., request.$W, ...)
    - pattern: return django.http.FileResponse(..., request.$W, ...)
- id: c.lang.security.double-free.double-free
  patterns:
  - pattern-not: |
      free($VAR);
      ...
      $VAR = NULL;
      ...
      free($VAR);
  - pattern-not: |
      free($VAR);
      ...
      $VAR = malloc(...);
      ...
      free($VAR);
  - pattern-inside: |
      free($VAR);
      ...
      $FREE($VAR);
  - metavariable-pattern:
      metavariable: $FREE
      pattern: free
  - focus-metavariable: $FREE
  message: Variable '$VAR' was freed twice. This can lead to undefined behavior.
  metadata:
    cwe:
    - 'CWE-415: Double Free'
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    references:
    - https://cwe.mitre.org/data/definitions/415.html
    - https://owasp.org/www-community/vulnerabilities/Doubly_freeing_memory
    category: security
    technology:
    - c
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/c.lang.security.double-free.double-free
    shortlink: https://sg.run/eLl0
    semgrep.dev:
      rule:
        rule_id: JDUyw8
        version_id: O9TZ10
        url: https://semgrep.dev/playground/r/O9TZ10/c.lang.security.double-free.double-free
        origin: community
  languages:
  - c
  severity: ERROR
- id: generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key
  pattern-regex: sk_live_[0-9a-z]{32}
  languages:
  - regex
  message: Picatic API Key detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - picatic
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key
    shortlink: https://sg.run/rdGA
    semgrep.dev:
      rule:
        rule_id: EwU274
        version_id: A8Tywj
        url: https://semgrep.dev/playground/r/A8Tywj/generic.secrets.security.detected-picatic-api-key.detected-picatic-api-key
        origin: community
- id: generic.secrets.security.detected-aws-session-token.detected-aws-session-token
  patterns:
  - pattern-regex: ((?i)AWS_SESSION_TOKEN)\s*(:|=>|=)\s*([A-Za-z0-9/+=]{16,})
  - pattern-not-regex: (?i)example|sample|test|fake
  - metavariable-analysis:
      analyzer: entropy
      metavariable: $3
  languages:
  - regex
  message: AWS Session Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - aws
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-aws-session-token.detected-aws-session-token
    shortlink: https://sg.run/DoRW
    semgrep.dev:
      rule:
        rule_id: X5U8Er
        version_id: RGT4LN
        url: https://semgrep.dev/playground/r/RGT4LN/generic.secrets.security.detected-aws-session-token.detected-aws-session-token
        origin: community
- id: generic.secrets.security.detected-codeclimate.detected-codeclimate
  pattern-regex: (?i)codeclima.{0,50}["|'|`]?[0-9a-f]{64}["|'|`]?
  languages:
  - regex
  message: CodeClimate detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go
    category: security
    technology:
    - secrets
    - codeclimate
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-codeclimate.detected-codeclimate
    shortlink: https://sg.run/W8yz
    semgrep.dev:
      rule:
        rule_id: j2UvW7
        version_id: NdT545
        url: https://semgrep.dev/playground/r/NdT545/generic.secrets.security.detected-codeclimate.detected-codeclimate
        origin: community
- id: contrib.nodejsscan.crypto_node.node_sha1
  message: The SHA1 hashing algorithm is considered to be weak. If this is used in
    any sensitive operation such as password hashing, or is used to ensure data integrity
    (collision sensitive) then you should use a stronger hashing algorithm. For passwords,
    consider using `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider
    using `SHA-256`
  severity: WARNING
  metadata:
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    category: security
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    technology:
    - node.js
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/contrib.nodejsscan.crypto_node.node_sha1
    shortlink: https://sg.run/ZvEx
    semgrep.dev:
      rule:
        rule_id: ReUgYx
        version_id: pZTo0A
        url: https://semgrep.dev/playground/r/pZTo0A/contrib.nodejsscan.crypto_node.node_sha1
        origin: community
  languages:
  - javascript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: |
          "SHA1"
      - pattern: |
          "sha1"
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        $CRYPTO.createHash(...)
- id: javascript.express.direct-response-write-with-header.direct-response-write-with-header
  message: Detected directly writing to a Response object from user-defined input.
    This bypasses any HTML escaping and may expose your application to a Cross-Site-scripting
    (XSS) vulnerability. Instead, use 'resp.render()' to render safely escaped HTML.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html
    technology:
    - express
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/javascript.express.direct-response-write-with-header.direct-response-write-with-header
    shortlink: https://sg.run/0B3j
    semgrep.dev:
      rule:
        rule_id: v8U0KP
        version_id: RGTGJW
        url: https://semgrep.dev/playground/r/RGTGJW/javascript.express.direct-response-write-with-header.direct-response-write-with-header
        origin: pro_rules
  languages:
  - javascript
  - typescript
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          function ... ($REQ, $RES) {
              ...
              $RES.$SET('Content-Type', 'text/html')
              ...
          }
      - pattern-inside: |
          function ... ($REQ, $RES, $NEXT) {
              ...
              $RES.$SET('Content-Type', 'text/html')
          }
      - pattern-inside: |
          function ... ($REQ, $RES) {
              ...
              $RES.$SET('content-type', 'text/html')
              ...
          }
      - pattern-inside: |
          function ... ($REQ, $RES, $NEXT) {
              ...
              $RES.$SET('content-type', 'text/html')
          }
      - pattern-inside: |
          function ... ($REQ, $RES) {
              ...
              $RES.set('.html')
              ...
          }
      - pattern-inside: |
          function ... ($REQ, $RES, $NEXT) {
              ...
              $RES.set('text/html')
              ...
          }
      - patterns:
        - pattern-either:
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.set('text/html')
                  ...
              })
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.set('.html')
                  ...
              })
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.$SET('Content-Type', 'text/html')
                  ...
              })
          - pattern-inside: |
              $APP.$METHOD(..., function $FUNC($REQ, $RES) {
                  ...
                  $RES.$SET('content-type', 'text/html')
                  ...
              })
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(get|post|put|head|delete|options)
    - pattern-either:
      - pattern: $REQ.query
      - pattern: $REQ.body
      - pattern: $REQ.params
  - patterns:
    - pattern-either:
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {
              ...
              $RES.$SET('content-type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {
              ...
              $RES.$SET('Content-Type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>
          {
              ...
              $RES.set('.html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.set('text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.$SET('content-type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.$SET('Content-Type', 'text/html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.set('.html')
              ...
          }
      - pattern-inside: |
          ({ $REQ }: Request,$RES: Response) =>
          {
              ...
              $RES.set('text/html')
              ...
          }
    - focus-metavariable: $REQ
    - pattern-either:
      - pattern: params
      - pattern: query
      - pattern: body
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $RES.write($ARG)
      - pattern: $RES.send($ARG)
    - focus-metavariable: $ARG
- id: generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  languages:
  - generic
  severity: WARNING
  message: The protocol scheme for this proxy is dynamically determined. This can
    be dangerous if the scheme can be injected by an attacker because it may forcibly
    alter the connection scheme. Consider hardcoding a scheme for this proxy.
  metadata:
    cwe:
    - 'CWE-16: CWE CATEGORY: Configuration'
    references:
    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md
    category: security
    technology:
    - nginx
    confidence: MEDIUM
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme
    shortlink: https://sg.run/EkAo
    semgrep.dev:
      rule:
        rule_id: ReUg7n
        version_id: WrTkLl
        url: https://semgrep.dev/playground/r/WrTkLl/generic.nginx.security.dynamic-proxy-scheme.dynamic-proxy-scheme
        origin: community
  pattern: proxy_pass $$SCHEME:// ...;
- id: generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token
  pattern-regex: '[tT][wW][iI][tT][tT][eE][rR].*[1-9][0-9]+-[0-9a-zA-Z]{40}'
  languages:
  - regex
  message: Twitter Access Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json
    category: security
    technology:
    - secrets
    - twitter
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token
    shortlink: https://sg.run/7oR4
    semgrep.dev:
      rule:
        rule_id: AbUzDp
        version_id: 9lTExq
        url: https://semgrep.dev/playground/r/9lTExq/generic.secrets.security.detected-twitter-access-token.detected-twitter-access-token
        origin: community
- id: go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          exec.Cmd {...,Path: $CMD,...}
      - pattern-not: |
          exec.Cmd {...,Path: "...",...}
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
    - patterns:
      - pattern: |
          exec.Cmd {...,Args: $ARGS,...}
      - pattern-not: |
          exec.Cmd {...,Args: []string{...},...}
      - pattern-not-inside: |
          $ARGS = []string{"...",...};
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
          $ARGS = []string{$CMD,...};
          ...
      - pattern-not-inside: |
          $CMD = exec.LookPath("...");
          ...
          $ARGS = []string{$CMD,...};
          ...
    - patterns:
      - pattern: |
          exec.Cmd {...,Args: []string{$CMD,...},...}
      - pattern-not: |
          exec.Cmd {...,Args: []string{"...",...},...}
      - pattern-not-inside: |
          $CMD,$ERR := exec.LookPath("...");
          ...
      - pattern-not-inside: |
          $CMD = "...";
          ...
    - patterns:
      - pattern-either:
        - pattern: |
            exec.Cmd {...,Args: []string{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$EXE,...},...}
        - patterns:
          - pattern: |
              exec.Cmd {...,Args: []string{$CMD,"-c",$EXE,...},...}
          - pattern-inside: |
              $CMD,$ERR := exec.LookPath("=~/(sh|bash|ksh|csh|tcsh|zsh)/");
              ...
      - pattern-not: |
          exec.Cmd {...,Args: []string{"...","...","...",...},...}
      - pattern-not-inside: |
          $EXE = "...";
          ...
  - pattern-inside: |
      import "os/exec"
      ...
  message: Detected non-static command inside exec.Cmd. Audit the input to 'exec.Cmd'.
    If unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - go
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd
    shortlink: https://sg.run/Dorj
    semgrep.dev:
      rule:
        rule_id: 2ZUb8l
        version_id: A8Tyoj
        url: https://semgrep.dev/playground/r/A8Tyoj/go.lang.security.audit.dangerous-exec-cmd.dangerous-exec-cmd
        origin: community
  severity: ERROR
  languages:
  - go
- id: go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
  message: Detected MD5 hash algorithm which is considered insecure. MD5 is not collision
    resistant and is therefore not suitable as a cryptographic signature. Use SHA256
    or SHA3 instead.
  languages:
  - go
  severity: WARNING
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec#available-rules
    category: security
    technology:
    - go
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
    shortlink: https://sg.run/2xB5
    semgrep.dev:
      rule:
        rule_id: x8Un6q
        version_id: l4TRdE
        url: https://semgrep.dev/playground/r/l4TRdE/go.lang.security.audit.crypto.use_of_weak_crypto.use-of-md5
        origin: community
  patterns:
  - pattern-inside: |
      import "crypto/md5"
      ...
  - pattern-either:
    - pattern: |
        md5.New()
    - pattern: |
        md5.Sum(...)
- id: ruby.rails.security.brakeman.check-redirect-to.check-redirect-to
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: params
      - pattern: cookies
      - pattern: request.env
      - pattern: url_for(params[...],...,:only_path => false,...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: |
            $F(...)
        - metavariable-pattern:
            metavariable: $F
            patterns:
            - pattern-not-regex: (params|url_for|cookies|request.env|permit|redirect_to)
      - pattern: |
          params.merge! :only_path => true
          ...
      - pattern: |
          params.slice(...)
          ...
      - pattern: |
          redirect_to [...]
      - patterns:
        - pattern: |
            $MODEL. ... .$M(...)
            ...
        - metavariable-regex:
            metavariable: $MODEL
            regex: '[A-Z]\w+'
        - metavariable-regex:
            metavariable: $M
            regex: (all|create|find|find_by|find_by_sql|first|last|new|from|group|having|joins|lock|order|reorder|select|where|take)
      - patterns:
        - pattern: |
            params.$UNSAFE_HASH.merge(...,:only_path => true,...)
            ...
        - metavariable-regex:
            metavariable: $UNSAFE_HASH
            regex: to_unsafe_h(ash)?
      - patterns:
        - pattern: params.permit(...,$X,...)
        - metavariable-pattern:
            metavariable: $X
            patterns:
            - pattern-not-regex: (host|port|(sub)?domain)
  pattern-sinks:
  - patterns:
    - pattern: $X
    - pattern-inside: |
        redirect_to $X, ...
    - pattern-not-regex: params\.\w+(?<!permit)\(.*?\)
  message: Found potentially unsafe handling of redirect behavior $X. Do not pass
    `params` to `redirect_to` without the `:only_path => true` hash value.
  languages:
  - ruby
  severity: WARNING
  metadata:
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_redirect.rb
    category: security
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    technology:
    - ruby
    - rails
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    owasp:
    - A01:2021 - Broken Access Control
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.brakeman.check-redirect-to.check-redirect-to
    shortlink: https://sg.run/eJNX
    semgrep.dev:
      rule:
        rule_id: kxUOJ6
        version_id: QkTBL5
        url: https://semgrep.dev/playground/r/QkTBL5/ruby.rails.security.brakeman.check-redirect-to.check-redirect-to
        origin: community
- id: go.lang.security.audit.crypto.tls.tls-with-insecure-cipher
  message: Detected an insecure CipherSuite via the 'tls' module. This suite is considered
    weak. Use the function 'tls.CipherSuites()' to get a list of good cipher suites.
    See https://golang.org/pkg/crypto/tls/#InsecureCipherSuites for why and what other
    cipher suites to use.
  metadata:
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/tls.go
    references:
    - https://golang.org/pkg/crypto/tls/#InsecureCipherSuites
    category: security
    technology:
    - go
    confidence: HIGH
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.tls.tls-with-insecure-cipher
    shortlink: https://sg.run/px8N
    semgrep.dev:
      rule:
        rule_id: wdUJYk
        version_id: 3ZT7y1
        url: https://semgrep.dev/playground/r/3ZT7y1/go.lang.security.audit.crypto.tls.tls-with-insecure-cipher
        origin: community
  languages:
  - go
  severity: WARNING
  pattern-either:
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_RC4_128_SHA, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_RSA_WITH_AES_128_CBC_SHA256, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, ...}}
  - pattern: |
      tls.Config{..., CipherSuites: []$TYPE{..., tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, ...}}
  - pattern: |
      tls.CipherSuite{..., TLS_RSA_WITH_RC4_128_SHA, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_RSA_WITH_3DES_EDE_CBC_SHA, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_RSA_WITH_AES_128_CBC_SHA256, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_RC4_128_SHA, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, ...}
  - pattern: |
      tls.CipherSuite{..., TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, ...}
- id: go.otto.security.audit.dangerous-execution.dangerous-execution
  message: Detected non-static script inside otto VM. Audit the input to 'VM.Run'.
    If unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - otto
    - vm
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.otto.security.audit.dangerous-execution.dangerous-execution
    shortlink: https://sg.run/4xWE
    semgrep.dev:
      rule:
        rule_id: KxUbxk
        version_id: vdTD7Z
        url: https://semgrep.dev/playground/r/vdTD7Z/go.otto.security.audit.dangerous-execution.dangerous-execution
        origin: community
  severity: ERROR
  patterns:
  - pattern-inside: |
      $VM = otto.New(...)
      ...
  - pattern-not: $VM.Run("...", ...)
  - pattern: $VM.Run(...)
  languages:
  - go
- id: java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
  patterns:
  - metavariable-pattern:
      metavariable: $RUNTIME
      patterns:
      - pattern-either:
        - pattern: (java.lang.Runtime $R)
        - pattern: java.lang.Runtime.getRuntime(...)
  - pattern-either:
    - pattern: $RUNTIME.exec($X + $Y);
    - pattern: $RUNTIME.exec(String.format(...));
    - pattern: $RUNTIME.loadLibrary($X + $Y);
    - pattern: $RUNTIME.loadLibrary(String.format(...));
    - patterns:
      - pattern-either:
        - pattern: |
            $RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", $ARG,...)
        - pattern: |
            $RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
        - pattern: |
            $RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
        - patterns:
          - pattern-either:
            - pattern: |
                $RUNTIME.exec($CMD,"-c",$ARG,...)
            - pattern: |
                $RUNTIME.exec(Arrays.asList($CMD,"-c",$ARG,...),...)
            - pattern: |
                $RUNTIME.exec(new String[]{$CMD,"-c",$ARG,...},...)
          - pattern-inside: |
              $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
              ...
        - patterns:
          - pattern-either:
            - pattern: |
                $RUNTIME.exec($CMD, $EXECUTE, $ARG, ...)
          - pattern-inside: |
              $CMD = new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/", ...};
              ...
        - patterns:
          - pattern-either:
            - pattern: |
                $RUNTIME.exec("=~/(sh|bash|ksh|csh|tcsh|zsh)/", $BASH, $ARG,...)
            - pattern: |
                $RUNTIME.exec(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/",$BASH,$ARG,...),...)
            - pattern: |
                $RUNTIME.exec(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/",$BASH,$ARG,...},...)
          - pattern-inside: |
              $BASH = new String[]{"=~/(-c)/", ...};
              ...
      - pattern-not-inside: |
          $ARG = "...";
          ...
      - pattern-not: |
          $RUNTIME.exec("...","...","...",...)
      - pattern-not: |
          $RUNTIME.exec(new String[]{"...","...","...",...},...)
      - pattern-not: |
          $RUNTIME.exec(Arrays.asList("...","...","...",...),...)
  message: A formatted or concatenated string was detected as input to a java.lang.Runtime
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
    shortlink: https://sg.run/rd90
    semgrep.dev:
      rule:
        rule_id: nJUzvJ
        version_id: 2KTeLN
        url: https://semgrep.dev/playground/r/2KTeLN/java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call
        origin: community
  severity: ERROR
  languages:
  - java
- id: java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.3 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    references:
    - https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application
    category: security
    technology:
    - java
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
    shortlink: https://sg.run/N427
    semgrep.dev:
      rule:
        rule_id: 7KUQkX
        version_id: A8Tlwe
        url: https://semgrep.dev/playground/r/A8Tlwe/java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite
        origin: community
  message: Detected cookie without the SameSite attribute.
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern: a()
  - pattern: b()
- id: java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
  metadata:
    cwe:
    - 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    owasp:
    - A05:2021 - Security Misconfiguration
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.4.2 Missing Cookie Attribute
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management
      version: '4'
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
    shortlink: https://sg.run/b7Be
    semgrep.dev:
      rule:
        rule_id: EwU2z6
        version_id: jQTe1J
        url: https://semgrep.dev/playground/r/jQTe1J/java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly
        origin: community
  message: A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly'
    flag for cookies instructs the browser to forbid client-side scripts from reading
    the cookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-not-inside: $COOKIE.setValue(""); ...
  - pattern-either:
    - pattern: $COOKIE.setHttpOnly(false);
    - patterns:
      - pattern-not-inside: $COOKIE.setHttpOnly(...); ...
      - pattern-not-inside: $COOKIE = ResponseCookie.from(...). ...; ...
      - pattern: $RESPONSE.addCookie($COOKIE);
- id: java.lang.security.audit.sqli.hibernate-sqli.hibernate-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          String $SQL = $X + $Y;
          ...
      - pattern-inside: |
          String $SQL = String.format(...);
          ...
      - pattern-inside: |
          $VAL $FUNC(...,String $SQL,...) {
          ...
          }
    - pattern-not-inside: |
        String $SQL = "..." + "...";
        ...
    - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($SQL,...)
  - pattern: org.hibernate.criterion.Restrictions.sqlRestriction(String.format(...),...)
  - patterns:
    - pattern: org.hibernate.criterion.Restrictions.sqlRestriction($X + $Y,...)
    - pattern-not: org.hibernate.criterion.Restrictions.sqlRestriction("..." + "...",...)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $TYPE $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $SESSION.$METHOD($SQL,...)
      - pattern: |
          $SESSION.$METHOD(String.format(...),...);
      - pattern: |
          $SESSION.$METHOD($X + $Y,...);
    - pattern-either:
      - pattern-inside: |
          org.hibernate.Session $SESSION = ...;
          ...
      - pattern-inside: |
          $TYPE $FUNC(...,org.hibernate.Session $SESSION,...) {
            ...
          }
    - pattern-not: |
        $SESSION.$METHOD("..." + "...",...);
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(createQuery|createSQLQuery)$
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION_HIBERNATE
    asvs:
      section: V5 Stored Cryptography Verification Requirements
      control_id: 5.3.5 Insecure Custom Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements
      version: '4'
    category: security
    technology:
    - hibernate
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.hibernate-sqli.hibernate-sqli
    shortlink: https://sg.run/Roqg
    semgrep.dev:
      rule:
        rule_id: 6JUjPD
        version_id: qkTK8A
        url: https://semgrep.dev/playground/r/qkTK8A/java.lang.security.audit.sqli.hibernate-sqli.hibernate-sqli
        origin: community
  languages:
  - java
  severity: WARNING
- id: java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled
  message: CSRF protection is disabled for this configuration. This is a security
    risk.
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SPRING_CSRF_PROTECTION_DISABLED
    asvs:
      section: V4 Access Control
      control_id: 4.2.2 CSRF
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V4-Access-Control.md#v42-operation-level-access-control
      version: '4'
    category: security
    technology:
    - spring
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled
    shortlink: https://sg.run/jRnl
    semgrep.dev:
      rule:
        rule_id: OrU3gK
        version_id: X0TEgX
        url: https://semgrep.dev/playground/r/X0TEgX/java.spring.security.audit.spring-csrf-disabled.spring-csrf-disabled
        origin: community
  severity: WARNING
  languages:
  - java
  pattern: $OBJ.csrf(...).disable(...)
- id: javascript.browser.security.open-redirect.js-open-redirect
  message: The application accepts potentially user-controlled input `$PROP` which
    can control the location of the current window context. This can lead two types
    of vulnerabilities open-redirection and Cross-Site-Scripting (XSS) with JavaScript
    URIs. It is recommended to validate user-controllable input before allowing it
    to control the redirection.
  metadata:
    interfile: true
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    owasp:
    - A01:2021 - Broken Access Control
    asvs:
      section: V5 Validation, Sanitization and Encoding
      control_id: 5.5.1 Insecue Redirect
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v51-input-validation
      version: '4'
    category: security
    confidence: HIGH
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html
    technology:
    - browser
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    source: https://semgrep.dev/r/javascript.browser.security.open-redirect.js-open-redirect
    shortlink: https://sg.run/3xRe
    semgrep.dev:
      rule:
        rule_id: WAUopl
        version_id: A8ToQB
        url: https://semgrep.dev/playground/r/A8ToQB/javascript.browser.security.open-redirect.js-open-redirect
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $PROP = new URLSearchParams($WINDOW. ... .location.search).get('...')
          ...
      - pattern-inside: |
          $PROP = new URLSearchParams(location.search).get('...')
          ...
      - pattern-inside: |
          $PROP = new URLSearchParams($WINDOW. ... .location.hash.substring(1)).get('...')
          ...
      - pattern-inside: |
          $PROP = new URLSearchParams(location.hash.substring(1)).get('...')
          ...
    - pattern: $PROP
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $PROPS = new URLSearchParams($WINDOW. ... .location.search)
          ...
      - pattern-inside: |
          $PROPS = new URLSearchParams(location.search)
          ...
      - pattern-inside: |
          $PROPS = new URLSearchParams($WINDOW. ... .location.hash.substring(1))
          ...
      - pattern-inside: |
          $PROPS = new URLSearchParams(location.hash.substring(1))
          ...
    - pattern: $PROPS.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $PROPS = new URL($WINDOW. ... .location.href)
          ...
      - pattern-inside: |
          $PROPS = new URL(location.href)
          ...
    - pattern: $PROPS.searchParams.get('...')
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $PROPS = new URL($WINDOW. ... .location.href).searchParams.get('...')
          ...
      - pattern-inside: |
          $PROPS = new URL(location.href).searchParams.get('...')
          ...
    - pattern: $PROPS
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: location.href = $SINK
      - pattern: $THIS. ... .location.href = $SINK
      - pattern: location.replace($SINK)
      - pattern: $THIS. ... .location.replace($SINK)
      - pattern: location = $SINK
      - pattern: $WINDOW. ... .location = $SINK
    - focus-metavariable: $SINK
    - metavariable-pattern:
        patterns:
        - pattern-not: |
            "..." + $VALUE
        - pattern-not: |
            `...${$VALUE}`
        metavariable: $SINK
- id: javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
  message: Detected an explicit unescape in an EJS template, using '<%- ... %>' If
    external data can reach these locations, your application is exposed to a cross-site
    scripting (XSS) vulnerability. Use '<%= ... %>' to escape this data. If you need
    escaping, ensure no external data can reach this location.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - http://www.managerjs.com/blog/2015/05/will-ejs-escape-save-me-from-xss-sorta/
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
    shortlink: https://sg.run/dKXQ
    semgrep.dev:
      rule:
        rule_id: 4bUkPO
        version_id: 6xT09E
        url: https://semgrep.dev/playground/r/6xT09E/javascript.express.security.audit.xss.ejs.explicit-unescape.template-explicit-unescape
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.ejs'
    - '*.html'
  pattern-regex: <%-((?!include).)*?%>
  fix-regex:
    regex: <%-(.*?)%>
    replacement: <%=\1%>
- id: javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
  message: 'Detected a template variable used in an anchor tag with the ''href'' attribute.
    This allows a malicious actor to input the ''javascript:'' URI and is subject
    to cross- site scripting (XSS) attacks. If using a relative URL, start with a
    literal forward slash and concatenate the URL, like this: href=''/<%= link %>''.
    You may also consider setting the Content Security Policy (CSP) header.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI
    - https://github.com/pugjs/pug/issues/2952
    category: security
    technology:
    - express
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
    shortlink: https://sg.run/Zv0p
    semgrep.dev:
      rule:
        rule_id: PeUZrg
        version_id: o5T5DB
        url: https://semgrep.dev/playground/r/o5T5DB/javascript.express.security.audit.xss.ejs.var-in-href.var-in-href
        origin: community
  languages:
  - regex
  severity: WARNING
  paths:
    include:
    - '*.ejs'
    - '*.html'
  pattern-regex: <a.*href\s*=[^>]*?[^\/&=]<%.*?%>.*?>
- id: javascript.node-expat.security.audit.expat-xxe.expat-xxe
  message: If unverified user data can reach the XML Parser it can result in XML External
    or Internal Entity (XXE) Processing vulnerabilities
  metadata:
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    category: security
    technology:
    - node-expat
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe
    shortlink: https://sg.run/eLdL
    semgrep.dev:
      rule:
        rule_id: gxU171
        version_id: GxTWR2
        url: https://semgrep.dev/playground/r/GxTWR2/javascript.node-expat.security.audit.expat-xxe.expat-xxe
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        var $EXPAT = require('node-expat');
        ...
        new $EXPAT.Parser(...);
        ...
        $PARSER.parse(...);
    - pattern: |
        var $EXPAT = require('node-expat');
        ...
        new $EXPAT.Parser(...);
        ...
        $PARSER.write(...);
    - pattern: |
        require('node-expat');
        ...
        new Parser(...);
        ...
        $PARSER.parse(...);
    - pattern: |
        require('node-expat');
        ...
        new Parser(...);
        ...
        $PARSER.write(...);
  - pattern-not: |
      var $EXPAT = require('node-expat');
      ...
      new $EXPAT.Parser(...);
      ...
      $PARSER.parse("...");
  - pattern-not: |
      var $EXPAT = require('node-expat');
      ...
      new $EXPAT.Parser(...);
      ...
      $PARSER.write("...");
  - pattern-not: |
      require('node-expat');
      ...
      new Parser(...);
      ...
      $PARSER.parse("...");
  - pattern-not: |
      require('node-expat');
      ...
      new Parser(...);
      ...
      $PARSER.write("...");
  - pattern-not: |
      $X = "...";
      ...
      $PARSER.parse($X);
  - pattern-not: |-
      $X = "...";
      ...
      $PARSER.write($X);
- id: javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
  message: If unverified user data can reach the `evaluate` method it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - playwright
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
    shortlink: https://sg.run/EkJB
    semgrep.dev:
      rule:
        rule_id: JDUyxl
        version_id: WrT61O
        url: https://semgrep.dev/playground/r/WrT61O/javascript.playwright.security.audit.playwright-evaluate-code-injection.playwright-evaluate-code-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('playwright');
      ...
  - pattern-not-inside: |
      var $INPUT = function $FNAME(...){...};
      ...
  - pattern-either:
    - pattern: $PAGE.evaluate($INPUT,...)
    - pattern: $PAGE.evaluateHandle($INPUT,...)
    - pattern: $PAGE.evaluateOnNewDocument($INPUT,...)
  - pattern-not: $PAGE.evaluate("...",...)
  - pattern-not: $PAGE.evaluate(function(...){...},...)
  - pattern-not: $PAGE.evaluateHandle("...",...)
  - pattern-not: $PAGE.evaluateHandle(function(...){...},...)
  - pattern-not: $PAGE.evaluateOnNewDocument("...",...)
  - pattern-not: $PAGE.evaluateOnNewDocument(function(...){...},...)
- id: javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
  message: If unverified user data can reach the `setContent` method it can result
    in Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - puppeteer
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
    shortlink: https://sg.run/PJlv
    semgrep.dev:
      rule:
        rule_id: 0oU5zg
        version_id: GxTWAo
        url: https://semgrep.dev/playground/r/GxTWAo/javascript.puppeteer.security.audit.puppeteer-setcontent-injection.puppeteer-setcontent-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      require('puppeteer');
      ...
  - pattern-not-inside: |
      require('puppeteer');
      ...
      var $INPUT = "...";
      ...
  - pattern: $PAGE.setContent($INPUT,...)
  - pattern-not: $PAGE.setContent("...",...)
- id: javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
  message: Make sure that unverified user data can not reach `sandbox`.
  metadata:
    owasp:
    - A03:2021 - Injection
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    category: security
    technology:
    - sandbox
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
    shortlink: https://sg.run/J9BP
    semgrep.dev:
      rule:
        rule_id: KxUbk3
        version_id: RGTwzA
        url: https://semgrep.dev/playground/r/RGTwzA/javascript.sandbox.security.audit.sandbox-code-injection.sandbox-code-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $SANDBOX = require('sandbox');
      ...
  - pattern-not-inside: |
      $CODE = "...";
      ...
  - pattern-either:
    - patterns:
      - pattern-inside: |
          $S = new $SANDBOX(...);
          ...
      - pattern: $S.run($CODE,...);
    - pattern: |
        new $SANDBOX(...).run($CODE,...);
  - pattern-not-inside: |
      $S = new $SANDBOX(...);
      ...
      $S.run("...",...);
  - pattern-not-inside: new $SANDBOX(...).run("...",...);
- id: javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
  message: If unverified user data can reach the `exec` method it can result in Remote
    Code Execution
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    category: security
    technology:
    - shelljs
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
    shortlink: https://sg.run/AvEB
    semgrep.dev:
      rule:
        rule_id: 6JUj9k
        version_id: l4TNj2
        url: https://semgrep.dev/playground/r/l4TNj2/javascript.shelljs.security.shelljs-exec-injection.shelljs-exec-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  patterns:
  - pattern-inside: |
      require('shelljs');
      ...
  - pattern-not-inside: |
      require('shelljs');
      ...
      var $INPUT = "...";
      ...
  - pattern: $SHELL.exec($INPUT,...)
  - pattern-not: $SHELL.exec("...",...)
- id: php.lang.security.phpinfo-use.phpinfo-use
  pattern: phpinfo(...);
  message: The 'phpinfo' function may reveal sensitive information about your environment.
  metadata:
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    references:
    - https://www.php.net/manual/en/function.phpinfo
    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PhpinfosSniff.php
    category: security
    technology:
    - php
    owasp:
    - A01:2021 - Broken Access Control
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/php.lang.security.phpinfo-use.phpinfo-use
    shortlink: https://sg.run/W82E
    semgrep.dev:
      rule:
        rule_id: ReUglY
        version_id: kbTrZd
        url: https://semgrep.dev/playground/r/kbTrZd/php.lang.security.phpinfo-use.phpinfo-use
        origin: community
  languages:
  - php
  severity: ERROR
- id: problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
  message: Checks for requests sent via Java Spring RestTemplate API to http:// URLS.
    This is dangerous because the server is attempting to connect to a website that
    does not encrypt traffic with TLS. Instead, send requests only to https:// URLS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html#delete-java.lang.String-java.util.Map-
    - https://www.baeldung.com/rest-template
    subcategory:
    - vuln
    technology:
    - spring
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
    shortlink: https://sg.run/KlB5
    semgrep.dev:
      rule:
        rule_id: 2ZUbjg
        version_id: 3ZTzee
        url: https://semgrep.dev/playground/r/3ZTzee/problem-based-packs.insecure-transport.java-spring.spring-http-request.spring-http-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  patterns:
  - pattern-either:
    - pattern: |
        $RESTTEMP = new RestTemplate(...);
        ...
        $RESTTEMP.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...);
    - pattern: |
        $RESTTEMP = new RestTemplate(...);
        ...
        String $URL = "=~/[hH][tT][tT][pP]://.*/";
        ...
        $RESTTEMP.$FUNC($URL, ...);
    - pattern: |
        $RESTTEMP = new RestTemplate(...);
        ...
        $URL = new URI(..., "=~/[hH][tT][tT][pP]://.*/", ...);
        ...
        $RESTTEMP.$FUNC($URL, ...);
  - metavariable-regex:
      metavariable: $FUNC
      regex: (delete|doExecute|exchange|getForEntity|getForObject|headForHeaders|optionsForAllow|patchForObject|postForEntity|postForLocation|postForObject|put)
- id: problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
  message: Checks for redefinitions of the checkServerTrusted function in the X509TrustManager
    class that disables TLS/SSL certificate verification. This should only be used
    for debugging purposes because it leads to vulnerability to MTM attacks.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://riptutorial.com/java/example/16517/temporarily-disable-ssl-verification--for-testing-purposes-
    - https://stackoverflow.com/questions/35530558/how-to-fix-unsafe-implementation-of-x509trustmanager-in-android-app?rq=1
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
    shortlink: https://sg.run/qxD7
    semgrep.dev:
      rule:
        rule_id: X5U8qv
        version_id: 44TwGY
        url: https://semgrep.dev/playground/r/44TwGY/problem-based-packs.insecure-transport.java-stdlib.bypass-tls-verification.bypass-tls-verification
        origin: community
  languages:
  - java
  patterns:
  - pattern: |
      new X509TrustManager() {
        ...
        public void checkClientTrusted(X509Certificate[] certs, String authType) {...}
        ...
      }
  - pattern-not: |
      new X509TrustManager() {
        ...
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
          ...
          throw new CertificateException(...);
          ...
        }
        ...
      }
  - pattern-not: |
      new X509TrustManager() {
        ...
        public void checkServerTrusted(X509Certificate[] certs, String authType) {
          ...
          throw new IllegalArgumentException(...);
          ...
        }
        ...
      }
- id: python.boto3.security.hardcoded-token.hardcoded-token
  message: A hard-coded credential was detected. It is not recommended to store credentials
    in source-code, as this risks secrets being leaked and used by either an internal
    or external malicious adversary. It is recommended to use environment variables
    to securely provide credentials or retrieve credentials from a secure vault or
    HSM (Hardware Security Module).
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    - https://bento.dev/checks/boto3/hardcoded-access-token/
    - https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/
    owasp:
    - A07:2021 - Identification and Authentication Failures
    category: security
    technology:
    - boto3
    - secrets
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token
    shortlink: https://sg.run/LwQ6
    semgrep.dev:
      rule:
        rule_id: 5rUOwK
        version_id: 6xTPED
        url: https://semgrep.dev/playground/r/6xTPED/python.boto3.security.hardcoded-token.hardcoded-token
        origin: community
  languages:
  - python
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern: |
      "..."
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $W(...,$TOKEN="$VALUE",...)
      - pattern: $BOTO. ... .$W(...,$TOKEN="$VALUE",...)
    - metavariable-regex:
        metavariable: $TOKEN
        regex: (aws_session_token|aws_access_key_id|aws_secret_access_key)
    - metavariable-pattern:
        language: generic
        metavariable: $VALUE
        patterns:
        - pattern-either:
          - pattern-regex: ^AKI
          - pattern-regex: ^[A-Za-z0-9/+=]+$
    - metavariable-analysis:
        metavariable: $VALUE
        analyzer: entropy
- id: python.django.security.audit.xss.context-autoescape-off.context-autoescape-off
  message: 'Detected a Context with autoescape disabled. If you are rendering any
    web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities.
    Remove ''autoescape: False'' or set it to ''True''.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.1/topics/templates/#django.template.backends.django.DjangoTemplates
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off
    shortlink: https://sg.run/nd7Y
    semgrep.dev:
      rule:
        rule_id: 4bUknY
        version_id: 0bTkg2
        url: https://semgrep.dev/playground/r/0bTkg2/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        {..., "autoescape": $FALSE, ...}
    - pattern: |
        $D["autoescape"] = $FALSE
  - metavariable-pattern:
      metavariable: $FALSE
      pattern: |
        False
  - focus-metavariable: $FALSE
  fix: |
    True
- id: python.django.security.audit.xss.html-safe.html-safe
  message: '`html_safe()` add the `__html__` magic method to the provided class. The
    `__html__` method indicates to the Django template engine that the value is ''safe''
    for rendering. This means that normal HTML escaping will not be applied to the
    return value. This exposes your application to cross-site scripting (XSS) vulnerabilities.
    If you need to render raw HTML, consider instead using `mark_safe()` which more
    clearly marks the intent to render raw HTML than a class with a magic method.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/_modules/django/utils/html/#html_safe
    - https://gist.github.com/minusworld/7885d8a81dba3ea2d1e4b8fd3c218ef5
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.html-safe.html-safe
    shortlink: https://sg.run/gLO0
    semgrep.dev:
      rule:
        rule_id: ReUg5Y
        version_id: bZT4q2
        url: https://semgrep.dev/playground/r/bZT4q2/python.django.security.audit.xss.html-safe.html-safe
        origin: community
  languages:
  - python
  severity: WARNING
  pattern-either:
  - pattern: django.utils.html.html_safe(...)
  - pattern: |
      @django.utils.html.html_safe
      class $CLASS(...):
        ...
- id: python.django.security.audit.xss.template-autoescape-off.template-autoescape-off
  message: Detected a template block where autoescaping is explicitly disabled with
    '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn
    autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider
    instead, using `mark_safe` in Python code.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#autoescape
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off
    shortlink: https://sg.run/Q5WZ
    semgrep.dev:
      rule:
        rule_id: AbUzAZ
        version_id: NdTQ8w
        url: https://semgrep.dev/playground/r/NdTQ8w/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off
        origin: community
  languages:
  - regex
  paths:
    include:
    - '*.html'
  severity: WARNING
  pattern-regex: '{%\s+autoescape\s+off\s+%}'
- id: python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution
  message: Found request data as an index to 'globals()'. This is extremely dangerous
    because it allows an attacker to execute arbitrary code on the system. Refactor
    your code not to use 'globals()'.
  metadata:
    cwe:
    - 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186
    category: security
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution
    shortlink: https://sg.run/Kl55
    semgrep.dev:
      rule:
        rule_id: AbUzAA
        version_id: ZRTyzw
        url: https://semgrep.dev/playground/r/ZRTyzw/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get($DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get("..." % $DATA, ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get(f"...{$DATA}...", ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals().get("...".format(..., $DATA, ...), ...)
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()[$DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()["..." % $DATA]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()[f"...{$DATA}..."]
        ...
        $INTERM(...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = globals()["...".format(..., $DATA, ...)]
        ...
        $INTERM(...)
- id: python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message
  message: Found request data in 'send_mail(...)' that uses 'html_message'. This is
    dangerous because HTML emails are susceptible to XSS. An attacker could inject
    data into this HTML email, causing XSS.
  metadata:
    cwe:
    - 'CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream
      Component (''Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://www.damonkohler.com/2008/12/email-injection.html
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message
    shortlink: https://sg.run/Avx8
    semgrep.dev:
      rule:
        rule_id: lBU9Ll
        version_id: 44TYX2
        url: https://semgrep.dev/playground/r/44TYX2/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message
        origin: community
  languages:
  - python
  severity: WARNING
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: django.core.mail.send_mail(..., html_message=request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W.get(...),
        ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W.get(...),
        ...)
    - pattern: django.core.mail.send_mail(..., html_message=request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W(...),
        ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W(...),
        ...)
    - pattern: django.core.mail.send_mail(..., html_message=request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W[...],
        ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W[...],
        ...)
    - pattern: django.core.mail.send_mail(..., html_message=request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        django.core.mail.send_mail(..., html_message=$STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        django.core.mail.send_mail(..., html_message=$INTERM, ...)
    - pattern: $A = django.core.mail.send_mail(..., html_message=request.$W, ...)
    - pattern: return django.core.mail.send_mail(..., html_message=request.$W, ...)
- id: python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib
  message: Data from request object is passed to a new server-side request. This could
    lead to a server-side request forgery (SSRF), which could result in attackers
    gaining access to private organization data. To mitigate, ensure that schemes
    and hosts are validated against an allowlist, do not forward the response to the
    user, and ensure proper authentication and transport-layer security in the proxied
    request.
  metadata:
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib
    shortlink: https://sg.run/6n2B
    semgrep.dev:
      rule:
        rule_id: 10UKDo
        version_id: 5PTYvx
        url: https://semgrep.dev/playground/r/5PTYvx/python.django.security.injection.ssrf.ssrf-injection-urllib.ssrf-injection-urllib
        origin: community
  languages:
  - python
  severity: ERROR
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W.get(...), ...),
        ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W.get(...), ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W.get(...)}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: return urllib.request.urlopen(..., request.$W.get(...), ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W(...), ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W(...), ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W(...)}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: return urllib.request.urlopen(..., request.$W(...), ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W[...], ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W[...], ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W[...]}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: return urllib.request.urlopen(..., request.$W[...], ...)
    - pattern: urllib.request.urlopen(..., $S.format(..., request.$W, ...), ...)
    - pattern: urllib.request.urlopen(..., $S % request.$W, ...)
    - pattern: urllib.request.urlopen(..., f"...{request.$W}...", ...)
    - pattern: urllib.request.urlopen(..., request.$W, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $STR.format(..., $DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR.format(..., $DATA, ...)
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $STR % $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR % $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., f"...{$DATA}...", ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = f"...{$DATA}..."
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        urllib.request.urlopen(..., $STR + $DATA, ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = $STR + $DATA
        ...
        urllib.request.urlopen(..., $INTERM, ...)
    - pattern: $A = urllib.request.urlopen(..., request.$W, ...)
    - pattern: return urllib.request.urlopen(..., request.$W, ...)
- id: python.flask.security.dangerous-template-string.dangerous-template-string
  message: Found a template created with string formatting. This is susceptible to
    server-side template injection and cross-site scripting attacks.
  metadata:
    cwe:
    - 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://nvisium.com/blog/2016/03/09/exploring-ssti-in-flask-jinja2.html
    - https://pequalsnp-team.github.io/cheatsheet/flask-jinja2-ssti
    category: security
    technology:
    - flask
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string
    shortlink: https://sg.run/b79E
    semgrep.dev:
      rule:
        rule_id: v8UnZJ
        version_id: X0TJvb
        url: https://semgrep.dev/playground/r/X0TJvb/python.flask.security.dangerous-template-string.dangerous-template-string
        origin: community
  languages:
  - python
  severity: ERROR
  pattern-either:
  - pattern: |
      $V = "...".format(...)
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = "...".format(...)
      ...
      return flask.render_template_string($V, ...), $MORE
  - pattern: |
      $V = "..." % $S
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = "..." % $S
      ...
      return flask.render_template_string($V, ...), $MORE
  - pattern: |
      $V = "..."
      ...
      $V += $O
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = "..."
      ...
      $V += $O
      ...
      return flask.render_template_string($V, ...), $MORE
  - pattern: |
      $V = f"...{$X}..."
      ...
      flask.render_template_string($V, ...)
  - pattern: |
      $V = f"...{$X}..."
      ...
      return flask.render_template_string($V, ...), $CODE
- id: python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
  message: The object is passed strictly to jwt.encode(...) Make sure that sensitive
    information is not exposed through JWT token payload.
  severity: WARNING
  metadata:
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    category: security
    technology:
    - jwt
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
    shortlink: https://sg.run/ox8R
    semgrep.dev:
      rule:
        rule_id: 9AU1zW
        version_id: JdTZq2
        url: https://semgrep.dev/playground/r/JdTZq2/python.jwt.security.audit.jwt-exposed-data.jwt-python-exposed-data
        origin: community
  languages:
  - python
  patterns:
  - pattern-inside: |
      def $FUNC(...,$INPUT,...):
        ...
  - pattern: jwt.encode($INPUT,...)
- id: go.net.command-injection.net-http-command-injection-taint.net-http-command-injection-taint
  message: 'Untrusted input might be injected into a command executed by the application,
    which can lead to a command injection vulnerability. An attacker can execute arbitrary
    commands, potentially gaining complete control of the system. To prevent this
    vulnerability, avoid executing OS commands with user input. If this is unavoidable,
    validate and sanitize the input, and use safe methods for executing the commands.
    In Go, it is possible to use the `exec.Command` function in combination with the
    `bash -c` command to run the user input as a shell command. To sanitize the user
    input, you can use a library like `shellescape` to escape any special characters
    before constructing the command. For more information, see: [Go command injection
    prevention](https://semgrep.dev/docs/cheat-sheets/go-command-injection/) '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/os/exec
    - https://pkg.go.dev/syscall#Exec
    - https://semgrep.dev/docs/cheat-sheets/go-command-injection/
    technology:
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.command-injection.net-http-command-injection-taint.net-http-command-injection-taint
    shortlink: https://sg.run/GJ8p
    semgrep.dev:
      rule:
        rule_id: r6UApL
        version_id: RGTlRD
        url: https://semgrep.dev/playground/r/RGTlRD/go.net.command-injection.net-http-command-injection-taint.net-http-command-injection-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $CMD_STRUCT := exec.Command("$SHELL")
            ...
        - pattern-inside: |
            $WRITER, ... := $CMD_STRUCT.StdinPipe()
            ...
        - pattern-either:
          - pattern: $WRITER.Write(...)
          - patterns:
            - pattern: io.WriteString($WRITER, $SHELLCMD, ...)
            - focus-metavariable: $SHELLCMD
      - patterns:
        - pattern-inside: '&exec.Cmd { Path: "$SHELL", ... }'
        - pattern-either:
          - pattern: 'Args: { "$SHELL", "-c", $SHELLCMD, ...}'
          - pattern: 'Args: $TYPE{ "$SHELL", "-c", $SHELLCMD, ...}'
        - focus-metavariable: $SHELLCMD
    - metavariable-regex:
        metavariable: $SHELL
        regex: (bash|csh|dash|fish|ksh|tcsh|sh|zsh)$
  - patterns:
    - pattern-either:
      - pattern-inside: syscall.Exec($PATH, $ARGS, ...)
      - pattern-inside: syscall.ForkExec($PATH, $ARGS, ...)
      - pattern-inside: '&exec.Cmd {$PATH, $ARGS, ...}'
      - patterns:
        - pattern-inside: '&exec.Cmd { ... }'
        - pattern-either:
          - pattern-inside: 'Path: $INPUT'
          - pattern-inside: 'Args: $INPUT'
        - focus-metavariable: $INPUT
  - patterns:
    - pattern-either:
      - pattern: exec.Command($PATH, ...)
      - pattern: exec.CommandContext($CTX, $PATH, ...)
    - focus-metavariable: $PATH
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "gopkg.in/alessio/shellescape.v1"
          ...
      - pattern-inside: |
          import "github.com/alessio/shellescape"
          ...
    - pattern: shellescape.Quote(...)
- id: go.net.sql.go-vanillasql-format-string-sqli-taint.go-vanillasql-format-string-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/database/sql/
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    - database/sql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.go-vanillasql-format-string-sqli-taint.go-vanillasql-format-string-sqli-taint
    shortlink: https://sg.run/RlnO
    semgrep.dev:
      rule:
        rule_id: bwU579
        version_id: WrTw3Z
        url: https://semgrep.dev/playground/r/WrTw3Z/go.net.sql.go-vanillasql-format-string-sqli-taint.go-vanillasql-format-string-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTSQL
    pattern: |
      import "database/sql"
      ...
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql\.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF) and not PREPARE and
      not PREPARECONN
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - patterns:
        - pattern: $DB. ... .$METHOD($QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|Query|QueryRow)$
      - patterns:
        - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(ExecContent|QueryContext|QueryRowContext)$
    - focus-metavariable: $QUERY
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF) and not PREPARE and
      not PREPARECONN
- id: go.net.sql.pg-sqli-taint.pg-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. To prevent this vulnerability, use prepared statements
    that do not concatenate user-controllable strings and use parameterized queries
    where SQL commands and user data are strictly separated. Also, consider using
    an object-relational (ORM) framework to operate with safer abstractions. When
    building SQL queries in Go, it is possible to adopt prepared statements by using
    the `Prepare` and `PrepareContext` calls with parameterized queries. For more
    information, see: [Prepared statements in Go](https://go.dev/doc/database/prepared-statements). '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pg.uptrace.dev/queries/
    technology:
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    - go-pg/pg/v10
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.pg-sqli-taint.pg-sqli-taint
    shortlink: https://sg.run/BpbW
    semgrep.dev:
      rule:
        rule_id: kxUzBD
        version_id: K3TXG7
        url: https://semgrep.dev/playground/r/K3TXG7/go.net.sql.pg-sqli-taint.pg-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTPG
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: ^(.*go\-pg\/pg\/v10\/orm.*)$
  pattern-sinks:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(Exec|ExecOne|Prepare)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
      - patterns:
        - pattern: '($DB : $DBTYPE). ... .$METHOD($CTX, $MODEL, $QUERY, ...)'
        - metavariable-regex:
            metavariable: $METHOD
            regex: ^(QueryContext|QueryOneContext)$
    - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?pg.(Conn|DB|Tx))$
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern: |
            $DB := pg.$CONN(...)
            ...
        - pattern: |
            $DB, $ERR := pg.$CONN(...)
            ...
      - metavariable-regex:
          metavariable: $CONN
          regex: ^(Connect|ParseURL)$
    - patterns:
      - pattern-either:
        - patterns:
          - pattern: $DB. ... .$METHOD($QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(Exec|ExecOne|Prepare)$
        - patterns:
          - pattern: $DB. ... .$METHOD($MDL_CTX_WRITER, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(CopyFrom|CopyTo|ExecContext|ExecOneContext|Query|QueryOne)$
        - patterns:
          - pattern: $DB. ... .$METHOD($CTX, $MODEL, $QUERY, ...)
          - metavariable-regex:
              metavariable: $METHOD
              regex: ^(QueryContext|QueryOneContext)$
      - pattern-not: $DB. ... .Prepare("..."). ... .$METHOD(...)
    - focus-metavariable: $QUERY
    requires: IMPORTPG and USERINPUT and (CONCAT or SPRINTF)
- id: go.net.sql.pgx-sqli-taint.pgx-sqli-taint
  message: 'Untrusted input might be used to build a database query, which can lead
    to a SQL injection vulnerability. An attacker can execute malicious SQL statements
    and gain unauthorized access to sensitive data, modify, delete data, or execute
    arbitrary system commands. Create parameterized queries in pgx by using positional
    parameters (`$1`, `$2`, ...) and adding the values as additional arguments to
    the function call. It is also possible to create prepared statements through the
    `Prepare` function. This function uses the same placeholders for bound parameters. '
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://github.com/jackc/pgx
    - https://owasp.org/Top10/A03_2021-Injection
    - https://pkg.go.dev/github.com/jackc/pgx/v4#hdr-Connection_Pool
    technology:
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    - pgx
    - go-pgx
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.pgx-sqli-taint.pgx-sqli-taint
    shortlink: https://sg.run/DxnY
    semgrep.dev:
      rule:
        rule_id: wdURPW
        version_id: l4T06y
        url: https://semgrep.dev/playground/r/l4T06y/go.net.sql.pgx-sqli-taint.pgx-sqli-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - label: USERINPUT
    patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - label: USERINPUT
    patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  - label: IMPORTSQL
    pattern-either:
    - pattern: |
        import "database/sql"
        ...
    - pattern: |
        import "github.com/go-sql-driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/mysql"
        ...
    - pattern: |
        import "gorm.io/driver/postgres"
        ...
    - pattern: |
        import "gorm.io/driver/clickhouse"
        ...
  - label: SPRINTF
    patterns:
    - pattern-inside: |
        import "fmt"
        ...
    - pattern: fmt.$P("...", $REQ, ...)
    - metavariable-regex:
        metavariable: $P
        regex: ^(Sprint|Sprintf|Sprintln)$
    requires: USERINPUT
  - label: CONCAT
    pattern-either:
    - pattern: '"$A" + $B'
    - pattern: $A + "$B"
    - pattern: '"$A" += $B'
    - pattern: $A += "$B"
    requires: USERINPUT
  - label: PREPARE
    patterns:
    - pattern-either:
      - pattern: '($DB : $DBTYPE).Prepare(...)'
      - pattern: '($DB : $DBTYPE).SafeQuery(...)'
    - metavariable-regex:
        metavariable: $DBTYPE
        regex: ^((\*)?sql.(Conn|DB|Tx))$
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: PREPARECONN
    patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := sql.$OPEN(...)
            ...
        - pattern-inside: |
            $DB, ... := sql.$OPEN(...)
            ...
      - metavariable-regex:
          metavariable: $OPEN
          regex: ^(Open|OpenDB)$
    - pattern-either:
      - pattern: $DB.Prepare(...)
      - pattern: $DB.SafeQuery(...)
    requires: IMPORTSQL and USERINPUT and (CONCAT or SPRINTF)
  - label: IMPORTPGX
    patterns:
    - pattern-inside: |
        import "$IMPORT"
        ...
    - metavariable-regex:
        metavariable: $IMPORT
        regex: (.*jackc\/pgx\/v(4|5).*)
  pattern-sinks:
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .$METHOD($CTX, $QUERY, ...)'
    - metavariable-regex:
        metavariable: $CONNTYPE
        regex: ^((\*)?pgx.(BatchResults|Conn|Tx))$
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .$METHOD($CTX, $QUERY, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(Exec|Query|QueryFunc|QueryRow)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  pattern-sanitizers:
  - patterns:
    - pattern: $SANFUNC($QUERY, ...)
    - metavariable-regex:
        metavariable: $SANFUNC
        regex: ^(SanitizeSQL|QuoteBytes|QuoteString)$
    - focus-metavariable: $QUERY
    requires: IMPORTPGX
  - pattern: '($QUERY : *Query).Sanitize(...)'
    requires: IMPORTPGX
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: ' $DB.Sanitize(...)'
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - pattern: '($DB : $CONNTYPE). ... .Prepare($CTX, $NAME, $QUERY, ...)'
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
  - patterns:
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $DB := pgx.$CONNECT(...)
            ...
        - pattern-inside: |
            $DB, ... := pgx.$CONNECT(...)
            ...
      - metavariable-regex:
          metavariable: $CONNECT
          regex: ^(Connect|NewConnPool|ConnectConfig)$
    - pattern: $DB. ... .Prepare($CTX, $NAME, $QUERY, ...)
    - focus-metavariable: $QUERY
    requires: IMPORTPGX and USERINPUT and (CONCAT or SPRINTF)
- id: go.net.xss.formatted-template-string-taint.formatted-template-string-taint
  message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
    scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input
    executes malicious JavaScript code, leading to issues such as account compromise
    and sensitive information leakage. To prevent this vulnerability, validate the
    user input, perform contextual output encoding or sanitize the input. For more
    information, see: [Go XSS prevention](https://semgrep.dev/docs/cheat-sheets/go-xss/). '
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://golang.org/pkg/html/template/#HTML
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.xss.formatted-template-string-taint.formatted-template-string-taint
    shortlink: https://sg.run/0BDv
    semgrep.dev:
      rule:
        rule_id: OrUpqB
        version_id: YDT7nY
        url: https://semgrep.dev/playground/r/YDT7nY/go.net.xss.formatted-template-string-taint.formatted-template-string-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "html/template"
        ...
    - pattern-either:
      - pattern: template.HTML(...)
      - pattern: template.HTMLAttr(...)
      - pattern: template.CSS(...)
      - pattern: template.JS(...)
      - pattern: template.JSStr(...)
      - pattern: template.Srcset(...)
      - pattern: template.URL(...)
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/microcosm-cc/bluemonday"
          ...
      - pattern-inside: |
          import "microcosm-cc/bluemonday"
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $P := bluemonday.$POLICY()
            ...
        - pattern: $P.$SAN(...)
      - pattern: bluemonday.$POLICY().$SAN(...)
    - metavariable-regex:
        metavariable: $SAN
        regex: ^(Sanitize|SanitizeBytes)$
- id: go.net.xss.no-direct-write-to-responsewriter-taint.no-direct-write-to-responsewriter-taint
  message: 'Untrusted user input enters a dangerous API, which can lead to a Cross-site
    scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input
    executes malicious JavaScript code, leading to issues such as account compromise
    and sensitive information leakage. To prevent this vulnerability, validate the
    user input, perform contextual output encoding or sanitize the input. For more
    information, see: [Go XSS prevention](https://semgrep.dev/docs/cheat-sheets/go-xss/). '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    technology:
    - go
    - net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.xss.no-direct-write-to-responsewriter-taint.no-direct-write-to-responsewriter-taint
    shortlink: https://sg.run/KAn7
    semgrep.dev:
      rule:
        rule_id: eqUyoG
        version_id: JdTjvD
        url: https://semgrep.dev/playground/r/JdTjvD/go.net.xss.no-direct-write-to-responsewriter-taint.no-direct-write-to-responsewriter-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  pattern-sinks:
  - pattern-either:
    - patterns:
      - pattern-either:
        - pattern: 'fmt.$P(($RES : http.ResponseWriter), ..., $SINK, ...)'
        - pattern: 'fmt.$P(($RES : *http.ResponseWriter), ..., $SINK, ...)'
      - metavariable-regex:
          metavariable: $P
          regex: ^(Fprint|Fprintf|Fprintln)$
      - focus-metavariable: $REQ
    - pattern: '($RES : http.ResponseWriter).Write(...)'
    - pattern: '($RES : *http.ResponseWriter).Write(...)'
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$METHOD($CODE, $CONTENT, ...)'
          - pattern: '($CONTEXT : *gin.Context).$METHOD($CODE, $CONTENT, ...)'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(AsciiJSON|IndentedJSON|JSON|JSONP|ProtoBuf|PureJSON|SecureJSON|String|TOML|XML|YAML)$
        - focus-metavariable: $CONTENT
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Stream(...)'
        - pattern: '($CONTEXT : *gin.Context).Stream(...)'
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Writer.Write(...)'
        - pattern: '($CONTEXT : *gin.Context).Writer.Write(...)'
  pattern-sanitizers:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          import "github.com/microcosm-cc/bluemonday"
          ...
      - pattern-inside: |
          import "microcosm-cc/bluemonday"
          ...
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $P := bluemonday.$POLICY()
            ...
        - pattern: $P.$SAN(...)
      - pattern: bluemonday.$POLICY().$SAN(...)
    - metavariable-regex:
        metavariable: $SAN
        regex: ^(Sanitize|SanitizeBytes)$
- id: go.net.xxe.libxml2-xxe-taint.libxml2-xxe-taint
  message: 'The application is using an XML parser that has not been safely configured.
    This might lead to XML External Entity (XXE) vulnerabilities when parsing user-controlled
    input. An attacker can include document type definitions (DTDs) which can interact
    with internal or external hosts. XXE can lead to other vulnerabilities, such as
    Local File Inclusion (LFI), Remote Code Execution (RCE), and Server-side request
    forgery (SSRF), depending on the application configuration. An attacker can also
    use DTDs to expand recursively, leading to a Denial-of-Service (DoS) attack, also
    known as a `Billion Laughs Attack`. The best defense against XXE is to have an
    XML parser that supports disabling DTDs. Limiting the use of external entities
    from the start can prevent the parser from being used to process untrusted XML
    files. Reducing dependencies on external resources is also a good practice for
    performance reasons. It is difficult to guarantee that even a trusted XML file
    on your server or during transmission has not been tampered with by a malicious
    third-party. '
  severity: ERROR
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: HIGH
    interfile: true
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-611: Improper Restriction of XML External Entity Reference'
    cwe2020-top25: true
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A04:2017 - XML External Entities (XXE)
    - A05:2021 - Security Misconfiguration
    references:
    - https://owasp.org/Top10/A05_2021-Security_Misconfiguration
    technology:
    - go
    - libxml2
    - go
    - go-net/http
    - gin
    - gin-gonic/gin
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.xxe.libxml2-xxe-taint.libxml2-xxe-taint
    shortlink: https://sg.run/qL2z
    semgrep.dev:
      rule:
        rule_id: v8U0w3
        version_id: 5PTzeA
        url: https://semgrep.dev/playground/r/5PTzeA/go.net.xxe.libxml2-xxe-taint.libxml2-xxe-taint
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-either:
      - pattern: '($REQ : http.Request).$FIELD'
      - pattern: '($REQ : *http.Request).$FIELD'
    - metavariable-regex:
        metavariable: $FIELD
        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|Header|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|URL|UserAgent)$
  - patterns:
    - pattern-inside: |
        import "github.com/gin-gonic/gin"
        ...
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern: '($CONTEXT : gin.Context).$FIELD'
          - pattern: '($CONTEXT : *gin.Context).$FIELD'
        - metavariable-regex:
            metavariable: $FIELD
            regex: ^(Cookie|DefaultPostForm|DefaultQuery|FormFile|GetHeader|GetPostForm|GetPostFormArray|GetPostFormMap|GetQuery|GetQueryArray|GetQueryMap|GetRawData|MultipartForm|Param|Params|PostForm|PostFormArray|PostFormMap|Query|QueryArray|QueryMap)$
      - pattern-either:
        - pattern: '($CONTEXT : gin.Context).Request.URL.Query().Get(...)'
        - pattern: '($CONTEXT : *gin.Context).Request.URL.Query().Get(...)'
  pattern-sinks:
  - patterns:
    - patterns:
      - pattern-inside: |
          import "$IMPORT"
          ...
      - metavariable-regex:
          metavariable: $IMPORT
          regex: (.*lestrrat-go/libxml2.*)
    - patterns:
      - pattern-either:
        - patterns:
          - pattern-inside: |
              $P = parser.New($OPTS)
              ...
          - pattern: $P.$PARSE($INPUT)
        - pattern: parser.New($OPTS).$PARSE($INPUT)
        - pattern: NewCtxt($INPUT, $OPTS)
      - focus-metavariable: $INPUT
      - metavariable-regex:
          metavariable: $PARSE
          regex: ^(Parse|ParseHTML|ParseHTMLReader|ParseHTMLString|ParseReader|ParseString)$
      - metavariable-pattern:
          metavariable: $OPTS
          patterns:
          - pattern-either:
            - pattern: XMLParseNoEnt
            - pattern: parser.XMLParseNoEnt
- id: go.net.active-debug-code.write-pprof-profile-output.write-pprof-profile-output
  message: Detected stack traces being printed or included in an HTTP response. This
    could expose sensitive information if deployed to a production environment in
    a user facing manner.
  severity: INFO
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp:
    - A09:2021 - Security Logging and Monitoring Failures
    - A10:2017 - Insufficient Logging & Monitoring
    references:
    - https://pkg.go.dev/runtime/pprof#Profile
    technology:
    - go
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.active-debug-code.write-pprof-profile-output.write-pprof-profile-output
    shortlink: https://sg.run/5qlA
    semgrep.dev:
      rule:
        rule_id: yyUx40
        version_id: jQTX4n
        url: https://semgrep.dev/playground/r/jQTX4n/go.net.active-debug-code.write-pprof-profile-output.write-pprof-profile-output
        origin: pro_rules
  languages:
  - go
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        import "os"
        ...
    - pattern: os.$PIPE
    - metavariable-regex:
        metavariable: $PIPE
        regex: ^(Stdout|Stderr)$
  - patterns:
    - pattern-inside: |
        import "net/http"
        ...
    - pattern-either:
      - pattern: |
          ($RES : http.ResponseWriter)
      - pattern: |
          ($RES : *http.ResponseWriter)
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        import "runtime/pprof"
        ...
    - pattern: pprof.Lookup($LABEL).WriteTo($WRITER, ...)
    - focus-metavariable: $WRITER
- id: go.net.sql.pg-orm-sqli-taint.pg-orm-sqli-taint
  message: This rule has been deprecated. Please remove it from your policies and
    rulepacks.
  severity: ERROR
  metadata:
    likelihood: HIGH
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://pg.uptrace.dev/queries/
    technology:
    - go
    - pg
    - go-pg
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.sql.pg-orm-sqli-taint.pg-orm-sqli-taint
    shortlink: https://sg.run/Aprp
    semgrep.dev:
      rule:
        rule_id: NbUzKz
        version_id: w8TxPv
        url: https://semgrep.dev/playground/r/w8TxPv/go.net.sql.pg-orm-sqli-taint.pg-orm-sqli-taint
        origin: pro_rules
  languages:
  - go
  patterns:
  - pattern: a
  - pattern: b
- id: go.net.ssrf.http-ssrf-taint.http-ssrf-taint
  message: This rule has been deprecated.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    references:
    - https://golang.org/pkg/html/template/#HTML
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    technology:
    - go
    - go-net/http
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/go.net.ssrf.http-ssrf-taint.http-ssrf-taint
    shortlink: https://sg.run/WGn4
    semgrep.dev:
      rule:
        rule_id: x8Ujg0
        version_id: PkT392
        url: https://semgrep.dev/playground/r/PkT392/go.net.ssrf.http-ssrf-taint.http-ssrf-taint
        origin: pro_rules
  languages:
  - go
  patterns:
  - pattern: a()
  - pattern: b()
- id: python.lang.compatibility.python37.python37-compatibility-os2-ok2
  patterns:
  - pattern-not-inside: |
      if hasattr(os, 'pwritev'):
          ...
  - pattern: os.pwritev(...)
  message: os.pwritev() is only available on Python 3.3+ and is therefore not backwards
    compatible. Instead, use a combination of pwrite() and writev().
  languages:
  - python
  severity: ERROR
  metadata:
    category: compatibility
    technology:
    - python
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.compatibility.python37.python37-compatibility-os2-ok2
    shortlink: https://sg.run/5Q9X
    semgrep.dev:
      rule:
        rule_id: 0oU5vW
        version_id: zyTG29
        url: https://semgrep.dev/playground/r/zyTG29/python.lang.compatibility.python37.python37-compatibility-os2-ok2
        origin: community
- id: python.lang.security.audit.conn_recv.multiprocessing-recv
  languages:
  - python
  message: 'The Connection.recv() method automatically unpickles the data it receives,
    which can be a security risk unless you can trust the process which sent the message.
    Therefore, unless the connection object was produced using Pipe() you should only
    use the recv() and send() methods after performing some sort of authentication.
    See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection'
  metadata:
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    references:
    - https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv
    shortlink: https://sg.run/x1lz
    semgrep.dev:
      rule:
        rule_id: nJUzeK
        version_id: BjTGEn
        url: https://semgrep.dev/playground/r/BjTGEn/python.lang.security.audit.conn_recv.multiprocessing-recv
        origin: community
  pattern-either:
  - pattern: multiprocessing.connection.Connection.recv(...)
  - pattern: multiprocessing.connection.Client.recv(...)
  - pattern: |
      $C = multiprocessing.connection.Client(...)
      ...
      $C.recv(...)
  severity: WARNING
- id: python.lang.security.unverified-ssl-context.unverified-ssl-context
  patterns:
  - pattern-either:
    - pattern: ssl._create_unverified_context(...)
    - pattern: ssl._create_default_https_context = ssl._create_unverified_context
  fix-regex:
    regex: _create_unverified_context
    replacement: create_default_context
  message: Unverified SSL context detected. This will permit insecure connections
    without verifying SSL certificates. Use 'ssl.create_default_context' instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    references:
    - https://docs.python.org/3/library/ssl.html#ssl-security
    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context
    shortlink: https://sg.run/N4lp
    semgrep.dev:
      rule:
        rule_id: v8UnkQ
        version_id: bZTJeE
        url: https://semgrep.dev/playground/r/bZTJeE/python.lang.security.unverified-ssl-context.unverified-ssl-context
        origin: community
  severity: ERROR
  languages:
  - python
- id: python.lang.security.audit.ftplib.ftplib
  pattern: ftplib.$ANYTHING(...)
  message: FTP does not encrypt communications by default. This can lead to sensitive
    data being exposed. Ensure use of FTP here does not expose sensitive data.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L265
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B321
    references:
    - https://docs.python.org/3/library/telnetlib.html
    category: security
    technology:
    - ftplib
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.ftplib.ftplib
    shortlink: https://sg.run/7oyZ
    semgrep.dev:
      rule:
        rule_id: 4bUkv7
        version_id: d6TbRK
        url: https://semgrep.dev/playground/r/d6TbRK/python.lang.security.audit.ftplib.ftplib
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.telnetlib.telnetlib
  pattern: telnetlib.$ANYTHING(...)
  message: Telnet does not encrypt communications. Use SSH instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L208
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B312
    references:
    - https://docs.python.org/3/library/telnetlib.html
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib
    shortlink: https://sg.run/Gelp
    semgrep.dev:
      rule:
        rule_id: 0oU5Wl
        version_id: zyTePy
        url: https://semgrep.dev/playground/r/zyTePy/python.lang.security.audit.telnetlib.telnetlib
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  message: Detected a request using 'http://'. This request will be unencrypted, and
    attackers could listen into traffic on the network and be able to obtain sensitive
    information. Use 'https://' instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: V9 Communications Verification Requirements
      control_id: 9.1.1 Weak TLS
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements
      version: '4'
    category: security
    technology:
    - requests
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
    shortlink: https://sg.run/W8J4
    semgrep.dev:
      rule:
        rule_id: 6JUjpG
        version_id: 2KTN5R
        url: https://semgrep.dev/playground/r/2KTN5R/python.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http
        origin: community
  languages:
  - python
  severity: INFO
  options:
    symbolic_propagation: true
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: |
        "$URL"
    - metavariable-pattern:
        metavariable: $URL
        language: regex
        patterns:
        - pattern-regex: http://
        - pattern-not-regex: .*://localhost
        - pattern-not-regex: .*://127\.0\.0\.1
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: requests.$W($SINK, ...)
      - pattern: requests.request($METHOD, $SINK, ...)
      - pattern: requests.Request($METHOD, $SINK, ...)
    - focus-metavariable: $SINK
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp.insecure-urlopen-ftp
  message: Detected 'urllib.urlopen()' using 'ftp://'. This request will not be encrypted.
    Consider using SFTP instead. urllib does not support SFTP, so consider switching
    to a library which supports SFTP.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp.insecure-urlopen-ftp
    shortlink: https://sg.run/6n1o
    semgrep.dev:
      rule:
        rule_id: j2UvOG
        version_id: 5PTY5x
        url: https://semgrep.dev/playground/r/5PTY5x/python.lang.security.audit.insecure-transport.urllib.insecure-urlopen-ftp.insecure-urlopen-ftp
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.urlopen("=~/^[Ff][Tt][Pp]://.*/", ...)
  - pattern: |
      $URL = "=~/^[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.urlopen($URL, ...)
  - pattern: |-
      def $FUNC(..., $URL = "=~/^[Ff][Tt][Pp]://.*/", ...):
        ...
        urllib.request.urlopen($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp.insecure-urlopener-retrieve-ftp
  message: Detected an insecure transmission channel. 'URLopener.retrieve(...)' is
    being used with 'ftp://'. Use SFTP instead. urllib does not support SFTP, so consider
    using a library which supports SFTP.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp.insecure-urlopener-retrieve-ftp
    shortlink: https://sg.run/2xY0
    semgrep.dev:
      rule:
        rule_id: r6UrPp
        version_id: BjTGYn
        url: https://semgrep.dev/playground/r/BjTGYn/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve-ftp.insecure-urlopener-retrieve-ftp
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: urllib.request.URLopener(...).retrieve("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.retrieve("=~/[Ff][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Ff][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.retrieve($URL, ...)
  - pattern: |
      $URL = "=~/[Ff][Tt][Pp]://.*/"
      ...
      urllib.request.URLopener(...).retrieve($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Ff][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).retrieve($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.retrieve($URL, ...)
- id: python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve.insecure-urlopener-retrieve
  message: Detected an unsecured transmission channel. 'URLopener.retrieve(...)' is
    being used with 'http://'. Use 'https://' instead to secure the channel.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve
    category: security
    technology:
    - urllib
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve.insecure-urlopener-retrieve
    shortlink: https://sg.run/XBGK
    semgrep.dev:
      rule:
        rule_id: bwUw0n
        version_id: DkTe8P
        url: https://semgrep.dev/playground/r/DkTe8P/python.lang.security.audit.insecure-transport.urllib.insecure-urlopener-retrieve.insecure-urlopener-retrieve
        origin: community
  severity: WARNING
  languages:
  - python
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: urllib.request.URLopener(...).retrieve("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: $OPENERDIRECTOR.retrieve("=~/[Hh][Tt][Tt][Pp]://.*/", ...)
  - patterns:
    - pattern-inside: |
        $OPENERDIRECTOR = urllib.request.URLopener(...)
        ...
    - pattern: |
        $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
        ...
        $OPENERDIRECTOR.retrieve($URL, ...)
  - pattern: |
      $URL = "=~/[Hh][Tt][Tt][Pp]://.*/"
      ...
      urllib.request.URLopener(...).retrieve($URL, ...)
  - patterns:
    - pattern-inside: |
        def $FUNC(..., $URL = "=~/[Hh][Tt][Tt][Pp]://.*/", ...):
          ...
    - pattern-either:
      - pattern: urllib.request.URLopener(...).retrieve($URL, ...)
      - patterns:
        - pattern-inside: |
            $OPENERDIRECTOR = urllib.request.URLopener(...)
            ...
        - pattern: $OPENERDIRECTOR.retrieve($URL, ...)
- id: python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces
  message: Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly
    expose the server publicly as it binds to all available interfaces. Consider instead
    getting correct address from an environment variable or configuration file.
  metadata:
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp:
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - python
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces
    shortlink: https://sg.run/rdln
    semgrep.dev:
      rule:
        rule_id: OrU3og
        version_id: 5PTY5G
        url: https://semgrep.dev/playground/r/5PTY5G/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces
        origin: community
  languages:
  - python
  severity: INFO
  pattern-either:
  - pattern: |
      $S = socket.socket(...)
      ...
      $S.bind(("0.0.0.0", ...))
  - pattern: |
      $S = socket.socket(...)
      ...
      $S.bind(("::", ...))
  - pattern: |
      $S = socket.socket(...)
      ...
      $S.bind(("", ...))
- id: python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
  patterns:
  - pattern: |
      $LOGGER_OBJ.$LOGGER_CALL($FORMAT_STRING,...)
  - metavariable-regex:
      metavariable: $LOGGER_OBJ
      regex: (?i)(_logger|logger|self.logger|log)
  - metavariable-regex:
      metavariable: $LOGGER_CALL
      regex: (debug|info|warn|warning|error|exception|critical)
  - metavariable-regex:
      metavariable: $FORMAT_STRING
      regex: (?i).*(api.key|secret|credential|token|password).*\%s.*
  message: Detected a python logger call with a potential hardcoded secret $FORMAT_STRING
    being logged. This may lead to secret credentials being exposed. Make sure that
    the logger is not logging  sensitive information.
  severity: WARNING
  languages:
  - python
  metadata:
    cwe:
    - 'CWE-532: Insertion of Sensitive Information into Log File'
    category: security
    technology:
    - python
    owasp:
    - A09:2021 - Security Logging and Monitoring Failures
    references:
    - https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
    shortlink: https://sg.run/ydNx
    semgrep.dev:
      rule:
        rule_id: x8UnJk
        version_id: w8TvNW
        url: https://semgrep.dev/playground/r/w8TvNW/python.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure
        origin: community
- id: python.lang.security.deserialization.pickle.avoid-pickle
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle
    shortlink: https://sg.run/OPwB
    semgrep.dev:
      rule:
        rule_id: EwU2BJ
        version_id: jQTeDJ
        url: https://semgrep.dev/playground/r/jQTeDJ/python.lang.security.deserialization.pickle.avoid-pickle
        origin: community
  languages:
  - python
  message: Avoid using `pickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: pickle.$FUNC(...)
    - pattern: _pickle.$FUNC(...)
  - pattern-not: pickle.$FUNC("...")
  - pattern-not: _pickle.$FUNC("...")
- id: python.lang.security.deserialization.pickle.avoid-cPickle
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://docs.python.org/3/library/pickle.html
    category: security
    technology:
    - python
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle
    shortlink: https://sg.run/eLxb
    semgrep.dev:
      rule:
        rule_id: 7KUQNL
        version_id: 1QTW3k
        url: https://semgrep.dev/playground/r/1QTW3k/python.lang.security.deserialization.pickle.avoid-cPickle
        origin: community
  languages:
  - python
  message: Avoid using `cPickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data as JSON or a similar text-based
    serialization format.
  severity: WARNING
  patterns:
  - pattern: cPickle.$FUNC(...)
  - pattern-not: cPickle.$FUNC("...")
- id: python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor
  message: Detected XOR cipher algorithm which is considered insecure. This algorithm
    is not cryptographically secure and can be reversed easily. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L84
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://stackoverflow.com/questions/1135186/whats-wrong-with-xor-encryption
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor
    shortlink: https://sg.run/L0yr
    semgrep.dev:
      rule:
        rule_id: PeUk5W
        version_id: 3ZTx98
        url: https://semgrep.dev/playground/r/3ZTx98/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor
        origin: community
  severity: WARNING
  languages:
  - python
  pattern-either:
  - pattern: Cryptodome.Cipher.XOR.new(...)
  - pattern: Crypto.Cipher.XOR.new(...)
- id: python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size
  patterns:
  - pattern-either:
    - pattern: Crypto.PublicKey.DSA.generate(..., bits=$SIZE, ...)
    - pattern: Crypto.PublicKey.DSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate(..., bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.DSA.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: Detected an insufficient key size for DSA. NIST recommends a key size of
    2048 or higher.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size
    shortlink: https://sg.run/4y8l
    semgrep.dev:
      rule:
        rule_id: AbUWje
        version_id: GxTW9e
        url: https://semgrep.dev/playground/r/GxTW9e/python.pycryptodome.security.insufficient-dsa-key-size.insufficient-dsa-key-size
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size
  patterns:
  - pattern-either:
    - pattern: Crypto.PublicKey.RSA.generate(..., bits=$SIZE, ...)
    - pattern: Crypto.PublicKey.RSA.generate($SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate(..., bits=$SIZE, ...)
    - pattern: Cryptodome.PublicKey.RSA.generate($SIZE, ...)
  - metavariable-comparison:
      metavariable: $SIZE
      comparison: $SIZE < 2048
  message: Detected an insufficient key size for RSA. NIST recommends a key size of
    2048 or higher.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/PyCQA/bandit/blob/b1411bfb43795d3ffd268bef17a839dee954c2b1/bandit/plugins/weak_cryptographic_key.py
    references:
    - https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57Pt3r1.pdf
    category: security
    technology:
    - pycryptodome
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size
    shortlink: https://sg.run/PprY
    semgrep.dev:
      rule:
        rule_id: BYUBWe
        version_id: RGTw1l
        url: https://semgrep.dev/playground/r/RGTw1l/python.pycryptodome.security.insufficient-rsa-key-size.insufficient-rsa-key-size
        origin: community
  languages:
  - python
  severity: WARNING
- id: ruby.lang.security.divide-by-zero.divide-by-zero
  message: Detected a possible ZeroDivisionError.
  metadata:
    cwe:
    - 'CWE-369: Divide By Zero'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_divide_by_zero.rb
    category: security
    technology:
    - ruby
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.divide-by-zero.divide-by-zero
    shortlink: https://sg.run/KWpP
    semgrep.dev:
      rule:
        rule_id: oqUzXA
        version_id: yeTQdX
        url: https://semgrep.dev/playground/r/yeTQdX/ruby.lang.security.divide-by-zero.divide-by-zero
        origin: community
  languages:
  - ruby
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $VAR
    - metavariable-regex:
        metavariable: $VAR
        regex: ^\d*(?!\.)$
  pattern-sinks:
  - patterns:
    - pattern-inside: $NUMER / 0
    - pattern: $NUMER
- id: ruby.lang.security.file-disclosure.file-disclosure
  message: Special requests can determine whether a file exists on a filesystem that's
    outside the Rails app's root directory. To fix this, set config.serve_static_assets
    = false.
  metadata:
    cwe:
    - 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory (''Path
      Traversal'')'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_file_disclosure.rb
    - https://groups.google.com/g/rubyonrails-security/c/23fiuwb1NBA/m/MQVM1-5GkPMJ
    category: security
    technology:
    - ruby
    owasp:
    - A05:2017 - Broken Access Control
    - A01:2021 - Broken Access Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.file-disclosure.file-disclosure
    shortlink: https://sg.run/qrR1
    semgrep.dev:
      rule:
        rule_id: zdUyqE
        version_id: rxTb8Y
        url: https://semgrep.dev/playground/r/rxTb8Y/ruby.lang.security.file-disclosure.file-disclosure
        origin: community
  languages:
  - ruby
  severity: ERROR
  pattern: config.serve_static_assets = true
  fix-regex:
    regex: =(\s)*true
    replacement: = false
- id: ruby.lang.security.no-eval.ruby-eval
  message: Use of eval with user-controllable input detected. This can lead  to attackers
    running arbitrary code. Ensure external data does not  reach here, otherwise this
    is a security vulnerability. Consider  other ways to do this without eval.
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe2022-top25: true
    cwe2021-top25: true
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_evaluation.rb
    subcategory:
    - vuln
    technology:
    - ruby
    - rails
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.no-eval.ruby-eval
    shortlink: https://sg.run/bDwZ
    semgrep.dev:
      rule:
        rule_id: OrUGNk
        version_id: rxTq2d
        url: https://semgrep.dev/playground/r/rxTq2d/ruby.lang.security.no-eval.ruby-eval
        origin: community
  languages:
  - ruby
  mode: taint
  pattern-sources:
  - pattern-either:
    - pattern: params
    - pattern: cookies
    - patterns:
      - pattern: |
          RubyVM::InstructionSequence.compile(...)
      - pattern-not: |
          RubyVM::InstructionSequence.compile("...")
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $X.eval
      - pattern: $X.class_eval
      - pattern: $X.instance_eval
      - pattern: $X.module_eval
      - pattern: $X.eval(...)
      - pattern: $X.class_eval(...)
      - pattern: $X.instance_eval(...)
      - pattern: $X.module_eval(...)
      - pattern: eval(...)
      - pattern: class_eval(...)
      - pattern: module_eval(...)
      - pattern: instance_eval(...)
    - pattern-not: $M("...",...)
- id: ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify
  pattern: OpenSSL::SSL::VERIFY_NONE
  message: Detected SSL that will accept an unverified connection. This makes the
    connections susceptible to man-in-the-middle attacks. Use 'OpenSSL::SSL::VERIFY_PEER'
    instead.
  fix-regex:
    regex: VERIFY_NONE
    replacement: VERIFY_PEER
  severity: WARNING
  languages:
  - ruby
  metadata:
    cwe:
    - 'CWE-295: Improper Certificate Validation'
    category: security
    technology:
    - ruby
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify
    shortlink: https://sg.run/kLxX
    semgrep.dev:
      rule:
        rule_id: v8U5Yn
        version_id: 44Txx5
        url: https://semgrep.dev/playground/r/44Txx5/ruby.lang.security.ssl-mode-no-verify.ssl-mode-no-verify
        origin: community
- id: ruby.lang.security.timing-attack.timing-attack
  message: 'Checks for unsafe use of method http_basic_authenticate_with, which is
    vulnerable to timing attacks as it does not use constant-time checking when comparing
    passwords. Affected Rails versions include: 5.0.0.beta1.1, 4.2.5.1, 4.1.14.1,
    3.2.22.1. Avoid this function if possible.'
  metadata:
    cwe:
    - 'CWE-208: Observable Timing Discrepancy'
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_basic_auth_timing_attack.rb
    - https://groups.google.com/g/rubyonrails-security/c/ANv0HDHEC3k/m/mt7wNGxbFQAJ
    category: security
    technology:
    - ruby
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.timing-attack.timing-attack
    shortlink: https://sg.run/wxdx
    semgrep.dev:
      rule:
        rule_id: d8Uzrz
        version_id: PkTEEb
        url: https://semgrep.dev/playground/r/PkTEEb/ruby.lang.security.timing-attack.timing-attack
        origin: community
  languages:
  - ruby
  severity: ERROR
  pattern: http_basic_authenticate_with ...
- id: ruby.rails.security.audit.xss.templates.avoid-raw.avoid-raw
  message: '''raw'' renders raw HTML, as the name implies. This means that normal
    HTML escaping is bypassed. If user data can be controlled here, this exposes your
    application to cross-site scripting (XSS). If you need to do this, be sure to
    correctly sanitize the data using a library such as DOMPurify.'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_cross_site_scripting.rb
    references:
    - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===
    - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027
    category: security
    technology:
    - rails
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.xss.templates.avoid-raw.avoid-raw
    shortlink: https://sg.run/3Aqg
    semgrep.dev:
      rule:
        rule_id: GdU0vJ
        version_id: NdT5Eo
        url: https://semgrep.dev/playground/r/NdT5Eo/ruby.rails.security.audit.xss.templates.avoid-raw.avoid-raw
        origin: community
  languages:
  - generic
  paths:
    include:
    - '*.erb'
  severity: WARNING
  patterns:
  - pattern-inside: <%= ... %>
  - pattern: raw
- id: terraform.lang.security.ecr-image-scan-on-push.ecr-image-scan-on-push
  patterns:
  - pattern: resource
  - pattern-not-inside: |
      resource "aws_ecr_repository" "..." {
        ...
        image_scanning_configuration {
          ...
          scan_on_push=true
          ...
        }
        ...
      }
  - pattern-inside: |
      resource "aws_ecr_repository" "..." {
        ...
      }
  languages:
  - hcl
  message: The ECR Repository isn't configured to scan images on push
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-1104: Use of Unmaintained Third Party Components'
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A06:2021 - Vulnerable and Outdated Components
    references:
    - https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.ecr-image-scan-on-push.ecr-image-scan-on-push
    shortlink: https://sg.run/R8eE
    semgrep.dev:
      rule:
        rule_id: 0oUELR
        version_id: 8KTD2R
        url: https://semgrep.dev/playground/r/8KTD2R/terraform.lang.security.ecr-image-scan-on-push.ecr-image-scan-on-push
        origin: community
- id: terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket
  pattern: acl = "public-read-write"
  languages:
  - hcl
  severity: ERROR
  message: S3 bucket with public read-write access detected.
  metadata:
    references:
    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#acl
    - https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    category: security
    technology:
    - terraform
    - aws
    owasp:
    - A01:2021 - Broken Access Control
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket
    shortlink: https://sg.run/0nok
    semgrep.dev:
      rule:
        rule_id: 6JUqvn
        version_id: qkTDl5
        url: https://semgrep.dev/playground/r/qkTDl5/terraform.lang.security.s3-public-rw-bucket.s3-public-rw-bucket
        origin: community
- id: typescript.nestjs.security.audit.nestjs-open-redirect.nestjs-open-redirect
  message: 'Untrusted user input in {url: ...} can result in Open Redirect vulnerability.'
  metadata:
    cwe:
    - 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    category: security
    technology:
    - nestjs
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.nestjs.security.audit.nestjs-open-redirect.nestjs-open-redirect
    shortlink: https://sg.run/6rJw
    semgrep.dev:
      rule:
        rule_id: X5UZQK
        version_id: 2KTAG6
        url: https://semgrep.dev/playground/r/2KTAG6/typescript.nestjs.security.audit.nestjs-open-redirect.nestjs-open-redirect
        origin: community
  languages:
  - typescript
  severity: WARNING
  patterns:
  - pattern: |
      return {url: $URL}
  - pattern-inside: |
      class $CN {
          @Redirect(...)
          $FN(...) {
              ...
          }
      }
  - pattern-not: |
      return {url: "..."}
- id: typescript.react.security.audit.react-jwt-decoded-property.react-jwt-decoded-property
  message: Property decoded from JWT token without verifying and cannot be trustworthy.
  metadata:
    cwe:
    - 'CWE-922: Insecure Storage of Sensitive Information'
    references:
    - https://pragmaticwebsecurity.com/articles/oauthoidc/localstorage-xss.html
    category: security
    owasp:
    - A01:2021 - Broken Access Control
    technology:
    - react
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-jwt-decoded-property.react-jwt-decoded-property
    shortlink: https://sg.run/wx8x
    semgrep.dev:
      rule:
        rule_id: d8Uzqz
        version_id: rxTb0J
        url: https://semgrep.dev/playground/r/rxTb0J/typescript.react.security.audit.react-jwt-decoded-property.react-jwt-decoded-property
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern-inside: |
      import jwt_decode from "jwt-decode";
      ...
  - pattern-inside: |
      $DECODED = jwt_decode($TOKEN,...);
      ...
  - pattern: $DECODED.$PROPERTY
- id: typescript.react.security.audit.react-jwt-in-localstorage.react-jwt-in-localstorage
  message: Storing JWT tokens in localStorage known to be a bad practice, consider
    moving your tokens from localStorage to a HTTP cookie.
  metadata:
    cwe:
    - 'CWE-922: Insecure Storage of Sensitive Information'
    references:
    - https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
    category: security
    owasp:
    - A01:2021 - Broken Access Control
    technology:
    - react
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.react.security.audit.react-jwt-in-localstorage.react-jwt-in-localstorage
    shortlink: https://sg.run/xYye
    semgrep.dev:
      rule:
        rule_id: ZqUq6g
        version_id: bZTxR7
        url: https://semgrep.dev/playground/r/bZTxR7/typescript.react.security.audit.react-jwt-in-localstorage.react-jwt-in-localstorage
        origin: community
  languages:
  - typescript
  - javascript
  severity: INFO
  patterns:
  - pattern-inside: |
      import jwt_decode from "jwt-decode";
      ...
  - pattern-either:
    - pattern: |
        $DECODED = jwt_decode($TOKEN,...);
        ...
        localStorage.setItem($NAME, <... $TOKEN ...>);
    - pattern: |
        $DECODED = jwt_decode(...);
        ...
        localStorage.setItem($NAME, <... $DECODED ...>);
- id: python.ldap3.python-ldap3-hardcoded-secret.python-ldap3-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - ldap
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.ldap3.python-ldap3-hardcoded-secret.python-ldap3-hardcoded-secret
    shortlink: https://sg.run/6lRo
    semgrep.dev:
      rule:
        rule_id: nJU2E5
        version_id: 1QTNJB
        url: https://semgrep.dev/playground/r/1QTNJB/python.ldap3.python-ldap3-hardcoded-secret.python-ldap3-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: ldap3.Connection(..., password="...",...)
  - pattern-not: ldap3.Connection(..., password="",...)
- id: python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret
    shortlink: https://sg.run/oLd9
    semgrep.dev:
      rule:
        rule_id: EwUEl5
        version_id: bZToPj
        url: https://semgrep.dev/playground/r/bZToPj/python.mysql.python-mysql-hardcoded-secret.python-mysql-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: mysql.connector.connect(..., password="...",...)
    - pattern: mysql.connector.connect(..., passwd="...",...)
  - pattern-not: mysql.connector.connect(..., password="",...)
  - pattern-not: mysql.connector.connect(..., passwd="",...)
- id: python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pg
    - psycopg2
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret
    shortlink: https://sg.run/zLeG
    semgrep.dev:
      rule:
        rule_id: 7KUEGq
        version_id: QkTN36
        url: https://semgrep.dev/playground/r/QkTN36/python.psycopg2.python-psycopg2-hardcoded-secret.python-psycopg2-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: psycopg2.connect(..., password="...",...)
  - pattern-not: psycopg2.connect(..., password="",...)
- id: python.pymongo.python-pymongo-hardcoded-secret.python-pymongo-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymongo
    - mongodb
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymongo.python-pymongo-hardcoded-secret.python-pymongo-hardcoded-secret
    shortlink: https://sg.run/XRKK
    semgrep.dev:
      rule:
        rule_id: gxUBzz
        version_id: JdTRwl
        url: https://semgrep.dev/playground/r/JdTRwl/python.pymongo.python-pymongo-hardcoded-secret.python-pymongo-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: pymongo.MongoClient(...,password="...",...)
  - pattern-not: pymongo.MongoClient(...,password="",...)
- id: python.pymysql.python-pymysql-hardcoded-secret.python-pymysql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymysql
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymysql.python-pymysql-hardcoded-secret.python-pymysql-hardcoded-secret
    shortlink: https://sg.run/jW3Y
    semgrep.dev:
      rule:
        rule_id: QrUG5D
        version_id: A8TlPX
        url: https://semgrep.dev/playground/r/A8TlPX/python.pymysql.python-pymysql-hardcoded-secret.python-pymysql-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: pymysql.connect(..., password="...",...)
  - pattern-not: pymysql.connect(..., password="",...)
- id: python.webrepl.python-webrepl-hardcoded-secret.python-webrepl-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - webrepl
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.webrepl.python-webrepl-hardcoded-secret.python-webrepl-hardcoded-secret
    shortlink: https://sg.run/yLOx
    semgrep.dev:
      rule:
        rule_id: PeUR9N
        version_id: 2KTONo
        url: https://semgrep.dev/playground/r/2KTONo/python.webrepl.python-webrepl-hardcoded-secret.python-webrepl-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern: webrepl.start(...,password="...",...)
  - pattern-not: webrepl.start(...,password="",...)
- id: python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pyjwt
    - jwt
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret
    shortlink: https://sg.run/pLOg
    semgrep.dev:
      rule:
        rule_id: L1Ukno
        version_id: ZRTdjK
        url: https://semgrep.dev/playground/r/ZRTdjK/python.pyjwt.python-pyjwt-hardcoded-secret.python-pyjwt-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: |
        jwt.encode($PAYLOAD, "...", ...)
    - pattern: |
        jwt.decode($PAYLOAD, "...", ...)
- id: python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymongo
    - mongodb
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret
    shortlink: https://sg.run/2WP0
    semgrep.dev:
      rule:
        rule_id: 8GU56J
        version_id: nWTNq9
        url: https://semgrep.dev/playground/r/nWTNq9/python.pymongo.python-mongo-hardcoded-secret.python-mongo-hardcoded-secret
        origin: pro_rules
  languages:
  - py
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        pymongo.MongoClient(...)
- id: python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - sqlalchemy
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret
    shortlink: https://sg.run/1D4w
    semgrep.dev:
      rule:
        rule_id: 3qU4Zq
        version_id: 8KTleB
        url: https://semgrep.dev/playground/r/8KTleB/python.sqlalchemy.python-sqlalchemy-hardcoded-secret.python-sqlalchemy-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: .*(postgres|mysql|mssql).*://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        sqlalchemy.create_engine($VALUE,...)
- id: python.tormysql.python-tormysql-hardcoded-secret.python-tormysql-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - pymsql
    - mysql
    - sql
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/python.tormysql.python-tormysql-hardcoded-secret.python-tormysql-hardcoded-secret
    shortlink: https://sg.run/9pDY
    semgrep.dev:
      rule:
        rule_id: 4bUEBD
        version_id: gETX95
        url: https://semgrep.dev/playground/r/gETX95/python.tormysql.python-tormysql-hardcoded-secret.python-tormysql-hardcoded-secret
        origin: pro_rules
  languages:
  - python
  patterns:
  - pattern-either:
    - pattern: |
        tormysql.ConnectionPool(..., password="...",...)
    - pattern: |
        tormysql.ConnectionPool(..., passwd="...",...)
  - pattern-not: |
      tormysql.ConnectionPool(..., password="",...)
  - pattern-not: |
      tormysql.ConnectionPool(..., passwd="",...)
- id: javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
  message: Detected non-literal calls to Deno.run(). This could lead to a command
    injection vulnerability.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - deno
    references:
    - https://deno.land/manual/examples/subprocess#simple-example
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
    shortlink: https://sg.run/Nrrn
    semgrep.dev:
      rule:
        rule_id: x8UWWg
        version_id: DkTeyA
        url: https://semgrep.dev/playground/r/DkTeyA/javascript.deno.security.audit.deno-dangerous-run.deno-dangerous-run
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: function ... (..., $ARG,...) {...}
    - focus-metavariable: $ARG
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: |
          Deno.run({cmd: [$INPUT,...]},...)
      - pattern: |
          Deno.run({cmd: ["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$INPUT,...]},...)
      - patterns:
        - pattern: |
            Deno.run({cmd: [$CMD,"-c",$INPUT,...]},...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/"
            ...
    - focus-metavariable: $INPUT
- id: java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
  pattern-either:
  - patterns:
    - pattern: |
        new ProcessBuilder($CMD,...)
    - pattern-not-inside: |
        $CMD = "...";
        ...
    - pattern-not-inside: |
        $CMD = Arrays.asList("...",...);
        ...
    - pattern-not-inside: |
        $CMD = new String[]{"...",...};
        ...
    - pattern-not: |
        new ProcessBuilder("...",...)
    - pattern-not: |
        new ProcessBuilder(new String[]{"...",...},...)
    - pattern-not: |
        new ProcessBuilder(Arrays.asList("...",...),...)
  - patterns:
    - pattern: |
        $PB.command($CMD,...)
    - pattern-inside: |
        $TYPE $PB = new ProcessBuilder(...);
        ...
    - pattern-not-inside: |
        $CMD = "...";
        ...
    - pattern-not-inside: |
        $CMD = Arrays.asList("...",...);
        ...
    - pattern-not-inside: |
        $CMD = new String[]{"...",...};
        ...
    - pattern-not: |
        $PB.command("...",...)
    - pattern-not: |
        $PB.command(new String[]{"...",...},...)
    - pattern-not: |
        $PB.command(Arrays.asList("...",...),...)
  - patterns:
    - pattern-either:
      - pattern: |
          new ProcessBuilder("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
      - pattern: |
          new ProcessBuilder("cmd","/c",$ARG,...)
      - pattern: |
          new ProcessBuilder(Arrays.asList("cmd","/c",$ARG,...),...)
      - pattern: |
          new ProcessBuilder(new String[]{"cmd","/c",$ARG,...},...)
      - patterns:
        - pattern-either:
          - pattern: |
              new ProcessBuilder($CMD,"/c",$ARG,...)
          - pattern: |
              new ProcessBuilder(Arrays.asList($CMD,"/c",$ARG,...),...)
          - pattern: |
              new ProcessBuilder(new String[]{$CMD,"/c",$ARG,...},...)
        - pattern-inside: |
            $CMD = "cmd";
            ...
    - pattern-not-inside: |
        $ARG = "...";
        ...
    - pattern-not: |
        new ProcessBuilder("...","...","...",...)
    - pattern-not: |
        new ProcessBuilder(new String[]{"...","...","...",...},...)
    - pattern-not: |
        new ProcessBuilder(Arrays.asList("...","...","...",...),...)
  - patterns:
    - pattern-either:
      - pattern: |
          $PB.command("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...)
      - pattern: |
          $PB.command("cmd","/c",$ARG,...)
      - pattern: |
          $PB.command(Arrays.asList("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...),...)
      - pattern: |
          $PB.command(Arrays.asList("cmd","/c",$ARG,...),...)
      - pattern: |
          $PB.command(new String[]{"=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",$ARG,...},...)
      - pattern: |
          $PB.command(new String[]{"cmd","/c",$ARG,...},...)
      - patterns:
        - pattern-either:
          - pattern: |
              $PB.command($CMD,"-c",$ARG,...)
          - pattern: |
              $PB.command(Arrays.asList($CMD,"-c",$ARG,...),...)
          - pattern: |
              $PB.command(new String[]{$CMD,"-c",$ARG,...},...)
        - pattern-inside: |
            $CMD = "=~/(sh|bash|ksh|csh|tcsh|zsh)/";
            ...
      - patterns:
        - pattern-either:
          - pattern: |
              $PB.command($CMD,"/c",$ARG,...)
          - pattern: |
              $PB.command(Arrays.asList($CMD,"/c",$ARG,...),...)
          - pattern: |
              $PB.command(new String[]{$CMD,"/c",$ARG,...},...)
        - pattern-inside: |
            $CMD = "cmd";
            ...
    - pattern-inside: |
        $TYPE $PB = new ProcessBuilder(...);
        ...
    - pattern-not-inside: |
        $ARG = "...";
        ...
    - pattern-not: |
        $PB.command("...","...","...",...)
    - pattern-not: |
        $PB.command(new String[]{"...","...","...",...},...)
    - pattern-not: |
        $PB.command(Arrays.asList("...","...","...",...),...)
  message: A formatted or concatenated string was detected as input to a ProcessBuilder
    call. This is dangerous if a variable is controlled by user input and could result
    in a command injection. Ensure your variables are not controlled by users or sufficiently
    sanitized.
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
    shortlink: https://sg.run/gJJe
    semgrep.dev:
      rule:
        rule_id: 4bUzzo
        version_id: 2KT69y
        url: https://semgrep.dev/playground/r/2KT69y/java.lang.security.audit.command-injection-process-builder.command-injection-process-builder
        origin: community
  severity: ERROR
  languages:
  - java
- id: java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
  pattern: |
    <spring:eval ... expression=...>
  message: A Spring expression is built with a dynamic value. The source of the value(s)
    should be verified to avoid that unfiltered values fall into this risky code evaluation.
  severity: WARNING
  languages:
  - generic
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#JSP_SPRING_EVAL
    category: security
    technology:
    - spring
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
    shortlink: https://sg.run/Q88o
    semgrep.dev:
      rule:
        rule_id: PeUkkL
        version_id: QkTQrL
        url: https://semgrep.dev/playground/r/QkTQrL/java.spring.security.audit.spring-jsp-eval.spring-jsp-eval
        origin: community
  paths:
    include:
    - '*.jsp'
- id: java.jboss.security.seam-log-injection.seam-log-injection
  patterns:
  - pattern: |
      $LOG.$INFO($X + $Y,...)
  - pattern-either:
    - pattern-inside: |
        import org.jboss.seam.log.Log;
        ...
    - pattern-inside: |
        org.jboss.seam.log.Log $LOG = ...;
        ...
  - metavariable-regex:
      metavariable: $INFO
      regex: (debug|error|fatal|info|trace|warn)
  languages:
  - java
  message: Seam Logging API support an expression language to introduce bean property
    to log messages. The expression language can also be the source to unwanted code
    execution. In this context, an expression is built with a dynamic value. The source
    of the value(s) should be verified to avoid that unfiltered values fall into this
    risky code evaluation.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SEAM_LOG_INJECTION
    category: security
    technology:
    - jboss
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.jboss.security.seam-log-injection.seam-log-injection
    shortlink: https://sg.run/3A4o
    semgrep.dev:
      rule:
        rule_id: JDUPQ7
        version_id: zyTX5Q
        url: https://semgrep.dev/playground/r/zyTX5Q/java.jboss.security.seam-log-injection.seam-log-injection
        origin: community
  severity: ERROR
- id: yaml.docker-compose.security.privileged-service.privileged-service
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
        $SERVICE:
          ...
          privileged: $TRUE
  - focus-metavariable: $TRUE
  - metavariable-regex:
      metavariable: $TRUE
      regex: (true)
  fix: |
    false
  message: Service '$SERVICE' is running in privileged mode. This grants the container
    the equivalent of root capabilities on the host machine. This can lead to container
    escapes, privilege escalation, and other security concerns. Remove the 'privileged'
    key to disable this capability.
  metadata:
    cwe:
    - 'CWE-250: Execution with Unnecessary Privileges'
    owasp:
    - A06:2017 - Security Misconfiguration
    - A05:2021 - Security Misconfiguration
    references:
    - https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html
    - https://containerjournal.com/topics/container-security/why-running-a-privileged-container-is-not-a-good-idea/
    category: security
    technology:
    - docker-compose
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    subcategory:
    - vuln
    likelihood: HIGH
    impact: HIGH
    confidence: HIGH
    source: https://semgrep.dev/r/yaml.docker-compose.security.privileged-service.privileged-service
    shortlink: https://sg.run/AlX0
    semgrep.dev:
      rule:
        rule_id: DbUW17
        version_id: 5PTBQq
        url: https://semgrep.dev/playground/r/5PTBQq/yaml.docker-compose.security.privileged-service.privileged-service
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash
  pattern-regex: \$2[aby]?\$[\d]+\$[./A-Za-z0-9]{53}
  languages:
  - regex
  message: bcrypt hash detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    category: security
    technology:
    - secrets
    - bcrypt
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash
    shortlink: https://sg.run/3A8G
    semgrep.dev:
      rule:
        rule_id: PeUk0Q
        version_id: bZTxy4
        url: https://semgrep.dev/playground/r/bZTxy4/generic.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash
        origin: community
- id: generic.secrets.security.detected-etc-shadow.detected-etc-shadow
  pattern-regex: root:[x!*]*:[0-9]*:[0-9]*
  languages:
  - regex
  message: linux shadow file detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    category: security
    technology:
    - secrets
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-etc-shadow.detected-etc-shadow
    shortlink: https://sg.run/4ylL
    semgrep.dev:
      rule:
        rule_id: JDUP6p
        version_id: kbTrJ9
        url: https://semgrep.dev/playground/r/kbTrJ9/generic.secrets.security.detected-etc-shadow.detected-etc-shadow
        origin: community
- id: generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token
  patterns:
  - pattern: $AUTHTOKEN = $VALUE
  - metavariable-regex:
      metavariable: $AUTHTOKEN
      regex: _(authToken|auth|password)
  - pattern-not: $AUTHTOKEN = ${...}
  languages:
  - generic
  message: NPM registry authentication token detected
  paths:
    include:
    - '*npmrc*'
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    category: security
    technology:
    - secrets
    - npm
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token
    shortlink: https://sg.run/Ppg3
    semgrep.dev:
      rule:
        rule_id: 5rU4pe
        version_id: 6xT7RJ
        url: https://semgrep.dev/playground/r/6xT7RJ/generic.secrets.security.detected-npm-registry-auth-token.detected-npm-registry-auth-token
        origin: community
- id: javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket
  message: Insecure WebSocket Detected. WebSocket Secure (wss) should be used for
    all WebSocket connections.
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    asvs:
      section: 'V13: API and Web Service Verification Requirements'
      control_id: 13.5.1 Insecure WebSocket
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x21-V13-API.md#v135-websocket-security-requirements
      version: '4'
    category: security
    technology:
    - regex
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket
    shortlink: https://sg.run/GWyz
    semgrep.dev:
      rule:
        rule_id: AbUWeE
        version_id: 8KTLZ8
        url: https://semgrep.dev/playground/r/8KTLZ8/javascript.lang.security.detect-insecure-websocket.detect-insecure-websocket
        origin: community
  languages:
  - regex
  severity: ERROR
  pattern-regex: \bws:\/\/
- id: yaml.docker-compose.security.no-new-privileges.no-new-privileges
  patterns:
  - pattern-inside: |
      version: ...
      ...
      services:
        ...
  - pattern: |
      $SERVICE:
        ...
        image: ...
  - pattern-not: |
      $SERVICE:
        ...
        image: ...
        ...
        security_opt:
          - ...
          - no-new-privileges:true
  - focus-metavariable: $SERVICE
  message: Service '$SERVICE' allows for privilege escalation via setuid or setgid
    binaries. Add 'no-new-privileges:true' in 'security_opt' to prevent this.
  metadata:
    cwe:
    - 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    owasp:
    - A05:2021 - Security Misconfiguration
    - A06:2017 - Security Misconfiguration
    references:
    - https://raesene.github.io/blog/2019/06/01/docker-capabilities-and-no-new-privs/
    - https://www.kernel.org/doc/Documentation/prctl/no_new_privs.txt
    - https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html#rule-4-add-no-new-privileges-flag
    category: security
    technology:
    - docker-compose
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.docker-compose.security.no-new-privileges.no-new-privileges
    shortlink: https://sg.run/0n8q
    semgrep.dev:
      rule:
        rule_id: qNUoWr
        version_id: JdT2Ez
        url: https://semgrep.dev/playground/r/JdT2Ez/yaml.docker-compose.security.no-new-privileges.no-new-privileges
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: python.lang.security.dangerous-globals-use.dangerous-globals-use
  patterns:
  - pattern-either:
    - pattern: globals().get(...)
    - pattern: locals().get(...)
    - pattern: globals()[...]
    - pattern: locals()[...]
    - patterns:
      - pattern-either:
        - pattern-inside: |
            $G = globals()
            ...
        - pattern-inside: |
            $G = locals()
            ...
      - pattern-either:
        - pattern: $G.get(...)
        - pattern: $G[...]
    - pattern: $FUNC.__globals__[...]
  - pattern-not: globals().get("...")
  - pattern-not: locals().get("...")
  - pattern-not: globals()["..."]
  - pattern-not: locals()["..."]
  - pattern-not: $G.get("...")
  - pattern-not: $G.get["..."]
  - pattern-not: $G["..."]
  - pattern-not: $FUNC.__globals__["..."]
  - pattern-not-inside: globals()[...] = ...
  - pattern-not-inside: locals()[...] = ...
  - pattern-not-inside: $G[...] = ...
  - pattern-not-inside: $FUNC.__globals__[...] = ...
  message: Found non static data as an index to 'globals()'. This is extremely dangerous
    because it allows an attacker to execute arbitrary code on the system. Refactor
    your code not to use 'globals()'.
  metadata:
    cwe:
    - 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://github.com/mpirnat/lets-be-bad-guys/blob/d92768fb3ade32956abd53bd6bb06e19d634a084/badguys/vulnerable/views.py#L181-L186
    category: security
    technology:
    - python
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.dangerous-globals-use.dangerous-globals-use
    shortlink: https://sg.run/jNzn
    semgrep.dev:
      rule:
        rule_id: 9AUOZP
        version_id: X0TJBg
        url: https://semgrep.dev/playground/r/X0TJBg/python.lang.security.dangerous-globals-use.dangerous-globals-use
        origin: community
  severity: WARNING
  languages:
  - python
- id: yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster
  pattern: |
    cluster:
      ...
      insecure-skip-tls-verify: true
  message: 'Cluster is disabling TLS certificate verification when communicating with
    the server. This makes your HTTPS connections insecure. Remove the ''insecure-skip-tls-verify:
    true'' key to secure communication.'
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://kubernetes.io/docs/reference/config-api/client-authentication.v1beta1/#client-authentication-k8s-io-v1beta1-Cluster
    category: security
    technology:
    - kubernetes
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster
    shortlink: https://sg.run/okyn
    semgrep.dev:
      rule:
        rule_id: zdUyWx
        version_id: K3TPZk
        url: https://semgrep.dev/playground/r/K3TPZk/yaml.kubernetes.security.skip-tls-verify-cluster.skip-tls-verify-cluster
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service
  pattern: |
    spec:
      ...
      insecureSkipTLSVerify: true
  message: 'Service is disabling TLS certificate verification when communicating with
    the server. This makes your HTTPS connections insecure. Remove the ''insecureSkipTLSVerify:
    true'' key to secure communication.'
  metadata:
    cwe:
    - 'CWE-319: Cleartext Transmission of Sensitive Information'
    references:
    - https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#apiservice-v1-apiregistration-k8s-io
    category: security
    technology:
    - kubernetes
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service
    shortlink: https://sg.run/zk10
    semgrep.dev:
      rule:
        rule_id: pKUGXr
        version_id: qkT9Ey
        url: https://semgrep.dev/playground/r/qkT9Ey/yaml.kubernetes.security.skip-tls-verify-service.skip-tls-verify-service
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: go.lang.security.audit.dangerous-command-write.dangerous-command-write
  patterns:
  - pattern: |
      $CW.Write($BYTE)
  - pattern-inside: |
      $CW,$ERR := $CMD.StdinPipe()
      ...
  - pattern-not: |
      $CW.Write("...")
  - pattern-not: |
      $CW.Write([]byte("..."))
  - pattern-not: |
      $CW.Write([]byte("..."+"..."))
  - pattern-not-inside: |
      $BYTE = []byte("...");
      ...
  - pattern-not-inside: |
      $BYTE = []byte("..."+"...");
      ...
  - pattern-inside: |
      import "os/exec"
      ...
  message: Detected non-static command inside Write. Audit the input to '$CW.Write'.
    If unverified user data can reach this call site, this is a code injection vulnerability.
    A malicious actor can inject a malicious script to execute arbitrary code.
  severity: ERROR
  languages:
  - go
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    category: security
    technology:
    - go
    confidence: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.dangerous-command-write.dangerous-command-write
    shortlink: https://sg.run/Bko5
    semgrep.dev:
      rule:
        rule_id: pKUOZ9
        version_id: RGTBj1
        url: https://semgrep.dev/playground/r/RGTBj1/go.lang.security.audit.dangerous-command-write.dangerous-command-write
        origin: community
- id: go.lang.security.audit.crypto.bad_imports.insecure-module-used
  message: The package `net/http/cgi` is on the import blocklist.  The package is
    vulnerable to httpoxy attacks (CVE-2015-5386). It is recommended to use `net/http`
    or a web framework to build a web application instead.
  metadata:
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    source-rule-url: https://github.com/securego/gosec
    references:
    - https://godoc.org/golang.org/x/crypto/sha3
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.bad_imports.insecure-module-used
    shortlink: https://sg.run/l2gj
    semgrep.dev:
      rule:
        rule_id: yyUnov
        version_id: 0bTzED
        url: https://semgrep.dev/playground/r/0bTzED/go.lang.security.audit.crypto.bad_imports.insecure-module-used
        origin: community
  languages:
  - go
  severity: WARNING
  pattern-either:
  - patterns:
    - pattern-inside: |
        import "net/http/cgi"
        ...
    - pattern: |
        cgi.$FUNC(...)
- id: go.lang.security.audit.crypto.math_random.math-random-used
  metadata:
    cwe:
    - 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)'
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#secure-random-number-generation
    category: security
    technology:
    - go
    confidence: MEDIUM
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.math_random.math-random-used
    shortlink: https://sg.run/6nK6
    semgrep.dev:
      rule:
        rule_id: bwUwy8
        version_id: K3Tk4e
        url: https://semgrep.dev/playground/r/K3Tk4e/go.lang.security.audit.crypto.math_random.math-random-used
        origin: community
  message: Do not use `math/rand`. Use `crypto/rand` instead.
  languages:
  - go
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: |
        import $RAND "$MATH"
    - pattern: |
        import "$MATH"
  - metavariable-regex:
      metavariable: $MATH
      regex: ^(math/rand)$
  - pattern-either:
    - pattern-inside: |
        ...
        rand.$FUNC(...)
    - pattern-inside: |
        ...
        $RAND.$FUNC(...)
  - focus-metavariable:
    - $MATH
  fix: |
    crypto/rand
- id: go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces
  message: Detected a network listener listening on 0.0.0.0 or an empty string. This
    could unexpectedly expose the server publicly as it binds to all available interfaces.
    Instead, specify another IP address that is not 0.0.0.0 nor the empty string.
  languages:
  - go
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp:
    - A01:2021 - Broken Access Control
    source-rule-url: https://github.com/securego/gosec
    category: security
    technology:
    - go
    confidence: HIGH
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces
    shortlink: https://sg.run/rdE0
    semgrep.dev:
      rule:
        rule_id: nJUz3J
        version_id: O9Tg6O
        url: https://semgrep.dev/playground/r/O9Tg6O/go.lang.security.audit.net.bind_all.avoid-bind-to-all-interfaces
        origin: community
  pattern-either:
  - pattern: tls.Listen($NETWORK, "=~/^0.0.0.0:.*$/", ...)
  - pattern: net.Listen($NETWORK, "=~/^0.0.0.0:.*$/", ...)
  - pattern: tls.Listen($NETWORK, "=~/^:.*$/", ...)
  - pattern: net.Listen($NETWORK, "=~/^:.*$/", ...)
- id: go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key
  message: RSA keys should be at least 2048 bits
  languages:
  - go
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://github.com/securego/gosec/blob/master/rules/rsa.go
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
    category: security
    technology:
    - go
    confidence: HIGH
    subcategory:
    - audit
    likelihood: HIGH
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key
    shortlink: https://sg.run/9oY4
    semgrep.dev:
      rule:
        rule_id: d8UjY3
        version_id: zyT2y3
        url: https://semgrep.dev/playground/r/zyT2y3/go.lang.security.audit.crypto.use_of_weak_rsa_key.use-of-weak-rsa-key
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        rsa.GenerateKey(..., $BITS)
    - pattern: |
        rsa.GenerateMultiPrimeKey(..., $BITS)
  - metavariable-comparison:
      metavariable: $BITS
      comparison: $BITS < 2048
  - focus-metavariable:
    - $BITS
  fix: |
    2048
- id: go.lang.security.audit.database.string-formatted-query.string-formatted-query
  languages:
  - go
  message: String-formatted SQL query detected. This could lead to SQL injection if
    the string is not sanitized properly. Audit this call to ensure the SQL is not
    manipulable by external data.
  severity: WARNING
  metadata:
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    source-rule-url: https://github.com/securego/gosec
    category: security
    technology:
    - go
    confidence: LOW
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.database.string-formatted-query.string-formatted-query
    shortlink: https://sg.run/ydEr
    semgrep.dev:
      rule:
        rule_id: ZqU5bD
        version_id: zyT256
        url: https://semgrep.dev/playground/r/zyT256/go.lang.security.audit.database.string-formatted-query.string-formatted-query
        origin: community
  patterns:
  - metavariable-regex:
      metavariable: $OBJ
      regex: (?i).*(db|database)
  - pattern-not-inside: |
      $VAR = "..." + "..."
      ...
      $OBJ.$SINK(..., $VAR, ...)
  - pattern-not: $OBJ.Exec("...")
  - pattern-not: $OBJ.ExecContext($CTX, "...")
  - pattern-not: $OBJ.Query("...")
  - pattern-not: $OBJ.QueryContext($CTX, "...")
  - pattern-not: $OBJ.QueryRow("...")
  - pattern-not: $OBJ.QueryRow($CTX, "...")
  - pattern-not: $OBJ.QueryRowContext($CTX, "...")
  - pattern-either:
    - pattern: $OBJ.Exec($X + ...)
    - pattern: $OBJ.ExecContext($CTX, $X + ...)
    - pattern: $OBJ.Query($X + ...)
    - pattern: $OBJ.QueryContext($CTX, $X + ...)
    - pattern: $OBJ.QueryRow($X + ...)
    - pattern: $OBJ.QueryRow($CTX, $X + ...)
    - pattern: $OBJ.QueryRowContext($CTX, $X + ...)
    - pattern: $OBJ.Exec(fmt.$P("...", ...))
    - pattern: $OBJ.ExecContext($CTX, fmt.$P("...", ...))
    - pattern: $OBJ.Query(fmt.$P("...", ...))
    - pattern: $OBJ.QueryContext($CTX, fmt.$P("...", ...))
    - pattern: $OBJ.QueryRow(fmt.$P("...", ...))
    - pattern: $OBJ.QueryRow($CTX, fmt.$P("...", ...))
    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P("...", ...))
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Exec($QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Query($QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.ExecContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($QUERY)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($CTX, $QUERY)
    - pattern: |
        $QUERY = "..."
        ...
        $QUERY = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRowContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Exec($OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.Query($OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.ExecContext($CTX, $OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryContext($CTX, $OTHER, ...)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($OTHER)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRow($CTX, $OTHER)
    - pattern: |
        $QUERY = "..."
        ...
        $OTHER = $FXN(..., $QUERY, ...)
        ...
        $OBJ.QueryRowContext($CTX, $OTHER, ...)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.Exec($QUERY, ...)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.Query($QUERY, ...)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.ExecContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.QueryContext($CTX, $QUERY, ...)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.QueryRow($QUERY)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.QueryRow($CTX, $QUERY)
    - pattern: |
        $QUERY = $X + ...
        ...
        $OBJ.QueryRowContext($CTX, $QUERY, ...)
- id: java.lang.security.audit.script-engine-injection.script-engine-injection
  message: Detected potential code injection using ScriptEngine. Ensure user-controlled
    data cannot enter '.eval()', otherwise, this is a code injection vulnerability.
  metadata:
    cwe:
    - 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    owasp:
    - A03:2021 - Injection
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SCRIPT_ENGINE_INJECTION
    category: security
    technology:
    - java
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.script-engine-injection.script-engine-injection
    shortlink: https://sg.run/gLqn
    semgrep.dev:
      rule:
        rule_id: DbUpAr
        version_id: K3TOWR
        url: https://semgrep.dev/playground/r/K3TOWR/java.lang.security.audit.script-engine-injection.script-engine-injection
        origin: community
  severity: WARNING
  languages:
  - java
  patterns:
  - pattern-either:
    - pattern-inside: |
        class $CLASS {
          ...
          ScriptEngine $SE;
          ...
        }
    - pattern-inside: |
        class $CLASS {
          ...
          ScriptEngine $SE = ...;
          ...
        }
    - pattern-inside: |
        $X $METHOD(...) {
          ...
          ScriptEngine $SE = ...;
          ...
        }
  - pattern: |
      $X $METHOD(...) {
        ...
        $SE.eval(...);
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        $SE.eval("...");
        ...
      }
  - pattern-not: |
      $X $METHOD(...) {
        ...
        String $S = "...";
        ...
        $SE.eval($S);
        ...
      }
- id: java.lang.security.audit.sqli.turbine-sqli.turbine-sqli
  pattern-either:
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $PEER.executeQuery($SQL,...)
      - pattern: |
          $PEER.executeQuery(String.format(...),...)
      - pattern: |
          $PEER.executeQuery($X + $Y,...)
    - pattern-not: |
        $PEER.executeQuery("..." + "...",...)
    - metavariable-regex:
        metavariable: $PEER
        regex: (BasePeer|GroupPeer)
  - patterns:
    - pattern-either:
      - patterns:
        - pattern-either:
          - pattern-inside: |
              String $SQL = $X + $Y;
              ...
          - pattern-inside: |
              String $SQL = String.format(...);
              ...
          - pattern-inside: |
              $VAL $FUNC(...,String $SQL,...) {
                ...
              }
        - pattern-not-inside: |
            String $SQL = "..." + "...";
            ...
        - pattern: $P.executeQuery($SQL,...)
      - pattern: |
          $P.executeQuery(String.format(...),...)
      - pattern: |
          $P.executeQuery($X + $Y,...)
    - pattern-either:
      - pattern-inside: |
          BasePeer $P = ...;
          ...
      - pattern-inside: |
          GroupPeer $P = ...;
          ...
      - pattern-inside: |
          $VAL $FUNC(...,GroupPeer $P,...) {
            ...
          }
      - pattern-inside: |
          $VAL $FUNC(...,BasePeer $P,...) {
            ...
          }
    - pattern-not: |
        $P.executeQuery("..." + "...",...)
  message: Detected a formatted string in a SQL statement. This could lead to SQL
    injection if variables in the SQL statement are not properly sanitized. Use a
    prepared statements (java.sql.PreparedStatement) instead. You can obtain a PreparedStatement
    using 'connection.prepareStatement'.
  languages:
  - java
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    category: security
    technology:
    - turbine
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.sqli.turbine-sqli.turbine-sqli
    shortlink: https://sg.run/W8zL
    semgrep.dev:
      rule:
        rule_id: 2ZUbJ3
        version_id: GxTWd3
        url: https://semgrep.dev/playground/r/GxTWd3/java.lang.security.audit.sqli.turbine-sqli.turbine-sqli
        origin: community
- id: java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
  message: DES is considered deprecated. AES is the recommended cipher. Upgrade to
    use AES. See https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
    for more information.
  metadata:
    cwe:
    - 'CWE-326: Inadequate Encryption Strength'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#DES_USAGE
    asvs:
      section: V6 Stored Cryptography Verification Requirements
      control_id: 6.2.5 Insecure Algorithm
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms
      version: '4'
    references:
    - https://www.nist.gov/news-events/news/2005/06/nist-withdraws-outdated-data-encryption-standard
    - https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html#algorithms
    category: security
    technology:
    - java
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
    shortlink: https://sg.run/5Q73
    semgrep.dev:
      rule:
        rule_id: PeUZNg
        version_id: 0bTNRK
        url: https://semgrep.dev/playground/r/0bTNRK/java.lang.security.audit.crypto.des-is-deprecated.des-is-deprecated
        origin: community
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern-inside: $CIPHER.getInstance("=~/DES/.*/")
    - pattern-inside: $CIPHER.getInstance("DES")
  - pattern-either:
    - pattern: |
        "=~/DES/.*/"
    - pattern: |
        "DES"
  fix: |
    "AES/GCM/NoPadding"
  languages:
  - java
  - kt
- id: javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
  message: 'Default session middleware settings: `expires` not set. Use it to set
    expiration date for persistent cookies.'
  severity: WARNING
  languages:
  - javascript
  - typescript
  metadata:
    cwe:
    - 'CWE-522: Insufficiently Protected Credentials'
    owasp:
    - A02:2017 - Broken Authentication
    - A04:2021 - Insecure Design
    source-rule-url: https://expressjs.com/en/advanced/best-practice-security.html
    category: security
    technology:
    - express
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: LOW
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
    shortlink: https://sg.run/N4eG
    semgrep.dev:
      rule:
        rule_id: EwU2DZ
        version_id: vdTbLe
        url: https://semgrep.dev/playground/r/vdTbLe/javascript.express.security.audit.express-cookie-settings.express-cookie-session-no-expires
        origin: community
  patterns:
  - pattern-either:
    - pattern-inside: |
        $SESSION = require('cookie-session');
        ...
    - pattern-inside: |
        $SESSION = require('express-session');
        ...
  - pattern: $SESSION(...)
  - pattern-not-inside: $SESSION(<... {cookie:{expires:...}} ...>,...)
  - pattern-not-inside: |
      $OPTS = <... {cookie:{expires:...}} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE = <... {expires:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $OPTS.cookie = <... {expires:...} ...>;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |
      $OPTS = ...;
      ...
      $COOKIE.expires = ...;
      ...
      $SESSION($OPTS,...);
  - pattern-not-inside: |-
      $OPTS = ...;
      ...
      $OPTS.cookie.expires = ...;
      ...
      $SESSION($OPTS,...);
- id: javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
  message: Detected the decoding of a JWT token without a verify step. JWT tokens
    must be verified before use, otherwise the token's integrity is unknown. This
    means a malicious actor could forge a JWT token with any claims. Call '.verify()'
    before using the token.
  metadata:
    cwe:
    - 'CWE-345: Insufficient Verification of Data Authenticity'
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
    asvs:
      section: 'V3: Session Management Verification Requirements'
      control_id: 3.5.3 Insecue Stateless Session Tokens
      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management
      version: '4'
    category: security
    technology:
    - jwt
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
    shortlink: https://sg.run/J9YP
    semgrep.dev:
      rule:
        rule_id: KxUbL3
        version_id: DkTej6
        url: https://semgrep.dev/playground/r/DkTej6/javascript.jsonwebtoken.security.audit.jwt-decode-without-verify.jwt-decode-without-verify
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $JWT = require('jsonwebtoken');
      ...
  - pattern-not-inside: |
      ...
      $JWT.verify($TOKEN, ...)
      ...
  - pattern-not-inside: |
      ...
      if (<... $JWT.verify($TOKEN, ...) ...>) { ... }
      ...
  - pattern: $JWT.decode($TOKEN, ...)
- id: csharp.jwt-dotnet.jwt-dotnet-hardcoded-secret.jwt-dotnet-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - jwt
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.jwt-dotnet.jwt-dotnet-hardcoded-secret.jwt-dotnet-hardcoded-secret
    shortlink: https://sg.run/E4Ee
    semgrep.dev:
      rule:
        rule_id: 6JU2OP
        version_id: 8KTlLW
        url: https://semgrep.dev/playground/r/8KTlLW/csharp.jwt-dotnet.jwt-dotnet-hardcoded-secret.jwt-dotnet-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: new JwtBuilder()
  pattern-sinks:
  - patterns:
    - pattern: (JwtBuilder $J). ... .WithSecret("...")
- id: csharp.lang.security.system.directoryentry-hardcoded-secret.directoryentry-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - ldap
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.lang.security.system.directoryentry-hardcoded-secret.directoryentry-hardcoded-secret
    shortlink: https://sg.run/7vOW
    semgrep.dev:
      rule:
        rule_id: oqUbjE
        version_id: gETX5p
        url: https://semgrep.dev/playground/r/gETX5p/csharp.lang.security.system.directoryentry-hardcoded-secret.directoryentry-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: new DirectoryEntry(...);
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern: $USER.Invoke("SetPassword", "...");
      - pattern: |
          $USER.Invoke("SetPassword", new object[] { "..." })
    - pattern-not: $USER.Invoke("SetPassword", "");
    - pattern-not: $USER.Invoke("SetPassword", new object[] { "" })
- id: csharp.lang.security.system.sqlconnection-hardcoded-secret.sqlconnection-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - sql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.lang.security.system.sqlconnection-hardcoded-secret.sqlconnection-hardcoded-secret
    shortlink: https://sg.run/QqEQ
    semgrep.dev:
      rule:
        rule_id: X5UzX9
        version_id: PkTGnX
        url: https://semgrep.dev/playground/r/PkTGnX/csharp.lang.security.system.sqlconnection-hardcoded-secret.sqlconnection-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  options:
    taint_assume_safe_functions: true
    taint_assume_safe_indexes: true
  pattern-sources:
  - patterns:
    - pattern: |
        "$PASSWORD"
    - metavariable-regex:
        metavariable: $PASSWORD
        regex: (.*;(Password|pwd|password)=(?!<.*>)(?!")(?!;))
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        new SqlConnection($PASSWORD)
    - focus-metavariable: $PASSWORD
- id: csharp.lang.security.system.oracleconnectionstringbuilder-hardcoded-secret.oracleconnectionstringbuilder-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - oracle
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.lang.security.system.oracleconnectionstringbuilder-hardcoded-secret.oracleconnectionstringbuilder-hardcoded-secret
    shortlink: https://sg.run/8LZE
    semgrep.dev:
      rule:
        rule_id: pKU0v3
        version_id: RGTx7z
        url: https://semgrep.dev/playground/r/RGTx7z/csharp.lang.security.system.oracleconnectionstringbuilder-hardcoded-secret.oracleconnectionstringbuilder-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  pattern-either:
  - pattern: (OracleConnectionStringBuilder $B).Password = "..."
  - pattern: (OracleConnectionStringBuilder $B)["Password"] = "..."
- id: csharp.lang.security.system.sqlconnectionstringbuilder-hardcoded-secret.sqlconnectionstringbuilder-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - sql
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.lang.security.system.sqlconnectionstringbuilder-hardcoded-secret.sqlconnectionstringbuilder-hardcoded-secret
    shortlink: https://sg.run/30Op
    semgrep.dev:
      rule:
        rule_id: j2UnAb
        version_id: A8Tl8A
        url: https://semgrep.dev/playground/r/A8Tl8A/csharp.lang.security.system.sqlconnectionstringbuilder-hardcoded-secret.sqlconnectionstringbuilder-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  pattern-either:
  - pattern: (SqlConnectionStringBuilder $CON).Password = "..."
  - pattern: (SqlConnectionStringBuilder $CON)["Password"] = "..."
- id: csharp.postgres.npgsqlconnectionstringbuilder-hardcoded-secret.npgsqlconnectionstringbuilder-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    - postgres
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.postgres.npgsqlconnectionstringbuilder-hardcoded-secret.npgsqlconnectionstringbuilder-hardcoded-secret
    shortlink: https://sg.run/PKEW
    semgrep.dev:
      rule:
        rule_id: 9AU4Yz
        version_id: BjTL59
        url: https://semgrep.dev/playground/r/BjTL59/csharp.postgres.npgsqlconnectionstringbuilder-hardcoded-secret.npgsqlconnectionstringbuilder-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  pattern-either:
  - pattern: (NpgsqlConnectionStringBuilder $CON).Password = "..."
  - pattern: (NpgsqlConnectionStringBuilder $CON)["Password"] = "..."
- id: csharp.lang.security.system.networkcredential-hardcoded-secret.networkcredential-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.lang.security.system.networkcredential-hardcoded-secret.networkcredential-hardcoded-secret
    shortlink: https://sg.run/LBEo
    semgrep.dev:
      rule:
        rule_id: zdUbv3
        version_id: RGTxbp
        url: https://semgrep.dev/playground/r/RGTxbp/csharp.lang.security.system.networkcredential-hardcoded-secret.networkcredential-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  pattern-either:
  - pattern: |
      new NetworkCredential($DOMAIN, "$PASSWORD",...)
  - pattern: |
      (NetworkCredential $VALUE).Password = "$PASSWORD"
  - pattern: |
      (NetworkCredential $VALUE)["Password"] = "$PASSWORD"
- id: csharp.lang.security.system.passwordauthenticationmethod-hardcoded-secret.passwordauthenticationmethod-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.lang.security.system.passwordauthenticationmethod-hardcoded-secret.passwordauthenticationmethod-hardcoded-secret
    shortlink: https://sg.run/gA0Z
    semgrep.dev:
      rule:
        rule_id: 2ZUvBj
        version_id: A8TlRE
        url: https://semgrep.dev/playground/r/A8TlRE/csharp.lang.security.system.passwordauthenticationmethod-hardcoded-secret.passwordauthenticationmethod-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: (PasswordAuthenticationMethod $X)
  pattern-sinks:
  - patterns:
    - pattern: new PasswordAuthenticationMethod($USERNAME, $PASS)
    - focus-metavariable: $PASS
    - pattern: |
        "..."
    - pattern-not: |
        ""
- id: csharp.mongo.csharp-mongo-hardcoded-secret.csharp-mongo-hardcoded-secret
  message: A secret is hard-coded in the application. Secrets stored in source code,
    such as credentials, identifiers, and other types of sensitive data, can be leaked
    and used by internal or external malicious actors. Use environment variables to
    securely provide credentials and other secrets or retrieve them from a secure
    vault or Hardware Security Module (HSM).
  severity: WARNING
  metadata:
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    category: security
    subcategory:
    - vuln
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    cwe2021-top25: true
    cwe2022-top25: true
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html
    technology:
    - mongodb
    - Secrets
    license: "proprietary license - copyright \xA9 r2c"
    source: https://semgrep.dev/r/csharp.mongo.csharp-mongo-hardcoded-secret.csharp-mongo-hardcoded-secret
    shortlink: https://sg.run/4KOz
    semgrep.dev:
      rule:
        rule_id: 10UyAD
        version_id: BjTLEJ
        url: https://semgrep.dev/playground/r/BjTLEJ/csharp.mongo.csharp-mongo-hardcoded-secret.csharp-mongo-hardcoded-secret
        origin: pro_rules
  languages:
  - csharp
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        "$URL"
    - metavariable-regex:
        metavariable: $URL
        regex: (.*mongodb.*)://(?!<.*>)([A-Za-z])([A-Za-z0-9_-]){1,31}:(?!<.*>).*@.*
  pattern-sinks:
  - patterns:
    - pattern-inside: |
        new MongoClient(...)
- id: javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
  message: If unverified user data can reach the `wkhtmltoimage` it can result in
    Server-Side Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - wkhtmltoimage
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
    shortlink: https://sg.run/KlDn
    semgrep.dev:
      rule:
        rule_id: X5U8yj
        version_id: pZTQWg
        url: https://semgrep.dev/playground/r/pZTQWg/javascript.wkhtmltoimage.security.audit.wkhtmltoimage-injection.wkhtmltoimage-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $WK = require('wkhtmltoimage');
      ...
  - pattern-not-inside: |
      var $INPUT = "...";
      ...
  - pattern: $WK.generate($INPUT,...)
  - pattern-not: $WK.generate("...",...)
- id: javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
  message: If unverified user data can reach the `wkhtmltopdf` it can result in Server-Side
    Request Forgery vulnerabilities
  metadata:
    owasp:
    - A10:2021 - Server-Side Request Forgery (SSRF)
    cwe:
    - 'CWE-918: Server-Side Request Forgery (SSRF)'
    category: security
    technology:
    - wkhtmltopdf
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    references:
    - https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
    shortlink: https://sg.run/qx8O
    semgrep.dev:
      rule:
        rule_id: j2Uv58
        version_id: 2KT6qB
        url: https://semgrep.dev/playground/r/2KT6qB/javascript.wkhtmltopdf.security.audit.wkhtmltopdf-injection.wkhtmltopdf-injection
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  patterns:
  - pattern-inside: |
      $WK = require('wkhtmltopdf');
      ...
  - pattern-not-inside: |
      var $INPUT = "...";
      ...
  - pattern: $WK($INPUT,...)
  - pattern-not: $WK("...",...)
- id: problem-based-packs.insecure-transport.go-stdlib.http-request.http-request
  message: Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous
    because the server is attempting to connect to a website that does not encrypt
    traffic with TLS. Instead, send requests only to https:// URLS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://golang.org/pkg/net/http/#Get
    subcategory:
    - vuln
    technology:
    - go
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.go-stdlib.http-request.http-request
    shortlink: https://sg.run/Avd2
    semgrep.dev:
      rule:
        rule_id: YGUR70
        version_id: 7ZTjXE
        url: https://semgrep.dev/playground/r/7ZTjXE/problem-based-packs.insecure-transport.go-stdlib.http-request.http-request
        origin: community
  languages:
  - go
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  patterns:
  - pattern-either:
    - pattern: |
        http.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...)
    - patterns:
      - pattern-inside: |
          $CLIENT := &http.Client{...}
          ...
      - pattern: |
          client.$FUNC("=~/[hH][tT][tT][pP]://.*/", ...)
  - pattern-not: http.$FUNC("=~/[hH][tT][tT][pP]://127.0.0.1.*/", ...)
  - pattern-not: client.$FUNC("=~/[hH][tT][tT][pP]://127.0.0.1.*/", ...)
  - pattern-not: http.$FUNC("=~/[hH][tT][tT][pP]://localhost.*/", ...)
  - pattern-not: client.$FUNC("=~/[hH][tT][tT][pP]://localhost.*/", ...)
  - metavariable-regex:
      metavariable: $FUNC
      regex: (Get|Post|Head|PostForm)
- id: problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
  message: Checks for outgoing connections to ftp servers. FTP does not encrypt traffic,
    possibly leading to PII being sent plaintext over the network.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://www.codejava.net/java-se/ftp/connect-and-login-to-a-ftp-server
    - https://commons.apache.org/proper/commons-net/apidocs/org/apache/commons/net/ftp/FTPClient.html
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
    shortlink: https://sg.run/6n91
    semgrep.dev:
      rule:
        rule_id: 9AU1wD
        version_id: 5PT23K
        url: https://semgrep.dev/playground/r/5PT23K/problem-based-packs.insecure-transport.java-stdlib.ftp-request.ftp-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[fF][tT][pP]://'
    replacement: sftp://
    count: 1
  pattern-either:
  - pattern: |
      FTPClient $FTPCLIENT = new FTPClient();
      ...
      $FTPCLIENT.connect(...);
  - pattern: |
      URL $URL = new URL("=~/^[fF][tT][pP]://.*/");
      ...
      URLConnection $CONN = $URL.openConnection(...);
- id: problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
  message: Checks for requests sent via Apache HTTP Components to http:// URLS. This
    is dangerous because the server is attempting to connect to a website that does
    not encrypt traffic with TLS. Instead, send requests only to https:// URLS.
  severity: WARNING
  metadata:
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    category: security
    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'
    owasp: A03:2017 - Sensitive Data Exposure
    references:
    - https://hc.apache.org/httpcomponents-client-ga/quickstart.html
    subcategory:
    - vuln
    technology:
    - java
    vulnerability: Insecure Transport
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
    shortlink: https://sg.run/oxD0
    semgrep.dev:
      rule:
        rule_id: yyUnjk
        version_id: GxTKJO
        url: https://semgrep.dev/playground/r/GxTKJO/problem-based-packs.insecure-transport.java-stdlib.http-components-request.http-components-request
        origin: community
  languages:
  - java
  fix-regex:
    regex: '[Hh][Tt][Tt][Pp]://'
    replacement: https://
    count: 1
  pattern-either:
  - pattern: |
      $HTTPCLIENT = HttpClients.$CREATE(...);
      ...
      $HTTPREQ = new $HTTPFUNC("=~/[hH][tT][tT][pP]://.*/");
      ...
      $RESPONSE = $HTTPCLIENT.execute($HTTPREQ);
  - pattern: |
      $HTTPCLIENT = HttpClients.$CREATE(...);
      ...
      $RESPONSE = $HTTPCLIENT.execute(new $HTTPFUNC("=~/[hH][tT][tT][pP]://.*/"));
- id: python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea
  pattern: cryptography.hazmat.primitives.ciphers.algorithms.IDEA(...)
  message: Detected IDEA cipher algorithm which is considered insecure. The algorithm
    is considered weak and has been deprecated. Use AES instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L98
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B304
    references:
    - https://tools.ietf.org/html/rfc5469
    category: security
    technology:
    - cryptography
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea
    shortlink: https://sg.run/3xyK
    semgrep.dev:
      rule:
        rule_id: BYUNPg
        version_id: QkTQbz
        url: https://semgrep.dev/playground/r/QkTQbz/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb
  pattern: cryptography.hazmat.primitives.ciphers.modes.ECB(...)
  message: Detected ECB cipher mode which is considered insecure. The algorithm can
    potentially leak information about the plaintext. Use CBC mode instead.
  metadata:
    source-rule-url: https://github.com/PyCQA/bandit/blob/d5f8fa0d89d7b11442fc6ec80ca42953974354c8/bandit/blacklists/calls.py#L101
    cwe:
    - 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    owasp:
    - A03:2017 - Sensitive Data Exposure
    - A02:2021 - Cryptographic Failures
    bandit-code: B305
    references:
    - https://crypto.stackexchange.com/questions/20941/why-shouldnt-i-use-ecb-encryption
    category: security
    technology:
    - cryptography
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb
    shortlink: https://sg.run/4xr5
    semgrep.dev:
      rule:
        rule_id: DbUp5g
        version_id: 3ZTxvB
        url: https://semgrep.dev/playground/r/3ZTxvB/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.django.security.audit.csrf-exempt.no-csrf-exempt
  pattern: |
    @django.views.decorators.csrf.csrf_exempt
    def $R(...):
      ...
  message: Detected usage of @csrf_exempt, which indicates that there is no CSRF token
    set for this route. This could lead to an attacker manipulating the user's account
    and exfiltration of private data. Instead, create a function without this decorator.
  metadata:
    cwe:
    - 'CWE-352: Cross-Site Request Forgery (CSRF)'
    owasp:
    - A01:2021 - Broken Access Control
    category: security
    technology:
    - django
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt
    shortlink: https://sg.run/rd5e
    semgrep.dev:
      rule:
        rule_id: v8UnqO
        version_id: WrT6v8
        url: https://semgrep.dev/playground/r/WrT6v8/python.django.security.audit.csrf-exempt.no-csrf-exempt
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql
  languages:
  - python
  message: Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' This
    could lead to SQL injection, which can result in attackers exfiltrating sensitive
    data. Instead, ensure no user input enters this function or that user input is
    properly sanitized.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql
    - https://blog.r2c.dev/2020/preventing-sql-injection-a-django-authors-perspective/
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql
    shortlink: https://sg.run/b7bW
    semgrep.dev:
      rule:
        rule_id: d8Ujk6
        version_id: 0bT6AG
        url: https://semgrep.dev/playground/r/0bT6AG/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql
        origin: community
  pattern: $EXPRESSION.as_sql(...)
  severity: WARNING
- id: python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape
  languages:
  - generic
  severity: INFO
  message: Translated strings will not be escaped when rendered in a template. This
    leads to a vulnerability where translators could include malicious script tags
    in their translations. Consider using `force_escape` to explicitly escape a translated
    text.
  patterns:
  - pattern-either:
    - pattern: |
        {% translate ... as $TRANS ... %}
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        {{ ... $TRANS ... }}
    - pattern: |
        {% trans ... as $TRANS ... %}
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        ...
        {{ ... $TRANS ... }}
  - pattern-not: |
      {% translate ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... | ... force_escape ... }}
  - pattern-not: |
      {% trans ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... | ... force_escape ... }}
  - pattern-not: |
      {% translate ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {% filter force_escape %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... }}
  - pattern-not: |
      {% trans ... as $TRANS ... %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {% filter force_escape %}
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      ...
      {{ ... $TRANS ... }}
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://edx.readthedocs.io/projects/edx-developer-guide/en/latest/preventing_xss/preventing_xss_in_django_templates.html#html-escaping-translations-in-django-templates
    - https://docs.djangoproject.com/en/3.1/topics/i18n/translation/#internationalization-in-template-code
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape
    shortlink: https://sg.run/PJDz
    semgrep.dev:
      rule:
        rule_id: WAUov9
        version_id: xyT3Xz
        url: https://semgrep.dev/playground/r/xyT3Xz/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape
        origin: community
- id: python.django.security.audit.xss.var-in-script-tag.var-in-script-tag
  languages:
  - generic
  severity: ERROR
  message: Detected a template variable used in a script tag. Although template variables
    are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS)
    attacks when used directly in JavaScript. If you need this data on the rendered
    page, consider placing it in the HTML portion (outside of a script tag). Alternatively,
    use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For
    Django, you may also consider using the 'json_script' template tag and retrieving
    the data in your script by using the element ID (e.g., `document.getElementById`).
  patterns:
  - pattern-inside: <script ...> ... </script>
  - pattern: '{{ ... }}'
  - pattern-not-inside: nonce = '...'
  - pattern-not-inside: nonce = "..."
  paths:
    include:
    - '*.html'
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    references:
    - https://adamj.eu/tech/2020/02/18/safely-including-data-for-javascript-in-a-django-template/?utm_campaign=Django%2BNewsletter&utm_medium=rss&utm_source=Django_Newsletter_12A
    - https://www.veracode.com/blog/secure-development/nodejs-template-engines-why-default-encoders-are-not-enough
    - https://github.com/ESAPI/owasp-esapi-js
    category: security
    technology:
    - django
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag
    shortlink: https://sg.run/Ge7q
    semgrep.dev:
      rule:
        rule_id: qNUjk3
        version_id: YDTgD8
        url: https://semgrep.dev/playground/r/YDTgD8/python.django.security.audit.xss.var-in-script-tag.var-in-script-tag
        origin: community
- id: python.django.security.injection.code.user-eval.user-eval
  message: Found user data in a call to 'eval'. This is extremely dangerous because
    it can enable an attacker to execute arbitrary remote code on the system. Instead,
    refactor your code to not use 'eval' and instead use a safe library for the specific
    functionality you need.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
    - https://owasp.org/www-community/attacks/Code_Injection
    category: security
    technology:
    - django
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval
    shortlink: https://sg.run/PJDW
    semgrep.dev:
      rule:
        rule_id: DbUpDQ
        version_id: ExTYJB
        url: https://semgrep.dev/playground/r/ExTYJB/python.django.security.injection.code.user-eval.user-eval
        origin: community
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: eval(..., request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        eval(..., $V, ...)
    - pattern: eval(..., request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        eval(..., $V, ...)
    - pattern: eval(..., request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        eval(..., $V, ...)
  languages:
  - python
  severity: WARNING
- id: python.django.security.injection.code.user-exec-format-string.user-exec-format-string
  message: Found user data in a call to 'exec'. This is extremely dangerous because
    it can enable an attacker to execute arbitrary remote code on the system. Instead,
    refactor your code to not use 'eval' and instead use a safe library for the specific
    functionality you need.
  metadata:
    cwe:
    - 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    category: security
    technology:
    - django
    references:
    - https://owasp.org/www-community/attacks/Code_Injection
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.injection.code.user-exec-format-string.user-exec-format-string
    shortlink: https://sg.run/J9JW
    semgrep.dev:
      rule:
        rule_id: WAUovx
        version_id: 7ZTYLz
        url: https://semgrep.dev/playground/r/7ZTYLz/python.django.security.injection.code.user-exec-format-string.user-exec-format-string
        origin: community
  patterns:
  - pattern-inside: |
      def $F(...):
        ...
  - pattern-either:
    - pattern: exec(..., $STR % request.$W.get(...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR % $V
        ...
        exec(..., $S, ...)
    - pattern: exec(..., "..." % request.$W(...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR % $V
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR % request.$W[...], ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., $STR % $V, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR % $V
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR.format(..., request.$W.get(...), ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR.format(..., request.$W(...), ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = $STR.format(..., $V, ...)
        ...
        exec(..., $S, ...)
    - pattern: exec(..., $STR.format(..., request.$W[...], ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., $STR.format(..., $V, ...), ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = $STR.format(..., $V, ...)
        ...
        exec(..., $S, ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        exec(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W.get(...)
        ...
        $S = f"...{$V}..."
        ...
        exec(..., $S, ...)
    - pattern: |
        $V = request.$W(...)
        ...
        exec(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W(...)
        ...
        $S = f"...{$V}..."
        ...
        exec(..., $S, ...)
    - pattern: |
        $V = request.$W[...]
        ...
        exec(..., f"...{$V}...", ...)
    - pattern: |
        $V = request.$W[...]
        ...
        $S = f"...{$V}..."
        ...
        exec(..., $S, ...)
    - pattern: exec(..., base64.decodestring($S.format(..., request.$W.get(...), ...),
        ...), ...)
    - pattern: exec(..., base64.decodestring($S % request.$W.get(...), ...), ...)
    - pattern: exec(..., base64.decodestring(f"...{request.$W.get(...)}...", ...),
        ...)
    - pattern: exec(..., base64.decodestring(request.$W.get(...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes($S.format(..., request.$W.get(...),
        ...), ...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes($S % request.$W.get(...), ...),
        ...), ...)
    - pattern: exec(..., base64.decodestring(bytes(f"...{request.$W.get(...)}...",
        ...), ...), ...)
    - pattern: exec(..., base64.decodestring(bytes(request.$W.get(...), ...), ...),
        ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W.get(...)
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W(...)
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W[...]
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        exec(..., base64.decodestring($DATA, ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = base64.decodestring($DATA, ...)
        ...
        exec(..., $INTERM, ...)
    - pattern: |
        $DATA = request.$W
        ...
        exec(..., base64.decodestring(bytes($DATA, ...), ...), ...)
    - pattern: |
        $DATA = request.$W
        ...
        $INTERM = base64.decodestring(bytes($DATA, ...), ...)
        ...
        exec(..., $INTERM, ...)
  languages:
  - python
  severity: WARNING
- id: python.flask.caching.query-string.flask-cache-query-string
  patterns:
  - pattern-either:
    - pattern: |
        @app.route("...")
        @cache.cached(...)
        def $HANDLER(...):
          ...
          request.args.get(...)
    - pattern: |
        @app.route("...", methods=[..., "POST", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "PUT", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "DELETE", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
    - pattern: |
        @app.route("...", methods=[..., "PATCH", ...])
        @cache.cached(...)
        def $HANDLER(...):
          ...
  - pattern-not: |
      @app.route("...")
      @cache.cached(..., query_string=True)
      def $HANDLER(...):
        ...
        request.args.get(...)
  message: Flask-caching doesn't cache query strings by default. You have to use `query_string=True`.
    Also you shouldn't cache verbs that can mutate state.
  severity: WARNING
  languages:
  - python
  metadata:
    category: caching
    technology:
    - flask
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.caching.query-string.flask-cache-query-string
    shortlink: https://sg.run/jROJ
    semgrep.dev:
      rule:
        rule_id: kxUko3
        version_id: 44TePj
        url: https://semgrep.dev/playground/r/44TePj/python.flask.caching.query-string.flask-cache-query-string
        origin: community
- id: python.flask.security.audit.debug-enabled.debug-enabled
  patterns:
  - pattern-inside: |
      import flask
      ...
  - pattern: $APP.run(..., debug=True, ...)
  message: Detected Flask app with debug=True. Do not deploy to production with this
    flag enabled as it will leak sensitive information. Instead, consider using Flask
    configuration variables or setting 'debug' using system environment variables.
  metadata:
    cwe:
    - 'CWE-489: Active Debug Code'
    owasp: A06:2017 - Security Misconfiguration
    references:
    - https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/
    category: security
    technology:
    - flask
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled
    shortlink: https://sg.run/dKrd
    semgrep.dev:
      rule:
        rule_id: gxU1bd
        version_id: qkTPK2
        url: https://semgrep.dev/playground/r/qkTPK2/python.flask.security.audit.debug-enabled.debug-enabled
        origin: community
  severity: WARNING
  languages:
  - python
- id: python.flask.security.audit.directly-returned-format-string.directly-returned-format-string
  message: Detected Flask route directly returning a formatted string. This is subject
    to cross-site scripting if user input can reach the string. Consider using the
    template engine instead and rendering pages with 'render_template()'.
  metadata:
    cwe:
    - 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site
      Scripting'')'
    owasp:
    - A07:2017 - Cross-Site Scripting (XSS)
    - A03:2021 - Injection
    category: security
    technology:
    - flask
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string
    shortlink: https://sg.run/Zv6o
    semgrep.dev:
      rule:
        rule_id: QrUz49
        version_id: YDT839
        url: https://semgrep.dev/playground/r/YDT839/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string
        origin: community
  languages:
  - python
  severity: WARNING
  mode: taint
  pattern-sources:
  - pattern-either:
    - patterns:
      - pattern-inside: |
          @$APP.route(...)
          def $FUNC(..., $PARAM, ...):
            ...
      - pattern: $PARAM
    - pattern: |
        request.$FUNC.get(...)
    - pattern: |
        request.$FUNC(...)
    - pattern: request.$FUNC[...]
  pattern-sinks:
  - patterns:
    - pattern-not-inside: return "..."
    - pattern-either:
      - pattern: return "...".format(...)
      - pattern: return "..." % ...
      - pattern: return "..." + ...
      - pattern: return ... + "..."
      - pattern: return f"...{...}..."
      - patterns:
        - pattern: return $X
        - pattern-either:
          - pattern-inside: |
              $X = "...".format(...)
              ...
          - pattern-inside: |
              $X = "..." % ...
              ...
          - pattern-inside: |
              $X = "..." + ...
              ...
          - pattern-inside: |
              $X = ... + "..."
              ...
          - pattern-inside: |
              $X = f"...{...}..."
              ...
        - pattern-not-inside: |
            $X = "..."
            ...
- id: python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli
  languages:
  - python
  message: 'Detected string concatenation with a non-literal variable in a asyncpg
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can create parameterized queries like
    so: ''conn.fetch("SELECT $1 FROM table", value)''. You can also create prepared
    statements with ''Connection.prepare'': ''stmt = conn.prepare("SELECT $1 FROM
    table"); await stmt.fetch(user_value)'''
  metadata:
    references:
    - https://github.com/MagicStack/asyncpg
    - https://magicstack.github.io/asyncpg/current/
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - asyncpg
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli
    shortlink: https://sg.run/0nBB
    semgrep.dev:
      rule:
        rule_id: WAUZqq
        version_id: K3T1zD
        url: https://semgrep.dev/playground/r/K3T1zD/python.lang.security.audit.sqli.asyncpg-sqli.asyncpg-sqli
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CONN.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CONN.$METHOD(..., $X + $Y, ...)
    - pattern: $CONN.$METHOD(..., '...'.format(...), ...)
    - pattern: $CONN.$METHOD(..., '...' % (...), ...)
    - pattern: $CONN.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = await asyncpg.connect(...)
        ...
    - pattern-inside: |
        async with asyncpg.create_pool(...) as $CONN:
            ...
    - pattern-inside: |
        async with $POOL.acquire(...) as $CONN:
            ...
    - pattern-inside: |
        $CONN = await $POOL.acquire(...)
        ...
    - pattern-inside: |
        def $FUNCNAME(..., $CONN: Connection, ...):
            ...
  - pattern-not: $CONN.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CONN.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CONN.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(fetch|fetchrow|fetchval|execute|executemany|prepare|cursor|copyfromquery)$
  severity: WARNING
- id: python.lang.security.audit.sqli.aiopg-sqli.aiopg-sqli
  languages:
  - python
  message: 'Detected string concatenation with a non-literal variable in an aiopg
    Python SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries instead. You can create parameterized queries like so: ''cur.execute("SELECT
    %s FROM table", (user_value,))''.'
  metadata:
    references:
    - https://github.com/aio-libs/aiopg
    category: security
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    technology:
    - aiopg
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.sqli.aiopg-sqli.aiopg-sqli
    shortlink: https://sg.run/WgGL
    semgrep.dev:
      rule:
        rule_id: DbUWRY
        version_id: 0bT6OO
        url: https://semgrep.dev/playground/r/0bT6OO/python.lang.security.audit.sqli.aiopg-sqli.aiopg-sqli
        origin: community
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $CUR.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = '...'.format(...)
            ...
        - pattern-inside: |
            $QUERY = '...' % (...)
            ...
        - pattern-inside: |
            $QUERY = f'...{$USERINPUT}...'
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
      - pattern-not-inside: |
          $QUERY = '...'.format()
          ...
      - pattern-not-inside: |
          $QUERY = '...' % ()
          ...
    - pattern: $CUR.$METHOD(..., $X + $Y, ...)
    - pattern: $CUR.$METHOD(..., '...'.format(...), ...)
    - pattern: $CUR.$METHOD(..., '...' % (...), ...)
    - pattern: $CUR.$METHOD(..., f'...{$USERINPUT}...', ...)
  - pattern-either:
    - pattern-inside: |
        $CONN = await aiopg.connect(...)
        ...
        $CUR = await $CONN.cursor(...)
        ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        async with $POOL.acquire(...) as $CONN:
          ...
          async with $CONN.cursor(...) as $CUR:
            ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        with (await $POOL.cursor(...)) as $CUR:
          ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        async with $POOL as $CONN:
          ...
          $CUR = await $CONN.cursor(...)
          ...
    - pattern-inside: |
        $POOL = await aiopg.create_pool(...)
        ...
        async with $POOL.cursor(...) as $CUR:
          ...
  - pattern-not: $CUR.$METHOD(..., "..." + "...", ...)
  - pattern-not: $CUR.$METHOD(..., '...'.format(), ...)
  - pattern-not: $CUR.$METHOD(..., '...'%(), ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(execute)$
  severity: WARNING
- id: ruby.lang.security.model-attributes-attr-accessible.model-attributes-attr-accessible
  patterns:
  - pattern-not: |
      class $CLASS < $TYPE
      ...
      attr_accessible :$XXX
      ...
      end
      ...
      $CLASS.$FUNC(...)
  - pattern: |
      class $CLASS < $TYPE
      ...
      end
      ...
      $CLASS.$FUNC(...)
  - metavariable-pattern:
      metavariable: $TYPE
      patterns:
      - pattern-not-regex: (?i)(Error|Exception)
  - focus-metavariable: $CLASS
  message: Checks for models that do not use attr_accessible. This means there is
    no limiting of which variables can be manipulated through mass assignment. For
    newer Rails applications, parameters should be allowlisted using strong parameters.
    For older Rails versions, they should be allowlisted using strong_attributes.
  metadata:
    references:
    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_model_attributes.rb
    category: security
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    technology:
    - rails
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.lang.security.model-attributes-attr-accessible.model-attributes-attr-accessible
    shortlink: https://sg.run/1nrb
    semgrep.dev:
      rule:
        rule_id: NbUADO
        version_id: 7ZT55r
        url: https://semgrep.dev/playground/r/7ZT55r/ruby.lang.security.model-attributes-attr-accessible.model-attributes-attr-accessible
        origin: community
  languages:
  - ruby
  severity: ERROR
- id: java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
  pattern: management.endpoints.web.exposure.include=*
  message: Spring Boot Actuator is fully enabled. This exposes sensitive endpoints
    such as /actuator/env, /actuator/logfile, /actuator/heapdump and others. Unless
    you have Spring Security enabled or another means to protect these endpoints,
    this functionality is available without authentication, causing a severe security
    risk.
  severity: WARNING
  languages:
  - generic
  paths:
    include:
    - '*properties'
  metadata:
    cwe:
    - 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    owasp:
    - A01:2021 - Broken Access Control
    references:
    - https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints
    - https://medium.com/walmartglobaltech/perils-of-spring-boot-actuators-misconfiguration-185c43a0f785
    - https://blog.maass.xyz/spring-actuator-security-part-1-stealing-secrets-using-spring-actuators
    category: security
    technology:
    - spring
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
    shortlink: https://sg.run/L0vY
    semgrep.dev:
      rule:
        rule_id: EwU4vg
        version_id: 7ZTY9P
        url: https://semgrep.dev/playground/r/7ZTY9P/java.spring.security.audit.spring-actuator-fully-enabled.spring-actuator-fully-enabled
        origin: community
- id: csharp.lang.security.injections.os-command.os-command-injection
  severity: ERROR
  languages:
  - csharp
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/www-community/attacks/Command_Injection
    category: security
    technology:
    - .net
    confidence: LOW
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.injections.os-command.os-command-injection
    shortlink: https://sg.run/Ze6p
    semgrep.dev:
      rule:
        rule_id: 9AUOjg
        version_id: o5TWJ5
        url: https://semgrep.dev/playground/r/o5TWJ5/csharp.lang.security.injections.os-command.os-command-injection
        origin: community
  message: The software constructs all or part of an OS command using externally-influenced
    input from an upstream component, but it does not neutralize or incorrectly neutralizes
    special elements that could modify the intended OS command when it is sent to
    a downstream component.
  patterns:
  - pattern-inside: |
      using System.Diagnostics;
      ...
  - pattern-inside: |
      public $T $F(..., $ARG, ...)
      {
        ...
      }
  - pattern-either:
    - patterns:
      - pattern: |
          Process.Start($ARG, ...);
      - focus-metavariable: $ARG
    - patterns:
      - pattern-inside: |
          Process $PROC = new Process();
          ...
      - pattern-either:
        - pattern-inside: |
            $PROC.StartInfo.FileName = $ARG;
            ...
        - pattern-inside: |
            $PROC.StartInfo.Arguments = <... $ARG ...>;
            ...
      - pattern: |
          $PROC.Start();
    - patterns:
      - patterns:
        - pattern-inside: |
            ProcessStartInfo $PSINFO = new ProcessStartInfo()
            {
              ...
            };
            ...
        - pattern-either:
          - pattern-inside: |
              FileName = $ARG;
              ...
          - pattern-inside: |
              Arguments = <... $ARG ...>;
              ...
      - pattern: |
          Process.Start($PSINFO);
      - focus-metavariable: $PSINFO
- id: generic.secrets.security.detected-github-token.detected-github-token
  patterns:
  - pattern-either:
    - pattern: |
        $VAR = $SECRET
    - pattern: |
        $VAR: $SECRET
    - pattern: |
        $VAR = '$SECRET'
    - pattern: |
        $VAR: '$SECRET'
    - pattern: |
        '$VAR' = '$SECRET'
    - pattern: |
        '$VAR': '$SECRET'
    - pattern: |
        "[hH][tT][tT][pP][sS]?://.*$SECRET.*"
  - metavariable-regex:
      metavariable: $SECRET
      regex: gh[pousr]_[A-Za-z0-9_]{36,251}
  - metavariable-analysis:
      analyzer: entropy
      metavariable: $SECRET
  languages:
  - generic
  message: GitHub Token detected
  severity: ERROR
  metadata:
    cwe:
    - 'CWE-798: Use of Hard-coded Credentials'
    source-rule-url: https://github.blog/changelog/2021-03-04-authentication-token-format-updates/
    category: security
    technology:
    - secrets
    - github
    confidence: LOW
    owasp:
    - A07:2021 - Identification and Authentication Failures
    references:
    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.secrets.security.detected-github-token.detected-github-token
    shortlink: https://sg.run/PpOv
    semgrep.dev:
      rule:
        rule_id: eqUv7b
        version_id: vdTDlw
        url: https://semgrep.dev/playground/r/vdTDlw/generic.secrets.security.detected-github-token.detected-github-token
        origin: community
- id: python.flask.security.flask-api-method-string-format.flask-api-method-string-format
  patterns:
  - pattern-either:
    - pattern: |
        def $METHOD(...,$ARG,...):
          ...
          $STRING = "...".format(...,$ARG,...)
          ...
          ... = requests.$REQMETHOD($STRING,...)
    - pattern: |
        def $METHOD(...,$ARG,...):
          ...
          ... = requests.$REQMETHOD("...".format(...,$ARG,...),...)
  - pattern-inside: |
      class $CLASS(...):
        method_decorators = ...
        ...
  message: Method $METHOD in API controller $CLASS provides user arg $ARG to requests
    method $REQMETHOD
  severity: ERROR
  languages:
  - python
  metadata:
    cwe:
    - 'CWE-134: Use of Externally-Controlled Format String'
    category: security
    technology:
    - flask
    references:
    - https://cwe.mitre.org/data/definitions/134.html
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.flask.security.flask-api-method-string-format.flask-api-method-string-format
    shortlink: https://sg.run/bDWr
    semgrep.dev:
      rule:
        rule_id: NbUAeY
        version_id: jQT9EE
        url: https://semgrep.dev/playground/r/jQT9EE/python.flask.security.flask-api-method-string-format.flask-api-method-string-format
        origin: community
- id: yaml.kubernetes.security.hostipc-pod.hostipc-pod
  patterns:
  - pattern-inside: |
      spec:
        ...
  - pattern: |
      hostIPC: true
  message: Pod is sharing the host IPC namespace. This allows container processes
    to communicate with processes on the host which reduces isolation and bypasses
    container protection models. Remove the 'hostIPC' key to disable this functionality.
  metadata:
    cwe:
    - 'CWE-693: Protection Mechanism Failure'
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
    category: security
    technology:
    - kubernetes
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.hostipc-pod.hostipc-pod
    shortlink: https://sg.run/nqGO
    semgrep.dev:
      rule:
        rule_id: nJUYPE
        version_id: 5PTBQQ
        url: https://semgrep.dev/playground/r/5PTBQQ/yaml.kubernetes.security.hostipc-pod.hostipc-pod
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.hostnetwork-pod.hostnetwork-pod
  patterns:
  - pattern-inside: |
      spec:
        ...
  - pattern: |
      hostNetwork: true
  message: Pod may use the node network namespace. This gives the pod access to the
    loopback device, services listening on localhost, and could be used to snoop on
    network activity of other pods on the same node. Remove the 'hostNetwork' key
    to disable this functionality.
  metadata:
    cwe:
    - 'CWE-406: Insufficient Control of Network Message Volume (Network Amplification)'
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
    category: security
    technology:
    - kubernetes
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.hostnetwork-pod.hostnetwork-pod
    shortlink: https://sg.run/E51A
    semgrep.dev:
      rule:
        rule_id: EwU4NO
        version_id: GxT43y
        url: https://semgrep.dev/playground/r/GxT43y/yaml.kubernetes.security.hostnetwork-pod.hostnetwork-pod
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: yaml.kubernetes.security.hostpid-pod.hostpid-pod
  patterns:
  - pattern-inside: |
      spec:
        ...
  - pattern: |
      hostPID: true
  message: Pod is sharing the host process ID namespace. When paired with ptrace this
    can be used to escalate privileges outside of the container. Remove the 'hostPID'
    key to disable this functionality.
  metadata:
    cwe:
    - 'CWE-269: Improper Privilege Management'
    references:
    - https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
    category: security
    technology:
    - kubernetes
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/yaml.kubernetes.security.hostpid-pod.hostpid-pod
    shortlink: https://sg.run/708R
    semgrep.dev:
      rule:
        rule_id: 7KUeo0
        version_id: RGTB8J
        url: https://semgrep.dev/playground/r/RGTB8J/yaml.kubernetes.security.hostpid-pod.hostpid-pod
        origin: community
  languages:
  - yaml
  severity: WARNING
- id: go.lang.security.audit.sqli.gosql-sqli.gosql-sqli
  patterns:
  - pattern-either:
    - patterns:
      - pattern: $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $DB.$METHOD(..., $X + $Y, ...)
    - pattern: $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
  - pattern-either:
    - pattern-inside: |
        $DB, ... = sql.Open(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *sql.DB, ...) {
          ...
        }
  - pattern-not: $DB.$METHOD(..., "..." + "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|ExecContent|Query|QueryContext|QueryRow|QueryRowContext)$
  languages:
  - go
  message: Detected string concatenation with a non-literal variable in a "database/sql"
    Go SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can use prepared statements with the
    'Prepare' and 'PrepareContext' calls.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://golang.org/pkg/database/sql/
    category: security
    technology:
    - go
    confidence: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.sqli.gosql-sqli.gosql-sqli
    shortlink: https://sg.run/YgOX
    semgrep.dev:
      rule:
        rule_id: YGUrnQ
        version_id: 7ZTk1b
        url: https://semgrep.dev/playground/r/7ZTk1b/go.lang.security.audit.sqli.gosql-sqli.gosql-sqli
        origin: community
  severity: ERROR
- id: go.lang.security.audit.sqli.pg-orm-sqli.pg-orm-sqli
  patterns:
  - pattern-inside: |
      import (
        ...
        "$IMPORT"
      )
      ...
  - metavariable-regex:
      metavariable: $IMPORT
      regex: .*go-pg
  - pattern-either:
    - patterns:
      - pattern: $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: |
        $DB.$INTFUNC1(...).$METHOD(..., $X + $Y, ...).$INTFUNC2(...)
    - pattern: |
        $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
    - pattern-inside: |
        $DB = pg.Connect(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *pg.DB, ...) {
          ...
        }
  - pattern-not-inside: |
      $QUERY = fmt.Sprintf("...", ...,"...", ...)
      ...
  - pattern-not-inside: |
      $QUERY += "..."
      ...
  - pattern-not: $DB.$METHOD(...,"...",...)
  - pattern-not: |
      $DB.$INTFUNC1(...).$METHOD(..., "...", ...).$INTFUNC2(...)
  - pattern-not-inside: |
      $QUERY = "..." + "..."
  - pattern-not: |
      "..."
  - pattern-not: path.Join(...)
  - pattern-not: filepath.Join(...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Where|WhereOr|Join|GroupExpr|OrderExpr|ColumnExpr)$
  languages:
  - go
  message: Detected string concatenation with a non-literal variable in a go-pg ORM
    SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, do not use strings
    concatenated with user-controlled input. Instead, use parameterized statements.
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://pg.uptrace.dev/queries/
    category: security
    technology:
    - go-pg
    confidence: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.sqli.pg-orm-sqli.pg-orm-sqli
    shortlink: https://sg.run/6rA6
    semgrep.dev:
      rule:
        rule_id: 6JUqQ1
        version_id: 44TDPn
        url: https://semgrep.dev/playground/r/44TDPn/go.lang.security.audit.sqli.pg-orm-sqli.pg-orm-sqli
        origin: community
  severity: ERROR
- id: go.lang.security.audit.sqli.pg-sqli.pg-sqli
  languages:
  - go
  message: 'Detected string concatenation with a non-literal variable in a go-pg SQL
    statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries instead of string concatenation. You can use parameterized queries like
    so: ''(SELECT ? FROM table, data1)'''
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    references:
    - https://pg.uptrace.dev/
    - https://pkg.go.dev/github.com/go-pg/pg/v10
    category: security
    technology:
    - go-pg
    confidence: LOW
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: LOW
    impact: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/go.lang.security.audit.sqli.pg-sqli.pg-sqli
    shortlink: https://sg.run/Al94
    semgrep.dev:
      rule:
        rule_id: AbUWXY
        version_id: LjTv2X
        url: https://semgrep.dev/playground/r/LjTv2X/go.lang.security.audit.sqli.pg-sqli.pg-sqli
        origin: community
  severity: ERROR
  patterns:
  - pattern-either:
    - patterns:
      - pattern: |
          $DB.$METHOD(...,$QUERY,...)
      - pattern-either:
        - pattern-inside: |
            $QUERY = $X + $Y
            ...
        - pattern-inside: |
            $QUERY += $X
            ...
        - pattern-inside: |
            $QUERY = fmt.Sprintf("...", $PARAM1, ...)
            ...
      - pattern-not-inside: |
          $QUERY += "..."
          ...
      - pattern-not-inside: |
          $QUERY = "..." + "..."
          ...
    - pattern: $DB.$METHOD(..., $X + $Y, ...)
    - pattern: $DB.$METHOD(..., fmt.Sprintf("...", $PARAM1, ...), ...)
  - pattern-either:
    - pattern-inside: |
        $DB = pg.Connect(...)
        ...
    - pattern-inside: |
        func $FUNCNAME(..., $DB *pg.DB, ...) {
          ...
        }
  - pattern-not: $DB.$METHOD(..., "..." + "...", ...)
  - metavariable-regex:
      metavariable: $METHOD
      regex: ^(Exec|ExecContext|ExecOne|ExecOneContext|Query|QueryOne|QueryContext|QueryOneContext)$
- id: ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli
  mode: taint
  pattern-propagators:
  - pattern: $X << $Y
    from: $Y
    to: $X
  pattern-sources:
  - pattern-either:
    - pattern: |
        params
    - pattern: |
        cookies
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          $CON = PG.connect(...)
          ...
      - pattern-inside: |
          $CON = PG::Connection.open(...)
          ...
      - pattern-inside: |
          $CON = PG::Connection.new(...)
          ...
    - pattern-either:
      - pattern: |
          $CON.$METHOD($X,...)
      - pattern: |
          $CON.$METHOD $X, ...
    - focus-metavariable: $X
    - metavariable-regex:
        metavariable: $METHOD
        regex: ^(exec|exec_params)$
  languages:
  - ruby
  message: 'Detected string concatenation with a non-literal variable in a pg Ruby
    SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can use parameterized queries like
    so: `conn.exec_params(''SELECT $1 AS a, $2 AS b, $3 AS c'', [1, 2, nil])` And
    you can use prepared statements with `exec_prepared`.'
  metadata:
    cwe:
    - 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command
      (''SQL Injection'')'
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://www.rubydoc.info/gems/pg/PG/Connection
    category: security
    technology:
    - rails
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - vuln
    likelihood: HIGH
    impact: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli
    shortlink: https://sg.run/kL0o
    semgrep.dev:
      rule:
        rule_id: NbUAz7
        version_id: A8Twrl
        url: https://semgrep.dev/playground/r/A8Twrl/ruby.rails.security.audit.sqli.ruby-pg-sqli.ruby-pg-sqli
        origin: community
  severity: WARNING
- id: generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
  patterns:
  - pattern-either:
    - pattern: |
        proxy_http_version 1.1 ...;
        ...
        proxy_set_header Upgrade ...;
        ...
        proxy_set_header Connection ...;
    - pattern: |
        proxy_set_header Upgrade ...;
        ...
        proxy_set_header Connection ...;
        ...
        proxy_http_version 1.1 ...;
    - pattern: |
        proxy_set_header Upgrade ...;
        ...
        proxy_http_version 1.1 ...;
        ...
        proxy_set_header Connection ...;
  - pattern-inside: |
      location ... {
        ...
      }
  languages:
  - generic
  severity: WARNING
  message: 'Conditions for Nginx H2C smuggling identified. H2C smuggling allows upgrading
    HTTP/1.1 connections to lesser-known HTTP/2 over cleartext (h2c) connections which
    can allow a bypass of reverse proxy access controls, and lead to long-lived, unrestricted
    HTTP traffic directly to back-end servers. To mitigate: WebSocket support required:
    Allow only the value websocket for HTTP/1.1 upgrade headers (e.g., Upgrade: websocket).
    WebSocket support not required: Do not forward Upgrade headers.'
  paths:
    include:
    - '*.conf'
    - '*.vhost'
    - sites-available/*
    - sites-enabled/*
  metadata:
    cwe:
    - 'CWE-444: Inconsistent Interpretation of HTTP Requests (''HTTP Request/Response
      Smuggling'')'
    references:
    - https://labs.bishopfox.com/tech-blog/h2c-smuggling-request-smuggling-via-http/2-cleartext-h2c
    category: security
    technology:
    - nginx
    confidence: MEDIUM
    owasp:
    - A04:2021 - Insecure Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
    shortlink: https://sg.run/ploZ
    semgrep.dev:
      rule:
        rule_id: 6JUq0Z
        version_id: qkTz55
        url: https://semgrep.dev/playground/r/qkTz55/generic.nginx.security.possible-h2c-smuggling.possible-nginx-h2c-smuggling
        origin: community
- id: javascript.lang.security.audit.sqli.node-postgres-sqli.node-postgres-sqli
  message: 'Detected string concatenation with a non-literal variable in a node-postgres
    JS SQL statement. This could lead to SQL injection if the variable is user-controlled
    and not properly sanitized. In order to prevent SQL injection, use parameterized
    queries or prepared statements instead. You can use parameterized statements like
    so: `client.query(''SELECT $1 from table'', [userinput])`'
  metadata:
    owasp:
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-915: Improperly Controlled Modification of Dynamically-Determined Object
      Attributes'
    references:
    - https://node-postgres.com/features/queries
    category: security
    technology:
    - node-postgres
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.lang.security.audit.sqli.node-postgres-sqli.node-postgres-sqli
    shortlink: https://sg.run/0n3v
    semgrep.dev:
      rule:
        rule_id: ReUPN9
        version_id: 1QTqAk
        url: https://semgrep.dev/playground/r/1QTqAk/javascript.lang.security.audit.sqli.node-postgres-sqli.node-postgres-sqli
        origin: community
  languages:
  - javascript
  - typescript
  severity: WARNING
  mode: taint
  pattern-sources:
  - patterns:
    - pattern-inside: |
        function ... (...,$FUNC,...) {
          ...
        }
    - focus-metavariable: $FUNC
    - pattern-not-inside: |
        $F. ... .$SOURCE(...)
  pattern-sinks:
  - patterns:
    - pattern-either:
      - pattern-inside: |
          const { $CLIENT } = require('pg')
           ...
      - pattern-inside: |
          var { $CLIENT } = require('pg')
           ...
      - pattern-inside: |
          let { $CLIENT } = require('pg')
           ...
    - pattern-either:
      - pattern-inside: |
          $DB = new $CLIENT(...)
          ...
      - pattern-inside: |
          $NEWPOOL = new $CLIENT(...)
          ...
          $NEWPOOL.connect((..., $DB, ...) => {
              ...
          })
    - pattern: $DB.query($QUERY,...)
    - focus-metavariable: $QUERY
- id: trailofbits.go.racy-append-to-slice.racy-append-to-slice
  message: Appending `$SLICE` from multiple goroutines is not concurrency safe
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization
      (''Race Condition'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Concurrent calls to `append` from multiple goroutines
    references:
    - https://go.dev/blog/maps#concurrency
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.racy-append-to-slice.racy-append-to-slice
    shortlink: https://sg.run/jkNY
    semgrep.dev:
      rule:
        rule_id: ReUoP7
        version_id: YDT1Kj
        url: https://semgrep.dev/playground/r/YDT1Kj/trailofbits.go.racy-append-to-slice.racy-append-to-slice
        origin: community
  patterns:
  - pattern: |
      $SLICE = append($SLICE, $ITEM)
  - pattern-either:
    - pattern-inside: |
        var $SLICE []$TYPE
        ...
        for ... {
          ...
          go func(...) {
            ...
            $SLICE = append($SLICE, ...)
            ...
          }(...)
          ...
        }
    - pattern-inside: |
        $SLICE := make([]$TYPE, ...)
        ...
        for ... {
          ...
          go func(...) {
            ...
            $SLICE = append($SLICE, ...)
            ...
          }(...)
          ...
        }
  - pattern-not-inside: |
      $MUTEX.Lock()
      ...
      $MUTEX.Unlock()
- id: java.lang.security.audit.crypto.gcm-detection.gcm-detection
  metadata:
    category: security
    cwe:
    - 'CWE-323: Reusing a Nonce, Key Pair in Encryption'
    references:
    - https://cwe.mitre.org/data/definitions/323.html
    technology:
    - java
    owasp:
    - A02:2021 - Cryptographic Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.gcm-detection.gcm-detection
    shortlink: https://sg.run/BLLb
    semgrep.dev:
      rule:
        rule_id: 5rU88R
        version_id: 2KTBG7
        url: https://semgrep.dev/playground/r/2KTBG7/java.lang.security.audit.crypto.gcm-detection.gcm-detection
        origin: community
  languages:
  - java
  message: GCM detected, please check that IV/nonce is not reused, an Initialization
    Vector (IV) is a nonce used to randomize the encryption, so that even if multiple
    messages with identical plaintext are encrypted, the generated corresponding ciphertexts
    are different. Unlike the Key, the IV usually does not need to be secret, rather
    it is important that it is random and unique. Certain encryption schemes the IV
    is exchanged in public as part of the ciphertext. Reusing same Initialization
    Vector with the same Key to encrypt multiple plaintext blocks allows an attacker
    to compare the ciphertexts and then, with some assumptions on the content of the
    messages, to gain important information about the data being encrypted.
  patterns:
  - pattern-either:
    - pattern: $METHOD.getInstance("AES/GCM/NoPadding",...);
    - pattern: new GCMParameterSpec(...);
  severity: INFO
- id: python.django.security.globals-as-template-context.globals-as-template-context
  languages:
  - python
  message: 'Using ''globals()'' as a context to ''render(...)'' is extremely dangerous.
    This exposes Python functions to the template that were not meant to be exposed.
    An attacker could use these functions to execute code that was not intended to
    run and could compromise the application. (This is server-side template injection
    (SSTI)). Do not use ''globals()''. Instead, specify each variable in a dictionary
    or ''django.template.Context'' object, like ''{"var1": "hello"}'' and use that
    instead.'
  metadata:
    category: security
    cwe:
    - 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.2/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates
    - https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.globals-as-template-context.globals-as-template-context
    shortlink: https://sg.run/7GYv
    semgrep.dev:
      rule:
        rule_id: j2UR3n
        version_id: d6TbkB
        url: https://semgrep.dev/playground/r/d6TbkB/python.django.security.globals-as-template-context.globals-as-template-context
        origin: community
  pattern-either:
  - pattern: django.shortcuts.render(..., globals(...), ...)
  - pattern: django.template.Template.render(..., globals(...), ...)
  - patterns:
    - pattern-inside: |
        $CONTEXT = globals(...)
        ...
    - pattern-either:
      - pattern: django.shortcuts.render(..., $CONTEXT, ...)
      - pattern: django.template.Template.render(..., $CONTEXT, ...)
  severity: ERROR
- id: python.django.security.locals-as-template-context.locals-as-template-context
  languages:
  - python
  message: 'Using ''locals()'' as a context to ''render(...)'' is extremely dangerous.
    This exposes Python functions to the template that were not meant to be exposed.
    An attacker could use these functions to execute code that was not intended to
    run and could compromise the application. (This is server-side template injection
    (SSTI)). Do not use ''locals()''. Instead, specify each variable in a dictionary
    or ''django.template.Context'' object, like ''{"var1": "hello"}'' and use that
    instead.'
  metadata:
    category: security
    cwe:
    - 'CWE-96: Improper Neutralization of Directives in Statically Saved Code (''Static
      Code Injection'')'
    owasp:
    - A03:2021 - Injection
    references:
    - https://docs.djangoproject.com/en/3.2/ref/settings/#templates
    - https://docs.djangoproject.com/en/3.2/topics/templates/#django.template.backends.django.DjangoTemplates
    - https://docs.djangoproject.com/en/3.2/ref/templates/api/#rendering-a-context
    technology:
    - django
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.django.security.locals-as-template-context.locals-as-template-context
    shortlink: https://sg.run/L8XL
    semgrep.dev:
      rule:
        rule_id: 10Ued2
        version_id: A8Tn61
        url: https://semgrep.dev/playground/r/A8Tn61/python.django.security.locals-as-template-context.locals-as-template-context
        origin: community
  pattern-either:
  - pattern: django.shortcuts.render(..., locals(...), ...)
  - pattern: django.template.Template.render(..., locals(...), ...)
  - patterns:
    - pattern-inside: |
        $CONTEXT = locals(...)
        ...
    - pattern-either:
      - pattern: django.shortcuts.render(..., $CONTEXT, ...)
      - pattern: django.template.Template.render(..., $CONTEXT, ...)
  severity: ERROR
- id: python.lang.security.audit.non-literal-import.non-literal-import
  patterns:
  - pattern: |
      importlib.import_module($NAME, ...)
  - pattern-not: |
      importlib.import_module("...", ...)
  message: Untrusted user input in `importlib.import_module()` function allows an
    attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()`
    or use a whitelist to prevent running untrusted code.
  metadata:
    owasp:
    - A01:2021 - Broken Access Control
    cwe:
    - 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    category: security
    technology:
    - python
    references:
    - https://owasp.org/Top10/A01_2021-Broken_Access_Control
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import
    shortlink: https://sg.run/y6Jk
    semgrep.dev:
      rule:
        rule_id: AbUGN5
        version_id: A8TnY4
        url: https://semgrep.dev/playground/r/A8TnY4/python.lang.security.audit.non-literal-import.non-literal-import
        origin: community
  languages:
  - python
  severity: WARNING
- id: python.lang.security.deserialization.avoid-jsonpickle.avoid-jsonpickle
  patterns:
  - pattern: |
      jsonpickle.decode($PAYLOAD,...)
  - pattern-not: |
      jsonpickle.decode("...",...)
  metadata:
    owasp:
    - A08:2017 - Insecure Deserialization
    - A08:2021 - Software and Data Integrity Failures
    cwe:
    - 'CWE-502: Deserialization of Untrusted Data'
    references:
    - https://github.com/jsonpickle/jsonpickle#jsonpickle
    - https://www.exploit-db.com/exploits/49585
    category: security
    technology:
    - jsonpickle
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.lang.security.deserialization.avoid-jsonpickle.avoid-jsonpickle
    shortlink: https://sg.run/rkNP
    semgrep.dev:
      rule:
        rule_id: BYU7Kp
        version_id: NdTQnZ
        url: https://semgrep.dev/playground/r/NdTQnZ/python.lang.security.deserialization.avoid-jsonpickle.avoid-jsonpickle
        origin: community
  message: Avoid using `jsonpickle`, which is known to lead to code execution vulnerabilities.
    When unpickling, the serialized data could be manipulated to run arbitrary code.
    Instead, consider serializing the relevant data using `json` module.
  languages:
  - python
  severity: WARNING
- id: trailofbits.go.iterate-over-empty-map.iterate-over-empty-collection
  patterns:
  - pattern: |
      $C = make(map[$T1] $T2, ...)
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X] = $V
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X]++
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $C[$X]--
      ...
      for $K := range $C { ... }
  - pattern-not: |
      $C = make(map[$T1] $T2, ...)
      ...
      $CODEC.Unmarshal($C)
      ...
      for $K := range $C { ... }
  message: |
    Iteration over a possibly empty map `$C`. This is likely a bug or redundant code.
  languages:
  - go
  severity: ERROR
  metadata:
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.iterate-over-empty-map.iterate-over-empty-collection
    shortlink: https://sg.run/WOeg
    semgrep.dev:
      rule:
        rule_id: 7KUp1e
        version_id: GxTZ6g
        url: https://semgrep.dev/playground/r/GxTZ6g/trailofbits.go.iterate-over-empty-map.iterate-over-empty-collection
        origin: community
- id: trailofbits.go.nondeterministic-select.nondeterministic-select
  patterns:
  - pattern: |
      $TICKER := time.NewTicker(...)
      ...
      for {
        ...
        select {
          case <- $DONECHAN: return
          case <- $TICKER.C: ...
        }
      }
  - pattern-not: |
      $TICKER := time.NewTicker(...)
      ...
      for {
        select {
          case <-$DONECHAN: return
          default:
        }
        ...
        select {
          case <- $DONECHAN: return
          case <- $TICKER.C: ...
        }
      }
  message: |
    Logic executed as a result of ticker `$TICKER` may execute more times than desired.
    When both `$TICKER` and `$DONECHAN` are written to at the same time, the scheduler randomly picks a
    case to execute. As a result, the `$TICKER.C` may excute one more time than expected.
  severity: WARNING
  languages:
  - go
  metadata:
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.nondeterministic-select.nondeterministic-select
    shortlink: https://sg.run/K8dX
    semgrep.dev:
      rule:
        rule_id: 8GUxqz
        version_id: A8TG5P
        url: https://semgrep.dev/playground/r/A8TG5P/trailofbits.go.nondeterministic-select.nondeterministic-select
        origin: community
- id: trailofbits.go.sleep-used-for-synchronizations.sleep-used-for-synchronizations
  patterns:
  - pattern-either:
    - pattern: |
        ...
        go func(...) {
        ...
        }(...)
        time.Sleep(...)
        ...
    - pattern: |
        ...
        go $FOO(...)
        time.Sleep(...)
        ...
  - pattern-inside: func $FUNC(...){ ... }
  message: Using `time.Sleep` for synchronizations is generally considered bad practice.
  languages:
  - go
  severity: WARNING
  metadata:
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.sleep-used-for-synchronizations.sleep-used-for-synchronizations
    shortlink: https://sg.run/YXK4
    semgrep.dev:
      rule:
        rule_id: 3qUEpL
        version_id: K3TYje
        url: https://semgrep.dev/playground/r/K3TYje/trailofbits.go.sleep-used-for-synchronizations.sleep-used-for-synchronizations
        origin: community
- id: trailofbits.go.anonymous-race-condition.anonymous-race-condition
  message: Possible race condition due to memory aliasing of variable `$X`
  languages:
  - go
  severity: ERROR
  metadata:
    category: security
    cwe: 'CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization
      (''Race Condition'')'
    subcategory:
    - vuln
    confidence: MEDIUM
    likelihood: HIGH
    impact: MEDIUM
    technology:
    - --no-technology--
    description: Race conditions within anonymous goroutines
    references:
    - https://github.com/golang/go/wiki/CommonMistakes#using-goroutines-on-loop-iterator-variables
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.anonymous-race-condition.anonymous-race-condition
    shortlink: https://sg.run/BL22
    semgrep.dev:
      rule:
        rule_id: nJUr88
        version_id: BjTgnv
        url: https://semgrep.dev/playground/r/BjTgnv/trailofbits.go.anonymous-race-condition.anonymous-race-condition
        origin: community
  patterns:
  - pattern-either:
    - pattern: |
        for $Y, $X := range ... {
          ...
          go func(...){
            ...
            $FOO(..., $X, ...)
            ...
          }(...)
          ...
        }
    - pattern: |
        for $Y, $X := range ... {
          ...
          go func(...){
            ...
            $X(...)
            ...
          }(...)
          ...
        }
    - pattern: |
        for $X:=...;$Y;$Z {
          ...
          go func(...) {
            ...
            $FOO(..., $X,...)
            ...
          }(...)
          ...
        }
    - pattern: |
        for $Y, $X := range ... {
          ...
          go func(...){
            ...
            $X. ... .$M(...)
            ...
          }(...)
          ...
        }
  - pattern-not: |
      for $X, $Y := range ... {
        ...
        go func(..., $V, ...){
          ...
          $FOO(..., $V, ...)
          ...
        }(..., $Y, ...)
        ...
      }
  - pattern-not: |
      for $Y, $X := range ... {
        ...
        go func(..., $CP, ...){
          ...
          $CP(...)
          ...
        }($X)
        ...
      }
  - pattern-not: |
      for $X:=...;$Y;$Z {
        ...
        go func(..., $V, ...) {
          ...
          $FOO(..., $V,...)
          ...
        }(..., $X, ...)
        ...
      }
  - pattern-not: |
      for $X, $Y := range ... {
        ...
        $COPY := $Y
        ...
        go func(...){
          ...
          $FOO(..., $COPY, ...)
          ...
        }(...)
        ...
      }
  - pattern-not: |
      for $X:=...;$Y;$Z {
        ...
        $COPY := $X
        ...
        go func(...) {
          ...
          $FOO(..., $COPY,...)
          ...
        }(...)
        ...
      }
- id: trailofbits.go.servercodec-readrequestbody-unhandled-nil.servercodec-readrequestbody-unhandled-nil
  message: The `func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error` function does
    not handle `nil` argument, as the `ServerCodec` interface requires. An incorrect
    implementation could lead to denial of service
  languages:
  - go
  severity: WARNING
  metadata:
    category: security
    cwe: 'CWE-476: NULL Pointer Dereference'
    subcategory:
    - vuln
    confidence: HIGH
    likelihood: MEDIUM
    impact: LOW
    technology:
    - --no-technology--
    description: Possible incorrect `ServerCodec` interface implementation
    references:
    - https://github.com/golang/go/blob/go1.15.2/src/net/rpc/server.go#L643-L658
    license: CC-BY-NC-SA-4.0
    source: https://semgrep.dev/r/trailofbits.go.servercodec-readrequestbody-unhandled-nil.servercodec-readrequestbody-unhandled-nil
    shortlink: https://sg.run/lx09
    semgrep.dev:
      rule:
        rule_id: QrUp7k
        version_id: o5T3p3
        url: https://semgrep.dev/playground/r/o5T3p3/trailofbits.go.servercodec-readrequestbody-unhandled-nil.servercodec-readrequestbody-unhandled-nil
        origin: community
  patterns:
  - pattern: |
      func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error {
        ...
      }
  - pattern-not: |
      func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error {
        ...
        if $ARG == nil { ... }
        ...
      }
  - pattern-not: |
      func ($O *$CODEC) ReadRequestBody($ARG $TYPE) error {
        ...
        if $ARG != nil { ... }
        ...
      }
- id: javascript.aws-lambda.security.dynamodb-request-object.dynamodb-request-object
  message: Detected DynamoDB query params that are tainted by `$EVENT` object. This
    could lead to NoSQL injection if the variable is user-controlled and not properly
    sanitized. Explicitly assign query params instead of passing data from `$EVENT`
    directly to DynamoDB client.
  metadata:
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    category: security
    technology:
    - javascript
    - aws-lambda
    - dynamodb
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: HIGH
    confidence: MEDIUM
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/javascript.aws-lambda.security.dynamodb-request-object.dynamodb-request-object
    shortlink: https://sg.run/X1e4
    semgrep.dev:
      rule:
        rule_id: 0oU1xk
        version_id: K3T1WW
        url: https://semgrep.dev/playground/r/K3T1WW/javascript.aws-lambda.security.dynamodb-request-object.dynamodb-request-object
        origin: community
  languages:
  - javascript
  - typescript
  severity: ERROR
  mode: taint
  pattern-sources:
  - patterns:
    - pattern: $EVENT
    - pattern-either:
      - pattern-inside: |
          exports.handler = function ($EVENT, ...) {
            ...
          }
      - pattern-inside: |
          function $FUNC ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
      - pattern-inside: |
          $FUNC = function ($EVENT, ...) {...}
          ...
          exports.handler = $FUNC
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern: |
        $DC.$METHOD($SINK, ...)
    - metavariable-regex:
        metavariable: $METHOD
        regex: (query|send|scan|delete|put|transactWrite|update|batchExecuteStatement|executeStatement|executeTransaction|transactWriteItems)
    - pattern-either:
      - pattern-inside: |
          $DC = new $AWS.DocumentClient(...);
          ...
      - pattern-inside: |
          $DC = new $AWS.DynamoDB(...);
          ...
      - pattern-inside: |
          $DC = new DynamoDBClient(...);
          ...
      - pattern-inside: |
          $DC = DynamoDBDocumentClient.from(...);
          ...
  pattern-sanitizers:
  - patterns:
    - pattern: |
        {...}
- id: python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection
  mode: taint
  metadata:
    cwe:
    - 'CWE-943: Improper Neutralization of Special Elements in Data Query Logic'
    owasp:
    - A01:2017 - Injection
    category: security
    technology:
    - python
    - boto3
    - aws-lambda
    - dynamodb
    references:
    - https://medium.com/appsecengineer/dynamodb-injection-1db99c2454ac
    subcategory:
    - vuln
    impact: MEDIUM
    likelihood: MEDIUM
    confidence: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection
    shortlink: https://sg.run/jjrl
    semgrep.dev:
      rule:
        rule_id: KxUJ2B
        version_id: ZRToPp
        url: https://semgrep.dev/playground/r/ZRToPp/python.aws-lambda.security.dynamodb-filter-injection.dynamodb-filter-injection
        origin: community
  message: Detected DynamoDB query filter that is tainted by `$EVENT` object. This
    could lead to NoSQL injection if the variable is user-controlled and not properly
    sanitized. Explicitly assign query params instead of passing data from `$EVENT`
    directly to DynamoDB client.
  pattern-sources:
  - patterns:
    - pattern: event
    - pattern-inside: |
        def $HANDLER(event, context):
          ...
  pattern-sanitizers:
  - patterns:
    - pattern: |
        {...}
  pattern-sinks:
  - patterns:
    - focus-metavariable: $SINK
    - pattern-either:
      - pattern: $TABLE.scan(..., ScanFilter = $SINK, ...)
      - pattern: $TABLE.query(..., QueryFilter = $SINK, ...)
    - pattern-either:
      - patterns:
        - pattern-inside: |
            $TABLE = $DB.Table(...)
            ...
        - pattern-inside: |
            $DB = boto3.resource('dynamodb', ...)
            ...
      - pattern-inside: |
          $TABLE = boto3.client('dynamodb', ...)
          ...
  severity: ERROR
  languages:
  - python
- id: java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse
  metadata:
    cwe:
    - 'CWE-323: Reusing a Nonce, Key Pair in Encryption'
    category: security
    source-rule-url: https://www.youtube.com/watch?v=r1awgAl90wM
    technology:
    - java
    owasp:
    - A02:2021 - Cryptographic Failures
    references:
    - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
    subcategory:
    - vuln
    likelihood: MEDIUM
    impact: MEDIUM
    confidence: HIGH
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse
    shortlink: https://sg.run/Dww2
    semgrep.dev:
      rule:
        rule_id: GdUZZ3
        version_id: kbTZ1q
        url: https://semgrep.dev/playground/r/kbTZ1q/java.lang.security.audit.crypto.gcm-nonce-reuse.gcm-nonce-reuse
        origin: community
  languages:
  - java
  message: 'GCM IV/nonce is reused: encryption can be totally useless'
  patterns:
  - pattern-either:
    - pattern: new GCMParameterSpec(..., "...".getBytes(...), ...);
    - pattern: byte[] $NONCE = "...".getBytes(...); ... new GCMParameterSpec(...,
        $NONCE, ...);
  severity: ERROR
- id: java.lang.security.audit.java-reverse-shell.java-reverse-shell
  patterns:
  - pattern-either:
    - pattern: |
        Socket $S=new Socket(...);
        ...
        InputStream $SI = $S.getInputStream();
        ...
        while(!$S.isClosed())
        {
          ...
          while($SI.available()>0)$PO.write($SI.read());
          ...
          $SO.flush();
          ...
        }
  - pattern-inside: |
      Process $P=new ProcessBuilder(...).redirectErrorStream(true).start();
      ...
      $P.destroy();
  message: Semgrep found potential reverse shell behavior
  severity: WARNING
  metadata:
    cwe:
    - 'CWE-78: Improper Neutralization of Special Elements used in an OS Command (''OS
      Command Injection'')'
    category: security
    technology:
    - java
    owasp:
    - A01:2017 - Injection
    - A03:2021 - Injection
    references:
    - https://owasp.org/Top10/A03_2021-Injection
    cwe2022-top25: true
    cwe2021-top25: true
    subcategory:
    - audit
    likelihood: LOW
    impact: HIGH
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/java.lang.security.audit.java-reverse-shell.java-reverse-shell
    shortlink: https://sg.run/kkrX
    semgrep.dev:
      rule:
        rule_id: KxUY7b
        version_id: JdTZ9v
        url: https://semgrep.dev/playground/r/JdTZ9v/java.lang.security.audit.java-reverse-shell.java-reverse-shell
        origin: community
  languages:
  - java
- id: typescript.lang.security.audit.cors-regex-wildcard.cors-regex-wildcard
  message: 'Unescaped ''.'' character in CORS domain regex $CORS: $PATTERN'
  metadata:
    cwe:
    - 'CWE-183: Permissive List of Allowed Inputs'
    category: security
    technology:
    - cors
    owasp:
    - A04:2021 - Insecure Design
    references:
    - https://owasp.org/Top10/A04_2021-Insecure_Design
    subcategory:
    - audit
    likelihood: LOW
    impact: LOW
    confidence: LOW
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/typescript.lang.security.audit.cors-regex-wildcard.cors-regex-wildcard
    shortlink: https://sg.run/w13x
    semgrep.dev:
      rule:
        rule_id: qNUbXo
        version_id: o5TWko
        url: https://semgrep.dev/playground/r/o5TWko/typescript.lang.security.audit.cors-regex-wildcard.cors-regex-wildcard
        origin: community
  languages:
  - ts
  severity: WARNING
  patterns:
  - pattern-either:
    - pattern: const $CORS = [...,$PATTERN,...]
    - pattern: const $CORS = $PATTERN
  - metavariable-regex:
      metavariable: $PATTERN
      regex: .+?(?<!\\).\..+(?<!\\)\..+
  - metavariable-regex:
      metavariable: $CORS
      regex: (?i)cors
- id: csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos
  severity: WARNING
  languages:
  - C#
  metadata:
    cwe:
    - 'CWE-1333: Inefficient Regular Expression Complexity'
    owasp: A01:2017 - Injection
    references:
    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS
    - https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expressions#regular-expression-examples
    category: security
    technology:
    - .net
    confidence: MEDIUM
    subcategory:
    - audit
    likelihood: LOW
    impact: MEDIUM
    license: Commons Clause License Condition v1.0[LGPL-2.1-only]
    source: https://semgrep.dev/r/csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos
    shortlink: https://sg.run/RPyY
    semgrep.dev:
      rule:
        rule_id: 4bU2gd
        version_id: GxTKBO
        url: https://semgrep.dev/playground/r/GxTKBO/csharp.lang.security.regular-expression-dos.regular-expression-dos.regular-expression-dos
        origin: community
  message: An attacker can then cause a program using a regular expression to enter
    these extreme situations and then hang for a very long time.
  patterns:
  - pattern-inside: |
      using System.Text.RegularExpressions;
      ...
  - pattern-either:
    - pattern: |
        public $T $F($X)
        {
          Regex $Y = new Regex($P);
          ...
          $Y.Match($X)
        }
    - pattern: |
        public $T $F($X)
        {
          Regex $Y = new Regex($P, $O);
          ...
          $Y.Match($X)
        }
    - pattern: |
        public $T $F($X)
        {
          ... Regex.Match($X, $P);
        }
    - pattern: |
        public $T $F($X)
        {
          ... Regex.Match($X, $P, $O);
        }
